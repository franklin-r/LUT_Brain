
LUTBrain_NIOS.elf:     file format elf32-littlenios2
LUTBrain_NIOS.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x040201a4

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00015eb0 memsz 0x00015eb0 flags r-x
    LOAD off    0x00017000 vaddr 0x00000000 paddr 0x04035ed0 align 2**12
         filesz 0x000021dc memsz 0x0004d490 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000184  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015d2c  040201a4  040201a4  000011a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000688  00000000  04035ed0  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b54  00000688  04036558  00017688  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004b2b4  000021dc  040380ac  000191dc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0004d490  0004d490  000191dc  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  040380ac  040380ac  000191dc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000191dc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001708  00000000  00000000  00019200  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00034de9  00000000  00000000  0001a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f1e0  00000000  00000000  0004f6f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011bb8  00000000  00000000  0005e8d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003474  00000000  00000000  0007048c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00007ad5  00000000  00000000  00073900  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00020fc8  00000000  00000000  0007b3d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0009c3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000028e0  00000000  00000000  0009c3d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a4831  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000a4834  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a4840  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a4841  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a4842  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a4846  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a484a  2**0
                  CONTENTS, READONLY
 25 .profiling_enabled 00000001  00000000  00000000  000a484e  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   00000009  00000000  00000000  000a484f  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    00000009  00000000  00000000  000a4858  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   00000009  00000000  00000000  000a4861  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000012  00000000  00000000  000a486a  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003a  00000000  00000000  000a487c  2**0
                  CONTENTS, READONLY
 31 .jdi          000062d5  00000000  00000000  000a48b6  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     00088c37  00000000  00000000  000aab8b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
040201a4 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000688 l    d  .rwdata	00000000 .rwdata
000021dc l    d  .bss	00000000 .bss
0004d490 l    d  .sdram	00000000 .sdram
040380ac l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../LUTBrain_NIOS_bsp//obj/HAL/src/crt0.o
040201ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 Image.cpp
00000000 l    df *ABS*	00000000 NN.cpp
00000000 l    df *ABS*	00000000 NNLayer.cpp
00000000 l    df *ABS*	00000000 VGA.cpp
00000000 l    df *ABS*	00000000 main.cpp
00000000 l    df *ABS*	00000000 new_opv.cc
00000000 l    df *ABS*	00000000 new_op.cc
00000000 l    df *ABS*	00000000 del_opv.cc
00000000 l    df *ABS*	00000000 new_handler.cc
000021e4 l     O .bss	00000004 _ZN12_GLOBAL__N_113__new_handlerE
00000000 l    df *ABS*	00000000 eh_personality.cc
04022a40 l     F .text	000000b0 _ZL21size_of_encoded_valueh
04022af0 l     F .text	00000218 _ZL28read_encoded_value_with_basehjPKhPj
04022d08 l     F .text	00000060 _ZL15get_ttype_entryP16lsda_header_infom
04022d68 l     F .text	00000098 _ZL21base_of_encoded_valuehP15_Unwind_Context
04022e00 l     F .text	00000140 _ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info
04022f40 l     F .text	00000094 _ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3
04022fd4 l     F .text	000001cc _ZL28check_compact_exception_specPKSt9type_infoPvPKhij
040231a0 l     F .text	000000b4 _ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl
00000000 l    df *ABS*	00000000 bad_alloc.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 eh_throw.cc
04023b20 l     F .text	00000050 _ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception
00000000 l    df *ABS*	00000000 eh_catch.cc
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 eh_unex_handler.cc
00000000 l    df *ABS*	00000000 eh_alloc.cc
04024320 l     F .text	000000c4 _ZN12_GLOBAL__N_14pool4freeEPv.constprop.4
0004d240 l     O .bss	00000010 _ZN12_GLOBAL__N_114emergency_poolE
040243e4 l     F .text	000000b0 _ZN12_GLOBAL__N_14pool8allocateEj.constprop.5
040245cc l     F .text	00000068 _GLOBAL__sub_I___cxa_allocate_exception
00000000 l    df *ABS*	00000000 eh_call.cc
00000000 l    df *ABS*	00000000 eh_globals.cc
000021e8 l     O .bss	00000008 _ZL10eh_globals
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 eh_exception.cc
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 unwind-sjlj.c
04027064 l     F .text	00000124 _Unwind_ForcedUnwind_Phase2
000021f0 l     O .bss	00000004 fc_static
04027188 l     F .text	000000cc _Unwind_RaiseException_Phase2
04027254 l     F .text	0000003c uw_install_context.isra.1
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000004e6 l     O .rodata	00000010 zeroes.4404
0402aa70 l     F .text	000000c8 __sbprintf
000004f6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
0402ac98 l     F .text	0000020c quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0402c804 l     F .text	00000014 __fp_unlock
0402c830 l     F .text	000001a8 __sinit.part.1
0402c9d8 l     F .text	00000014 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000a90 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00000ed4 l     O .rwdata	00000020 lc_ctype_charset
00000eb4 l     O .rwdata	00000020 lc_message_charset
00000ef4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
00000528 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0402f76c l     F .text	00000108 __sprint_r.part.0
0000065c l     O .rodata	00000010 blanks.4348
0000064c l     O .rodata	00000010 zeroes.4349
04030d28 l     F .text	000000c8 __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
04034088 l     F .text	00000014 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_gmon.c
04034178 l     F .text	00000048 nios2_pcsample
00002218 l     O .bss	00000004 s_pcsamples
000021c8 l     O .rwdata	00000004 pcsample_need_init
00002210 l     O .bss	00000004 mcount_slab_size
00002214 l     O .bss	00000004 mcount_slab_ptr
0004d278 l     O .bss	00000018 s_nios2_pcsample_alarm
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_kill.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
000021cc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
000010f8 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04034bf4 l     F .text	00000058 altera_avalon_jtag_uart_timeout
04034c4c l     F .text	00000114 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040351c8 l     F .text	00000048 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0000223c g     O .bss	00000004 alt_instruction_exception_handler
04024500 g     F .text	00000034 __cxa_free_exception
04028140 g     F .text	00000024 putchar
04024a88 g     F .text	00000014 _ZNKSt9type_info15__is_function_pEv
0402ecec g     F .text	00000080 _mprec_log10
04024284 g     F .text	00000024 _ZSt10unexpectedv
0402edf0 g     F .text	00000094 __any_on
040314ac g     F .text	00000060 _isatty_r
00000534 g     O .rodata	00000028 __mprec_tinytens
0403465c g     F .text	0000006c alt_main
04028164 g     F .text	000000cc _puts_r
0004d390 g     O .bss	00000100 alt_irq
04024a38 g     F .text	00000010 _ZN10__cxxabiv115__forced_unwindD1Ev
040228d8 g     F .text	000000a0 _Znaj
0403150c g     F .text	0000006c _lseek_r
04027364 g     F .text	0000002c .hidden _Unwind_GetIPInfo
04036558 g       *ABS*	00000000 __flash_rwdata_start
04032be8 g     F .text	00000090 .hidden __eqdf2
04023c0c g     F .text	00000090 __cxa_rethrow
00002164  w    O .rwdata	00000008 _ZTI7NNLayer
040272b4 g     F .text	00000020 .hidden _Unwind_SjLj_Unregister
040242e4 g     F .text	00000020 _ZSt14set_unexpectedPFvvE
04027348 g     F .text	0000001c .hidden _Unwind_GetIP
0004d490 g       *ABS*	00000000 __alt_heap_start
04028648 g     F .text	00000068 _kill_r
04023ab4 g     F .text	0000001c _ZNSt9bad_allocD2Ev
040280e4 g     F .text	00000048 printf
040315e4 g     F .text	000000a8 _wcrtomb_r
040283bc g     F .text	00000090 _signal_r
0402f6f0 g     F .text	00000068 __sseek
0402cba8 g     F .text	0000001c __sinit
04030df0 g     F .text	0000014c __swbuf_r
04024594 g     F .text	00000038 __cxa_free_dependent_exception
040246c8 g     F .text	0000001c _ZN10__cxxabiv120__si_class_type_infoD2Ev
0402d700 g     F .text	00000088 _setlocale_r
000001ec  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
0402c9ec g     F .text	00000074 __sfmoreglue
040346d8 g     F .text	00000010 __malloc_unlock
040214a0 g     F .text	00000084 _ZN2NN9propagateEPf
04024a38 g     F .text	00000010 _ZN10__cxxabiv115__forced_unwindD2Ev
04023e30 g     F .text	0000002c _ZSt18uncaught_exceptionv
04025288 g     F .text	0000044c .hidden __divsf3
04024b3c g     F .text	0000002c __cxa_deleted_virtual
00002230 g     O .bss	00000004 altera_avalon_timer_ts_freq
00000048  w    O .rodata	00000010 _ZTV2NN
0402dc48 g     F .text	00000164 memmove
04021e68 g     F .text	00000054 _ZN7NNLayerD1Ev
040249c8 g     F .text	00000010 _ZNSt9exceptionD2Ev
0402cb84 g     F .text	00000024 _cleanup
0402ddac g     F .text	000000b4 _Balloc
040201f0 g     F .text	00000048 _ZN5ImageC2Ev
04026110 g     F .text	0000007c .hidden __fixsfsi
04020238 g     F .text	00000058 _ZN5ImageC2Eii
04032c78 g     F .text	000000e4 .hidden __gtdf2
000002f8  w    O .rodata	00000014 _ZTVSt13bad_exception
04035848 g     F .text	00000014 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
04022890  w    F .text	00000048 _ZN3VGA15send_to_displayEv
040273c4 g     F .text	00000014 .hidden _Unwind_GetRegionStart
04021948 g     F .text	00000078 _ZN7NNLayerC2Ev
04020020 g       *ABS*	00000000 __flash_exceptions_start
04031444 g     F .text	00000068 _fstat_r
00002200 g     O .bss	00000004 errno
04022388 g     F .text	00000078 _ZN3VGA3clrEv
04021f00 g     F .text	00000238 _ZN7NNLayer9propagateEPf
0402f654 g     F .text	00000014 __seofread
0402760c g     F .text	00000080 .hidden _Unwind_Backtrace
000021e0 g     O .bss	00000004 pVGA
00002220 g     O .bss	00000004 alt_argv
0000a158 g       *ABS*	00000000 _gp
04025c20 g     F .text	000004f0 .hidden __subsf3
04034164 g     F .text	00000014 getpid
04023860 g     F .text	0000023c __cxa_call_unexpected
04023c9c g     F .text	00000014 __cxa_get_exception_ptr
040211dc g     F .text	0000022c _ZN2NNC1Ei
00000f2c g     O .rwdata	00000180 alt_fd_list
0402812c g     F .text	00000014 _putchar_r
040274f0 g     F .text	00000050 .hidden _Unwind_SjLj_ForcedUnwind
040272fc g     F .text	00000024 .hidden _Unwind_GetCFA
040242a8 g     F .text	00000020 _ZSt13set_terminatePFvvE
0403585c g     F .text	00000084 alt_find_dev
0402daf4 g     F .text	00000154 memcpy
0402167c g     F .text	00000150 _ZN2NN17getMaxOutputValueEv
04024534 g     F .text	00000060 __cxa_allocate_dependent_exception
0402c818 g     F .text	00000018 _cleanup_r
04023ee0 g     F .text	00000024 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
04026cac g     F .text	000000e8 .hidden __floatsidf
040355b4 g     F .text	00000110 alt_io_redirect
04032d5c g     F .text	000000f8 .hidden __ltdf2
04035ed0 g       *ABS*	00000000 __DTOR_END__
04023f04 g     F .text	0000001c _ZN10__cxxabiv117__class_type_infoD1Ev
04028230 g     F .text	00000020 puts
04035a50 g     F .text	00000080 alt_exception_cause_generated_bad_addr
040208d8 g     F .text	00000058 _ZN5Image12source_pixelEii
040210f0 g     F .text	00000060 _ZN5ImageD1Ev
0402f574 g     F .text	00000080 __fpclassifyd
0402ec3c g     F .text	000000b0 __ratio
04020f4c g     F .text	000000e8 _ZN5Image13printToScreenEiiP3VGA
04030d00 g     F .text	00000028 __vfiprintf_internal
0402145c g     F .text	00000044 _ZN2NND0Ev
04034ebc g     F .text	00000160 altera_avalon_jtag_uart_read
04027720 g     F .text	00000020 malloc
040280a8 g     F .text	0000003c _printf_r
04024ce4 g     F .text	00000070 .hidden __udivsi3
04034368 g     F .text	00000090 isatty
0402844c g     F .text	000000c8 _raise_r
00000584 g     O .rodata	000000c8 __mprec_tens
0402d788 g     F .text	00000018 __locale_charset
040359f4 g     F .text	0000005c alt_icache_flush
000021fc g     O .bss	00000004 __malloc_top_pad
040286b0 g     F .text	00000010 _getpid_r
000021a8 g     O .rwdata	00000004 __mb_cur_max
0402d7e8 g     F .text	00000018 _localeconv_r
0402e200 g     F .text	00000048 __i2b
0402d098 g     F .text	000004c8 __sfvwrite_r
040240b4 g     F .text	000000c4 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
04028514 g     F .text	000000b4 __sigtramp_r
040282e4 g     F .text	00000060 _sbrk_r
00000344  w    O .rodata	00000020 _ZTVSt9type_info
04031578 g     F .text	0000006c _read_r
040249e8 g     F .text	00000018 _ZNKSt9exception4whatEv
000021b0 g     O .rwdata	00000004 alt_max_fd
040310fc g     F .text	000000fc _fclose_r
00000170  w    O .rodata	0000000c _ZTISt9bad_alloc
04021b58 g     F .text	0000005c _Z10simpleRandv
0402c7c8 g     F .text	0000003c fflush
000021f8 g     O .bss	00000004 __malloc_max_sbrked_mem
04026d94 g     F .text	0000011c .hidden __extendsfdf2
04032330 g     F .text	000008b8 .hidden __adddf3
040256d4 g     F .text	00000080 .hidden __nesf2
00000220  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0402e9cc g     F .text	00000118 __b2d
04031dec g     F .text	00000544 .hidden __umoddi3
040345d4 g     F .text	00000088 lseek
04023f60 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
04023b10 g     F .text	00000010 _ZdlPv
000021a0 g     O .rwdata	00000004 _global_impure_ptr
04020290 g     F .text	000000b0 _ZN5Image4initEii
0402f004 g     F .text	00000570 _realloc_r
0004d490 g       *ABS*	00000000 __bss_end
04022a24 g     F .text	0000001c _ZSt15get_new_handlerv
04035540 g     F .text	00000074 alt_iic_isr_register
00002240 g     O .bss	0004b000 display
04034914 g     F .text	00000100 alt_tick
04027290 g     F .text	00000024 .hidden _Unwind_SjLj_Register
04031868 g     F .text	00000584 .hidden __udivdi3
04031388 g     F .text	00000030 _fputwc_r
0000055c g     O .rodata	00000028 __mprec_bigtens
0402dfc0 g     F .text	00000110 __s2b
040276fc g     F .text	00000024 abort
00002158  w    O .rwdata	00000008 _ZTI2NN
04033f0c g     F .text	000000b4 .hidden __floatunsidf
0402e6ec g     F .text	0000006c __mcmp
04023d70 g     F .text	000000c0 __cxa_end_catch
0402cc04 g     F .text	00000024 __fp_lock_all
0403551c g     F .text	00000024 alt_ic_irq_enabled
040249d8 g     F .text	00000010 _ZNSt13bad_exceptionD2Ev
040348d4 g     F .text	00000040 alt_alarm_stop
00002238 g     O .bss	00000004 alt_irq_active
04024244 g     F .text	00000024 _ZSt9terminatev
040200fc g     F .exceptions	00000070 alt_irq_handler
000010ac g     O .rwdata	00000028 alt_dev_null
04021408 g     F .text	00000054 _ZN2NND2Ev
04024a58 g     F .text	00000010 _ZN10__cxxabiv119__foreign_exceptionD2Ev
00000190  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
040352f0 g     F .text	00000024 alt_dcache_flush_all
0402e0d0 g     F .text	00000074 __hi0bits
00002174  w    O .rwdata	00000008 _ZTISt9exception
04033e80 g     F .text	0000008c .hidden __fixdfsi
040201a4 g       *ABS*	00000000 stext
04020a08 g     F .text	00000544 _ZN5Image8apply_NNEP2NNi
040341c0 g     F .text	000001a8 __mcount_record
000021dc g       *ABS*	00000000 __ram_rwdata_end
04024a78 g     F .text	00000010 _ZNSt9type_infoD1Ev
000021b4 g     O .rwdata	00000008 alt_dev_list
04024a58 g     F .text	00000010 _ZN10__cxxabiv119__foreign_exceptionD1Ev
04034a14 g     F .text	000000d0 write
0402ee84 g     F .text	000000ac _putc_r
04024ab0 g     F .text	00000010 _ZNSt9type_infoD0Ev
04025754 g     F .text	000000c4 .hidden __gtsf2
00000688 g       *ABS*	00000000 __ram_rodata_end
040340e0 g     F .text	00000084 fstat
040343f8 g     F .text	00000104 kill
04032d5c g     F .text	000000f8 .hidden __ledf2
04021150  w    F .text	0000008c _ZN3VGA15Set_Pixel_ColorEjjj
0402e44c g     F .text	0000014c __pow5mult
0402f898 g     F .text	00001468 ___vfiprintf_internal_r
0000220c g     O .bss	00000004 __nlocale_changed
04024d54 g     F .text	00000060 .hidden __umodsi3
04024a9c g     F .text	00000014 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
040242c8 g     F .text	0000001c _ZSt13get_terminatev
0004d490 g       *ABS*	00000000 end
040275e8 g     F .text	00000024 .hidden _Unwind_DeleteException
000021dc g     O .bss	00000004 my_debug
04021034 g     F .text	000000bc _ZN5Image5printEv
04034d60 g     F .text	00000084 altera_avalon_jtag_uart_init
0402016c g     F .exceptions	00000038 alt_instruction_exception_entry
04023fd8 g     F .text	000000dc _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
04035ec9 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
04035210 g     F .text	00000054 alt_avalon_timer_sc_init
0402768c g     F .text	00000070 .hidden __clzsi2
04023e5c g     F .text	00000084 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
0403501c g     F .text	000001ac altera_avalon_jtag_uart_write
0402cbc4 g     F .text	00000010 __sfp_lock_acquire
00000280  w    O .rodata	00000012 _ZTSSt13bad_exception
04021854 g     F .text	000000f4 _ZN2NN12printOutputsEv
04035e6c g       *ABS*	00000000 etext
0402da04 g     F .text	000000f0 memchr
04028844 g     F .text	00002204 ___vfprintf_internal_r
0402cd7c g     F .text	0000031c _free_r
040219c0 g     F .text	00000068 _ZN7NNLayerC2Eiii
0402d7a0 g     F .text	0000001c __locale_mb_cur_max
04035ce0 g     F .text	0000018c __call_exitprocs
00002208 g     O .bss	00000004 __mlocale_changed
00002198 g     O .rwdata	00000004 __malloc_sbrk_base
040201a4 g     F .text	0000004c _start
0000222c g     O .bss	00000004 _alt_tick_rate
04021e10 g     F .text	00000058 _ZN7NNLayer9demo_initEiiii
00000334  w    O .rodata	0000000d _ZTSSt9type_info
04023a9c g     F .text	00000018 _ZNKSt9bad_alloc4whatEv
04028274 g     F .text	00000070 rand
04024b10 g     F .text	0000002c __cxa_pure_virtual
0402e598 g     F .text	00000154 __lshift
0000017c  w    O .rodata	00000014 _ZTVSt9bad_alloc
00002228 g     O .bss	00000004 _alt_nticks
040285e8 g     F .text	00000024 signal
04034784 g     F .text	000000d4 read
04034b10 g     F .text	00000078 alt_sys_init
0402618c g     F .text	00000130 .hidden __floatsisf
040210f0 g     F .text	00000060 _ZN5ImageD2Ev
04035bbc g     F .text	00000124 __register_exitproc
00000160  w    O .rodata	0000000d _ZTSSt9bad_alloc
04024724 g     F .text	0000016c _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
000010d4 g     O .rwdata	00000024 alt_gmon_data
0402e248 g     F .text	00000204 __multiply
040346e8 g       .text	00000000 mcount
04034de4 g     F .text	00000058 altera_avalon_jtag_uart_close
00000688 g       *ABS*	00000000 __ram_rwdata_start
04027414 g     F .text	000000dc .hidden _Unwind_SjLj_RaiseException
00000000 g       *ABS*	00000000 __ram_rodata_start
0004d250 g     O .bss	00000028 __malloc_current_mallinfo
04027540 g     F .text	00000050 .hidden _Unwind_SjLj_Resume
040256d4 g     F .text	00000080 .hidden __eqsf2
0402eae4 g     F .text	00000158 __d2b
00000320  w    O .rodata	00000014 _ZTVN10__cxxabiv119__foreign_exceptionE
04024a78 g     F .text	00000010 _ZNSt9type_infoD2Ev
04024a68 g     F .text	00000010 _ZN10__cxxabiv119__foreign_exceptionD0Ev
04024938 g     F .text	00000090 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
04034b88 g     F .text	0000001c altera_avalon_jtag_uart_read_fd
04035998 g     F .text	0000005c alt_get_fd
04021c64 g     F .text	00000058 _ZN7NNLayer6MYrandEi
04022840  w    F .text	00000050 _ZN3VGAC2Eii
00002184  w    O .rwdata	00000008 _ZTIN10__cxxabiv119__foreign_exceptionE
04030fcc g     F .text	00000060 _close_r
04021ebc g     F .text	00000044 _ZN7NNLayerD0Ev
00002160  w    O .rwdata	00000004 _ZTS2NN
04035b34 g     F .text	00000088 memcmp
04034bc0 g     F .text	0000001c altera_avalon_jtag_uart_close_fd
0004d490 g       *ABS*	00000000 __alt_stack_base
04034bdc g     F .text	00000018 altera_avalon_jtag_uart_ioctl_fd
04023ad0 g     F .text	00000040 _ZNSt9bad_allocD0Ev
040246c8 g     F .text	0000001c _ZN10__cxxabiv120__si_class_type_infoD1Ev
0402ab38 g     F .text	00000160 __swsetup_r
04027590 g     F .text	00000058 .hidden _Unwind_SjLj_Resume_or_Rethrow
040263b8 g     F .text	000008f4 .hidden __divdf3
0402ca60 g     F .text	00000124 __sfp
0402ed6c g     F .text	00000084 __copybits
04024a88 g     F .text	00000014 _ZNKSt9type_info14__is_pointer_pEv
00000688 g     O .rwdata	00000408 __malloc_av_
0402cbf4 g     F .text	00000010 __sinit_lock_release
04032e54 g     F .text	00000724 .hidden __muldf3
0402f5f4 g     F .text	00000060 __sread
000002e4  w    O .rodata	00000014 _ZTVSt9exception
04024a48 g     F .text	00000010 _ZN10__cxxabiv115__forced_unwindD0Ev
040358e0 g     F .text	000000b8 alt_find_file
04035314 g     F .text	00000078 alt_dev_llist_insert
040346c8 g     F .text	00000010 __malloc_lock
04034888 g     F .text	0000004c sbrk
000001c0  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
04023b70 g     F .text	0000009c __cxa_throw
0402c760 g     F .text	00000068 _fflush_r
04027390 g     F .text	0000001c .hidden _Unwind_SetIP
0403102c g     F .text	000000d0 _calloc_r
000021dc g       *ABS*	00000000 __bss_start
04027f78 g     F .text	00000130 memset
04022400 g     F .text	00000440 main
0000221c g     O .bss	00000004 alt_envp
000021f4 g     O .bss	00000004 __malloc_max_total_mem
04034ba4 g     F .text	0000001c altera_avalon_jtag_uart_write_fd
04030f3c g     F .text	00000024 __swbuf
04028250 g     F .text	00000024 srand
04024698 g     F .text	00000018 __cxa_get_globals_fast
04020524 g     F .text	00000058 _ZN5Image17Get_Fractal_ColorEi
04021408 g     F .text	00000054 _ZN2NND1Ev
0402f758 g     F .text	00000014 __sclose
040229f4 g     F .text	00000010 _ZdaPv
04000000 g       *ABS*	00000000 __alt_heap_limit
000000c4  w    O .rodata	00000010 _ZTV7NNLayer
040311f8 g     F .text	00000020 fclose
04026eb0 g     F .text	000001b4 .hidden __truncdfsf2
0402aea4 g     F .text	00001694 _dtoa_r
04027760 g     F .text	00000818 _malloc_r
04031758 g     F .text	0000003c __ascii_wctomb
04024a00 g     F .text	00000018 _ZNKSt13bad_exception4whatEv
000021c4 g     O .rwdata	00000004 alt_errno
0402860c g     F .text	0000001c _init_signal
000001b4  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
0402d560 g     F .text	000000d0 _fwalk
040249d8 g     F .text	00000010 _ZNSt13bad_exceptionD1Ev
0402057c g     F .text	0000035c _ZN5Image12make_fractalEv
0402ef30 g     F .text	000000d4 putc
04024bd4 g     F .text	00000090 .hidden __divsi3
0402cc4c g     F .text	00000130 _malloc_trim_r
04035ed0 g       *ABS*	00000000 __CTOR_END__
04025818 g     F .text	00000408 .hidden __mulsf3
040286c0 g     F .text	000000e0 strcmp
04035ed0 g       *ABS*	00000000 __flash_rodata_start
0000030c  w    O .rodata	00000014 _ZTVN10__cxxabiv115__forced_unwindE
04035ed0 g       *ABS*	00000000 __DTOR_LIST__
04021e68 g     F .text	00000054 _ZN7NNLayerD2Ev
04032be8 g     F .text	00000090 .hidden __nedf2
04034ae4 g     F .text	0000002c alt_irq_init
04034858 g     F .text	00000030 alt_release_fd
04021bb4 g     F .text	000000b0 _ZN7NNLayer15rand_FloatRangeEff
040246e4 g     F .text	00000040 _ZN10__cxxabiv120__si_class_type_infoD0Ev
04022840  w    F .text	00000050 _ZN3VGAC1Eii
0000039f g     O .rodata	00000100 .hidden __clz_tab
04021a28 g     F .text	00000130 _ZN7NNLayer4initEiii
00002204 g     O .bss	00000004 _PathLocale
04035ad0 g     F .text	00000020 atexit
04025754 g     F .text	000000c4 .hidden __gesf2
04030f60 g     F .text	0000006c _write_r
040203e4 g     F .text	00000140 _ZN5Image17Get_Fractal_LevelEff
0402d800 g     F .text	00000024 setlocale
04027400 g     F .text	00000014 .hidden _Unwind_GetTextRelBase
04024634 g     F .text	00000064 __cxa_call_terminate
000021a4 g     O .rwdata	00000004 _impure_ptr
0000217c  w    O .rwdata	00000008 _ZTIN10__cxxabiv115__forced_unwindE
00002224 g     O .bss	00000004 alt_argc
0402c538 g     F .text	00000228 __sflush_r
00002234 g     O .bss	00000004 altera_avalon_timer_ts_base
040353fc g     F .text	00000070 _do_dtors
0402d7d4 g     F .text	00000014 __locale_cjk_lang
04022138 g     F .text	000000a0 _ZN7NNLayer16print_activationEv
04020340 g     F .text	000000a4 _ZN5Image9randomizeEv
040201f0 g     F .text	00000048 _ZN5ImageC1Ev
04024304 g     F .text	0000001c _ZSt14get_unexpectedv
04020020 g       .exceptions	00000000 alt_irq_entry
0402e960 g     F .text	0000006c __ulp
040273d8 g     F .text	00000014 .hidden _Unwind_FindEnclosingFunction
0402cc28 g     F .text	00000024 __fp_unlock_all
000021bc g     O .rwdata	00000008 alt_fs_list
000002c0  w    O .rodata	00000024 _ZTSN10__cxxabiv119__foreign_exceptionE
040273ac g     F .text	00000018 .hidden _Unwind_GetLanguageSpecificData
04023cb0 g     F .text	000000c0 __cxa_begin_catch
04023f04 g     F .text	0000001c _ZN10__cxxabiv117__class_type_infoD2Ev
04024268 g     F .text	0000001c _ZN10__cxxabiv112__unexpectedEPFvvE
04020020 g       *ABS*	00000000 __ram_exceptions_start
0402d824 g     F .text	00000018 localeconv
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
04024a28 g     F .text	00000010 _ZNSt13bad_exceptionD0Ev
000000d4  w    O .rodata	00000009 _ZTS7NNLayer
0000218c g     O .rwdata	00000004 _ZN10__cxxabiv119__terminate_handlerE
04035484 g     F .text	00000010 alt_ic_isr_register
04024494 g     F .text	0000006c __cxa_allocate_exception
04020930 g     F .text	000000d8 _ZN5Image7make_bwEv
00000214  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
04022a04 g     F .text	00000020 _ZSt15set_new_handlerPFvvE
000021dc g       *ABS*	00000000 _edata
04021948 g     F .text	00000078 _ZN7NNLayerC1Ev
0004d490 g       *ABS*	00000000 _end
0000216c g     O .rwdata	00000001 _ZSt7nothrow
04023254 g     F .text	0000060c __gxx_personality_sj0
04031218 g     F .text	00000170 __fputwc
040201a4 g       *ABS*	00000000 __ram_exceptions_end
04034e3c g     F .text	00000080 altera_avalon_jtag_uart_ioctl
040249c8 g     F .text	00000010 _ZNSt9exceptionD1Ev
040354d8 g     F .text	00000044 alt_ic_irq_disable
04021cbc g     F .text	00000154 _ZN7NNLayer11random_initEiii
0402f668 g     F .text	00000088 __swrite
04022978 g     F .text	0000007c _Znwj
0000219c g     O .rwdata	00000004 __malloc_trim_threshold
040219c0 g     F .text	00000068 _ZN7NNLayerC1Eiii
0402d7bc g     F .text	00000018 __locale_msgcharset
04035af0 g     F .text	00000044 exit
04027320 g     F .text	00000028 .hidden _Unwind_SetGR
0402d630 g     F .text	000000d0 _fwalk_reent
04024890 g     F .text	000000a8 _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
040262bc g     F .text	000000fc .hidden __floatunsisf
0402e758 g     F .text	00000208 __mdiff
04024178 g     F .text	000000cc _ZN10__cxxabiv111__terminateEPFvvE
04024c64 g     F .text	00000080 .hidden __modsi3
04023ab4 g     F .text	0000001c _ZNSt9bad_allocD1Ev
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
0402cbd4 g     F .text	00000010 __sfp_lock_release
00000294  w    O .rodata	0000000c _ZTISt13bad_exception
00000000 g       *ABS*	00000000 __alt_mem_sdram
040221d8 g     F .text	000001b0 _ZN7NNLayer5printEv
04024b68 g     F .text	0000006c .hidden __fixunssfsi
0403409c g     F .text	00000044 _exit
04035264 g     F .text	0000008c alt_alarm_start
040317fc g     F .text	0000006c .hidden __muldi3
0004d290 g     O .bss	00000100 __mcount_fn_head
040272d4 g     F .text	00000028 .hidden _Unwind_GetGR
040246b0 g     F .text	00000018 __cxa_get_globals
0402d83c g     F .text	000001c8 __smakebuf_r
00002170 g     O .rwdata	00000004 _ZN10__cxxabiv120__unexpected_handlerE
040217cc g     F .text	00000088 _ZN2NN5printEv
040287a0 g     F .text	000000a4 strlen
04028344 g     F .text	00000078 _init_signal_r
00002190  w    O .rwdata	00000008 _ZTISt9type_info
040356c4 g     F .text	00000184 open
04032c78 g     F .text	000000e4 .hidden __gedf2
00000270  w    O .rodata	0000000d _ZTSSt9exception
000021ac g     O .rwdata	00000004 __wctomb
04024a18 g     F .text	00000010 _ZNSt9exceptionD0Ev
040211dc g     F .text	0000022c _ZN2NNC2Ei
0402f874 g     F .text	00000024 __sprint_r
0403546c g     F .text	00000018 alt_icache_flush_all
040273ec g     F .text	00000014 .hidden _Unwind_GetDataRelBase
000021d8 g     O .rwdata	00000004 alt_priority_mask
04035494 g     F .text	00000044 alt_ic_irq_enable
0402aa48 g     F .text	00000028 __vfprintf_internal
04020238 g     F .text	00000058 _ZN5ImageC1Eii
04031794 g     F .text	00000068 _wctomb_r
04033578 g     F .text	00000908 .hidden __subdf3
0402e144 g     F .text	000000bc __lo0bits
040346e8 g       .text	00000000 _mcount
000021d0 g     O .rwdata	00000008 alt_alarm_list
0403538c g     F .text	00000070 _do_ctors
04028628 g     F .text	00000020 __sigtramp
0403168c g     F .text	000000cc wcrtomb
04033fc0 g     F .text	000000c8 close
04024db4 g     F .text	000004d4 .hidden __addsf3
000002a0  w    O .rodata	00000020 _ZTSN10__cxxabiv115__forced_unwindE
040344fc g     F .text	000000d8 alt_load
04024ac0 g     F .text	00000050 _ZNKSt9type_info10__do_catchEPKS_PPvj
04021524 g     F .text	00000158 _ZN2NN17getMaxOutputIndexEv
040313b8 g     F .text	0000008c fputwc
040285c8 g     F .text	00000020 raise
04027740 g     F .text	00000020 free
0402cbe4 g     F .text	00000010 __sinit_lock_acquire
0402de94 g     F .text	0000012c __multadd
04023f20 g     F .text	00000040 _ZN10__cxxabiv117__class_type_infoD0Ev
0402de60 g     F .text	00000034 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__flash_rwdata_start+0xfffe9aac>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08406914 	ori	at,at,420
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	402016c0 	call	402016c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	f811883a 	mov	r8,ra
 4020100:	40346e80 	call	40346e8 <_mcount>
 4020104:	403f883a 	mov	ra,r8
 4020108:	defffe04 	addi	sp,sp,-8
 402010c:	dfc00115 	stw	ra,4(sp)
 4020110:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020114:	000b313a 	rdctl	r5,ipending
 4020118:	04000174 	movhi	r16,5
 402011c:	8434e404 	addi	r16,r16,-11376
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4020120:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
 4020124:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4020128:	1000051e 	bne	r2,zero,4020140 <alt_irq_handler+0x44>
 402012c:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 4020130:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 4020134:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
 4020138:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402013c:	203ffc26 	beq	r4,zero,4020130 <__flash_rwdata_start+0xfffe9bd8>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 4020140:	180690fa 	slli	r3,r3,3
 4020144:	80c7883a 	add	r3,r16,r3
 4020148:	18800017 	ldw	r2,0(r3)
 402014c:	19000117 	ldw	r4,4(r3)
 4020150:	103ee83a 	callr	r2
 4020154:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
 4020158:	283ff11e 	bne	r5,zero,4020120 <__flash_rwdata_start+0xfffe9bc8>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 402015c:	dfc00117 	ldw	ra,4(sp)
 4020160:	dc000017 	ldw	r16,0(sp)
 4020164:	dec00204 	addi	sp,sp,8
 4020168:	f800283a 	ret

0402016c <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 402016c:	f811883a 	mov	r8,ra
 4020170:	40346e80 	call	40346e8 <_mcount>
 4020174:	403f883a 	mov	ra,r8
 4020178:	200b883a 	mov	r5,r4
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 402017c:	000931fa 	rdctl	r4,exception
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 4020180:	000d333a 	rdctl	r6,badaddr
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020184:	d0a03917 	ldw	r2,-32540(gp)
 4020188:	10000326 	beq	r2,zero,4020198 <alt_instruction_exception_entry+0x2c>
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 402018c:	21001f0c 	andi	r4,r4,124
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 4020190:	2008d0ba 	srli	r4,r4,2
 4020194:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020198:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
 402019c:	0005883a 	mov	r2,zero
 40201a0:	f800283a 	ret

Disassembly of section .text:

040201a4 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 40201a4:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 40201a8:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 40201ac:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 40201b0:	00bffd16 	blt	zero,r2,40201a8 <__flash_rwdata_start+0xfffe9c50>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 40201b4:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 40201b8:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 40201bc:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 40201c0:	d6a85614 	ori	gp,gp,41304
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 40201c4:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 40201c8:	10887714 	ori	r2,r2,8668

    movhi r3, %hi(__bss_end)
 40201cc:	00c00134 	movhi	r3,4
    ori r3, r3, %lo(__bss_end)
 40201d0:	18f52414 	ori	r3,r3,54416

    beq r2, r3, 1f
 40201d4:	10c00326 	beq	r2,r3,40201e4 <_start+0x40>

0:
    stw zero, (r2)
 40201d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 40201dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 40201e0:	10fffd36 	bltu	r2,r3,40201d8 <__flash_rwdata_start+0xfffe9c80>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 40201e4:	40344fc0 	call	40344fc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 40201e8:	403465c0 	call	403465c <alt_main>

040201ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 40201ec:	003fff06 	br	40201ec <__flash_rwdata_start+0xfffe9c94>

040201f0 <_ZN5ImageC1Ev>:

#include "stdio.h"
#include "io.h"
#include "system.h"

Image::Image() {
 40201f0:	f811883a 	mov	r8,ra
 40201f4:	40346e80 	call	40346e8 <_mcount>
 40201f8:	403f883a 	mov	ra,r8
 40201fc:	defffe04 	addi	sp,sp,-8
 4020200:	df000115 	stw	fp,4(sp)
 4020204:	df000104 	addi	fp,sp,4
 4020208:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	source_array = 0;
 402020c:	e0bfff17 	ldw	r2,-4(fp)
 4020210:	10000215 	stw	zero,8(r2)
	length = 0;
 4020214:	e0bfff17 	ldw	r2,-4(fp)
 4020218:	10000115 	stw	zero,4(r2)
	height = 0;
 402021c:	e0bfff17 	ldw	r2,-4(fp)
 4020220:	10000015 	stw	zero,0(r2)
}
 4020224:	0001883a 	nop
 4020228:	e037883a 	mov	sp,fp
 402022c:	df000017 	ldw	fp,0(sp)
 4020230:	dec00104 	addi	sp,sp,4
 4020234:	f800283a 	ret

04020238 <_ZN5ImageC1Eii>:

Image::Image(int new_length, int new_height) {
 4020238:	f811883a 	mov	r8,ra
 402023c:	40346e80 	call	40346e8 <_mcount>
 4020240:	403f883a 	mov	ra,r8
 4020244:	defffb04 	addi	sp,sp,-20
 4020248:	dfc00415 	stw	ra,16(sp)
 402024c:	df000315 	stw	fp,12(sp)
 4020250:	df000304 	addi	fp,sp,12
 4020254:	e13ffd15 	stw	r4,-12(fp)
 4020258:	e17ffe15 	stw	r5,-8(fp)
 402025c:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	source_array = 0;
 4020260:	e0bffd17 	ldw	r2,-12(fp)
 4020264:	10000215 	stw	zero,8(r2)
	init(new_length, new_height);
 4020268:	e1bfff17 	ldw	r6,-4(fp)
 402026c:	e17ffe17 	ldw	r5,-8(fp)
 4020270:	e13ffd17 	ldw	r4,-12(fp)
 4020274:	40202900 	call	4020290 <_ZN5Image4initEii>
}
 4020278:	0001883a 	nop
 402027c:	e037883a 	mov	sp,fp
 4020280:	dfc00117 	ldw	ra,4(sp)
 4020284:	df000017 	ldw	fp,0(sp)
 4020288:	dec00204 	addi	sp,sp,8
 402028c:	f800283a 	ret

04020290 <_ZN5Image4initEii>:

void Image::init(int new_length, int new_height) {
 4020290:	f811883a 	mov	r8,ra
 4020294:	40346e80 	call	40346e8 <_mcount>
 4020298:	403f883a 	mov	ra,r8
 402029c:	defffb04 	addi	sp,sp,-20
 40202a0:	dfc00415 	stw	ra,16(sp)
 40202a4:	df000315 	stw	fp,12(sp)
 40202a8:	df000304 	addi	fp,sp,12
 40202ac:	e13ffd15 	stw	r4,-12(fp)
 40202b0:	e17ffe15 	stw	r5,-8(fp)
 40202b4:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	length = new_length;
 40202b8:	e0bffd17 	ldw	r2,-12(fp)
 40202bc:	e0fffe17 	ldw	r3,-8(fp)
 40202c0:	10c00115 	stw	r3,4(r2)
	height = new_height;
 40202c4:	e0bffd17 	ldw	r2,-12(fp)
 40202c8:	e0ffff17 	ldw	r3,-4(fp)
 40202cc:	10c00015 	stw	r3,0(r2)
	if (source_array != 0) delete[] source_array;
 40202d0:	e0bffd17 	ldw	r2,-12(fp)
 40202d4:	10800217 	ldw	r2,8(r2)
 40202d8:	10000726 	beq	r2,zero,40202f8 <_ZN5Image4initEii+0x68>
 40202dc:	e0bffd17 	ldw	r2,-12(fp)
 40202e0:	10800217 	ldw	r2,8(r2)
 40202e4:	10000426 	beq	r2,zero,40202f8 <_ZN5Image4initEii+0x68>
 40202e8:	e0bffd17 	ldw	r2,-12(fp)
 40202ec:	10800217 	ldw	r2,8(r2)
 40202f0:	1009883a 	mov	r4,r2
 40202f4:	40229f40 	call	40229f4 <_ZdaPv>
	source_array = new unsigned char [height*length];
 40202f8:	e0bffd17 	ldw	r2,-12(fp)
 40202fc:	10c00017 	ldw	r3,0(r2)
 4020300:	e0bffd17 	ldw	r2,-12(fp)
 4020304:	10800117 	ldw	r2,4(r2)
 4020308:	1885383a 	mul	r2,r3,r2
 402030c:	1009883a 	mov	r4,r2
 4020310:	40228d80 	call	40228d8 <_Znaj>
 4020314:	1007883a 	mov	r3,r2
 4020318:	e0bffd17 	ldw	r2,-12(fp)
 402031c:	10c00215 	stw	r3,8(r2)
	randomize();
 4020320:	e13ffd17 	ldw	r4,-12(fp)
 4020324:	40203400 	call	4020340 <_ZN5Image9randomizeEv>
}
 4020328:	0001883a 	nop
 402032c:	e037883a 	mov	sp,fp
 4020330:	dfc00117 	ldw	ra,4(sp)
 4020334:	df000017 	ldw	fp,0(sp)
 4020338:	dec00204 	addi	sp,sp,8
 402033c:	f800283a 	ret

04020340 <_ZN5Image9randomizeEv>:

void Image::randomize() {
 4020340:	f811883a 	mov	r8,ra
 4020344:	40346e80 	call	40346e8 <_mcount>
 4020348:	403f883a 	mov	ra,r8
 402034c:	defffa04 	addi	sp,sp,-24
 4020350:	dfc00515 	stw	ra,20(sp)
 4020354:	df000415 	stw	fp,16(sp)
 4020358:	dc000315 	stw	r16,12(sp)
 402035c:	df000404 	addi	fp,sp,16
 4020360:	e13ffe15 	stw	r4,-8(fp)
	for (int y=0; y<height; y++) {
 4020364:	e03ffc15 	stw	zero,-16(fp)
 4020368:	e0bffe17 	ldw	r2,-8(fp)
 402036c:	10800017 	ldw	r2,0(r2)
 4020370:	e0fffc17 	ldw	r3,-16(fp)
 4020374:	1880140e 	bge	r3,r2,40203c8 <_ZN5Image9randomizeEv+0x88>
		for (int x=0; x<length; x++) {
 4020378:	e03ffd15 	stw	zero,-12(fp)
 402037c:	e0bffe17 	ldw	r2,-8(fp)
 4020380:	10800117 	ldw	r2,4(r2)
 4020384:	e0fffd17 	ldw	r3,-12(fp)
 4020388:	18800b0e 	bge	r3,r2,40203b8 <_ZN5Image9randomizeEv+0x78>
			*source_pixel(x,y) = rand() &0xFF;
 402038c:	e1bffc17 	ldw	r6,-16(fp)
 4020390:	e17ffd17 	ldw	r5,-12(fp)
 4020394:	e13ffe17 	ldw	r4,-8(fp)
 4020398:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 402039c:	1021883a 	mov	r16,r2
 40203a0:	40282740 	call	4028274 <rand>
 40203a4:	80800005 	stb	r2,0(r16)
	randomize();
}

void Image::randomize() {
	for (int y=0; y<height; y++) {
		for (int x=0; x<length; x++) {
 40203a8:	e0bffd17 	ldw	r2,-12(fp)
 40203ac:	10800044 	addi	r2,r2,1
 40203b0:	e0bffd15 	stw	r2,-12(fp)
 40203b4:	003ff106 	br	402037c <__flash_rwdata_start+0xfffe9e24>
	source_array = new unsigned char [height*length];
	randomize();
}

void Image::randomize() {
	for (int y=0; y<height; y++) {
 40203b8:	e0bffc17 	ldw	r2,-16(fp)
 40203bc:	10800044 	addi	r2,r2,1
 40203c0:	e0bffc15 	stw	r2,-16(fp)
 40203c4:	003fe806 	br	4020368 <__flash_rwdata_start+0xfffe9e10>
		for (int x=0; x<length; x++) {
			*source_pixel(x,y) = rand() &0xFF;
		}
	}
}
 40203c8:	0001883a 	nop
 40203cc:	e6ffff04 	addi	sp,fp,-4
 40203d0:	dfc00217 	ldw	ra,8(sp)
 40203d4:	df000117 	ldw	fp,4(sp)
 40203d8:	dc000017 	ldw	r16,0(sp)
 40203dc:	dec00304 	addi	sp,sp,12
 40203e0:	f800283a 	ret

040203e4 <_ZN5Image17Get_Fractal_LevelEff>:

int Image::Get_Fractal_Level(float newRe, float newIm) {
 40203e4:	f811883a 	mov	r8,ra
 40203e8:	40346e80 	call	40346e8 <_mcount>
 40203ec:	403f883a 	mov	ra,r8
 40203f0:	defff404 	addi	sp,sp,-48
 40203f4:	dfc00b15 	stw	ra,44(sp)
 40203f8:	df000a15 	stw	fp,40(sp)
 40203fc:	df000a04 	addi	fp,sp,40
 4020400:	e13ffd15 	stw	r4,-12(fp)
 4020404:	e17ffe15 	stw	r5,-8(fp)
 4020408:	e1bfff15 	stw	r6,-4(fp)
	float cRe = -0.78;
 402040c:	00afd234 	movhi	r2,48968
 4020410:	10ab8504 	addi	r2,r2,-20972
 4020414:	e0bff715 	stw	r2,-36(fp)
	float cIm = 0.158;
 4020418:	008f88b4 	movhi	r2,15906
 402041c:	10b2b044 	addi	r2,r2,-13631
 4020420:	e0bff815 	stw	r2,-32(fp)
    int i;

    for(i = 0; i < 63; i++) {
 4020424:	e03ff615 	stw	zero,-40(fp)
 4020428:	e0bff617 	ldw	r2,-40(fp)
 402042c:	10800fc8 	cmpgei	r2,r2,63
 4020430:	1000361e 	bne	r2,zero,402050c <_ZN5Image17Get_Fractal_LevelEff+0x128>
        float oldRe = newRe;
 4020434:	e0bffe17 	ldw	r2,-8(fp)
 4020438:	e0bff915 	stw	r2,-28(fp)
        float oldIm = newIm;
 402043c:	e0bfff17 	ldw	r2,-4(fp)
 4020440:	e0bffa15 	stw	r2,-24(fp)
        float sqRe = newRe*newRe;
 4020444:	e17ffe17 	ldw	r5,-8(fp)
 4020448:	e13ffe17 	ldw	r4,-8(fp)
 402044c:	40258180 	call	4025818 <__mulsf3>
 4020450:	1007883a 	mov	r3,r2
 4020454:	e0fffb15 	stw	r3,-20(fp)
        float sqIm = newIm*newIm;
 4020458:	e17fff17 	ldw	r5,-4(fp)
 402045c:	e13fff17 	ldw	r4,-4(fp)
 4020460:	40258180 	call	4025818 <__mulsf3>
 4020464:	1007883a 	mov	r3,r2
 4020468:	e0fffc15 	stw	r3,-16(fp)
        if((sqRe + sqIm) > 4) break;
 402046c:	e17ffc17 	ldw	r5,-16(fp)
 4020470:	e13ffb17 	ldw	r4,-20(fp)
 4020474:	4024db40 	call	4024db4 <__addsf3>
 4020478:	1007883a 	mov	r3,r2
 402047c:	1805883a 	mov	r2,r3
 4020480:	01502034 	movhi	r5,16512
 4020484:	1009883a 	mov	r4,r2
 4020488:	40257540 	call	4025754 <__gesf2>
 402048c:	00801e16 	blt	zero,r2,4020508 <_ZN5Image17Get_Fractal_LevelEff+0x124>
        newRe = sqRe - sqIm + cRe;
 4020490:	e17ffc17 	ldw	r5,-16(fp)
 4020494:	e13ffb17 	ldw	r4,-20(fp)
 4020498:	4025c200 	call	4025c20 <__subsf3>
 402049c:	1007883a 	mov	r3,r2
 40204a0:	1805883a 	mov	r2,r3
 40204a4:	e17ff717 	ldw	r5,-36(fp)
 40204a8:	1009883a 	mov	r4,r2
 40204ac:	4024db40 	call	4024db4 <__addsf3>
 40204b0:	1007883a 	mov	r3,r2
 40204b4:	e0fffe15 	stw	r3,-8(fp)
        newIm = 2 * oldRe * oldIm + cIm;
 40204b8:	e0bff917 	ldw	r2,-28(fp)
 40204bc:	100b883a 	mov	r5,r2
 40204c0:	1009883a 	mov	r4,r2
 40204c4:	4024db40 	call	4024db4 <__addsf3>
 40204c8:	1007883a 	mov	r3,r2
 40204cc:	1805883a 	mov	r2,r3
 40204d0:	e17ffa17 	ldw	r5,-24(fp)
 40204d4:	1009883a 	mov	r4,r2
 40204d8:	40258180 	call	4025818 <__mulsf3>
 40204dc:	1007883a 	mov	r3,r2
 40204e0:	1805883a 	mov	r2,r3
 40204e4:	e17ff817 	ldw	r5,-32(fp)
 40204e8:	1009883a 	mov	r4,r2
 40204ec:	4024db40 	call	4024db4 <__addsf3>
 40204f0:	1007883a 	mov	r3,r2
 40204f4:	e0ffff15 	stw	r3,-4(fp)
int Image::Get_Fractal_Level(float newRe, float newIm) {
	float cRe = -0.78;
	float cIm = 0.158;
    int i;

    for(i = 0; i < 63; i++) {
 40204f8:	e0bff617 	ldw	r2,-40(fp)
 40204fc:	10800044 	addi	r2,r2,1
 4020500:	e0bff615 	stw	r2,-40(fp)
 4020504:	003fc806 	br	4020428 <__flash_rwdata_start+0xfffe9ed0>
        float oldRe = newRe;
        float oldIm = newIm;
        float sqRe = newRe*newRe;
        float sqIm = newIm*newIm;
        if((sqRe + sqIm) > 4) break;
 4020508:	0001883a 	nop
        newIm = 2 * oldRe * oldIm + cIm;

        //DEBUG
        //printf("(%f,%f)",newRe,newIm);
    }
    return i;
 402050c:	e0bff617 	ldw	r2,-40(fp)
}
 4020510:	e037883a 	mov	sp,fp
 4020514:	dfc00117 	ldw	ra,4(sp)
 4020518:	df000017 	ldw	fp,0(sp)
 402051c:	dec00204 	addi	sp,sp,8
 4020520:	f800283a 	ret

04020524 <_ZN5Image17Get_Fractal_ColorEi>:

int Image::Get_Fractal_Color(int level) {
 4020524:	f811883a 	mov	r8,ra
 4020528:	40346e80 	call	40346e8 <_mcount>
 402052c:	403f883a 	mov	ra,r8
 4020530:	defffd04 	addi	sp,sp,-12
 4020534:	df000215 	stw	fp,8(sp)
 4020538:	df000204 	addi	fp,sp,8
 402053c:	e13ffe15 	stw	r4,-8(fp)
 4020540:	e17fff15 	stw	r5,-4(fp)
    if (level>63) level = 63;
 4020544:	e0bfff17 	ldw	r2,-4(fp)
 4020548:	10801010 	cmplti	r2,r2,64
 402054c:	1000021e 	bne	r2,zero,4020558 <_ZN5Image17Get_Fractal_ColorEi+0x34>
 4020550:	00800fc4 	movi	r2,63
 4020554:	e0bfff15 	stw	r2,-4(fp)
    return ((level<<3) & 0xE0)+level;
 4020558:	e0bfff17 	ldw	r2,-4(fp)
 402055c:	100490fa 	slli	r2,r2,3
 4020560:	10c0380c 	andi	r3,r2,224
 4020564:	e0bfff17 	ldw	r2,-4(fp)
 4020568:	1885883a 	add	r2,r3,r2
}
 402056c:	e037883a 	mov	sp,fp
 4020570:	df000017 	ldw	fp,0(sp)
 4020574:	dec00104 	addi	sp,sp,4
 4020578:	f800283a 	ret

0402057c <_ZN5Image12make_fractalEv>:

void Image::make_fractal() {
 402057c:	f811883a 	mov	r8,ra
 4020580:	40346e80 	call	40346e8 <_mcount>
 4020584:	403f883a 	mov	ra,r8
 4020588:	defff004 	addi	sp,sp,-64
 402058c:	dfc00f15 	stw	ra,60(sp)
 4020590:	df000e15 	stw	fp,56(sp)
 4020594:	dc000d15 	stw	r16,52(sp)
 4020598:	df000e04 	addi	fp,sp,56
 402059c:	e13ffe15 	stw	r4,-8(fp)
	float sinAngle = 0;
 40205a0:	e03ff415 	stw	zero,-48(fp)
	float cosAngle = 1;
 40205a4:	008fe034 	movhi	r2,16256
 40205a8:	e0bff515 	stw	r2,-44(fp)
	float Scale = 1;
 40205ac:	008fe034 	movhi	r2,16256
 40205b0:	e0bff615 	stw	r2,-40(fp)
	float X_position = 0;
 40205b4:	e03ff715 	stw	zero,-36(fp)
	float Y_position = 0;
 40205b8:	e03ff815 	stw	zero,-32(fp)

    float x,y;

    for (y=0; y<height; y++) {
 40205bc:	e03ff315 	stw	zero,-52(fp)
 40205c0:	e0bffe17 	ldw	r2,-8(fp)
 40205c4:	10800017 	ldw	r2,0(r2)
 40205c8:	1009883a 	mov	r4,r2
 40205cc:	402618c0 	call	402618c <__floatsisf>
 40205d0:	1007883a 	mov	r3,r2
 40205d4:	e17ff317 	ldw	r5,-52(fp)
 40205d8:	1809883a 	mov	r4,r3
 40205dc:	40257540 	call	4025754 <__gesf2>
 40205e0:	00800116 	blt	zero,r2,40205e8 <_ZN5Image12make_fractalEv+0x6c>
                int level = Get_Fractal_Level(X_position+rotated_fx, Y_position+rotated_fy);
                *source_pixel(x,y) = 4*Get_Fractal_Color(level);
            }
        }
    }
}
 40205e4:	0000b606 	br	40208c0 <_ZN5Image12make_fractalEv+0x344>
	float Y_position = 0;

    float x,y;

    for (y=0; y<height; y++) {
        for (x=0; x<length; x++) {
 40205e8:	e03ff215 	stw	zero,-56(fp)
 40205ec:	e0bffe17 	ldw	r2,-8(fp)
 40205f0:	10800117 	ldw	r2,4(r2)
 40205f4:	1009883a 	mov	r4,r2
 40205f8:	402618c0 	call	402618c <__floatsisf>
 40205fc:	1007883a 	mov	r3,r2
 4020600:	e17ff217 	ldw	r5,-56(fp)
 4020604:	1809883a 	mov	r4,r3
 4020608:	40257540 	call	4025754 <__gesf2>
 402060c:	0080a60e 	bge	zero,r2,40208a8 <_ZN5Image12make_fractalEv+0x32c>
            if ( (x==length/2) || (y==height/2) ) *source_pixel(x,y) = 0;
 4020610:	e0bffe17 	ldw	r2,-8(fp)
 4020614:	10800117 	ldw	r2,4(r2)
 4020618:	1006d7fa 	srli	r3,r2,31
 402061c:	1885883a 	add	r2,r3,r2
 4020620:	1005d07a 	srai	r2,r2,1
 4020624:	1009883a 	mov	r4,r2
 4020628:	402618c0 	call	402618c <__floatsisf>
 402062c:	1007883a 	mov	r3,r2
 4020630:	e17ff217 	ldw	r5,-56(fp)
 4020634:	1809883a 	mov	r4,r3
 4020638:	40256d40 	call	40256d4 <__eqsf2>
 402063c:	10000c26 	beq	r2,zero,4020670 <_ZN5Image12make_fractalEv+0xf4>
 4020640:	e0bffe17 	ldw	r2,-8(fp)
 4020644:	10800017 	ldw	r2,0(r2)
 4020648:	1006d7fa 	srli	r3,r2,31
 402064c:	1885883a 	add	r2,r3,r2
 4020650:	1005d07a 	srai	r2,r2,1
 4020654:	1009883a 	mov	r4,r2
 4020658:	402618c0 	call	402618c <__floatsisf>
 402065c:	1007883a 	mov	r3,r2
 4020660:	e17ff317 	ldw	r5,-52(fp)
 4020664:	1809883a 	mov	r4,r3
 4020668:	40256d40 	call	40256d4 <__eqsf2>
 402066c:	10000b1e 	bne	r2,zero,402069c <_ZN5Image12make_fractalEv+0x120>
 4020670:	e13ff217 	ldw	r4,-56(fp)
 4020674:	40261100 	call	4026110 <__fixsfsi>
 4020678:	1021883a 	mov	r16,r2
 402067c:	e13ff317 	ldw	r4,-52(fp)
 4020680:	40261100 	call	4026110 <__fixsfsi>
 4020684:	100d883a 	mov	r6,r2
 4020688:	800b883a 	mov	r5,r16
 402068c:	e13ffe17 	ldw	r4,-8(fp)
 4020690:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020694:	10000005 	stb	zero,0(r2)
 4020698:	00007d06 	br	4020890 <_ZN5Image12make_fractalEv+0x314>
            else {
                float fx = (x-length/2)/(length/2);
 402069c:	e0bffe17 	ldw	r2,-8(fp)
 40206a0:	10800117 	ldw	r2,4(r2)
 40206a4:	1006d7fa 	srli	r3,r2,31
 40206a8:	1885883a 	add	r2,r3,r2
 40206ac:	1005d07a 	srai	r2,r2,1
 40206b0:	1009883a 	mov	r4,r2
 40206b4:	402618c0 	call	402618c <__floatsisf>
 40206b8:	1007883a 	mov	r3,r2
 40206bc:	180b883a 	mov	r5,r3
 40206c0:	e13ff217 	ldw	r4,-56(fp)
 40206c4:	4025c200 	call	4025c20 <__subsf3>
 40206c8:	1007883a 	mov	r3,r2
 40206cc:	1821883a 	mov	r16,r3
 40206d0:	e0bffe17 	ldw	r2,-8(fp)
 40206d4:	10800117 	ldw	r2,4(r2)
 40206d8:	1006d7fa 	srli	r3,r2,31
 40206dc:	1885883a 	add	r2,r3,r2
 40206e0:	1005d07a 	srai	r2,r2,1
 40206e4:	1009883a 	mov	r4,r2
 40206e8:	402618c0 	call	402618c <__floatsisf>
 40206ec:	1007883a 	mov	r3,r2
 40206f0:	180b883a 	mov	r5,r3
 40206f4:	8009883a 	mov	r4,r16
 40206f8:	40252880 	call	4025288 <__divsf3>
 40206fc:	1007883a 	mov	r3,r2
 4020700:	e0fff915 	stw	r3,-28(fp)
                float fy = (y-height/2)/(height/2);
 4020704:	e0bffe17 	ldw	r2,-8(fp)
 4020708:	10800017 	ldw	r2,0(r2)
 402070c:	1006d7fa 	srli	r3,r2,31
 4020710:	1885883a 	add	r2,r3,r2
 4020714:	1005d07a 	srai	r2,r2,1
 4020718:	1009883a 	mov	r4,r2
 402071c:	402618c0 	call	402618c <__floatsisf>
 4020720:	1007883a 	mov	r3,r2
 4020724:	180b883a 	mov	r5,r3
 4020728:	e13ff317 	ldw	r4,-52(fp)
 402072c:	4025c200 	call	4025c20 <__subsf3>
 4020730:	1007883a 	mov	r3,r2
 4020734:	1821883a 	mov	r16,r3
 4020738:	e0bffe17 	ldw	r2,-8(fp)
 402073c:	10800017 	ldw	r2,0(r2)
 4020740:	1006d7fa 	srli	r3,r2,31
 4020744:	1885883a 	add	r2,r3,r2
 4020748:	1005d07a 	srai	r2,r2,1
 402074c:	1009883a 	mov	r4,r2
 4020750:	402618c0 	call	402618c <__floatsisf>
 4020754:	1007883a 	mov	r3,r2
 4020758:	180b883a 	mov	r5,r3
 402075c:	8009883a 	mov	r4,r16
 4020760:	40252880 	call	4025288 <__divsf3>
 4020764:	1007883a 	mov	r3,r2
 4020768:	e0fffa15 	stw	r3,-24(fp)
                float rotated_fx = (fx*cosAngle + fy*sinAngle)/Scale;
 402076c:	e17ff517 	ldw	r5,-44(fp)
 4020770:	e13ff917 	ldw	r4,-28(fp)
 4020774:	40258180 	call	4025818 <__mulsf3>
 4020778:	1007883a 	mov	r3,r2
 402077c:	1821883a 	mov	r16,r3
 4020780:	e17ff417 	ldw	r5,-48(fp)
 4020784:	e13ffa17 	ldw	r4,-24(fp)
 4020788:	40258180 	call	4025818 <__mulsf3>
 402078c:	1007883a 	mov	r3,r2
 4020790:	1805883a 	mov	r2,r3
 4020794:	100b883a 	mov	r5,r2
 4020798:	8009883a 	mov	r4,r16
 402079c:	4024db40 	call	4024db4 <__addsf3>
 40207a0:	1007883a 	mov	r3,r2
 40207a4:	1805883a 	mov	r2,r3
 40207a8:	e17ff617 	ldw	r5,-40(fp)
 40207ac:	1009883a 	mov	r4,r2
 40207b0:	40252880 	call	4025288 <__divsf3>
 40207b4:	1007883a 	mov	r3,r2
 40207b8:	e0fffb15 	stw	r3,-20(fp)
                float rotated_fy = (-fx*sinAngle + fy*cosAngle)/Scale;
 40207bc:	e0bff917 	ldw	r2,-28(fp)
 40207c0:	10a0003c 	xorhi	r2,r2,32768
 40207c4:	e17ff417 	ldw	r5,-48(fp)
 40207c8:	1009883a 	mov	r4,r2
 40207cc:	40258180 	call	4025818 <__mulsf3>
 40207d0:	1007883a 	mov	r3,r2
 40207d4:	1821883a 	mov	r16,r3
 40207d8:	e17ff517 	ldw	r5,-44(fp)
 40207dc:	e13ffa17 	ldw	r4,-24(fp)
 40207e0:	40258180 	call	4025818 <__mulsf3>
 40207e4:	1007883a 	mov	r3,r2
 40207e8:	1805883a 	mov	r2,r3
 40207ec:	100b883a 	mov	r5,r2
 40207f0:	8009883a 	mov	r4,r16
 40207f4:	4024db40 	call	4024db4 <__addsf3>
 40207f8:	1007883a 	mov	r3,r2
 40207fc:	1805883a 	mov	r2,r3
 4020800:	e17ff617 	ldw	r5,-40(fp)
 4020804:	1009883a 	mov	r4,r2
 4020808:	40252880 	call	4025288 <__divsf3>
 402080c:	1007883a 	mov	r3,r2
 4020810:	e0fffc15 	stw	r3,-16(fp)

                int level = Get_Fractal_Level(X_position+rotated_fx, Y_position+rotated_fy);
 4020814:	e17ffb17 	ldw	r5,-20(fp)
 4020818:	e13ff717 	ldw	r4,-36(fp)
 402081c:	4024db40 	call	4024db4 <__addsf3>
 4020820:	1007883a 	mov	r3,r2
 4020824:	1821883a 	mov	r16,r3
 4020828:	e17ffc17 	ldw	r5,-16(fp)
 402082c:	e13ff817 	ldw	r4,-32(fp)
 4020830:	4024db40 	call	4024db4 <__addsf3>
 4020834:	1007883a 	mov	r3,r2
 4020838:	1805883a 	mov	r2,r3
 402083c:	100d883a 	mov	r6,r2
 4020840:	800b883a 	mov	r5,r16
 4020844:	e13ffe17 	ldw	r4,-8(fp)
 4020848:	40203e40 	call	40203e4 <_ZN5Image17Get_Fractal_LevelEff>
 402084c:	e0bffd15 	stw	r2,-12(fp)
                *source_pixel(x,y) = 4*Get_Fractal_Color(level);
 4020850:	e13ff217 	ldw	r4,-56(fp)
 4020854:	40261100 	call	4026110 <__fixsfsi>
 4020858:	1021883a 	mov	r16,r2
 402085c:	e13ff317 	ldw	r4,-52(fp)
 4020860:	40261100 	call	4026110 <__fixsfsi>
 4020864:	100d883a 	mov	r6,r2
 4020868:	800b883a 	mov	r5,r16
 402086c:	e13ffe17 	ldw	r4,-8(fp)
 4020870:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020874:	1021883a 	mov	r16,r2
 4020878:	e17ffd17 	ldw	r5,-12(fp)
 402087c:	e13ffe17 	ldw	r4,-8(fp)
 4020880:	40205240 	call	4020524 <_ZN5Image17Get_Fractal_ColorEi>
 4020884:	1085883a 	add	r2,r2,r2
 4020888:	1085883a 	add	r2,r2,r2
 402088c:	80800005 	stb	r2,0(r16)
	float Y_position = 0;

    float x,y;

    for (y=0; y<height; y++) {
        for (x=0; x<length; x++) {
 4020890:	014fe034 	movhi	r5,16256
 4020894:	e13ff217 	ldw	r4,-56(fp)
 4020898:	4024db40 	call	4024db4 <__addsf3>
 402089c:	1007883a 	mov	r3,r2
 40208a0:	e0fff215 	stw	r3,-56(fp)
 40208a4:	003f5106 	br	40205ec <__flash_rwdata_start+0xfffea094>
	float X_position = 0;
	float Y_position = 0;

    float x,y;

    for (y=0; y<height; y++) {
 40208a8:	014fe034 	movhi	r5,16256
 40208ac:	e13ff317 	ldw	r4,-52(fp)
 40208b0:	4024db40 	call	4024db4 <__addsf3>
 40208b4:	1007883a 	mov	r3,r2
 40208b8:	e0fff315 	stw	r3,-52(fp)
 40208bc:	003f4006 	br	40205c0 <__flash_rwdata_start+0xfffea068>
                int level = Get_Fractal_Level(X_position+rotated_fx, Y_position+rotated_fy);
                *source_pixel(x,y) = 4*Get_Fractal_Color(level);
            }
        }
    }
}
 40208c0:	e6ffff04 	addi	sp,fp,-4
 40208c4:	dfc00217 	ldw	ra,8(sp)
 40208c8:	df000117 	ldw	fp,4(sp)
 40208cc:	dc000017 	ldw	r16,0(sp)
 40208d0:	dec00304 	addi	sp,sp,12
 40208d4:	f800283a 	ret

040208d8 <_ZN5Image12source_pixelEii>:

unsigned char * Image::source_pixel(int x, int y) {
 40208d8:	f811883a 	mov	r8,ra
 40208dc:	40346e80 	call	40346e8 <_mcount>
 40208e0:	403f883a 	mov	ra,r8
 40208e4:	defffc04 	addi	sp,sp,-16
 40208e8:	df000315 	stw	fp,12(sp)
 40208ec:	df000304 	addi	fp,sp,12
 40208f0:	e13ffd15 	stw	r4,-12(fp)
 40208f4:	e17ffe15 	stw	r5,-8(fp)
 40208f8:	e1bfff15 	stw	r6,-4(fp)
	// TODO Auto-generated constructor stub
	return source_array + (y*length+x);
 40208fc:	e0bffd17 	ldw	r2,-12(fp)
 4020900:	10800217 	ldw	r2,8(r2)
 4020904:	e0fffd17 	ldw	r3,-12(fp)
 4020908:	19000117 	ldw	r4,4(r3)
 402090c:	e0ffff17 	ldw	r3,-4(fp)
 4020910:	20c9383a 	mul	r4,r4,r3
 4020914:	e0fffe17 	ldw	r3,-8(fp)
 4020918:	20c7883a 	add	r3,r4,r3
 402091c:	10c5883a 	add	r2,r2,r3
}
 4020920:	e037883a 	mov	sp,fp
 4020924:	df000017 	ldw	fp,0(sp)
 4020928:	dec00104 	addi	sp,sp,4
 402092c:	f800283a 	ret

04020930 <_ZN5Image7make_bwEv>:

void Image::make_bw() {
 4020930:	f811883a 	mov	r8,ra
 4020934:	40346e80 	call	40346e8 <_mcount>
 4020938:	403f883a 	mov	ra,r8
 402093c:	defffb04 	addi	sp,sp,-20
 4020940:	dfc00415 	stw	ra,16(sp)
 4020944:	df000315 	stw	fp,12(sp)
 4020948:	df000304 	addi	fp,sp,12
 402094c:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
 4020950:	e03ffd15 	stw	zero,-12(fp)
 4020954:	e0bfff17 	ldw	r2,-4(fp)
 4020958:	10800017 	ldw	r2,0(r2)
 402095c:	e0fffd17 	ldw	r3,-12(fp)
 4020960:	1880230e 	bge	r3,r2,40209f0 <_ZN5Image7make_bwEv+0xc0>
		for (int x=0; x<length; x++) {
 4020964:	e03ffe15 	stw	zero,-8(fp)
 4020968:	e0bfff17 	ldw	r2,-4(fp)
 402096c:	10800117 	ldw	r2,4(r2)
 4020970:	e0fffe17 	ldw	r3,-8(fp)
 4020974:	18801a0e 	bge	r3,r2,40209e0 <_ZN5Image7make_bwEv+0xb0>
			if (*source_pixel(x,y)>127) *source_pixel(x,y)=255;
 4020978:	e1bffd17 	ldw	r6,-12(fp)
 402097c:	e17ffe17 	ldw	r5,-8(fp)
 4020980:	e13fff17 	ldw	r4,-4(fp)
 4020984:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020988:	10800003 	ldbu	r2,0(r2)
 402098c:	10803fcc 	andi	r2,r2,255
 4020990:	1004d1fa 	srli	r2,r2,7
 4020994:	10803fcc 	andi	r2,r2,255
 4020998:	10000826 	beq	r2,zero,40209bc <_ZN5Image7make_bwEv+0x8c>
 402099c:	e1bffd17 	ldw	r6,-12(fp)
 40209a0:	e17ffe17 	ldw	r5,-8(fp)
 40209a4:	e13fff17 	ldw	r4,-4(fp)
 40209a8:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 40209ac:	1007883a 	mov	r3,r2
 40209b0:	00bfffc4 	movi	r2,-1
 40209b4:	18800005 	stb	r2,0(r3)
 40209b8:	00000506 	br	40209d0 <_ZN5Image7make_bwEv+0xa0>
			else *source_pixel(x,y)=0;
 40209bc:	e1bffd17 	ldw	r6,-12(fp)
 40209c0:	e17ffe17 	ldw	r5,-8(fp)
 40209c4:	e13fff17 	ldw	r4,-4(fp)
 40209c8:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 40209cc:	10000005 	stb	zero,0(r2)
}

void Image::make_bw() {
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
		for (int x=0; x<length; x++) {
 40209d0:	e0bffe17 	ldw	r2,-8(fp)
 40209d4:	10800044 	addi	r2,r2,1
 40209d8:	e0bffe15 	stw	r2,-8(fp)
 40209dc:	003fe206 	br	4020968 <__flash_rwdata_start+0xfffea410>
	return source_array + (y*length+x);
}

void Image::make_bw() {
	// TODO Auto-generated constructor stub
	for (int y=0; y<height; y++) {
 40209e0:	e0bffd17 	ldw	r2,-12(fp)
 40209e4:	10800044 	addi	r2,r2,1
 40209e8:	e0bffd15 	stw	r2,-12(fp)
 40209ec:	003fd906 	br	4020954 <__flash_rwdata_start+0xfffea3fc>
		for (int x=0; x<length; x++) {
			if (*source_pixel(x,y)>127) *source_pixel(x,y)=255;
			else *source_pixel(x,y)=0;
		}
	}
}
 40209f0:	0001883a 	nop
 40209f4:	e037883a 	mov	sp,fp
 40209f8:	dfc00117 	ldw	ra,4(sp)
 40209fc:	df000017 	ldw	fp,0(sp)
 4020a00:	dec00204 	addi	sp,sp,8
 4020a04:	f800283a 	ret

04020a08 <_ZN5Image8apply_NNEP2NNi>:
 *
 * Applique toutes les sous-images size x size de cette
 * image a l'entree de ce reseau de neuronnes.
 *
 *******************************************************/
Image **Image::apply_NN(NN * network, int size) {
 4020a08:	f811883a 	mov	r8,ra
 4020a0c:	40346e80 	call	40346e8 <_mcount>
 4020a10:	403f883a 	mov	ra,r8
 4020a14:	deffcf04 	addi	sp,sp,-196
 4020a18:	dfc03015 	stw	ra,192(sp)
 4020a1c:	df002f15 	stw	fp,188(sp)
 4020a20:	ddc02e15 	stw	r23,184(sp)
 4020a24:	dd802d15 	stw	r22,180(sp)
 4020a28:	dd402c15 	stw	r21,176(sp)
 4020a2c:	dd002b15 	stw	r20,172(sp)
 4020a30:	dcc02a15 	stw	r19,168(sp)
 4020a34:	dc802915 	stw	r18,164(sp)
 4020a38:	dc402815 	stw	r17,160(sp)
 4020a3c:	dc002715 	stw	r16,156(sp)
 4020a40:	df002f04 	addi	fp,sp,188
 4020a44:	e13fdb15 	stw	r4,-148(fp)
 4020a48:	e17fdc15 	stw	r5,-144(fp)
 4020a4c:	e1bfdd15 	stw	r6,-140(fp)
 4020a50:	008100b4 	movhi	r2,1026
 4020a54:	108c9504 	addi	r2,r2,12884
 4020a58:	e0bfe415 	stw	r2,-112(fp)
 4020a5c:	008100f4 	movhi	r2,1027
 4020a60:	10979b04 	addi	r2,r2,24172
 4020a64:	e0bfe515 	stw	r2,-108(fp)
 4020a68:	e0bfe604 	addi	r2,fp,-104
 4020a6c:	e0ffd104 	addi	r3,fp,-188
 4020a70:	10c00015 	stw	r3,0(r2)
 4020a74:	00c100b4 	movhi	r3,1026
 4020a78:	18c3b804 	addi	r3,r3,3808
 4020a7c:	10c00115 	stw	r3,4(r2)
 4020a80:	16c00215 	stw	sp,8(r2)
 4020a84:	e0bfde04 	addi	r2,fp,-136
 4020a88:	1009883a 	mov	r4,r2
 4020a8c:	40272900 	call	4027290 <_Unwind_SjLj_Register>
				*(tab_result[k]->source_pixel(x,y)) = pixel;
			}
		}
	}
	printf("\r\n");
	return tab_result;
 4020a90:	d805883a 	mov	r2,sp
 4020a94:	e0bfeb15 	stw	r2,-84(fp)
 * Applique toutes les sous-images size x size de cette
 * image a l'entree de ce reseau de neuronnes.
 *
 *******************************************************/
Image **Image::apply_NN(NN * network, int size) {
	float source[size*size];
 4020a98:	e0ffdd17 	ldw	r3,-140(fp)
 4020a9c:	e0bfdd17 	ldw	r2,-140(fp)
 4020aa0:	1885383a 	mul	r2,r3,r2
 4020aa4:	10bfffc4 	addi	r2,r2,-1
 4020aa8:	e0bfd715 	stw	r2,-164(fp)
 4020aac:	1007883a 	mov	r3,r2
 4020ab0:	18c00044 	addi	r3,r3,1
 4020ab4:	e0ffec15 	stw	r3,-80(fp)
 4020ab8:	e03fed15 	stw	zero,-76(fp)
 4020abc:	e13fec17 	ldw	r4,-80(fp)
 4020ac0:	2006d6fa 	srli	r3,r4,27
 4020ac4:	e17fed17 	ldw	r5,-76(fp)
 4020ac8:	280a917a 	slli	r5,r5,5
 4020acc:	e17fef15 	stw	r5,-68(fp)
 4020ad0:	e1bfef17 	ldw	r6,-68(fp)
 4020ad4:	1986b03a 	or	r3,r3,r6
 4020ad8:	e0ffef15 	stw	r3,-68(fp)
 4020adc:	e0ffec17 	ldw	r3,-80(fp)
 4020ae0:	1806917a 	slli	r3,r3,5
 4020ae4:	1007883a 	mov	r3,r2
 4020ae8:	18c00044 	addi	r3,r3,1
 4020aec:	e0fff015 	stw	r3,-64(fp)
 4020af0:	e03ff115 	stw	zero,-60(fp)
 4020af4:	e13ff017 	ldw	r4,-64(fp)
 4020af8:	2006d6fa 	srli	r3,r4,27
 4020afc:	e17ff117 	ldw	r5,-60(fp)
 4020b00:	280a917a 	slli	r5,r5,5
 4020b04:	e17ff315 	stw	r5,-52(fp)
 4020b08:	e1bff317 	ldw	r6,-52(fp)
 4020b0c:	1986b03a 	or	r3,r3,r6
 4020b10:	e0fff315 	stw	r3,-52(fp)
 4020b14:	e0fff017 	ldw	r3,-64(fp)
 4020b18:	1806917a 	slli	r3,r3,5
 4020b1c:	10800044 	addi	r2,r2,1
 4020b20:	1085883a 	add	r2,r2,r2
 4020b24:	1085883a 	add	r2,r2,r2
 4020b28:	108000c4 	addi	r2,r2,3
 4020b2c:	108000c4 	addi	r2,r2,3
 4020b30:	1004d0ba 	srli	r2,r2,2
 4020b34:	1085883a 	add	r2,r2,r2
 4020b38:	1085883a 	add	r2,r2,r2
 4020b3c:	d8b7c83a 	sub	sp,sp,r2
 4020b40:	d805883a 	mov	r2,sp
 4020b44:	108000c4 	addi	r2,r2,3
 4020b48:	1004d0ba 	srli	r2,r2,2
 4020b4c:	1085883a 	add	r2,r2,r2
 4020b50:	1085883a 	add	r2,r2,r2
 4020b54:	e0bfd815 	stw	r2,-160(fp)
	//Image * result = new Image(length-size+1,height-size+1);
	//Image *tab_result[network->layer[network->n_layer-1].n_neuron];		// Image array. Contains the output for each output neuron
	Image **tab_result = (Image**)malloc(network->layer[network->n_layer-1].n_neuron * sizeof(Image*));
 4020b58:	e0bfdc17 	ldw	r2,-144(fp)
 4020b5c:	10c00217 	ldw	r3,8(r2)
 4020b60:	e0bfdc17 	ldw	r2,-144(fp)
 4020b64:	10800117 	ldw	r2,4(r2)
 4020b68:	1009883a 	mov	r4,r2
 4020b6c:	00820034 	movhi	r2,2048
 4020b70:	10bfffc4 	addi	r2,r2,-1
 4020b74:	2085883a 	add	r2,r4,r2
 4020b78:	1004917a 	slli	r2,r2,5
 4020b7c:	1885883a 	add	r2,r3,r2
 4020b80:	10800217 	ldw	r2,8(r2)
 4020b84:	1085883a 	add	r2,r2,r2
 4020b88:	1085883a 	add	r2,r2,r2
 4020b8c:	1009883a 	mov	r4,r2
 4020b90:	40277200 	call	4027720 <malloc>
 4020b94:	e0bfd915 	stw	r2,-156(fp)

	for(int i = 0; i < network->layer[network->n_layer-1].n_neuron; i++) {
 4020b98:	e03fd115 	stw	zero,-188(fp)
 4020b9c:	e0bfdc17 	ldw	r2,-144(fp)
 4020ba0:	10c00217 	ldw	r3,8(r2)
 4020ba4:	e0bfdc17 	ldw	r2,-144(fp)
 4020ba8:	10800117 	ldw	r2,4(r2)
 4020bac:	1009883a 	mov	r4,r2
 4020bb0:	00820034 	movhi	r2,2048
 4020bb4:	10bfffc4 	addi	r2,r2,-1
 4020bb8:	2085883a 	add	r2,r4,r2
 4020bbc:	1004917a 	slli	r2,r2,5
 4020bc0:	1885883a 	add	r2,r3,r2
 4020bc4:	10800217 	ldw	r2,8(r2)
 4020bc8:	e0ffd117 	ldw	r3,-188(fp)
 4020bcc:	1880210e 	bge	r3,r2,4020c54 <_ZN5Image8apply_NNEP2NNi+0x24c>
		tab_result[i] = new Image(length-size+1,height-size+1);
 4020bd0:	00bfffc4 	movi	r2,-1
 4020bd4:	e0bfdf15 	stw	r2,-132(fp)
 4020bd8:	01000304 	movi	r4,12
 4020bdc:	40229780 	call	4022978 <_Znwj>
 4020be0:	e0bff415 	stw	r2,-48(fp)
 4020be4:	e0bfdb17 	ldw	r2,-148(fp)
 4020be8:	10c00117 	ldw	r3,4(r2)
 4020bec:	e0bfdd17 	ldw	r2,-140(fp)
 4020bf0:	1885c83a 	sub	r2,r3,r2
 4020bf4:	11000044 	addi	r4,r2,1
 4020bf8:	e0bfdb17 	ldw	r2,-148(fp)
 4020bfc:	10c00017 	ldw	r3,0(r2)
 4020c00:	e0bfdd17 	ldw	r2,-140(fp)
 4020c04:	1885c83a 	sub	r2,r3,r2
 4020c08:	10c00044 	addi	r3,r2,1
 4020c0c:	00800044 	movi	r2,1
 4020c10:	e0bfdf15 	stw	r2,-132(fp)
 4020c14:	180d883a 	mov	r6,r3
 4020c18:	200b883a 	mov	r5,r4
 4020c1c:	e13ff417 	ldw	r4,-48(fp)
 4020c20:	40202380 	call	4020238 <_ZN5ImageC1Eii>
 4020c24:	e0bfd117 	ldw	r2,-188(fp)
 4020c28:	1085883a 	add	r2,r2,r2
 4020c2c:	1085883a 	add	r2,r2,r2
 4020c30:	1007883a 	mov	r3,r2
 4020c34:	e0bfd917 	ldw	r2,-156(fp)
 4020c38:	10c5883a 	add	r2,r2,r3
 4020c3c:	e13ff417 	ldw	r4,-48(fp)
 4020c40:	11000015 	stw	r4,0(r2)
	float source[size*size];
	//Image * result = new Image(length-size+1,height-size+1);
	//Image *tab_result[network->layer[network->n_layer-1].n_neuron];		// Image array. Contains the output for each output neuron
	Image **tab_result = (Image**)malloc(network->layer[network->n_layer-1].n_neuron * sizeof(Image*));

	for(int i = 0; i < network->layer[network->n_layer-1].n_neuron; i++) {
 4020c44:	e0bfd117 	ldw	r2,-188(fp)
 4020c48:	10800044 	addi	r2,r2,1
 4020c4c:	e0bfd115 	stw	r2,-188(fp)
 4020c50:	003fd206 	br	4020b9c <__flash_rwdata_start+0xfffea644>
		tab_result[i] = new Image(length-size+1,height-size+1);
	}

	printf("Processing line ");
 4020c54:	01000034 	movhi	r4,0
 4020c58:	00bfffc4 	movi	r2,-1
 4020c5c:	e0bfdf15 	stw	r2,-132(fp)
 4020c60:	21000004 	addi	r4,r4,0
 4020c64:	40280e40 	call	40280e4 <printf>
	for (int y=0; y<=height-size; y++) {
 4020c68:	e03fd215 	stw	zero,-184(fp)
 4020c6c:	e0bfdb17 	ldw	r2,-148(fp)
 4020c70:	10c00017 	ldw	r3,0(r2)
 4020c74:	e0bfdd17 	ldw	r2,-140(fp)
 4020c78:	1887c83a 	sub	r3,r3,r2
 4020c7c:	e0bfd217 	ldw	r2,-184(fp)
 4020c80:	18808e16 	blt	r3,r2,4020ebc <_ZN5Image8apply_NNEP2NNi+0x4b4>
		printf("%i,",y);
 4020c84:	e17fd217 	ldw	r5,-184(fp)
 4020c88:	01000034 	movhi	r4,0
 4020c8c:	00bfffc4 	movi	r2,-1
 4020c90:	e0bfdf15 	stw	r2,-132(fp)
 4020c94:	21000504 	addi	r4,r4,20
 4020c98:	40280e40 	call	40280e4 <printf>
		for (int x=0; x<=length-size; x++) {
 4020c9c:	e03fd315 	stw	zero,-180(fp)
 4020ca0:	e0bfdb17 	ldw	r2,-148(fp)
 4020ca4:	10c00117 	ldw	r3,4(r2)
 4020ca8:	e0bfdd17 	ldw	r2,-140(fp)
 4020cac:	1887c83a 	sub	r3,r3,r2
 4020cb0:	e0bfd317 	ldw	r2,-180(fp)
 4020cb4:	18807d16 	blt	r3,r2,4020eac <_ZN5Image8apply_NNEP2NNi+0x4a4>
			// Appliquer le reseau sur un sous-bloc de l'image
			for (int j=0; j<size; j++) {
 4020cb8:	e03fd415 	stw	zero,-176(fp)
 4020cbc:	e0ffd417 	ldw	r3,-176(fp)
 4020cc0:	e0bfdd17 	ldw	r2,-140(fp)
 4020cc4:	1880370e 	bge	r3,r2,4020da4 <_ZN5Image8apply_NNEP2NNi+0x39c>
				for (int i=0; i<size; i++) {
 4020cc8:	e03fd515 	stw	zero,-172(fp)
 4020ccc:	e0ffd517 	ldw	r3,-172(fp)
 4020cd0:	e0bfdd17 	ldw	r2,-140(fp)
 4020cd4:	18802f0e 	bge	r3,r2,4020d94 <_ZN5Image8apply_NNEP2NNi+0x38c>
					source[j*size + i] = (*source_pixel(x+i,y+j))/255.0;		// size*size sub-image
 4020cd8:	e0ffd417 	ldw	r3,-176(fp)
 4020cdc:	e0bfdd17 	ldw	r2,-140(fp)
 4020ce0:	1887383a 	mul	r3,r3,r2
 4020ce4:	e0bfd517 	ldw	r2,-172(fp)
 4020ce8:	1885883a 	add	r2,r3,r2
 4020cec:	e0bff515 	stw	r2,-44(fp)
 4020cf0:	e0ffd317 	ldw	r3,-180(fp)
 4020cf4:	e0bfd517 	ldw	r2,-172(fp)
 4020cf8:	1889883a 	add	r4,r3,r2
 4020cfc:	e0ffd217 	ldw	r3,-184(fp)
 4020d00:	e0bfd417 	ldw	r2,-176(fp)
 4020d04:	1885883a 	add	r2,r3,r2
 4020d08:	100d883a 	mov	r6,r2
 4020d0c:	200b883a 	mov	r5,r4
 4020d10:	e13fdb17 	ldw	r4,-148(fp)
 4020d14:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020d18:	10800003 	ldbu	r2,0(r2)
 4020d1c:	10803fcc 	andi	r2,r2,255
 4020d20:	1009883a 	mov	r4,r2
 4020d24:	4026cac0 	call	4026cac <__floatsidf>
 4020d28:	1011883a 	mov	r8,r2
 4020d2c:	1813883a 	mov	r9,r3
 4020d30:	000d883a 	mov	r6,zero
 4020d34:	01d01c34 	movhi	r7,16496
 4020d38:	39f80004 	addi	r7,r7,-8192
 4020d3c:	4009883a 	mov	r4,r8
 4020d40:	480b883a 	mov	r5,r9
 4020d44:	40263b80 	call	40263b8 <__divdf3>
 4020d48:	1009883a 	mov	r4,r2
 4020d4c:	180b883a 	mov	r5,r3
 4020d50:	2005883a 	mov	r2,r4
 4020d54:	2807883a 	mov	r3,r5
 4020d58:	1009883a 	mov	r4,r2
 4020d5c:	180b883a 	mov	r5,r3
 4020d60:	4026eb00 	call	4026eb0 <__truncdfsf2>
 4020d64:	1009883a 	mov	r4,r2
 4020d68:	e0ffd817 	ldw	r3,-160(fp)
 4020d6c:	e17ff517 	ldw	r5,-44(fp)
 4020d70:	e17ff517 	ldw	r5,-44(fp)
 4020d74:	2945883a 	add	r2,r5,r5
 4020d78:	1085883a 	add	r2,r2,r2
 4020d7c:	1885883a 	add	r2,r3,r2
 4020d80:	11000015 	stw	r4,0(r2)
	for (int y=0; y<=height-size; y++) {
		printf("%i,",y);
		for (int x=0; x<=length-size; x++) {
			// Appliquer le reseau sur un sous-bloc de l'image
			for (int j=0; j<size; j++) {
				for (int i=0; i<size; i++) {
 4020d84:	e0bfd517 	ldw	r2,-172(fp)
 4020d88:	10800044 	addi	r2,r2,1
 4020d8c:	e0bfd515 	stw	r2,-172(fp)
 4020d90:	003fce06 	br	4020ccc <__flash_rwdata_start+0xfffea774>
	printf("Processing line ");
	for (int y=0; y<=height-size; y++) {
		printf("%i,",y);
		for (int x=0; x<=length-size; x++) {
			// Appliquer le reseau sur un sous-bloc de l'image
			for (int j=0; j<size; j++) {
 4020d94:	e0bfd417 	ldw	r2,-176(fp)
 4020d98:	10800044 	addi	r2,r2,1
 4020d9c:	e0bfd415 	stw	r2,-176(fp)
 4020da0:	003fc606 	br	4020cbc <__flash_rwdata_start+0xfffea764>
				for (int i=0; i<size; i++) {
					source[j*size + i] = (*source_pixel(x+i,y+j))/255.0;		// size*size sub-image
				}
			}
			network->propagate(source);
 4020da4:	e0ffd817 	ldw	r3,-160(fp)
 4020da8:	00bfffc4 	movi	r2,-1
 4020dac:	e0bfdf15 	stw	r2,-132(fp)
 4020db0:	180b883a 	mov	r5,r3
 4020db4:	e13fdc17 	ldw	r4,-144(fp)
 4020db8:	40214a00 	call	40214a0 <_ZN2NN9propagateEPf>

			// Stocker les bons/meilleurs matchs
			unsigned char pixel;
			for(int k = 0; k < network->layer[network->n_layer-1].n_neuron; k++) {
 4020dbc:	e03fd615 	stw	zero,-168(fp)
 4020dc0:	e0bfdc17 	ldw	r2,-144(fp)
 4020dc4:	10c00217 	ldw	r3,8(r2)
 4020dc8:	e0bfdc17 	ldw	r2,-144(fp)
 4020dcc:	10800117 	ldw	r2,4(r2)
 4020dd0:	1009883a 	mov	r4,r2
 4020dd4:	00820034 	movhi	r2,2048
 4020dd8:	10bfffc4 	addi	r2,r2,-1
 4020ddc:	2085883a 	add	r2,r4,r2
 4020de0:	1004917a 	slli	r2,r2,5
 4020de4:	1885883a 	add	r2,r3,r2
 4020de8:	10800217 	ldw	r2,8(r2)
 4020dec:	e0ffd617 	ldw	r3,-168(fp)
 4020df0:	18802a0e 	bge	r3,r2,4020e9c <_ZN5Image8apply_NNEP2NNi+0x494>
				pixel = 255*(network->layer[network->n_layer-1].value[k]);
 4020df4:	e0bfdc17 	ldw	r2,-144(fp)
 4020df8:	10c00217 	ldw	r3,8(r2)
 4020dfc:	e0bfdc17 	ldw	r2,-144(fp)
 4020e00:	10800117 	ldw	r2,4(r2)
 4020e04:	1009883a 	mov	r4,r2
 4020e08:	00820034 	movhi	r2,2048
 4020e0c:	10bfffc4 	addi	r2,r2,-1
 4020e10:	2085883a 	add	r2,r4,r2
 4020e14:	1004917a 	slli	r2,r2,5
 4020e18:	1885883a 	add	r2,r3,r2
 4020e1c:	10c00717 	ldw	r3,28(r2)
 4020e20:	e0bfd617 	ldw	r2,-168(fp)
 4020e24:	1085883a 	add	r2,r2,r2
 4020e28:	1085883a 	add	r2,r2,r2
 4020e2c:	1885883a 	add	r2,r3,r2
 4020e30:	10c00017 	ldw	r3,0(r2)
 4020e34:	0150dff4 	movhi	r5,17279
 4020e38:	1809883a 	mov	r4,r3
 4020e3c:	40258180 	call	4025818 <__mulsf3>
 4020e40:	1007883a 	mov	r3,r2
 4020e44:	1805883a 	mov	r2,r3
 4020e48:	1009883a 	mov	r4,r2
 4020e4c:	4024b680 	call	4024b68 <__fixunssfsi>
 4020e50:	e0bfda05 	stb	r2,-152(fp)
				//*(result->source_pixel(x,y)) = pixel;
				*(tab_result[k]->source_pixel(x,y)) = pixel;
 4020e54:	e0bfd617 	ldw	r2,-168(fp)
 4020e58:	1085883a 	add	r2,r2,r2
 4020e5c:	1085883a 	add	r2,r2,r2
 4020e60:	1007883a 	mov	r3,r2
 4020e64:	e0bfd917 	ldw	r2,-156(fp)
 4020e68:	10c5883a 	add	r2,r2,r3
 4020e6c:	10800017 	ldw	r2,0(r2)
 4020e70:	e1bfd217 	ldw	r6,-184(fp)
 4020e74:	e17fd317 	ldw	r5,-180(fp)
 4020e78:	1009883a 	mov	r4,r2
 4020e7c:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020e80:	1007883a 	mov	r3,r2
 4020e84:	e0bfda03 	ldbu	r2,-152(fp)
 4020e88:	18800005 	stb	r2,0(r3)
			}
			network->propagate(source);

			// Stocker les bons/meilleurs matchs
			unsigned char pixel;
			for(int k = 0; k < network->layer[network->n_layer-1].n_neuron; k++) {
 4020e8c:	e0bfd617 	ldw	r2,-168(fp)
 4020e90:	10800044 	addi	r2,r2,1
 4020e94:	e0bfd615 	stw	r2,-168(fp)
 4020e98:	003fc906 	br	4020dc0 <__flash_rwdata_start+0xfffea868>
	}

	printf("Processing line ");
	for (int y=0; y<=height-size; y++) {
		printf("%i,",y);
		for (int x=0; x<=length-size; x++) {
 4020e9c:	e0bfd317 	ldw	r2,-180(fp)
 4020ea0:	10800044 	addi	r2,r2,1
 4020ea4:	e0bfd315 	stw	r2,-180(fp)
 4020ea8:	003f7d06 	br	4020ca0 <__flash_rwdata_start+0xfffea748>
	for(int i = 0; i < network->layer[network->n_layer-1].n_neuron; i++) {
		tab_result[i] = new Image(length-size+1,height-size+1);
	}

	printf("Processing line ");
	for (int y=0; y<=height-size; y++) {
 4020eac:	e0bfd217 	ldw	r2,-184(fp)
 4020eb0:	10800044 	addi	r2,r2,1
 4020eb4:	e0bfd215 	stw	r2,-184(fp)
 4020eb8:	003f6c06 	br	4020c6c <__flash_rwdata_start+0xfffea714>
				//*(result->source_pixel(x,y)) = pixel;
				*(tab_result[k]->source_pixel(x,y)) = pixel;
			}
		}
	}
	printf("\r\n");
 4020ebc:	01000034 	movhi	r4,0
 4020ec0:	00bfffc4 	movi	r2,-1
 4020ec4:	e0bfdf15 	stw	r2,-132(fp)
 4020ec8:	21000604 	addi	r4,r4,24
 4020ecc:	40282300 	call	4028230 <puts>
	return tab_result;
 4020ed0:	e0bfd917 	ldw	r2,-156(fp)
 4020ed4:	e6ffeb17 	ldw	sp,-84(fp)
 4020ed8:	e0bff615 	stw	r2,-40(fp)
 4020edc:	00000a06 	br	4020f08 <_ZN5Image8apply_NNEP2NNi+0x500>
 4020ee0:	e7002f04 	addi	fp,fp,188
 4020ee4:	e0bfe017 	ldw	r2,-128(fp)
 4020ee8:	e0bff715 	stw	r2,-36(fp)
	//Image * result = new Image(length-size+1,height-size+1);
	//Image *tab_result[network->layer[network->n_layer-1].n_neuron];		// Image array. Contains the output for each output neuron
	Image **tab_result = (Image**)malloc(network->layer[network->n_layer-1].n_neuron * sizeof(Image*));

	for(int i = 0; i < network->layer[network->n_layer-1].n_neuron; i++) {
		tab_result[i] = new Image(length-size+1,height-size+1);
 4020eec:	e13ff417 	ldw	r4,-48(fp)
 4020ef0:	4023b100 	call	4023b10 <_ZdlPv>
 4020ef4:	e0fff717 	ldw	r3,-36(fp)
 4020ef8:	00bfffc4 	movi	r2,-1
 4020efc:	e0bfdf15 	stw	r2,-132(fp)
 4020f00:	1809883a 	mov	r4,r3
 4020f04:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 4020f08:	e0bfde04 	addi	r2,fp,-136
 4020f0c:	1009883a 	mov	r4,r2
 4020f10:	40272b40 	call	40272b4 <_Unwind_SjLj_Unregister>
			}
		}
	}
	printf("\r\n");
	return tab_result;
}
 4020f14:	e0bff617 	ldw	r2,-40(fp)
 4020f18:	e6fff804 	addi	sp,fp,-32
 4020f1c:	dfc00917 	ldw	ra,36(sp)
 4020f20:	df000817 	ldw	fp,32(sp)
 4020f24:	ddc00717 	ldw	r23,28(sp)
 4020f28:	dd800617 	ldw	r22,24(sp)
 4020f2c:	dd400517 	ldw	r21,20(sp)
 4020f30:	dd000417 	ldw	r20,16(sp)
 4020f34:	dcc00317 	ldw	r19,12(sp)
 4020f38:	dc800217 	ldw	r18,8(sp)
 4020f3c:	dc400117 	ldw	r17,4(sp)
 4020f40:	dc000017 	ldw	r16,0(sp)
 4020f44:	dec00a04 	addi	sp,sp,40
 4020f48:	f800283a 	ret

04020f4c <_ZN5Image13printToScreenEiiP3VGA>:

/**********************************************************
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::printToScreen(int x, int y, VGA *pVGA) {
 4020f4c:	f811883a 	mov	r8,ra
 4020f50:	40346e80 	call	40346e8 <_mcount>
 4020f54:	403f883a 	mov	ra,r8
 4020f58:	defff604 	addi	sp,sp,-40
 4020f5c:	dfc00915 	stw	ra,36(sp)
 4020f60:	df000815 	stw	fp,32(sp)
 4020f64:	dc400715 	stw	r17,28(sp)
 4020f68:	dc000615 	stw	r16,24(sp)
 4020f6c:	df000804 	addi	fp,sp,32
 4020f70:	e13ffa15 	stw	r4,-24(fp)
 4020f74:	e17ffb15 	stw	r5,-20(fp)
 4020f78:	e1bffc15 	stw	r6,-16(fp)
 4020f7c:	e1fffd15 	stw	r7,-12(fp)
	for(int i=0; i<length; i++) {
 4020f80:	e03ff815 	stw	zero,-32(fp)
 4020f84:	e0bffa17 	ldw	r2,-24(fp)
 4020f88:	10800117 	ldw	r2,4(r2)
 4020f8c:	e0fff817 	ldw	r3,-32(fp)
 4020f90:	1880200e 	bge	r3,r2,4021014 <_ZN5Image13printToScreenEiiP3VGA+0xc8>
		for(int j=0; j<height; j++) {
 4020f94:	e03ff915 	stw	zero,-28(fp)
 4020f98:	e0bffa17 	ldw	r2,-24(fp)
 4020f9c:	10800017 	ldw	r2,0(r2)
 4020fa0:	e0fff917 	ldw	r3,-28(fp)
 4020fa4:	1880170e 	bge	r3,r2,4021004 <_ZN5Image13printToScreenEiiP3VGA+0xb8>
			pVGA->Set_Pixel_Color(x+i,y+j,*source_pixel(i,j));
 4020fa8:	e0fffb17 	ldw	r3,-20(fp)
 4020fac:	e0bff817 	ldw	r2,-32(fp)
 4020fb0:	1885883a 	add	r2,r3,r2
 4020fb4:	1021883a 	mov	r16,r2
 4020fb8:	e0fffc17 	ldw	r3,-16(fp)
 4020fbc:	e0bff917 	ldw	r2,-28(fp)
 4020fc0:	1885883a 	add	r2,r3,r2
 4020fc4:	1023883a 	mov	r17,r2
 4020fc8:	e1bff917 	ldw	r6,-28(fp)
 4020fcc:	e17ff817 	ldw	r5,-32(fp)
 4020fd0:	e13ffa17 	ldw	r4,-24(fp)
 4020fd4:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4020fd8:	10800003 	ldbu	r2,0(r2)
 4020fdc:	10803fcc 	andi	r2,r2,255
 4020fe0:	100f883a 	mov	r7,r2
 4020fe4:	880d883a 	mov	r6,r17
 4020fe8:	800b883a 	mov	r5,r16
 4020fec:	e13ffd17 	ldw	r4,-12(fp)
 4020ff0:	40211500 	call	4021150 <_ZN3VGA15Set_Pixel_ColorEjjj>
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::printToScreen(int x, int y, VGA *pVGA) {
	for(int i=0; i<length; i++) {
		for(int j=0; j<height; j++) {
 4020ff4:	e0bff917 	ldw	r2,-28(fp)
 4020ff8:	10800044 	addi	r2,r2,1
 4020ffc:	e0bff915 	stw	r2,-28(fp)
 4021000:	003fe506 	br	4020f98 <__flash_rwdata_start+0xfffeaa40>
/**********************************************************
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::printToScreen(int x, int y, VGA *pVGA) {
	for(int i=0; i<length; i++) {
 4021004:	e0bff817 	ldw	r2,-32(fp)
 4021008:	10800044 	addi	r2,r2,1
 402100c:	e0bff815 	stw	r2,-32(fp)
 4021010:	003fdc06 	br	4020f84 <__flash_rwdata_start+0xfffeaa2c>
		for(int j=0; j<height; j++) {
			pVGA->Set_Pixel_Color(x+i,y+j,*source_pixel(i,j));
		}
	}
}
 4021014:	0001883a 	nop
 4021018:	e6fffe04 	addi	sp,fp,-8
 402101c:	dfc00317 	ldw	ra,12(sp)
 4021020:	df000217 	ldw	fp,8(sp)
 4021024:	dc400117 	ldw	r17,4(sp)
 4021028:	dc000017 	ldw	r16,0(sp)
 402102c:	dec00404 	addi	sp,sp,16
 4021030:	f800283a 	ret

04021034 <_ZN5Image5printEv>:

/**********************************************************
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::print() {
 4021034:	f811883a 	mov	r8,ra
 4021038:	40346e80 	call	40346e8 <_mcount>
 402103c:	403f883a 	mov	ra,r8
 4021040:	defffa04 	addi	sp,sp,-24
 4021044:	dfc00515 	stw	ra,20(sp)
 4021048:	df000415 	stw	fp,16(sp)
 402104c:	df000404 	addi	fp,sp,16
 4021050:	e13fff15 	stw	r4,-4(fp)
	printf("\n");
 4021054:	01000284 	movi	r4,10
 4021058:	40281400 	call	4028140 <putchar>
	for(int i=0; i<length; i++) {
 402105c:	e03ffc15 	stw	zero,-16(fp)
 4021060:	e0bfff17 	ldw	r2,-4(fp)
 4021064:	10800117 	ldw	r2,4(r2)
 4021068:	e0fffc17 	ldw	r3,-16(fp)
 402106c:	18801a0e 	bge	r3,r2,40210d8 <_ZN5Image5printEv+0xa4>
		for(int j=0; j<height; j++) {
 4021070:	e03ffd15 	stw	zero,-12(fp)
 4021074:	e0bfff17 	ldw	r2,-4(fp)
 4021078:	10800017 	ldw	r2,0(r2)
 402107c:	e0fffd17 	ldw	r3,-12(fp)
 4021080:	18800f0e 	bge	r3,r2,40210c0 <_ZN5Image5printEv+0x8c>
			int value = (int) *source_pixel(i,j);
 4021084:	e1bffd17 	ldw	r6,-12(fp)
 4021088:	e17ffc17 	ldw	r5,-16(fp)
 402108c:	e13fff17 	ldw	r4,-4(fp)
 4021090:	40208d80 	call	40208d8 <_ZN5Image12source_pixelEii>
 4021094:	10800003 	ldbu	r2,0(r2)
 4021098:	10803fcc 	andi	r2,r2,255
 402109c:	e0bffe15 	stw	r2,-8(fp)
			printf("%i,",value);
 40210a0:	e17ffe17 	ldw	r5,-8(fp)
 40210a4:	01000034 	movhi	r4,0
 40210a8:	21000504 	addi	r4,r4,20
 40210ac:	40280e40 	call	40280e4 <printf>
 *
 **********************************************************/
void Image::print() {
	printf("\n");
	for(int i=0; i<length; i++) {
		for(int j=0; j<height; j++) {
 40210b0:	e0bffd17 	ldw	r2,-12(fp)
 40210b4:	10800044 	addi	r2,r2,1
 40210b8:	e0bffd15 	stw	r2,-12(fp)
 40210bc:	003fed06 	br	4021074 <__flash_rwdata_start+0xfffeab1c>
			int value = (int) *source_pixel(i,j);
			printf("%i,",value);
		}
		printf("\n");
 40210c0:	01000284 	movi	r4,10
 40210c4:	40281400 	call	4028140 <putchar>
 * Affiche l'image a l'ecran a la position x,y.
 *
 **********************************************************/
void Image::print() {
	printf("\n");
	for(int i=0; i<length; i++) {
 40210c8:	e0bffc17 	ldw	r2,-16(fp)
 40210cc:	10800044 	addi	r2,r2,1
 40210d0:	e0bffc15 	stw	r2,-16(fp)
 40210d4:	003fe206 	br	4021060 <__flash_rwdata_start+0xfffeab08>
			int value = (int) *source_pixel(i,j);
			printf("%i,",value);
		}
		printf("\n");
	}
}
 40210d8:	0001883a 	nop
 40210dc:	e037883a 	mov	sp,fp
 40210e0:	dfc00117 	ldw	ra,4(sp)
 40210e4:	df000017 	ldw	fp,0(sp)
 40210e8:	dec00204 	addi	sp,sp,8
 40210ec:	f800283a 	ret

040210f0 <_ZN5ImageD1Ev>:

Image::~Image() {
 40210f0:	f811883a 	mov	r8,ra
 40210f4:	40346e80 	call	40346e8 <_mcount>
 40210f8:	403f883a 	mov	ra,r8
 40210fc:	defffd04 	addi	sp,sp,-12
 4021100:	dfc00215 	stw	ra,8(sp)
 4021104:	df000115 	stw	fp,4(sp)
 4021108:	df000104 	addi	fp,sp,4
 402110c:	e13fff15 	stw	r4,-4(fp)
	if (source_array != 0) delete[] source_array;
 4021110:	e0bfff17 	ldw	r2,-4(fp)
 4021114:	10800217 	ldw	r2,8(r2)
 4021118:	10000726 	beq	r2,zero,4021138 <_ZN5ImageD1Ev+0x48>
 402111c:	e0bfff17 	ldw	r2,-4(fp)
 4021120:	10800217 	ldw	r2,8(r2)
 4021124:	10000426 	beq	r2,zero,4021138 <_ZN5ImageD1Ev+0x48>
 4021128:	e0bfff17 	ldw	r2,-4(fp)
 402112c:	10800217 	ldw	r2,8(r2)
 4021130:	1009883a 	mov	r4,r2
 4021134:	40229f40 	call	40229f4 <_ZdaPv>
}
 4021138:	0001883a 	nop
 402113c:	e037883a 	mov	sp,fp
 4021140:	dfc00117 	ldw	ra,4(sp)
 4021144:	df000017 	ldw	fp,0(sp)
 4021148:	dec00204 	addi	sp,sp,8
 402114c:	f800283a 	ret

04021150 <_ZN3VGA15Set_Pixel_ColorEjjj>:
		if ( (x>=640) || (y>=480) ) return;
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, 192);
	}

	inline void Set_Pixel_Color(unsigned int x, unsigned int y, unsigned int color) {
 4021150:	f811883a 	mov	r8,ra
 4021154:	40346e80 	call	40346e8 <_mcount>
 4021158:	403f883a 	mov	ra,r8
 402115c:	defffa04 	addi	sp,sp,-24
 4021160:	df000515 	stw	fp,20(sp)
 4021164:	df000504 	addi	fp,sp,20
 4021168:	e13ffc15 	stw	r4,-16(fp)
 402116c:	e17ffd15 	stw	r5,-12(fp)
 4021170:	e1bffe15 	stw	r6,-8(fp)
 4021174:	e1ffff15 	stw	r7,-4(fp)
		if ( (x>=640) || (y>=480) ) return;
 4021178:	e0bffd17 	ldw	r2,-12(fp)
 402117c:	1080a028 	cmpgeui	r2,r2,640
 4021180:	1000111e 	bne	r2,zero,40211c8 <_ZN3VGA15Set_Pixel_ColorEjjj+0x78>
 4021184:	e0bffe17 	ldw	r2,-8(fp)
 4021188:	10807830 	cmpltui	r2,r2,480
 402118c:	10000e26 	beq	r2,zero,40211c8 <_ZN3VGA15Set_Pixel_ColorEjjj+0x78>
		int address = 640*y+x;
 4021190:	e0bffe17 	ldw	r2,-8(fp)
 4021194:	10c0a024 	muli	r3,r2,640
 4021198:	e0bffd17 	ldw	r2,-12(fp)
 402119c:	1885883a 	add	r2,r3,r2
 40211a0:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT(memory_address, address, color);
 40211a4:	e0bffc17 	ldw	r2,-16(fp)
 40211a8:	10800117 	ldw	r2,4(r2)
 40211ac:	1007883a 	mov	r3,r2
 40211b0:	e0bffb17 	ldw	r2,-20(fp)
 40211b4:	1885883a 	add	r2,r3,r2
 40211b8:	1007883a 	mov	r3,r2
 40211bc:	e0bfff17 	ldw	r2,-4(fp)
 40211c0:	18800025 	stbio	r2,0(r3)
 40211c4:	00000106 	br	40211cc <_ZN3VGA15Set_Pixel_ColorEjjj+0x7c>
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, 192);
	}

	inline void Set_Pixel_Color(unsigned int x, unsigned int y, unsigned int color) {
		if ( (x>=640) || (y>=480) ) return;
 40211c8:	0001883a 	nop
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, color);
	}
 40211cc:	e037883a 	mov	sp,fp
 40211d0:	df000017 	ldw	fp,0(sp)
 40211d4:	dec00104 	addi	sp,sp,4
 40211d8:	f800283a 	ret

040211dc <_ZN2NNC1Ei>:
 */

#include "NN.h"
#include "stdio.h"

NN::NN(int new_n_layer) {
 40211dc:	f811883a 	mov	r8,ra
 40211e0:	40346e80 	call	40346e8 <_mcount>
 40211e4:	403f883a 	mov	ra,r8
 40211e8:	deffdf04 	addi	sp,sp,-132
 40211ec:	dfc02015 	stw	ra,128(sp)
 40211f0:	df001f15 	stw	fp,124(sp)
 40211f4:	ddc01e15 	stw	r23,120(sp)
 40211f8:	dd801d15 	stw	r22,116(sp)
 40211fc:	dd401c15 	stw	r21,112(sp)
 4021200:	dd001b15 	stw	r20,108(sp)
 4021204:	dcc01a15 	stw	r19,104(sp)
 4021208:	dc801915 	stw	r18,100(sp)
 402120c:	dc401815 	stw	r17,96(sp)
 4021210:	dc001715 	stw	r16,92(sp)
 4021214:	df001f04 	addi	fp,sp,124
 4021218:	e13fe115 	stw	r4,-124(fp)
 402121c:	e17fe215 	stw	r5,-120(fp)
 4021220:	008100b4 	movhi	r2,1026
 4021224:	108c9504 	addi	r2,r2,12884
 4021228:	e0bfe915 	stw	r2,-92(fp)
 402122c:	008100f4 	movhi	r2,1027
 4021230:	10979c84 	addi	r2,r2,24178
 4021234:	e0bfea15 	stw	r2,-88(fp)
 4021238:	e0bfeb04 	addi	r2,fp,-84
 402123c:	e0ffe104 	addi	r3,fp,-124
 4021240:	10c00015 	stw	r3,0(r2)
 4021244:	00c100b4 	movhi	r3,1026
 4021248:	18c4cd04 	addi	r3,r3,4916
 402124c:	10c00115 	stw	r3,4(r2)
 4021250:	16c00215 	stw	sp,8(r2)
 4021254:	e0bfe304 	addi	r2,fp,-116
 4021258:	1009883a 	mov	r4,r2
 402125c:	40272900 	call	4027290 <_Unwind_SjLj_Register>
 4021260:	00800034 	movhi	r2,0
 4021264:	10801404 	addi	r2,r2,80
 4021268:	e0ffe117 	ldw	r3,-124(fp)
 402126c:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	n_layer = new_n_layer;
 4021270:	e0bfe117 	ldw	r2,-124(fp)
 4021274:	e0ffe217 	ldw	r3,-120(fp)
 4021278:	10c00115 	stw	r3,4(r2)
	layer = new NNLayer[n_layer];
 402127c:	e0bfe117 	ldw	r2,-124(fp)
 4021280:	10800117 	ldw	r2,4(r2)
 4021284:	e0bff315 	stw	r2,-52(fp)
 4021288:	0080fe34 	movhi	r2,1016
 402128c:	e13ff317 	ldw	r4,-52(fp)
 4021290:	11000436 	bltu	r2,r4,40212a4 <_ZN2NNC1Ei+0xc8>
 4021294:	e0fff317 	ldw	r3,-52(fp)
 4021298:	1804917a 	slli	r2,r3,5
 402129c:	10800104 	addi	r2,r2,4
 40212a0:	00000106 	br	40212a8 <_ZN2NNC1Ei+0xcc>
 40212a4:	00bfffc4 	movi	r2,-1
 40212a8:	00ffffc4 	movi	r3,-1
 40212ac:	e0ffe415 	stw	r3,-112(fp)
 40212b0:	1009883a 	mov	r4,r2
 40212b4:	40228d80 	call	40228d8 <_Znaj>
 40212b8:	e0bff415 	stw	r2,-48(fp)
 40212bc:	e0bff317 	ldw	r2,-52(fp)
 40212c0:	e13ff417 	ldw	r4,-48(fp)
 40212c4:	20800015 	stw	r2,0(r4)
 40212c8:	e0fff417 	ldw	r3,-48(fp)
 40212cc:	18c00104 	addi	r3,r3,4
 40212d0:	e0fff515 	stw	r3,-44(fp)
 40212d4:	e13ff317 	ldw	r4,-52(fp)
 40212d8:	20bfffc4 	addi	r2,r4,-1
 40212dc:	e0bff115 	stw	r2,-60(fp)
 40212e0:	e0bff517 	ldw	r2,-44(fp)
 40212e4:	e0bff015 	stw	r2,-64(fp)
 40212e8:	e0fff117 	ldw	r3,-60(fp)
 40212ec:	18bfffe0 	cmpeqi	r2,r3,-1
 40212f0:	10000b1e 	bne	r2,zero,4021320 <_ZN2NNC1Ei+0x144>
 40212f4:	00800044 	movi	r2,1
 40212f8:	e0bfe415 	stw	r2,-112(fp)
 40212fc:	e13ff017 	ldw	r4,-64(fp)
 4021300:	40219480 	call	4021948 <_ZN7NNLayerC1Ev>
 4021304:	e13ff017 	ldw	r4,-64(fp)
 4021308:	21000804 	addi	r4,r4,32
 402130c:	e13ff015 	stw	r4,-64(fp)
 4021310:	e0bff117 	ldw	r2,-60(fp)
 4021314:	10bfffc4 	addi	r2,r2,-1
 4021318:	e0bff115 	stw	r2,-60(fp)
 402131c:	003ff206 	br	40212e8 <__flash_rwdata_start+0xfffead90>
 4021320:	e13ff417 	ldw	r4,-48(fp)
 4021324:	20c00104 	addi	r3,r4,4
 4021328:	e0bfe117 	ldw	r2,-124(fp)
 402132c:	10c00215 	stw	r3,8(r2)
}
 4021330:	00002506 	br	40213c8 <_ZN2NNC1Ei+0x1ec>
 4021334:	e7001f04 	addi	fp,fp,124
 4021338:	e0bfe517 	ldw	r2,-108(fp)
 402133c:	e0bff715 	stw	r2,-36(fp)
 4021340:	e0bff517 	ldw	r2,-44(fp)
 4021344:	10001726 	beq	r2,zero,40213a4 <_ZN2NNC1Ei+0x1c8>
#include "stdio.h"

NN::NN(int new_n_layer) {
	// TODO Auto-generated constructor stub
	n_layer = new_n_layer;
	layer = new NNLayer[n_layer];
 4021348:	e0bff117 	ldw	r2,-60(fp)
 402134c:	e13ff317 	ldw	r4,-52(fp)
 4021350:	2087c83a 	sub	r3,r4,r2
 4021354:	00820034 	movhi	r2,2048
 4021358:	10bfffc4 	addi	r2,r2,-1
 402135c:	1885883a 	add	r2,r3,r2
 4021360:	1004917a 	slli	r2,r2,5
 4021364:	e0fff517 	ldw	r3,-44(fp)
 4021368:	1885883a 	add	r2,r3,r2
 402136c:	e0bff215 	stw	r2,-56(fp)
 4021370:	e13ff217 	ldw	r4,-56(fp)
 4021374:	e0bff517 	ldw	r2,-44(fp)
 4021378:	20800a26 	beq	r4,r2,40213a4 <_ZN2NNC1Ei+0x1c8>
 402137c:	e0fff217 	ldw	r3,-56(fp)
 4021380:	18fff804 	addi	r3,r3,-32
 4021384:	e0fff215 	stw	r3,-56(fp)
 4021388:	e13ff217 	ldw	r4,-56(fp)
 402138c:	20800017 	ldw	r2,0(r4)
 4021390:	10800017 	ldw	r2,0(r2)
 4021394:	e03fe415 	stw	zero,-112(fp)
 4021398:	e13ff217 	ldw	r4,-56(fp)
 402139c:	103ee83a 	callr	r2
 40213a0:	003ff306 	br	4021370 <__flash_rwdata_start+0xfffeae18>
 40213a4:	e0bff717 	ldw	r2,-36(fp)
 40213a8:	e0bff615 	stw	r2,-40(fp)
 40213ac:	e13ff417 	ldw	r4,-48(fp)
 40213b0:	40229f40 	call	40229f4 <_ZdaPv>
 40213b4:	e0fff617 	ldw	r3,-40(fp)
 40213b8:	00bfffc4 	movi	r2,-1
 40213bc:	e0bfe415 	stw	r2,-112(fp)
 40213c0:	1809883a 	mov	r4,r3
 40213c4:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 40213c8:	e0bfe304 	addi	r2,fp,-116
 40213cc:	1009883a 	mov	r4,r2
 40213d0:	40272b40 	call	40272b4 <_Unwind_SjLj_Unregister>
}
 40213d4:	e6fff804 	addi	sp,fp,-32
 40213d8:	dfc00917 	ldw	ra,36(sp)
 40213dc:	df000817 	ldw	fp,32(sp)
 40213e0:	ddc00717 	ldw	r23,28(sp)
 40213e4:	dd800617 	ldw	r22,24(sp)
 40213e8:	dd400517 	ldw	r21,20(sp)
 40213ec:	dd000417 	ldw	r20,16(sp)
 40213f0:	dcc00317 	ldw	r19,12(sp)
 40213f4:	dc800217 	ldw	r18,8(sp)
 40213f8:	dc400117 	ldw	r17,4(sp)
 40213fc:	dc000017 	ldw	r16,0(sp)
 4021400:	dec00a04 	addi	sp,sp,40
 4021404:	f800283a 	ret

04021408 <_ZN2NND1Ev>:

NN::~NN() {
 4021408:	f811883a 	mov	r8,ra
 402140c:	40346e80 	call	40346e8 <_mcount>
 4021410:	403f883a 	mov	ra,r8
 4021414:	defffd04 	addi	sp,sp,-12
 4021418:	dfc00215 	stw	ra,8(sp)
 402141c:	df000115 	stw	fp,4(sp)
 4021420:	df000104 	addi	fp,sp,4
 4021424:	e13fff15 	stw	r4,-4(fp)
 4021428:	00800034 	movhi	r2,0
 402142c:	10801404 	addi	r2,r2,80
 4021430:	e0ffff17 	ldw	r3,-4(fp)
 4021434:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub
}
 4021438:	0005883a 	mov	r2,zero
 402143c:	10000226 	beq	r2,zero,4021448 <_ZN2NND1Ev+0x40>
 4021440:	e13fff17 	ldw	r4,-4(fp)
 4021444:	4023b100 	call	4023b10 <_ZdlPv>
 4021448:	e037883a 	mov	sp,fp
 402144c:	dfc00117 	ldw	ra,4(sp)
 4021450:	df000017 	ldw	fp,0(sp)
 4021454:	dec00204 	addi	sp,sp,8
 4021458:	f800283a 	ret

0402145c <_ZN2NND0Ev>:
	// TODO Auto-generated constructor stub
	n_layer = new_n_layer;
	layer = new NNLayer[n_layer];
}

NN::~NN() {
 402145c:	f811883a 	mov	r8,ra
 4021460:	40346e80 	call	40346e8 <_mcount>
 4021464:	403f883a 	mov	ra,r8
 4021468:	defffd04 	addi	sp,sp,-12
 402146c:	dfc00215 	stw	ra,8(sp)
 4021470:	df000115 	stw	fp,4(sp)
 4021474:	df000104 	addi	fp,sp,4
 4021478:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
 402147c:	e13fff17 	ldw	r4,-4(fp)
 4021480:	40214080 	call	4021408 <_ZN2NND1Ev>
 4021484:	e13fff17 	ldw	r4,-4(fp)
 4021488:	4023b100 	call	4023b10 <_ZdlPv>
 402148c:	e037883a 	mov	sp,fp
 4021490:	dfc00117 	ldw	ra,4(sp)
 4021494:	df000017 	ldw	fp,0(sp)
 4021498:	dec00204 	addi	sp,sp,8
 402149c:	f800283a 	ret

040214a0 <_ZN2NN9propagateEPf>:

float * NN::propagate(float * source) {
 40214a0:	f811883a 	mov	r8,ra
 40214a4:	40346e80 	call	40346e8 <_mcount>
 40214a8:	403f883a 	mov	ra,r8
 40214ac:	defffb04 	addi	sp,sp,-20
 40214b0:	dfc00415 	stw	ra,16(sp)
 40214b4:	df000315 	stw	fp,12(sp)
 40214b8:	df000304 	addi	fp,sp,12
 40214bc:	e13ffe15 	stw	r4,-8(fp)
 40214c0:	e17fff15 	stw	r5,-4(fp)
	for (int i=0; i<n_layer; i++) {
 40214c4:	e03ffd15 	stw	zero,-12(fp)
 40214c8:	e0bffe17 	ldw	r2,-8(fp)
 40214cc:	10800117 	ldw	r2,4(r2)
 40214d0:	e0fffd17 	ldw	r3,-12(fp)
 40214d4:	18800d0e 	bge	r3,r2,402150c <_ZN2NN9propagateEPf+0x6c>
		source = layer[i].propagate(source);
 40214d8:	e0bffe17 	ldw	r2,-8(fp)
 40214dc:	10c00217 	ldw	r3,8(r2)
 40214e0:	e0bffd17 	ldw	r2,-12(fp)
 40214e4:	1004917a 	slli	r2,r2,5
 40214e8:	1885883a 	add	r2,r3,r2
 40214ec:	e17fff17 	ldw	r5,-4(fp)
 40214f0:	1009883a 	mov	r4,r2
 40214f4:	4021f000 	call	4021f00 <_ZN7NNLayer9propagateEPf>
 40214f8:	e0bfff15 	stw	r2,-4(fp)
NN::~NN() {
	// TODO Auto-generated destructor stub
}

float * NN::propagate(float * source) {
	for (int i=0; i<n_layer; i++) {
 40214fc:	e0bffd17 	ldw	r2,-12(fp)
 4021500:	10800044 	addi	r2,r2,1
 4021504:	e0bffd15 	stw	r2,-12(fp)
 4021508:	003fef06 	br	40214c8 <__flash_rwdata_start+0xfffeaf70>
		source = layer[i].propagate(source);
	}
	return source;
 402150c:	e0bfff17 	ldw	r2,-4(fp)
}
 4021510:	e037883a 	mov	sp,fp
 4021514:	dfc00117 	ldw	ra,4(sp)
 4021518:	df000017 	ldw	fp,0(sp)
 402151c:	dec00204 	addi	sp,sp,8
 4021520:	f800283a 	ret

04021524 <_ZN2NN17getMaxOutputIndexEv>:

int NN::getMaxOutputIndex() {
 4021524:	f811883a 	mov	r8,ra
 4021528:	40346e80 	call	40346e8 <_mcount>
 402152c:	403f883a 	mov	ra,r8
 4021530:	defffa04 	addi	sp,sp,-24
 4021534:	dfc00515 	stw	ra,20(sp)
 4021538:	df000415 	stw	fp,16(sp)
 402153c:	df000404 	addi	fp,sp,16
 4021540:	e13fff15 	stw	r4,-4(fp)
	float maxval = layer[n_layer-1].value[0];
 4021544:	e0bfff17 	ldw	r2,-4(fp)
 4021548:	10c00217 	ldw	r3,8(r2)
 402154c:	e0bfff17 	ldw	r2,-4(fp)
 4021550:	10800117 	ldw	r2,4(r2)
 4021554:	1009883a 	mov	r4,r2
 4021558:	00820034 	movhi	r2,2048
 402155c:	10bfffc4 	addi	r2,r2,-1
 4021560:	2085883a 	add	r2,r4,r2
 4021564:	1004917a 	slli	r2,r2,5
 4021568:	1885883a 	add	r2,r3,r2
 402156c:	10800717 	ldw	r2,28(r2)
 4021570:	10800017 	ldw	r2,0(r2)
 4021574:	e0bffc15 	stw	r2,-16(fp)
	int maxindex = 0;
 4021578:	e03ffd15 	stw	zero,-12(fp)
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
 402157c:	00800044 	movi	r2,1
 4021580:	e0bffe15 	stw	r2,-8(fp)
 4021584:	e0bfff17 	ldw	r2,-4(fp)
 4021588:	10c00217 	ldw	r3,8(r2)
 402158c:	e0bfff17 	ldw	r2,-4(fp)
 4021590:	10800117 	ldw	r2,4(r2)
 4021594:	1009883a 	mov	r4,r2
 4021598:	00820034 	movhi	r2,2048
 402159c:	10bfffc4 	addi	r2,r2,-1
 40215a0:	2085883a 	add	r2,r4,r2
 40215a4:	1004917a 	slli	r2,r2,5
 40215a8:	1885883a 	add	r2,r3,r2
 40215ac:	10800217 	ldw	r2,8(r2)
 40215b0:	e0fffe17 	ldw	r3,-8(fp)
 40215b4:	18802b0e 	bge	r3,r2,4021664 <_ZN2NN17getMaxOutputIndexEv+0x140>
		if( layer[n_layer-1].value[i] > maxval) {
 40215b8:	e0bfff17 	ldw	r2,-4(fp)
 40215bc:	10c00217 	ldw	r3,8(r2)
 40215c0:	e0bfff17 	ldw	r2,-4(fp)
 40215c4:	10800117 	ldw	r2,4(r2)
 40215c8:	1009883a 	mov	r4,r2
 40215cc:	00820034 	movhi	r2,2048
 40215d0:	10bfffc4 	addi	r2,r2,-1
 40215d4:	2085883a 	add	r2,r4,r2
 40215d8:	1004917a 	slli	r2,r2,5
 40215dc:	1885883a 	add	r2,r3,r2
 40215e0:	10c00717 	ldw	r3,28(r2)
 40215e4:	e0bffe17 	ldw	r2,-8(fp)
 40215e8:	1085883a 	add	r2,r2,r2
 40215ec:	1085883a 	add	r2,r2,r2
 40215f0:	1885883a 	add	r2,r3,r2
 40215f4:	10c00017 	ldw	r3,0(r2)
 40215f8:	e17ffc17 	ldw	r5,-16(fp)
 40215fc:	1809883a 	mov	r4,r3
 4021600:	40257540 	call	4025754 <__gesf2>
 4021604:	0080130e 	bge	zero,r2,4021654 <_ZN2NN17getMaxOutputIndexEv+0x130>
			maxval = layer[n_layer-1].value[i];
 4021608:	e0bfff17 	ldw	r2,-4(fp)
 402160c:	10c00217 	ldw	r3,8(r2)
 4021610:	e0bfff17 	ldw	r2,-4(fp)
 4021614:	10800117 	ldw	r2,4(r2)
 4021618:	1009883a 	mov	r4,r2
 402161c:	00820034 	movhi	r2,2048
 4021620:	10bfffc4 	addi	r2,r2,-1
 4021624:	2085883a 	add	r2,r4,r2
 4021628:	1004917a 	slli	r2,r2,5
 402162c:	1885883a 	add	r2,r3,r2
 4021630:	10c00717 	ldw	r3,28(r2)
 4021634:	e0bffe17 	ldw	r2,-8(fp)
 4021638:	1085883a 	add	r2,r2,r2
 402163c:	1085883a 	add	r2,r2,r2
 4021640:	1885883a 	add	r2,r3,r2
 4021644:	10800017 	ldw	r2,0(r2)
 4021648:	e0bffc15 	stw	r2,-16(fp)
			maxindex = i;
 402164c:	e0bffe17 	ldw	r2,-8(fp)
 4021650:	e0bffd15 	stw	r2,-12(fp)
}

int NN::getMaxOutputIndex() {
	float maxval = layer[n_layer-1].value[0];
	int maxindex = 0;
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
 4021654:	e0bffe17 	ldw	r2,-8(fp)
 4021658:	10800044 	addi	r2,r2,1
 402165c:	e0bffe15 	stw	r2,-8(fp)
 4021660:	003fc806 	br	4021584 <__flash_rwdata_start+0xfffeb02c>
		if( layer[n_layer-1].value[i] > maxval) {
			maxval = layer[n_layer-1].value[i];
			maxindex = i;
		}
	}
	return maxindex;
 4021664:	e0bffd17 	ldw	r2,-12(fp)
}
 4021668:	e037883a 	mov	sp,fp
 402166c:	dfc00117 	ldw	ra,4(sp)
 4021670:	df000017 	ldw	fp,0(sp)
 4021674:	dec00204 	addi	sp,sp,8
 4021678:	f800283a 	ret

0402167c <_ZN2NN17getMaxOutputValueEv>:

int NN::getMaxOutputValue() {
 402167c:	f811883a 	mov	r8,ra
 4021680:	40346e80 	call	40346e8 <_mcount>
 4021684:	403f883a 	mov	ra,r8
 4021688:	defffb04 	addi	sp,sp,-20
 402168c:	dfc00415 	stw	ra,16(sp)
 4021690:	df000315 	stw	fp,12(sp)
 4021694:	df000304 	addi	fp,sp,12
 4021698:	e13fff15 	stw	r4,-4(fp)
	float maxval = layer[n_layer-1].value[0];
 402169c:	e0bfff17 	ldw	r2,-4(fp)
 40216a0:	10c00217 	ldw	r3,8(r2)
 40216a4:	e0bfff17 	ldw	r2,-4(fp)
 40216a8:	10800117 	ldw	r2,4(r2)
 40216ac:	1009883a 	mov	r4,r2
 40216b0:	00820034 	movhi	r2,2048
 40216b4:	10bfffc4 	addi	r2,r2,-1
 40216b8:	2085883a 	add	r2,r4,r2
 40216bc:	1004917a 	slli	r2,r2,5
 40216c0:	1885883a 	add	r2,r3,r2
 40216c4:	10800717 	ldw	r2,28(r2)
 40216c8:	10800017 	ldw	r2,0(r2)
 40216cc:	e0bffd15 	stw	r2,-12(fp)
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
 40216d0:	00800044 	movi	r2,1
 40216d4:	e0bffe15 	stw	r2,-8(fp)
 40216d8:	e0bfff17 	ldw	r2,-4(fp)
 40216dc:	10c00217 	ldw	r3,8(r2)
 40216e0:	e0bfff17 	ldw	r2,-4(fp)
 40216e4:	10800117 	ldw	r2,4(r2)
 40216e8:	1009883a 	mov	r4,r2
 40216ec:	00820034 	movhi	r2,2048
 40216f0:	10bfffc4 	addi	r2,r2,-1
 40216f4:	2085883a 	add	r2,r4,r2
 40216f8:	1004917a 	slli	r2,r2,5
 40216fc:	1885883a 	add	r2,r3,r2
 4021700:	10800217 	ldw	r2,8(r2)
 4021704:	e0fffe17 	ldw	r3,-8(fp)
 4021708:	1880290e 	bge	r3,r2,40217b0 <_ZN2NN17getMaxOutputValueEv+0x134>
		if( layer[n_layer-1].value[i] > maxval) {
 402170c:	e0bfff17 	ldw	r2,-4(fp)
 4021710:	10c00217 	ldw	r3,8(r2)
 4021714:	e0bfff17 	ldw	r2,-4(fp)
 4021718:	10800117 	ldw	r2,4(r2)
 402171c:	1009883a 	mov	r4,r2
 4021720:	00820034 	movhi	r2,2048
 4021724:	10bfffc4 	addi	r2,r2,-1
 4021728:	2085883a 	add	r2,r4,r2
 402172c:	1004917a 	slli	r2,r2,5
 4021730:	1885883a 	add	r2,r3,r2
 4021734:	10c00717 	ldw	r3,28(r2)
 4021738:	e0bffe17 	ldw	r2,-8(fp)
 402173c:	1085883a 	add	r2,r2,r2
 4021740:	1085883a 	add	r2,r2,r2
 4021744:	1885883a 	add	r2,r3,r2
 4021748:	10c00017 	ldw	r3,0(r2)
 402174c:	e17ffd17 	ldw	r5,-12(fp)
 4021750:	1809883a 	mov	r4,r3
 4021754:	40257540 	call	4025754 <__gesf2>
 4021758:	0080110e 	bge	zero,r2,40217a0 <_ZN2NN17getMaxOutputValueEv+0x124>
			maxval = layer[n_layer-1].value[i];
 402175c:	e0bfff17 	ldw	r2,-4(fp)
 4021760:	10c00217 	ldw	r3,8(r2)
 4021764:	e0bfff17 	ldw	r2,-4(fp)
 4021768:	10800117 	ldw	r2,4(r2)
 402176c:	1009883a 	mov	r4,r2
 4021770:	00820034 	movhi	r2,2048
 4021774:	10bfffc4 	addi	r2,r2,-1
 4021778:	2085883a 	add	r2,r4,r2
 402177c:	1004917a 	slli	r2,r2,5
 4021780:	1885883a 	add	r2,r3,r2
 4021784:	10c00717 	ldw	r3,28(r2)
 4021788:	e0bffe17 	ldw	r2,-8(fp)
 402178c:	1085883a 	add	r2,r2,r2
 4021790:	1085883a 	add	r2,r2,r2
 4021794:	1885883a 	add	r2,r3,r2
 4021798:	10800017 	ldw	r2,0(r2)
 402179c:	e0bffd15 	stw	r2,-12(fp)
	return maxindex;
}

int NN::getMaxOutputValue() {
	float maxval = layer[n_layer-1].value[0];
	for(int i=1; i<layer[n_layer-1].n_neuron; i++) {
 40217a0:	e0bffe17 	ldw	r2,-8(fp)
 40217a4:	10800044 	addi	r2,r2,1
 40217a8:	e0bffe15 	stw	r2,-8(fp)
 40217ac:	003fca06 	br	40216d8 <__flash_rwdata_start+0xfffeb180>
		if( layer[n_layer-1].value[i] > maxval) {
			maxval = layer[n_layer-1].value[i];
		}
	}
	return maxval;
 40217b0:	e13ffd17 	ldw	r4,-12(fp)
 40217b4:	40261100 	call	4026110 <__fixsfsi>
}
 40217b8:	e037883a 	mov	sp,fp
 40217bc:	dfc00117 	ldw	ra,4(sp)
 40217c0:	df000017 	ldw	fp,0(sp)
 40217c4:	dec00204 	addi	sp,sp,8
 40217c8:	f800283a 	ret

040217cc <_ZN2NN5printEv>:

void NN::print() {
 40217cc:	f811883a 	mov	r8,ra
 40217d0:	40346e80 	call	40346e8 <_mcount>
 40217d4:	403f883a 	mov	ra,r8
 40217d8:	defffc04 	addi	sp,sp,-16
 40217dc:	dfc00315 	stw	ra,12(sp)
 40217e0:	df000215 	stw	fp,8(sp)
 40217e4:	df000204 	addi	fp,sp,8
 40217e8:	e13fff15 	stw	r4,-4(fp)
	for (int i=0; i<n_layer; i++) {
 40217ec:	e03ffe15 	stw	zero,-8(fp)
 40217f0:	e0bfff17 	ldw	r2,-4(fp)
 40217f4:	10800117 	ldw	r2,4(r2)
 40217f8:	e0fffe17 	ldw	r3,-8(fp)
 40217fc:	18800f0e 	bge	r3,r2,402183c <_ZN2NN5printEv+0x70>
		printf("Layer : %i\r\n",i);
 4021800:	e17ffe17 	ldw	r5,-8(fp)
 4021804:	01000034 	movhi	r4,0
 4021808:	21000704 	addi	r4,r4,28
 402180c:	40280e40 	call	40280e4 <printf>

		layer[i].print();
 4021810:	e0bfff17 	ldw	r2,-4(fp)
 4021814:	10c00217 	ldw	r3,8(r2)
 4021818:	e0bffe17 	ldw	r2,-8(fp)
 402181c:	1004917a 	slli	r2,r2,5
 4021820:	1885883a 	add	r2,r3,r2
 4021824:	1009883a 	mov	r4,r2
 4021828:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>
	}
	return maxval;
}

void NN::print() {
	for (int i=0; i<n_layer; i++) {
 402182c:	e0bffe17 	ldw	r2,-8(fp)
 4021830:	10800044 	addi	r2,r2,1
 4021834:	e0bffe15 	stw	r2,-8(fp)
 4021838:	003fed06 	br	40217f0 <__flash_rwdata_start+0xfffeb298>
		printf("Layer : %i\r\n",i);

		layer[i].print();
	}
}
 402183c:	0001883a 	nop
 4021840:	e037883a 	mov	sp,fp
 4021844:	dfc00117 	ldw	ra,4(sp)
 4021848:	df000017 	ldw	fp,0(sp)
 402184c:	dec00204 	addi	sp,sp,8
 4021850:	f800283a 	ret

04021854 <_ZN2NN12printOutputsEv>:

void NN::printOutputs() {
 4021854:	f811883a 	mov	r8,ra
 4021858:	40346e80 	call	40346e8 <_mcount>
 402185c:	403f883a 	mov	ra,r8
 4021860:	defffc04 	addi	sp,sp,-16
 4021864:	dfc00315 	stw	ra,12(sp)
 4021868:	df000215 	stw	fp,8(sp)
 402186c:	df000204 	addi	fp,sp,8
 4021870:	e13fff15 	stw	r4,-4(fp)

	for(int i=0; i<layer[n_layer-1].n_neuron; i++) {
 4021874:	e03ffe15 	stw	zero,-8(fp)
 4021878:	e0bfff17 	ldw	r2,-4(fp)
 402187c:	10c00217 	ldw	r3,8(r2)
 4021880:	e0bfff17 	ldw	r2,-4(fp)
 4021884:	10800117 	ldw	r2,4(r2)
 4021888:	1009883a 	mov	r4,r2
 402188c:	00820034 	movhi	r2,2048
 4021890:	10bfffc4 	addi	r2,r2,-1
 4021894:	2085883a 	add	r2,r4,r2
 4021898:	1004917a 	slli	r2,r2,5
 402189c:	1885883a 	add	r2,r3,r2
 40218a0:	10800217 	ldw	r2,8(r2)
 40218a4:	e0fffe17 	ldw	r3,-8(fp)
 40218a8:	18801e0e 	bge	r3,r2,4021924 <_ZN2NN12printOutputsEv+0xd0>
		printf("Neuron[%i]: %2.2f \r\n",i, layer[n_layer-1].value[i]);
 40218ac:	e0bfff17 	ldw	r2,-4(fp)
 40218b0:	10c00217 	ldw	r3,8(r2)
 40218b4:	e0bfff17 	ldw	r2,-4(fp)
 40218b8:	10800117 	ldw	r2,4(r2)
 40218bc:	1009883a 	mov	r4,r2
 40218c0:	00820034 	movhi	r2,2048
 40218c4:	10bfffc4 	addi	r2,r2,-1
 40218c8:	2085883a 	add	r2,r4,r2
 40218cc:	1004917a 	slli	r2,r2,5
 40218d0:	1885883a 	add	r2,r3,r2
 40218d4:	10c00717 	ldw	r3,28(r2)
 40218d8:	e0bffe17 	ldw	r2,-8(fp)
 40218dc:	1085883a 	add	r2,r2,r2
 40218e0:	1085883a 	add	r2,r2,r2
 40218e4:	1885883a 	add	r2,r3,r2
 40218e8:	10c00017 	ldw	r3,0(r2)
 40218ec:	1809883a 	mov	r4,r3
 40218f0:	4026d940 	call	4026d94 <__extendsfdf2>
 40218f4:	1009883a 	mov	r4,r2
 40218f8:	180b883a 	mov	r5,r3
 40218fc:	200d883a 	mov	r6,r4
 4021900:	280f883a 	mov	r7,r5
 4021904:	e17ffe17 	ldw	r5,-8(fp)
 4021908:	01000034 	movhi	r4,0
 402190c:	21000b04 	addi	r4,r4,44
 4021910:	40280e40 	call	40280e4 <printf>
	}
}

void NN::printOutputs() {

	for(int i=0; i<layer[n_layer-1].n_neuron; i++) {
 4021914:	e0bffe17 	ldw	r2,-8(fp)
 4021918:	10800044 	addi	r2,r2,1
 402191c:	e0bffe15 	stw	r2,-8(fp)
 4021920:	003fd506 	br	4021878 <__flash_rwdata_start+0xfffeb320>
		printf("Neuron[%i]: %2.2f \r\n",i, layer[n_layer-1].value[i]);
	}
	printf("\r\n");
 4021924:	01000034 	movhi	r4,0
 4021928:	21001104 	addi	r4,r4,68
 402192c:	40282300 	call	4028230 <puts>
}
 4021930:	0001883a 	nop
 4021934:	e037883a 	mov	sp,fp
 4021938:	dfc00117 	ldw	ra,4(sp)
 402193c:	df000017 	ldw	fp,0(sp)
 4021940:	dec00204 	addi	sp,sp,8
 4021944:	f800283a 	ret

04021948 <_ZN7NNLayerC1Ev>:

#define MAKE_TERNARY_THRESHOLD 0.3

int my_debug = 0;

NNLayer::NNLayer() {
 4021948:	f811883a 	mov	r8,ra
 402194c:	40346e80 	call	40346e8 <_mcount>
 4021950:	403f883a 	mov	ra,r8
 4021954:	defffe04 	addi	sp,sp,-8
 4021958:	df000115 	stw	fp,4(sp)
 402195c:	df000104 	addi	fp,sp,4
 4021960:	e13fff15 	stw	r4,-4(fp)
 4021964:	00800034 	movhi	r2,0
 4021968:	10803304 	addi	r2,r2,204
 402196c:	e0ffff17 	ldw	r3,-4(fp)
 4021970:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	n_input = 0;
 4021974:	e0bfff17 	ldw	r2,-4(fp)
 4021978:	10000115 	stw	zero,4(r2)
	n_neuron = 0;
 402197c:	e0bfff17 	ldw	r2,-4(fp)
 4021980:	10000215 	stw	zero,8(r2)
	n_input_per_neuron = 0;
 4021984:	e0bfff17 	ldw	r2,-4(fp)
 4021988:	10000315 	stw	zero,12(r2)
	LUT_size = 0;
 402198c:	e0bfff17 	ldw	r2,-4(fp)
 4021990:	10000415 	stw	zero,16(r2)

	LUT_array = 0;
 4021994:	e0bfff17 	ldw	r2,-4(fp)
 4021998:	10000515 	stw	zero,20(r2)
	pos_array = 0;
 402199c:	e0bfff17 	ldw	r2,-4(fp)
 40219a0:	10000615 	stw	zero,24(r2)
	value = 0;
 40219a4:	e0bfff17 	ldw	r2,-4(fp)
 40219a8:	10000715 	stw	zero,28(r2)
}
 40219ac:	0001883a 	nop
 40219b0:	e037883a 	mov	sp,fp
 40219b4:	df000017 	ldw	fp,0(sp)
 40219b8:	dec00104 	addi	sp,sp,4
 40219bc:	f800283a 	ret

040219c0 <_ZN7NNLayerC1Eiii>:

NNLayer::NNLayer(int new_n_input, int new_n_neuron, int nipn) {
 40219c0:	f811883a 	mov	r8,ra
 40219c4:	40346e80 	call	40346e8 <_mcount>
 40219c8:	403f883a 	mov	ra,r8
 40219cc:	defffa04 	addi	sp,sp,-24
 40219d0:	dfc00515 	stw	ra,20(sp)
 40219d4:	df000415 	stw	fp,16(sp)
 40219d8:	df000404 	addi	fp,sp,16
 40219dc:	e13ffc15 	stw	r4,-16(fp)
 40219e0:	e17ffd15 	stw	r5,-12(fp)
 40219e4:	e1bffe15 	stw	r6,-8(fp)
 40219e8:	e1ffff15 	stw	r7,-4(fp)
 40219ec:	00800034 	movhi	r2,0
 40219f0:	10803304 	addi	r2,r2,204
 40219f4:	e0fffc17 	ldw	r3,-16(fp)
 40219f8:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub
	init(new_n_input, new_n_neuron, nipn);
 40219fc:	e1ffff17 	ldw	r7,-4(fp)
 4021a00:	e1bffe17 	ldw	r6,-8(fp)
 4021a04:	e17ffd17 	ldw	r5,-12(fp)
 4021a08:	e13ffc17 	ldw	r4,-16(fp)
 4021a0c:	4021a280 	call	4021a28 <_ZN7NNLayer4initEiii>
}
 4021a10:	0001883a 	nop
 4021a14:	e037883a 	mov	sp,fp
 4021a18:	dfc00117 	ldw	ra,4(sp)
 4021a1c:	df000017 	ldw	fp,0(sp)
 4021a20:	dec00204 	addi	sp,sp,8
 4021a24:	f800283a 	ret

04021a28 <_ZN7NNLayer4initEiii>:

void NNLayer::init(int new_n_input, int new_n_neuron, int nipn) {
 4021a28:	f811883a 	mov	r8,ra
 4021a2c:	40346e80 	call	40346e8 <_mcount>
 4021a30:	403f883a 	mov	ra,r8
 4021a34:	defffa04 	addi	sp,sp,-24
 4021a38:	dfc00515 	stw	ra,20(sp)
 4021a3c:	df000415 	stw	fp,16(sp)
 4021a40:	df000404 	addi	fp,sp,16
 4021a44:	e13ffc15 	stw	r4,-16(fp)
 4021a48:	e17ffd15 	stw	r5,-12(fp)
 4021a4c:	e1bffe15 	stw	r6,-8(fp)
 4021a50:	e1ffff15 	stw	r7,-4(fp)
	// TODO Auto-generated constructor stub
	n_input = new_n_input;
 4021a54:	e0bffc17 	ldw	r2,-16(fp)
 4021a58:	e0fffd17 	ldw	r3,-12(fp)
 4021a5c:	10c00115 	stw	r3,4(r2)
	n_neuron = new_n_neuron;
 4021a60:	e0bffc17 	ldw	r2,-16(fp)
 4021a64:	e0fffe17 	ldw	r3,-8(fp)
 4021a68:	10c00215 	stw	r3,8(r2)
	n_input_per_neuron = nipn;
 4021a6c:	e0bffc17 	ldw	r2,-16(fp)
 4021a70:	e0ffff17 	ldw	r3,-4(fp)
 4021a74:	10c00315 	stw	r3,12(r2)
	LUT_size = ((1<<n_input_per_neuron) + 7)/8;
 4021a78:	e0bffc17 	ldw	r2,-16(fp)
 4021a7c:	10800317 	ldw	r2,12(r2)
 4021a80:	00c00044 	movi	r3,1
 4021a84:	1884983a 	sll	r2,r3,r2
 4021a88:	108001c4 	addi	r2,r2,7
 4021a8c:	1000010e 	bge	r2,zero,4021a94 <_ZN7NNLayer4initEiii+0x6c>
 4021a90:	108001c4 	addi	r2,r2,7
 4021a94:	1005d0fa 	srai	r2,r2,3
 4021a98:	1007883a 	mov	r3,r2
 4021a9c:	e0bffc17 	ldw	r2,-16(fp)
 4021aa0:	10c00415 	stw	r3,16(r2)
	LUT_array = new unsigned char[n_neuron*LUT_size];
 4021aa4:	e0bffc17 	ldw	r2,-16(fp)
 4021aa8:	10c00217 	ldw	r3,8(r2)
 4021aac:	e0bffc17 	ldw	r2,-16(fp)
 4021ab0:	10800417 	ldw	r2,16(r2)
 4021ab4:	1885383a 	mul	r2,r3,r2
 4021ab8:	1009883a 	mov	r4,r2
 4021abc:	40228d80 	call	40228d8 <_Znaj>
 4021ac0:	1007883a 	mov	r3,r2
 4021ac4:	e0bffc17 	ldw	r2,-16(fp)
 4021ac8:	10c00515 	stw	r3,20(r2)
	pos_array = new int[n_neuron*n_input_per_neuron];
 4021acc:	e0bffc17 	ldw	r2,-16(fp)
 4021ad0:	10c00217 	ldw	r3,8(r2)
 4021ad4:	e0bffc17 	ldw	r2,-16(fp)
 4021ad8:	10800317 	ldw	r2,12(r2)
 4021adc:	1885383a 	mul	r2,r3,r2
 4021ae0:	00c7f034 	movhi	r3,8128
 4021ae4:	18800336 	bltu	r3,r2,4021af4 <_ZN7NNLayer4initEiii+0xcc>
 4021ae8:	1085883a 	add	r2,r2,r2
 4021aec:	1085883a 	add	r2,r2,r2
 4021af0:	00000106 	br	4021af8 <_ZN7NNLayer4initEiii+0xd0>
 4021af4:	00bfffc4 	movi	r2,-1
 4021af8:	1009883a 	mov	r4,r2
 4021afc:	40228d80 	call	40228d8 <_Znaj>
 4021b00:	1007883a 	mov	r3,r2
 4021b04:	e0bffc17 	ldw	r2,-16(fp)
 4021b08:	10c00615 	stw	r3,24(r2)
	value = new float[n_neuron];
 4021b0c:	e0bffc17 	ldw	r2,-16(fp)
 4021b10:	10800217 	ldw	r2,8(r2)
 4021b14:	00c7f034 	movhi	r3,8128
 4021b18:	18800336 	bltu	r3,r2,4021b28 <_ZN7NNLayer4initEiii+0x100>
 4021b1c:	1085883a 	add	r2,r2,r2
 4021b20:	1085883a 	add	r2,r2,r2
 4021b24:	00000106 	br	4021b2c <_ZN7NNLayer4initEiii+0x104>
 4021b28:	00bfffc4 	movi	r2,-1
 4021b2c:	1009883a 	mov	r4,r2
 4021b30:	40228d80 	call	40228d8 <_Znaj>
 4021b34:	1007883a 	mov	r3,r2
 4021b38:	e0bffc17 	ldw	r2,-16(fp)
 4021b3c:	10c00715 	stw	r3,28(r2)
}
 4021b40:	0001883a 	nop
 4021b44:	e037883a 	mov	sp,fp
 4021b48:	dfc00117 	ldw	ra,4(sp)
 4021b4c:	df000017 	ldw	fp,0(sp)
 4021b50:	dec00204 	addi	sp,sp,8
 4021b54:	f800283a 	ret

04021b58 <_Z10simpleRandv>:

unsigned int simpleRand() {
 4021b58:	f811883a 	mov	r8,ra
 4021b5c:	40346e80 	call	40346e8 <_mcount>
 4021b60:	403f883a 	mov	ra,r8
 4021b64:	defffd04 	addi	sp,sp,-12
 4021b68:	dfc00215 	stw	ra,8(sp)
 4021b6c:	df000115 	stw	fp,4(sp)
 4021b70:	df000104 	addi	fp,sp,4
	unsigned int result = rand();
 4021b74:	40282740 	call	4028274 <rand>
 4021b78:	e0bfff15 	stw	r2,-4(fp)
	result <<= 16;
 4021b7c:	e0bfff17 	ldw	r2,-4(fp)
 4021b80:	1004943a 	slli	r2,r2,16
 4021b84:	e0bfff15 	stw	r2,-4(fp)
	result ^=rand();
 4021b88:	40282740 	call	4028274 <rand>
 4021b8c:	1007883a 	mov	r3,r2
 4021b90:	e0bfff17 	ldw	r2,-4(fp)
 4021b94:	10c4f03a 	xor	r2,r2,r3
 4021b98:	e0bfff15 	stw	r2,-4(fp)

	return result;
 4021b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 4021ba0:	e037883a 	mov	sp,fp
 4021ba4:	dfc00117 	ldw	ra,4(sp)
 4021ba8:	df000017 	ldw	fp,0(sp)
 4021bac:	dec00204 	addi	sp,sp,8
 4021bb0:	f800283a 	ret

04021bb4 <_ZN7NNLayer15rand_FloatRangeEff>:

float NNLayer::rand_FloatRange(float a, float b) {
 4021bb4:	f811883a 	mov	r8,ra
 4021bb8:	40346e80 	call	40346e8 <_mcount>
 4021bbc:	403f883a 	mov	ra,r8
 4021bc0:	defff904 	addi	sp,sp,-28
 4021bc4:	dfc00615 	stw	ra,24(sp)
 4021bc8:	df000515 	stw	fp,20(sp)
 4021bcc:	dc000415 	stw	r16,16(sp)
 4021bd0:	df000504 	addi	fp,sp,20
 4021bd4:	e13ffc15 	stw	r4,-16(fp)
 4021bd8:	e17ffd15 	stw	r5,-12(fp)
 4021bdc:	e1bffe15 	stw	r6,-8(fp)
	float result = ((b-a)*((float)simpleRand()/0xFFFFFFFF))+a;
 4021be0:	e17ffd17 	ldw	r5,-12(fp)
 4021be4:	e13ffe17 	ldw	r4,-8(fp)
 4021be8:	4025c200 	call	4025c20 <__subsf3>
 4021bec:	1007883a 	mov	r3,r2
 4021bf0:	1821883a 	mov	r16,r3
 4021bf4:	4021b580 	call	4021b58 <_Z10simpleRandv>
 4021bf8:	1009883a 	mov	r4,r2
 4021bfc:	40262bc0 	call	40262bc <__floatunsisf>
 4021c00:	1007883a 	mov	r3,r2
 4021c04:	0153e034 	movhi	r5,20352
 4021c08:	1809883a 	mov	r4,r3
 4021c0c:	40252880 	call	4025288 <__divsf3>
 4021c10:	1007883a 	mov	r3,r2
 4021c14:	1805883a 	mov	r2,r3
 4021c18:	100b883a 	mov	r5,r2
 4021c1c:	8009883a 	mov	r4,r16
 4021c20:	40258180 	call	4025818 <__mulsf3>
 4021c24:	1007883a 	mov	r3,r2
 4021c28:	1805883a 	mov	r2,r3
 4021c2c:	e17ffd17 	ldw	r5,-12(fp)
 4021c30:	1009883a 	mov	r4,r2
 4021c34:	4024db40 	call	4024db4 <__addsf3>
 4021c38:	1007883a 	mov	r3,r2
 4021c3c:	e0fffb15 	stw	r3,-20(fp)
	return result;
 4021c40:	e0bffb17 	ldw	r2,-20(fp)
 4021c44:	1007883a 	mov	r3,r2
}
 4021c48:	1805883a 	mov	r2,r3
 4021c4c:	e6ffff04 	addi	sp,fp,-4
 4021c50:	dfc00217 	ldw	ra,8(sp)
 4021c54:	df000117 	ldw	fp,4(sp)
 4021c58:	dc000017 	ldw	r16,0(sp)
 4021c5c:	dec00304 	addi	sp,sp,12
 4021c60:	f800283a 	ret

04021c64 <_ZN7NNLayer6MYrandEi>:

int NNLayer::MYrand(int maxval) {
 4021c64:	f811883a 	mov	r8,ra
 4021c68:	40346e80 	call	40346e8 <_mcount>
 4021c6c:	403f883a 	mov	ra,r8
 4021c70:	defffb04 	addi	sp,sp,-20
 4021c74:	dfc00415 	stw	ra,16(sp)
 4021c78:	df000315 	stw	fp,12(sp)
 4021c7c:	df000304 	addi	fp,sp,12
 4021c80:	e13ffe15 	stw	r4,-8(fp)
 4021c84:	e17fff15 	stw	r5,-4(fp)
	int result = simpleRand()%maxval;
 4021c88:	4021b580 	call	4021b58 <_Z10simpleRandv>
 4021c8c:	1007883a 	mov	r3,r2
 4021c90:	e0bfff17 	ldw	r2,-4(fp)
 4021c94:	100b883a 	mov	r5,r2
 4021c98:	1809883a 	mov	r4,r3
 4021c9c:	4024d540 	call	4024d54 <__umodsi3>
 4021ca0:	e0bffd15 	stw	r2,-12(fp)
	return result;
 4021ca4:	e0bffd17 	ldw	r2,-12(fp)
}
 4021ca8:	e037883a 	mov	sp,fp
 4021cac:	dfc00117 	ldw	ra,4(sp)
 4021cb0:	df000017 	ldw	fp,0(sp)
 4021cb4:	dec00204 	addi	sp,sp,8
 4021cb8:	f800283a 	ret

04021cbc <_ZN7NNLayer11random_initEiii>:

void NNLayer::random_init(int new_n_input, int new_n_neuron, int nipn) {
 4021cbc:	f811883a 	mov	r8,ra
 4021cc0:	40346e80 	call	40346e8 <_mcount>
 4021cc4:	403f883a 	mov	ra,r8
 4021cc8:	defff604 	addi	sp,sp,-40
 4021ccc:	dfc00915 	stw	ra,36(sp)
 4021cd0:	df000815 	stw	fp,32(sp)
 4021cd4:	dc000715 	stw	r16,28(sp)
 4021cd8:	df000804 	addi	fp,sp,32
 4021cdc:	e13ffb15 	stw	r4,-20(fp)
 4021ce0:	e17ffc15 	stw	r5,-16(fp)
 4021ce4:	e1bffd15 	stw	r6,-12(fp)
 4021ce8:	e1fffe15 	stw	r7,-8(fp)
	// TODO Auto-generated constructor stub
	init(new_n_input, new_n_neuron, nipn);
 4021cec:	e1fffe17 	ldw	r7,-8(fp)
 4021cf0:	e1bffd17 	ldw	r6,-12(fp)
 4021cf4:	e17ffc17 	ldw	r5,-16(fp)
 4021cf8:	e13ffb17 	ldw	r4,-20(fp)
 4021cfc:	4021a280 	call	4021a28 <_ZN7NNLayer4initEiii>

	for (int i=0; i<n_neuron * n_input_per_neuron; i++) {
 4021d00:	e03ff815 	stw	zero,-32(fp)
 4021d04:	e0bffb17 	ldw	r2,-20(fp)
 4021d08:	10c00217 	ldw	r3,8(r2)
 4021d0c:	e0bffb17 	ldw	r2,-20(fp)
 4021d10:	10800317 	ldw	r2,12(r2)
 4021d14:	1885383a 	mul	r2,r3,r2
 4021d18:	e0fff817 	ldw	r3,-32(fp)
 4021d1c:	1880100e 	bge	r3,r2,4021d60 <_ZN7NNLayer11random_initEiii+0xa4>
		pos_array[i] = MYrand(n_input);
 4021d20:	e0bffb17 	ldw	r2,-20(fp)
 4021d24:	10c00617 	ldw	r3,24(r2)
 4021d28:	e0bff817 	ldw	r2,-32(fp)
 4021d2c:	1085883a 	add	r2,r2,r2
 4021d30:	1085883a 	add	r2,r2,r2
 4021d34:	18a1883a 	add	r16,r3,r2
 4021d38:	e0bffb17 	ldw	r2,-20(fp)
 4021d3c:	10800117 	ldw	r2,4(r2)
 4021d40:	100b883a 	mov	r5,r2
 4021d44:	e13ffb17 	ldw	r4,-20(fp)
 4021d48:	4021c640 	call	4021c64 <_ZN7NNLayer6MYrandEi>
 4021d4c:	80800015 	stw	r2,0(r16)

void NNLayer::random_init(int new_n_input, int new_n_neuron, int nipn) {
	// TODO Auto-generated constructor stub
	init(new_n_input, new_n_neuron, nipn);

	for (int i=0; i<n_neuron * n_input_per_neuron; i++) {
 4021d50:	e0bff817 	ldw	r2,-32(fp)
 4021d54:	10800044 	addi	r2,r2,1
 4021d58:	e0bff815 	stw	r2,-32(fp)
 4021d5c:	003fe906 	br	4021d04 <__flash_rwdata_start+0xfffeb7ac>
		pos_array[i] = MYrand(n_input);
	}

	for (int i=0; i<n_neuron * LUT_size; i++) {
 4021d60:	e03ff915 	stw	zero,-28(fp)
 4021d64:	e0bffb17 	ldw	r2,-20(fp)
 4021d68:	10c00217 	ldw	r3,8(r2)
 4021d6c:	e0bffb17 	ldw	r2,-20(fp)
 4021d70:	10800417 	ldw	r2,16(r2)
 4021d74:	1885383a 	mul	r2,r3,r2
 4021d78:	e0fff917 	ldw	r3,-28(fp)
 4021d7c:	18800c0e 	bge	r3,r2,4021db0 <_ZN7NNLayer11random_initEiii+0xf4>
		LUT_array[i] = MYrand(0x100);
 4021d80:	e0bffb17 	ldw	r2,-20(fp)
 4021d84:	10c00517 	ldw	r3,20(r2)
 4021d88:	e0bff917 	ldw	r2,-28(fp)
 4021d8c:	18a1883a 	add	r16,r3,r2
 4021d90:	01404004 	movi	r5,256
 4021d94:	e13ffb17 	ldw	r4,-20(fp)
 4021d98:	4021c640 	call	4021c64 <_ZN7NNLayer6MYrandEi>
 4021d9c:	80800005 	stb	r2,0(r16)

	for (int i=0; i<n_neuron * n_input_per_neuron; i++) {
		pos_array[i] = MYrand(n_input);
	}

	for (int i=0; i<n_neuron * LUT_size; i++) {
 4021da0:	e0bff917 	ldw	r2,-28(fp)
 4021da4:	10800044 	addi	r2,r2,1
 4021da8:	e0bff915 	stw	r2,-28(fp)
 4021dac:	003fed06 	br	4021d64 <__flash_rwdata_start+0xfffeb80c>
		LUT_array[i] = MYrand(0x100);
	}

	for (int i=0; i<n_neuron; i++) {
 4021db0:	e03ffa15 	stw	zero,-24(fp)
 4021db4:	e0bffb17 	ldw	r2,-20(fp)
 4021db8:	10800217 	ldw	r2,8(r2)
 4021dbc:	e0fffa17 	ldw	r3,-24(fp)
 4021dc0:	18800c0e 	bge	r3,r2,4021df4 <_ZN7NNLayer11random_initEiii+0x138>
		value[i] = -1;
 4021dc4:	e0bffb17 	ldw	r2,-20(fp)
 4021dc8:	10c00717 	ldw	r3,28(r2)
 4021dcc:	e0bffa17 	ldw	r2,-24(fp)
 4021dd0:	1085883a 	add	r2,r2,r2
 4021dd4:	1085883a 	add	r2,r2,r2
 4021dd8:	1885883a 	add	r2,r3,r2
 4021ddc:	00efe034 	movhi	r3,49024
 4021de0:	10c00015 	stw	r3,0(r2)

	for (int i=0; i<n_neuron * LUT_size; i++) {
		LUT_array[i] = MYrand(0x100);
	}

	for (int i=0; i<n_neuron; i++) {
 4021de4:	e0bffa17 	ldw	r2,-24(fp)
 4021de8:	10800044 	addi	r2,r2,1
 4021dec:	e0bffa15 	stw	r2,-24(fp)
 4021df0:	003ff006 	br	4021db4 <__flash_rwdata_start+0xfffeb85c>
		value[i] = -1;
	}

}
 4021df4:	0001883a 	nop
 4021df8:	e6ffff04 	addi	sp,fp,-4
 4021dfc:	dfc00217 	ldw	ra,8(sp)
 4021e00:	df000117 	ldw	fp,4(sp)
 4021e04:	dc000017 	ldw	r16,0(sp)
 4021e08:	dec00304 	addi	sp,sp,12
 4021e0c:	f800283a 	ret

04021e10 <_ZN7NNLayer9demo_initEiiii>:

void NNLayer::demo_init(int layer, int new_n_input, int new_n_neuron, int nipn) {
 4021e10:	f811883a 	mov	r8,ra
 4021e14:	40346e80 	call	40346e8 <_mcount>
 4021e18:	403f883a 	mov	ra,r8
 4021e1c:	defffa04 	addi	sp,sp,-24
 4021e20:	dfc00515 	stw	ra,20(sp)
 4021e24:	df000415 	stw	fp,16(sp)
 4021e28:	df000404 	addi	fp,sp,16
 4021e2c:	e13ffc15 	stw	r4,-16(fp)
 4021e30:	e17ffd15 	stw	r5,-12(fp)
 4021e34:	e1bffe15 	stw	r6,-8(fp)
 4021e38:	e1ffff15 	stw	r7,-4(fp)
	// TODO Auto-generated constructor stub
	random_init(new_n_input, new_n_neuron, nipn);
 4021e3c:	e1c00217 	ldw	r7,8(fp)
 4021e40:	e1bfff17 	ldw	r6,-4(fp)
 4021e44:	e17ffe17 	ldw	r5,-8(fp)
 4021e48:	e13ffc17 	ldw	r4,-16(fp)
 4021e4c:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>
}
 4021e50:	0001883a 	nop
 4021e54:	e037883a 	mov	sp,fp
 4021e58:	dfc00117 	ldw	ra,4(sp)
 4021e5c:	df000017 	ldw	fp,0(sp)
 4021e60:	dec00204 	addi	sp,sp,8
 4021e64:	f800283a 	ret

04021e68 <_ZN7NNLayerD1Ev>:

NNLayer::~NNLayer() {
 4021e68:	f811883a 	mov	r8,ra
 4021e6c:	40346e80 	call	40346e8 <_mcount>
 4021e70:	403f883a 	mov	ra,r8
 4021e74:	defffd04 	addi	sp,sp,-12
 4021e78:	dfc00215 	stw	ra,8(sp)
 4021e7c:	df000115 	stw	fp,4(sp)
 4021e80:	df000104 	addi	fp,sp,4
 4021e84:	e13fff15 	stw	r4,-4(fp)
 4021e88:	00800034 	movhi	r2,0
 4021e8c:	10803304 	addi	r2,r2,204
 4021e90:	e0ffff17 	ldw	r3,-4(fp)
 4021e94:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub
}
 4021e98:	0005883a 	mov	r2,zero
 4021e9c:	10000226 	beq	r2,zero,4021ea8 <_ZN7NNLayerD1Ev+0x40>
 4021ea0:	e13fff17 	ldw	r4,-4(fp)
 4021ea4:	4023b100 	call	4023b10 <_ZdlPv>
 4021ea8:	e037883a 	mov	sp,fp
 4021eac:	dfc00117 	ldw	ra,4(sp)
 4021eb0:	df000017 	ldw	fp,0(sp)
 4021eb4:	dec00204 	addi	sp,sp,8
 4021eb8:	f800283a 	ret

04021ebc <_ZN7NNLayerD0Ev>:
void NNLayer::demo_init(int layer, int new_n_input, int new_n_neuron, int nipn) {
	// TODO Auto-generated constructor stub
	random_init(new_n_input, new_n_neuron, nipn);
}

NNLayer::~NNLayer() {
 4021ebc:	f811883a 	mov	r8,ra
 4021ec0:	40346e80 	call	40346e8 <_mcount>
 4021ec4:	403f883a 	mov	ra,r8
 4021ec8:	defffd04 	addi	sp,sp,-12
 4021ecc:	dfc00215 	stw	ra,8(sp)
 4021ed0:	df000115 	stw	fp,4(sp)
 4021ed4:	df000104 	addi	fp,sp,4
 4021ed8:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
 4021edc:	e13fff17 	ldw	r4,-4(fp)
 4021ee0:	4021e680 	call	4021e68 <_ZN7NNLayerD1Ev>
 4021ee4:	e13fff17 	ldw	r4,-4(fp)
 4021ee8:	4023b100 	call	4023b10 <_ZdlPv>
 4021eec:	e037883a 	mov	sp,fp
 4021ef0:	dfc00117 	ldw	ra,4(sp)
 4021ef4:	df000017 	ldw	fp,0(sp)
 4021ef8:	dec00204 	addi	sp,sp,8
 4021efc:	f800283a 	ret

04021f00 <_ZN7NNLayer9propagateEPf>:

float * NNLayer::propagate(float * source) {
 4021f00:	f811883a 	mov	r8,ra
 4021f04:	40346e80 	call	40346e8 <_mcount>
 4021f08:	403f883a 	mov	ra,r8
 4021f0c:	defff504 	addi	sp,sp,-44
 4021f10:	dfc00a15 	stw	ra,40(sp)
 4021f14:	df000915 	stw	fp,36(sp)
 4021f18:	dc000815 	stw	r16,32(sp)
 4021f1c:	df000904 	addi	fp,sp,36
 4021f20:	e13ffd15 	stw	r4,-12(fp)
 4021f24:	e17ffe15 	stw	r5,-8(fp)
	// TODO Auto-generated constructor stub
	int i;

	if (my_debug) for (i=0; i<n_input; i++) {
 4021f28:	d0a02117 	ldw	r2,-32636(gp)
 4021f2c:	10001a26 	beq	r2,zero,4021f98 <_ZN7NNLayer9propagateEPf+0x98>
 4021f30:	e03ff815 	stw	zero,-32(fp)
 4021f34:	e0bffd17 	ldw	r2,-12(fp)
 4021f38:	10800117 	ldw	r2,4(r2)
 4021f3c:	e0fff817 	ldw	r3,-32(fp)
 4021f40:	1880150e 	bge	r3,r2,4021f98 <_ZN7NNLayer9propagateEPf+0x98>
		printf("Input %i = %f\r\n", i, source[i]);
 4021f44:	e0bff817 	ldw	r2,-32(fp)
 4021f48:	1085883a 	add	r2,r2,r2
 4021f4c:	1085883a 	add	r2,r2,r2
 4021f50:	1007883a 	mov	r3,r2
 4021f54:	e0bffe17 	ldw	r2,-8(fp)
 4021f58:	10c5883a 	add	r2,r2,r3
 4021f5c:	10c00017 	ldw	r3,0(r2)
 4021f60:	1809883a 	mov	r4,r3
 4021f64:	4026d940 	call	4026d94 <__extendsfdf2>
 4021f68:	1009883a 	mov	r4,r2
 4021f6c:	180b883a 	mov	r5,r3
 4021f70:	200d883a 	mov	r6,r4
 4021f74:	280f883a 	mov	r7,r5
 4021f78:	e17ff817 	ldw	r5,-32(fp)
 4021f7c:	01000034 	movhi	r4,0
 4021f80:	21001604 	addi	r4,r4,88
 4021f84:	40280e40 	call	40280e4 <printf>

float * NNLayer::propagate(float * source) {
	// TODO Auto-generated constructor stub
	int i;

	if (my_debug) for (i=0; i<n_input; i++) {
 4021f88:	e0bff817 	ldw	r2,-32(fp)
 4021f8c:	10800044 	addi	r2,r2,1
 4021f90:	e0bff815 	stw	r2,-32(fp)
 4021f94:	003fe706 	br	4021f34 <__flash_rwdata_start+0xfffeb9dc>
		printf("Input %i = %f\r\n", i, source[i]);
	}

	int * current_pos = pos_array;
 4021f98:	e0bffd17 	ldw	r2,-12(fp)
 4021f9c:	10800617 	ldw	r2,24(r2)
 4021fa0:	e0bff915 	stw	r2,-28(fp)
	for (int i=0; i<n_neuron; i++) {
 4021fa4:	e03ffa15 	stw	zero,-24(fp)
 4021fa8:	e0bffd17 	ldw	r2,-12(fp)
 4021fac:	10800217 	ldw	r2,8(r2)
 4021fb0:	e0fffa17 	ldw	r3,-24(fp)
 4021fb4:	1880540e 	bge	r3,r2,4022108 <_ZN7NNLayer9propagateEPf+0x208>
		int LUT_Address = 0;
 4021fb8:	e03ffb15 	stw	zero,-20(fp)
		for (int j = 0; j<n_input_per_neuron; j++) {
 4021fbc:	e03ffc15 	stw	zero,-16(fp)
 4021fc0:	e0bffd17 	ldw	r2,-12(fp)
 4021fc4:	10800317 	ldw	r2,12(r2)
 4021fc8:	e0fffc17 	ldw	r3,-16(fp)
 4021fcc:	18801c0e 	bge	r3,r2,4022040 <_ZN7NNLayer9propagateEPf+0x140>
			if (source[*(current_pos++)] != 0) LUT_Address += (1 << j);
 4021fd0:	e0bff917 	ldw	r2,-28(fp)
 4021fd4:	10c00104 	addi	r3,r2,4
 4021fd8:	e0fff915 	stw	r3,-28(fp)
 4021fdc:	10800017 	ldw	r2,0(r2)
 4021fe0:	1085883a 	add	r2,r2,r2
 4021fe4:	1085883a 	add	r2,r2,r2
 4021fe8:	1007883a 	mov	r3,r2
 4021fec:	e0bffe17 	ldw	r2,-8(fp)
 4021ff0:	10c5883a 	add	r2,r2,r3
 4021ff4:	10c00017 	ldw	r3,0(r2)
 4021ff8:	04000044 	movi	r16,1
 4021ffc:	000b883a 	mov	r5,zero
 4022000:	1809883a 	mov	r4,r3
 4022004:	40256d40 	call	40256d4 <__eqsf2>
 4022008:	1000011e 	bne	r2,zero,4022010 <_ZN7NNLayer9propagateEPf+0x110>
 402200c:	0021883a 	mov	r16,zero
 4022010:	80803fcc 	andi	r2,r16,255
 4022014:	10000626 	beq	r2,zero,4022030 <_ZN7NNLayer9propagateEPf+0x130>
 4022018:	00c00044 	movi	r3,1
 402201c:	e0bffc17 	ldw	r2,-16(fp)
 4022020:	1884983a 	sll	r2,r3,r2
 4022024:	e0fffb17 	ldw	r3,-20(fp)
 4022028:	1885883a 	add	r2,r3,r2
 402202c:	e0bffb15 	stw	r2,-20(fp)
	}

	int * current_pos = pos_array;
	for (int i=0; i<n_neuron; i++) {
		int LUT_Address = 0;
		for (int j = 0; j<n_input_per_neuron; j++) {
 4022030:	e0bffc17 	ldw	r2,-16(fp)
 4022034:	10800044 	addi	r2,r2,1
 4022038:	e0bffc15 	stw	r2,-16(fp)
 402203c:	003fe006 	br	4021fc0 <__flash_rwdata_start+0xfffeba68>
			if (source[*(current_pos++)] != 0) LUT_Address += (1 << j);
		}
		value[i] = 1 & (LUT_array[LUT_size * i + (LUT_Address >> 3)] >> (LUT_Address & 0x7));
 4022040:	e0bffd17 	ldw	r2,-12(fp)
 4022044:	10c00717 	ldw	r3,28(r2)
 4022048:	e0bffa17 	ldw	r2,-24(fp)
 402204c:	1085883a 	add	r2,r2,r2
 4022050:	1085883a 	add	r2,r2,r2
 4022054:	18a1883a 	add	r16,r3,r2
 4022058:	e0bffd17 	ldw	r2,-12(fp)
 402205c:	10800517 	ldw	r2,20(r2)
 4022060:	e0fffd17 	ldw	r3,-12(fp)
 4022064:	19000417 	ldw	r4,16(r3)
 4022068:	e0fffa17 	ldw	r3,-24(fp)
 402206c:	20c9383a 	mul	r4,r4,r3
 4022070:	e0fffb17 	ldw	r3,-20(fp)
 4022074:	1807d0fa 	srai	r3,r3,3
 4022078:	20c7883a 	add	r3,r4,r3
 402207c:	10c5883a 	add	r2,r2,r3
 4022080:	10800003 	ldbu	r2,0(r2)
 4022084:	10c03fcc 	andi	r3,r2,255
 4022088:	e0bffb17 	ldw	r2,-20(fp)
 402208c:	108001cc 	andi	r2,r2,7
 4022090:	1885d83a 	sra	r2,r3,r2
 4022094:	1080004c 	andi	r2,r2,1
 4022098:	1009883a 	mov	r4,r2
 402209c:	402618c0 	call	402618c <__floatsisf>
 40220a0:	1007883a 	mov	r3,r2
 40220a4:	80c00015 	stw	r3,0(r16)
		if (my_debug) printf("LUT%i[%i] = %f\r\n", i, LUT_Address, value[i]);
 40220a8:	d0a02117 	ldw	r2,-32636(gp)
 40220ac:	10001226 	beq	r2,zero,40220f8 <_ZN7NNLayer9propagateEPf+0x1f8>
 40220b0:	e0bffd17 	ldw	r2,-12(fp)
 40220b4:	10c00717 	ldw	r3,28(r2)
 40220b8:	e0bffa17 	ldw	r2,-24(fp)
 40220bc:	1085883a 	add	r2,r2,r2
 40220c0:	1085883a 	add	r2,r2,r2
 40220c4:	1885883a 	add	r2,r3,r2
 40220c8:	10c00017 	ldw	r3,0(r2)
 40220cc:	1809883a 	mov	r4,r3
 40220d0:	4026d940 	call	4026d94 <__extendsfdf2>
 40220d4:	1009883a 	mov	r4,r2
 40220d8:	180b883a 	mov	r5,r3
 40220dc:	d9400015 	stw	r5,0(sp)
 40220e0:	200f883a 	mov	r7,r4
 40220e4:	e1bffb17 	ldw	r6,-20(fp)
 40220e8:	e17ffa17 	ldw	r5,-24(fp)
 40220ec:	01000034 	movhi	r4,0
 40220f0:	21001a04 	addi	r4,r4,104
 40220f4:	40280e40 	call	40280e4 <printf>
	if (my_debug) for (i=0; i<n_input; i++) {
		printf("Input %i = %f\r\n", i, source[i]);
	}

	int * current_pos = pos_array;
	for (int i=0; i<n_neuron; i++) {
 40220f8:	e0bffa17 	ldw	r2,-24(fp)
 40220fc:	10800044 	addi	r2,r2,1
 4022100:	e0bffa15 	stw	r2,-24(fp)
 4022104:	003fa806 	br	4021fa8 <__flash_rwdata_start+0xfffeba50>
		}
		value[i] = 1 & (LUT_array[LUT_size * i + (LUT_Address >> 3)] >> (LUT_Address & 0x7));
		if (my_debug) printf("LUT%i[%i] = %f\r\n", i, LUT_Address, value[i]);
	}

	if (my_debug) print();
 4022108:	d0a02117 	ldw	r2,-32636(gp)
 402210c:	10000226 	beq	r2,zero,4022118 <_ZN7NNLayer9propagateEPf+0x218>
 4022110:	e13ffd17 	ldw	r4,-12(fp)
 4022114:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>

	return value;
 4022118:	e0bffd17 	ldw	r2,-12(fp)
 402211c:	10800717 	ldw	r2,28(r2)
}
 4022120:	e6ffff04 	addi	sp,fp,-4
 4022124:	dfc00217 	ldw	ra,8(sp)
 4022128:	df000117 	ldw	fp,4(sp)
 402212c:	dc000017 	ldw	r16,0(sp)
 4022130:	dec00304 	addi	sp,sp,12
 4022134:	f800283a 	ret

04022138 <_ZN7NNLayer16print_activationEv>:

void NNLayer::print_activation() {
 4022138:	f811883a 	mov	r8,ra
 402213c:	40346e80 	call	40346e8 <_mcount>
 4022140:	403f883a 	mov	ra,r8
 4022144:	defffc04 	addi	sp,sp,-16
 4022148:	dfc00315 	stw	ra,12(sp)
 402214c:	df000215 	stw	fp,8(sp)
 4022150:	df000204 	addi	fp,sp,8
 4022154:	e13fff15 	stw	r4,-4(fp)
	printf("---------------\n");
 4022158:	01000034 	movhi	r4,0
 402215c:	21001f04 	addi	r4,r4,124
 4022160:	40282300 	call	4028230 <puts>
	for (int i=0; i<n_neuron; i++) {
 4022164:	e03ffe15 	stw	zero,-8(fp)
 4022168:	e0bfff17 	ldw	r2,-4(fp)
 402216c:	10800217 	ldw	r2,8(r2)
 4022170:	e0fffe17 	ldw	r3,-8(fp)
 4022174:	1880120e 	bge	r3,r2,40221c0 <_ZN7NNLayer16print_activationEv+0x88>
		printf("%i, %i\n", i, (int)value[i]);
 4022178:	e0bfff17 	ldw	r2,-4(fp)
 402217c:	10c00717 	ldw	r3,28(r2)
 4022180:	e0bffe17 	ldw	r2,-8(fp)
 4022184:	1085883a 	add	r2,r2,r2
 4022188:	1085883a 	add	r2,r2,r2
 402218c:	1885883a 	add	r2,r3,r2
 4022190:	10c00017 	ldw	r3,0(r2)
 4022194:	1809883a 	mov	r4,r3
 4022198:	40261100 	call	4026110 <__fixsfsi>
 402219c:	100d883a 	mov	r6,r2
 40221a0:	e17ffe17 	ldw	r5,-8(fp)
 40221a4:	01000034 	movhi	r4,0
 40221a8:	21002304 	addi	r4,r4,140
 40221ac:	40280e40 	call	40280e4 <printf>
	return value;
}

void NNLayer::print_activation() {
	printf("---------------\n");
	for (int i=0; i<n_neuron; i++) {
 40221b0:	e0bffe17 	ldw	r2,-8(fp)
 40221b4:	10800044 	addi	r2,r2,1
 40221b8:	e0bffe15 	stw	r2,-8(fp)
 40221bc:	003fea06 	br	4022168 <__flash_rwdata_start+0xfffebc10>
		printf("%i, %i\n", i, (int)value[i]);
	}
}
 40221c0:	0001883a 	nop
 40221c4:	e037883a 	mov	sp,fp
 40221c8:	dfc00117 	ldw	ra,4(sp)
 40221cc:	df000017 	ldw	fp,0(sp)
 40221d0:	dec00204 	addi	sp,sp,8
 40221d4:	f800283a 	ret

040221d8 <_ZN7NNLayer5printEv>:

void NNLayer::print() {
 40221d8:	f811883a 	mov	r8,ra
 40221dc:	40346e80 	call	40346e8 <_mcount>
 40221e0:	403f883a 	mov	ra,r8
 40221e4:	defff804 	addi	sp,sp,-32
 40221e8:	dfc00715 	stw	ra,28(sp)
 40221ec:	df000615 	stw	fp,24(sp)
 40221f0:	df000604 	addi	fp,sp,24
 40221f4:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated constructor stub
	int * current_pos = pos_array;
 40221f8:	e0bfff17 	ldw	r2,-4(fp)
 40221fc:	10800617 	ldw	r2,24(r2)
 4022200:	e0bffa15 	stw	r2,-24(fp)

	for (int i=0; i<n_neuron; i++) {
 4022204:	e03ffb15 	stw	zero,-20(fp)
 4022208:	e0bfff17 	ldw	r2,-4(fp)
 402220c:	10800217 	ldw	r2,8(r2)
 4022210:	e0fffb17 	ldw	r3,-20(fp)
 4022214:	1880560e 	bge	r3,r2,4022370 <_ZN7NNLayer5printEv+0x198>
		printf("Neuron %i { ", i);
 4022218:	e17ffb17 	ldw	r5,-20(fp)
 402221c:	01000034 	movhi	r4,0
 4022220:	21002504 	addi	r4,r4,148
 4022224:	40280e40 	call	40280e4 <printf>
		for (int j=0; j<n_input_per_neuron; j++) {
 4022228:	e03ffc15 	stw	zero,-16(fp)
 402222c:	e0bfff17 	ldw	r2,-4(fp)
 4022230:	10800317 	ldw	r2,12(r2)
 4022234:	e0fffc17 	ldw	r3,-16(fp)
 4022238:	1880170e 	bge	r3,r2,4022298 <_ZN7NNLayer5printEv+0xc0>
			if (j!=0) printf(", %i", *(current_pos++));
 402223c:	e0bffc17 	ldw	r2,-16(fp)
 4022240:	10000926 	beq	r2,zero,4022268 <_ZN7NNLayer5printEv+0x90>
 4022244:	e0bffa17 	ldw	r2,-24(fp)
 4022248:	10c00104 	addi	r3,r2,4
 402224c:	e0fffa15 	stw	r3,-24(fp)
 4022250:	10800017 	ldw	r2,0(r2)
 4022254:	100b883a 	mov	r5,r2
 4022258:	01000034 	movhi	r4,0
 402225c:	21002904 	addi	r4,r4,164
 4022260:	40280e40 	call	40280e4 <printf>
 4022264:	00000806 	br	4022288 <_ZN7NNLayer5printEv+0xb0>
			else printf("%i", *(current_pos++));
 4022268:	e0bffa17 	ldw	r2,-24(fp)
 402226c:	10c00104 	addi	r3,r2,4
 4022270:	e0fffa15 	stw	r3,-24(fp)
 4022274:	10800017 	ldw	r2,0(r2)
 4022278:	100b883a 	mov	r5,r2
 402227c:	01000034 	movhi	r4,0
 4022280:	21002b04 	addi	r4,r4,172
 4022284:	40280e40 	call	40280e4 <printf>
	// TODO Auto-generated constructor stub
	int * current_pos = pos_array;

	for (int i=0; i<n_neuron; i++) {
		printf("Neuron %i { ", i);
		for (int j=0; j<n_input_per_neuron; j++) {
 4022288:	e0bffc17 	ldw	r2,-16(fp)
 402228c:	10800044 	addi	r2,r2,1
 4022290:	e0bffc15 	stw	r2,-16(fp)
 4022294:	003fe506 	br	402222c <__flash_rwdata_start+0xfffebcd4>
			if (j!=0) printf(", %i", *(current_pos++));
			else printf("%i", *(current_pos++));
		}
		printf("}, %f, {",value[i]);
 4022298:	e0bfff17 	ldw	r2,-4(fp)
 402229c:	10c00717 	ldw	r3,28(r2)
 40222a0:	e0bffb17 	ldw	r2,-20(fp)
 40222a4:	1085883a 	add	r2,r2,r2
 40222a8:	1085883a 	add	r2,r2,r2
 40222ac:	1885883a 	add	r2,r3,r2
 40222b0:	10c00017 	ldw	r3,0(r2)
 40222b4:	1809883a 	mov	r4,r3
 40222b8:	4026d940 	call	4026d94 <__extendsfdf2>
 40222bc:	100d883a 	mov	r6,r2
 40222c0:	180f883a 	mov	r7,r3
 40222c4:	300b883a 	mov	r5,r6
 40222c8:	380d883a 	mov	r6,r7
 40222cc:	01000034 	movhi	r4,0
 40222d0:	21002c04 	addi	r4,r4,176
 40222d4:	40280e40 	call	40280e4 <printf>
		for (int j=LUT_size-1; j>=0; j--) {
 40222d8:	e0bfff17 	ldw	r2,-4(fp)
 40222dc:	10800417 	ldw	r2,16(r2)
 40222e0:	10bfffc4 	addi	r2,r2,-1
 40222e4:	e0bffd15 	stw	r2,-12(fp)
 40222e8:	e0bffd17 	ldw	r2,-12(fp)
 40222ec:	10001916 	blt	r2,zero,4022354 <_ZN7NNLayer5printEv+0x17c>
			unsigned int hex_value = LUT_array[LUT_size * i + j];
 40222f0:	e0bfff17 	ldw	r2,-4(fp)
 40222f4:	10800517 	ldw	r2,20(r2)
 40222f8:	e0ffff17 	ldw	r3,-4(fp)
 40222fc:	19000417 	ldw	r4,16(r3)
 4022300:	e0fffb17 	ldw	r3,-20(fp)
 4022304:	20c9383a 	mul	r4,r4,r3
 4022308:	e0fffd17 	ldw	r3,-12(fp)
 402230c:	20c7883a 	add	r3,r4,r3
 4022310:	10c5883a 	add	r2,r2,r3
 4022314:	10800003 	ldbu	r2,0(r2)
 4022318:	10803fcc 	andi	r2,r2,255
 402231c:	e0bffe15 	stw	r2,-8(fp)
			if (hex_value<16) printf("0");
 4022320:	e0bffe17 	ldw	r2,-8(fp)
 4022324:	10800428 	cmpgeui	r2,r2,16
 4022328:	1000021e 	bne	r2,zero,4022334 <_ZN7NNLayer5printEv+0x15c>
 402232c:	01000c04 	movi	r4,48
 4022330:	40281400 	call	4028140 <putchar>
			printf("%x",hex_value);
 4022334:	e17ffe17 	ldw	r5,-8(fp)
 4022338:	01000034 	movhi	r4,0
 402233c:	21002f04 	addi	r4,r4,188
 4022340:	40280e40 	call	40280e4 <printf>
		for (int j=0; j<n_input_per_neuron; j++) {
			if (j!=0) printf(", %i", *(current_pos++));
			else printf("%i", *(current_pos++));
		}
		printf("}, %f, {",value[i]);
		for (int j=LUT_size-1; j>=0; j--) {
 4022344:	e0bffd17 	ldw	r2,-12(fp)
 4022348:	10bfffc4 	addi	r2,r2,-1
 402234c:	e0bffd15 	stw	r2,-12(fp)
 4022350:	003fe506 	br	40222e8 <__flash_rwdata_start+0xfffebd90>
			unsigned int hex_value = LUT_array[LUT_size * i + j];
			if (hex_value<16) printf("0");
			printf("%x",hex_value);
		}
		printf("}\r\n");
 4022354:	01000034 	movhi	r4,0
 4022358:	21003004 	addi	r4,r4,192
 402235c:	40282300 	call	4028230 <puts>

void NNLayer::print() {
	// TODO Auto-generated constructor stub
	int * current_pos = pos_array;

	for (int i=0; i<n_neuron; i++) {
 4022360:	e0bffb17 	ldw	r2,-20(fp)
 4022364:	10800044 	addi	r2,r2,1
 4022368:	e0bffb15 	stw	r2,-20(fp)
 402236c:	003fa606 	br	4022208 <__flash_rwdata_start+0xfffebcb0>
			if (hex_value<16) printf("0");
			printf("%x",hex_value);
		}
		printf("}\r\n");
	}
}
 4022370:	0001883a 	nop
 4022374:	e037883a 	mov	sp,fp
 4022378:	dfc00117 	ldw	ra,4(sp)
 402237c:	df000017 	ldw	fp,0(sp)
 4022380:	dec00204 	addi	sp,sp,8
 4022384:	f800283a 	ret

04022388 <_ZN3VGA3clrEv>:
#include "VGA.h"
#include "io.h"

//-------------------------------------------------------------------------
void VGA::clr() {
 4022388:	f811883a 	mov	r8,ra
 402238c:	40346e80 	call	40346e8 <_mcount>
 4022390:	403f883a 	mov	ra,r8
 4022394:	defffd04 	addi	sp,sp,-12
 4022398:	df000215 	stw	fp,8(sp)
 402239c:	df000204 	addi	fp,sp,8
 40223a0:	e13fff15 	stw	r4,-4(fp)
  int x;
  for (x=0;x<640*480/4;x++) {
 40223a4:	e03ffe15 	stw	zero,-8(fp)
 40223a8:	e0fffe17 	ldw	r3,-8(fp)
 40223ac:	00800074 	movhi	r2,1
 40223b0:	108affc4 	addi	r2,r2,11263
 40223b4:	10c00d16 	blt	r2,r3,40223ec <_ZN3VGA3clrEv+0x64>
     IOWR(memory_address, x, 0x0);
 40223b8:	e0bffe17 	ldw	r2,-8(fp)
 40223bc:	1085883a 	add	r2,r2,r2
 40223c0:	1085883a 	add	r2,r2,r2
 40223c4:	1007883a 	mov	r3,r2
 40223c8:	e0bfff17 	ldw	r2,-4(fp)
 40223cc:	10800117 	ldw	r2,4(r2)
 40223d0:	1885883a 	add	r2,r3,r2
 40223d4:	0007883a 	mov	r3,zero
 40223d8:	10c00035 	stwio	r3,0(r2)
#include "io.h"

//-------------------------------------------------------------------------
void VGA::clr() {
  int x;
  for (x=0;x<640*480/4;x++) {
 40223dc:	e0bffe17 	ldw	r2,-8(fp)
 40223e0:	10800044 	addi	r2,r2,1
 40223e4:	e0bffe15 	stw	r2,-8(fp)
 40223e8:	003fef06 	br	40223a8 <__flash_rwdata_start+0xfffebe50>
     IOWR(memory_address, x, 0x0);
  }
}
 40223ec:	0001883a 	nop
 40223f0:	e037883a 	mov	sp,fp
 40223f4:	df000017 	ldw	fp,0(sp)
 40223f8:	dec00104 	addi	sp,sp,4
 40223fc:	f800283a 	ret

04022400 <main>:

/*********************************************************************
 * main
 *********************************************************************/
int main(int argc, char **argv)
{
 4022400:	f811883a 	mov	r8,ra
 4022404:	40346e80 	call	40346e8 <_mcount>
 4022408:	403f883a 	mov	ra,r8
 402240c:	deffd504 	addi	sp,sp,-172
 4022410:	dfc02a15 	stw	ra,168(sp)
 4022414:	df002915 	stw	fp,164(sp)
 4022418:	ddc02815 	stw	r23,160(sp)
 402241c:	dd802715 	stw	r22,156(sp)
 4022420:	dd402615 	stw	r21,152(sp)
 4022424:	dd002515 	stw	r20,148(sp)
 4022428:	dcc02415 	stw	r19,144(sp)
 402242c:	dc802315 	stw	r18,140(sp)
 4022430:	dc402215 	stw	r17,136(sp)
 4022434:	dc002115 	stw	r16,132(sp)
 4022438:	df002904 	addi	fp,sp,164
 402243c:	e13fe215 	stw	r4,-120(fp)
 4022440:	e17fe315 	stw	r5,-116(fp)
 4022444:	008100b4 	movhi	r2,1026
 4022448:	108c9504 	addi	r2,r2,12884
 402244c:	e0bfea15 	stw	r2,-88(fp)
 4022450:	008100f4 	movhi	r2,1027
 4022454:	10979e04 	addi	r2,r2,24184
 4022458:	e0bfeb15 	stw	r2,-84(fp)
 402245c:	e0bfec04 	addi	r2,fp,-80
 4022460:	e0ffd704 	addi	r3,fp,-164
 4022464:	10c00015 	stw	r3,0(r2)
 4022468:	00c100b4 	movhi	r3,1026
 402246c:	18c9ed04 	addi	r3,r3,10164
 4022470:	10c00115 	stw	r3,4(r2)
 4022474:	16c00215 	stw	sp,8(r2)
 4022478:	e0bfe404 	addi	r2,fp,-112
 402247c:	1009883a 	mov	r4,r2
 4022480:	40272900 	call	4027290 <_Unwind_SjLj_Register>
	printf("Entering ELE8307 Fall 2018 Project main() \r\n");
 4022484:	01000034 	movhi	r4,0
 4022488:	00bfffc4 	movi	r2,-1
 402248c:	e0bfe515 	stw	r2,-108(fp)
 4022490:	21003804 	addi	r4,r4,224
 4022494:	40282300 	call	4028230 <puts>

	pVGA = new VGA(ELE8307_VGA_0_BASE, (int)display);
 4022498:	01000204 	movi	r4,8
 402249c:	40229780 	call	4022978 <_Znwj>
 40224a0:	e0bff115 	stw	r2,-60(fp)
 40224a4:	00800034 	movhi	r2,0
 40224a8:	10889004 	addi	r2,r2,8768
 40224ac:	100d883a 	mov	r6,r2
 40224b0:	01410134 	movhi	r5,1028
 40224b4:	29440004 	addi	r5,r5,4096
 40224b8:	e13ff117 	ldw	r4,-60(fp)
 40224bc:	40228400 	call	4022840 <_ZN3VGAC1Eii>
 40224c0:	e0bff117 	ldw	r2,-60(fp)
 40224c4:	d0a02215 	stw	r2,-32632(gp)
	pVGA->send_to_display();
 40224c8:	d0a02217 	ldw	r2,-32632(gp)
 40224cc:	1009883a 	mov	r4,r2
 40224d0:	40228900 	call	4022890 <_ZN3VGA15send_to_displayEv>
	pVGA->clr();
 40224d4:	d0a02217 	ldw	r2,-32632(gp)
 40224d8:	1009883a 	mov	r4,r2
 40224dc:	40223880 	call	4022388 <_ZN3VGA3clrEv>

    /* Initialisation et application a une image de la machine neuronale (poids aleatoires) */

    printf("> Exemple 1: NN Aleatoire \r\n");
 40224e0:	01000034 	movhi	r4,0
 40224e4:	21004304 	addi	r4,r4,268
 40224e8:	40282300 	call	4028230 <puts>
    NN network(5);
 40224ec:	e0bfdc04 	addi	r2,fp,-144
 40224f0:	01400144 	movi	r5,5
 40224f4:	1009883a 	mov	r4,r2
 40224f8:	40211dc0 	call	40211dc <_ZN2NNC1Ei>
    int matrix_size = 16;
 40224fc:	00800404 	movi	r2,16
 4022500:	e0bfd815 	stw	r2,-160(fp)

    network.layer[0].random_init(matrix_size*matrix_size, 40, 8);
 4022504:	e13fde17 	ldw	r4,-136(fp)
 4022508:	e0ffd817 	ldw	r3,-160(fp)
 402250c:	e0bfd817 	ldw	r2,-160(fp)
 4022510:	1887383a 	mul	r3,r3,r2
 4022514:	00800044 	movi	r2,1
 4022518:	e0bfe515 	stw	r2,-108(fp)
 402251c:	01c00204 	movi	r7,8
 4022520:	01800a04 	movi	r6,40
 4022524:	180b883a 	mov	r5,r3
 4022528:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>
    network.layer[1].random_init(40, 40, 6);
 402252c:	e0bfde17 	ldw	r2,-136(fp)
 4022530:	10800804 	addi	r2,r2,32
 4022534:	01c00184 	movi	r7,6
 4022538:	01800a04 	movi	r6,40
 402253c:	01400a04 	movi	r5,40
 4022540:	1009883a 	mov	r4,r2
 4022544:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>
    network.layer[2].random_init(40, 40, 6);
 4022548:	e0bfde17 	ldw	r2,-136(fp)
 402254c:	10801004 	addi	r2,r2,64
 4022550:	01c00184 	movi	r7,6
 4022554:	01800a04 	movi	r6,40
 4022558:	01400a04 	movi	r5,40
 402255c:	1009883a 	mov	r4,r2
 4022560:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>
    network.layer[3].random_init(40, 40, 6);
 4022564:	e0bfde17 	ldw	r2,-136(fp)
 4022568:	10801804 	addi	r2,r2,96
 402256c:	01c00184 	movi	r7,6
 4022570:	01800a04 	movi	r6,40
 4022574:	01400a04 	movi	r5,40
 4022578:	1009883a 	mov	r4,r2
 402257c:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>
    network.layer[4].random_init(40, 10, 6);
 4022580:	e0bfde17 	ldw	r2,-136(fp)
 4022584:	10802004 	addi	r2,r2,128
 4022588:	01c00184 	movi	r7,6
 402258c:	01800284 	movi	r6,10
 4022590:	01400a04 	movi	r5,40
 4022594:	1009883a 	mov	r4,r2
 4022598:	4021cbc0 	call	4021cbc <_ZN7NNLayer11random_initEiii>

    network.layer[0].print();
 402259c:	e0bfde17 	ldw	r2,-136(fp)
 40225a0:	1009883a 	mov	r4,r2
 40225a4:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>
    network.layer[1].print();
 40225a8:	e0bfde17 	ldw	r2,-136(fp)
 40225ac:	10800804 	addi	r2,r2,32
 40225b0:	1009883a 	mov	r4,r2
 40225b4:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>
    network.layer[2].print();
 40225b8:	e0bfde17 	ldw	r2,-136(fp)
 40225bc:	10801004 	addi	r2,r2,64
 40225c0:	1009883a 	mov	r4,r2
 40225c4:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>
    network.layer[3].print();
 40225c8:	e0bfde17 	ldw	r2,-136(fp)
 40225cc:	10801804 	addi	r2,r2,96
 40225d0:	1009883a 	mov	r4,r2
 40225d4:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>
    network.layer[4].print();
 40225d8:	e0bfde17 	ldw	r2,-136(fp)
 40225dc:	10802004 	addi	r2,r2,128
 40225e0:	1009883a 	mov	r4,r2
 40225e4:	40221d80 	call	40221d8 <_ZN7NNLayer5printEv>

	Image my_image(60,200);
 40225e8:	e0bfdf04 	addi	r2,fp,-132
 40225ec:	01803204 	movi	r6,200
 40225f0:	01400f04 	movi	r5,60
 40225f4:	1009883a 	mov	r4,r2
 40225f8:	40202380 	call	4020238 <_ZN5ImageC1Eii>
	my_image.make_fractal();
 40225fc:	e0ffdf04 	addi	r3,fp,-132
 4022600:	00800084 	movi	r2,2
 4022604:	e0bfe515 	stw	r2,-108(fp)
 4022608:	1809883a 	mov	r4,r3
 402260c:	402057c0 	call	402057c <_ZN5Image12make_fractalEv>
	my_image.printToScreen(0,0,pVGA);
 4022610:	d0e02217 	ldw	r3,-32632(gp)
 4022614:	e0bfdf04 	addi	r2,fp,-132
 4022618:	180f883a 	mov	r7,r3
 402261c:	000d883a 	mov	r6,zero
 4022620:	000b883a 	mov	r5,zero
 4022624:	1009883a 	mov	r4,r2
 4022628:	4020f4c0 	call	4020f4c <_ZN5Image13printToScreenEiiP3VGA>
	my_image.make_bw();
 402262c:	e0bfdf04 	addi	r2,fp,-132
 4022630:	1009883a 	mov	r4,r2
 4022634:	40209300 	call	4020930 <_ZN5Image7make_bwEv>
	my_image.printToScreen(120,0,pVGA);
 4022638:	d0e02217 	ldw	r3,-32632(gp)
 402263c:	e0bfdf04 	addi	r2,fp,-132
 4022640:	180f883a 	mov	r7,r3
 4022644:	000d883a 	mov	r6,zero
 4022648:	01401e04 	movi	r5,120
 402264c:	1009883a 	mov	r4,r2
 4022650:	4020f4c0 	call	4020f4c <_ZN5Image13printToScreenEiiP3VGA>
	printf("Start processing ...\r\n");
 4022654:	01000034 	movhi	r4,0
 4022658:	21004a04 	addi	r4,r4,296
 402265c:	40282300 	call	4028230 <puts>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4022660:	d0a03417 	ldw	r2,-32560(gp)
		result_image->printToScreen(60*i,240,pVGA);
		delete result_image;
		printf("done in %d ms\r\n",(time2-time1));
	}
	*/
	int time1 = alt_nticks();
 4022664:	e0bfd915 	stw	r2,-156(fp)
	Image **result_images = my_image.apply_NN(&network, matrix_size);
 4022668:	e13fdc04 	addi	r4,fp,-144
 402266c:	e0ffdf04 	addi	r3,fp,-132
 4022670:	00800084 	movi	r2,2
 4022674:	e0bfe515 	stw	r2,-108(fp)
 4022678:	e1bfd817 	ldw	r6,-160(fp)
 402267c:	200b883a 	mov	r5,r4
 4022680:	1809883a 	mov	r4,r3
 4022684:	4020a080 	call	4020a08 <_ZN5Image8apply_NNEP2NNi>
 4022688:	e0bfda15 	stw	r2,-152(fp)
 402268c:	d0a03417 	ldw	r2,-32560(gp)
	int time2 = alt_nticks();
 4022690:	e0bfdb15 	stw	r2,-148(fp)
	printf("done in %d ms\r\n",(time2-time1));
 4022694:	e0ffdb17 	ldw	r3,-148(fp)
 4022698:	e0bfd917 	ldw	r2,-156(fp)
 402269c:	1885c83a 	sub	r2,r3,r2
 40226a0:	100b883a 	mov	r5,r2
 40226a4:	01000034 	movhi	r4,0
 40226a8:	00800084 	movi	r2,2
 40226ac:	e0bfe515 	stw	r2,-108(fp)
 40226b0:	21005004 	addi	r4,r4,320
 40226b4:	40280e40 	call	40280e4 <printf>

	for (int i=0;i<10;i++) {
 40226b8:	e03fd715 	stw	zero,-164(fp)
 40226bc:	e0bfd717 	ldw	r2,-164(fp)
 40226c0:	10800288 	cmpgei	r2,r2,10
 40226c4:	1000231e 	bne	r2,zero,4022754 <main+0x354>
		result_images[i]->printToScreen(60*i,240,pVGA);
 40226c8:	e0bfd717 	ldw	r2,-164(fp)
 40226cc:	1085883a 	add	r2,r2,r2
 40226d0:	1085883a 	add	r2,r2,r2
 40226d4:	1007883a 	mov	r3,r2
 40226d8:	e0bfda17 	ldw	r2,-152(fp)
 40226dc:	10c5883a 	add	r2,r2,r3
 40226e0:	10c00017 	ldw	r3,0(r2)
 40226e4:	e0bfd717 	ldw	r2,-164(fp)
 40226e8:	11000f24 	muli	r4,r2,60
 40226ec:	d1602217 	ldw	r5,-32632(gp)
 40226f0:	00800084 	movi	r2,2
 40226f4:	e0bfe515 	stw	r2,-108(fp)
 40226f8:	280f883a 	mov	r7,r5
 40226fc:	01803c04 	movi	r6,240
 4022700:	200b883a 	mov	r5,r4
 4022704:	1809883a 	mov	r4,r3
 4022708:	4020f4c0 	call	4020f4c <_ZN5Image13printToScreenEiiP3VGA>
		delete result_images[i];
 402270c:	e0bfd717 	ldw	r2,-164(fp)
 4022710:	1085883a 	add	r2,r2,r2
 4022714:	1085883a 	add	r2,r2,r2
 4022718:	1007883a 	mov	r3,r2
 402271c:	e0bfda17 	ldw	r2,-152(fp)
 4022720:	10c5883a 	add	r2,r2,r3
 4022724:	10800017 	ldw	r2,0(r2)
 4022728:	e0bff215 	stw	r2,-56(fp)
 402272c:	e0fff217 	ldw	r3,-56(fp)
 4022730:	18000426 	beq	r3,zero,4022744 <main+0x344>
 4022734:	e13ff217 	ldw	r4,-56(fp)
 4022738:	40210f00 	call	40210f0 <_ZN5ImageD1Ev>
 402273c:	e13ff217 	ldw	r4,-56(fp)
 4022740:	4023b100 	call	4023b10 <_ZdlPv>
	int time1 = alt_nticks();
	Image **result_images = my_image.apply_NN(&network, matrix_size);
	int time2 = alt_nticks();
	printf("done in %d ms\r\n",(time2-time1));

	for (int i=0;i<10;i++) {
 4022744:	e0bfd717 	ldw	r2,-164(fp)
 4022748:	10800044 	addi	r2,r2,1
 402274c:	e0bfd715 	stw	r2,-164(fp)
 4022750:	003fda06 	br	40226bc <__flash_rwdata_start+0xfffec164>
		result_images[i]->printToScreen(60*i,240,pVGA);
		delete result_images[i];
	}
	delete result_images;
 4022754:	e13fda17 	ldw	r4,-152(fp)
 4022758:	4023b100 	call	4023b10 <_ZdlPv>


	return 0;
 402275c:	e03ff315 	stw	zero,-52(fp)
    network.layer[1].print();
    network.layer[2].print();
    network.layer[3].print();
    network.layer[4].print();

	Image my_image(60,200);
 4022760:	e0ffdf04 	addi	r3,fp,-132
 4022764:	00800044 	movi	r2,1
 4022768:	e0bfe515 	stw	r2,-108(fp)
 402276c:	1809883a 	mov	r4,r3
 4022770:	40210f00 	call	40210f0 <_ZN5ImageD1Ev>
	pVGA->clr();

    /* Initialisation et application a une image de la machine neuronale (poids aleatoires) */

    printf("> Exemple 1: NN Aleatoire \r\n");
    NN network(5);
 4022774:	e0ffdc04 	addi	r3,fp,-144
 4022778:	00bfffc4 	movi	r2,-1
 402277c:	e0bfe515 	stw	r2,-108(fp)
 4022780:	1809883a 	mov	r4,r3
 4022784:	40214080 	call	4021408 <_ZN2NND1Ev>
 4022788:	e0bff317 	ldw	r2,-52(fp)
 402278c:	e0bff415 	stw	r2,-48(fp)
 4022790:	00001a06 	br	40227fc <main+0x3fc>
 4022794:	e0fff615 	stw	r3,-40(fp)
    network.layer[1].print();
    network.layer[2].print();
    network.layer[3].print();
    network.layer[4].print();

	Image my_image(60,200);
 4022798:	e0bfdf04 	addi	r2,fp,-132
 402279c:	e03fe515 	stw	zero,-108(fp)
 40227a0:	1009883a 	mov	r4,r2
 40227a4:	40210f00 	call	40210f0 <_ZN5ImageD1Ev>
 40227a8:	e0fff617 	ldw	r3,-40(fp)
 40227ac:	e0fff515 	stw	r3,-44(fp)
 40227b0:	00000906 	br	40227d8 <main+0x3d8>
 40227b4:	e7002904 	addi	fp,fp,164
 40227b8:	e0ffe617 	ldw	r3,-104(fp)
 40227bc:	e0bfe517 	ldw	r2,-108(fp)
 40227c0:	10000426 	beq	r2,zero,40227d4 <main+0x3d4>
 40227c4:	10bfffc4 	addi	r2,r2,-1
 40227c8:	103ff226 	beq	r2,zero,4022794 <__flash_rwdata_start+0xfffec23c>
 40227cc:	10bfffc4 	addi	r2,r2,-1
 40227d0:	003b68fa 	trap	3
 40227d4:	e0fff515 	stw	r3,-44(fp)
	pVGA->clr();

    /* Initialisation et application a une image de la machine neuronale (poids aleatoires) */

    printf("> Exemple 1: NN Aleatoire \r\n");
    NN network(5);
 40227d8:	e0bfdc04 	addi	r2,fp,-144
 40227dc:	e03fe515 	stw	zero,-108(fp)
 40227e0:	1009883a 	mov	r4,r2
 40227e4:	40214080 	call	4021408 <_ZN2NND1Ev>
 40227e8:	e0fff517 	ldw	r3,-44(fp)
 40227ec:	00bfffc4 	movi	r2,-1
 40227f0:	e0bfe515 	stw	r2,-108(fp)
 40227f4:	1809883a 	mov	r4,r3
 40227f8:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 40227fc:	e0bfe404 	addi	r2,fp,-112
 4022800:	1009883a 	mov	r4,r2
 4022804:	40272b40 	call	40272b4 <_Unwind_SjLj_Unregister>
	}
	delete result_images;


	return 0;
}
 4022808:	e0bff417 	ldw	r2,-48(fp)
 402280c:	e6fff804 	addi	sp,fp,-32
 4022810:	dfc00917 	ldw	ra,36(sp)
 4022814:	df000817 	ldw	fp,32(sp)
 4022818:	ddc00717 	ldw	r23,28(sp)
 402281c:	dd800617 	ldw	r22,24(sp)
 4022820:	dd400517 	ldw	r21,20(sp)
 4022824:	dd000417 	ldw	r20,16(sp)
 4022828:	dcc00317 	ldw	r19,12(sp)
 402282c:	dc800217 	ldw	r18,8(sp)
 4022830:	dc400117 	ldw	r17,4(sp)
 4022834:	dc000017 	ldw	r16,0(sp)
 4022838:	dec00a04 	addi	sp,sp,40
 402283c:	f800283a 	ret

04022840 <_ZN3VGAC1Eii>:
class VGA {
	int system_base_address;
	int memory_address;

public:
	VGA(int system_base_address, int memory_address) : system_base_address(system_base_address), memory_address(memory_address) {};
 4022840:	f811883a 	mov	r8,ra
 4022844:	40346e80 	call	40346e8 <_mcount>
 4022848:	403f883a 	mov	ra,r8
 402284c:	defffc04 	addi	sp,sp,-16
 4022850:	df000315 	stw	fp,12(sp)
 4022854:	df000304 	addi	fp,sp,12
 4022858:	e13ffd15 	stw	r4,-12(fp)
 402285c:	e17ffe15 	stw	r5,-8(fp)
 4022860:	e1bfff15 	stw	r6,-4(fp)
 4022864:	e0bffd17 	ldw	r2,-12(fp)
 4022868:	e0fffe17 	ldw	r3,-8(fp)
 402286c:	10c00015 	stw	r3,0(r2)
 4022870:	e0bffd17 	ldw	r2,-12(fp)
 4022874:	e0ffff17 	ldw	r3,-4(fp)
 4022878:	10c00115 	stw	r3,4(r2)
 402287c:	0001883a 	nop
 4022880:	e037883a 	mov	sp,fp
 4022884:	df000017 	ldw	fp,0(sp)
 4022888:	dec00104 	addi	sp,sp,4
 402288c:	f800283a 	ret

04022890 <_ZN3VGA15send_to_displayEv>:
		if ( (x>=640) || (y>=480) ) return;
		int address = 640*y+x;
		IOWR_8DIRECT(memory_address, address, color);
	}

	inline void send_to_display() {
 4022890:	f811883a 	mov	r8,ra
 4022894:	40346e80 	call	40346e8 <_mcount>
 4022898:	403f883a 	mov	ra,r8
 402289c:	defffe04 	addi	sp,sp,-8
 40228a0:	df000115 	stw	fp,4(sp)
 40228a4:	df000104 	addi	fp,sp,4
 40228a8:	e13fff15 	stw	r4,-4(fp)
		IOWR(system_base_address,0,memory_address);
 40228ac:	e0bfff17 	ldw	r2,-4(fp)
 40228b0:	10800017 	ldw	r2,0(r2)
 40228b4:	1007883a 	mov	r3,r2
 40228b8:	e0bfff17 	ldw	r2,-4(fp)
 40228bc:	10800117 	ldw	r2,4(r2)
 40228c0:	18800035 	stwio	r2,0(r3)
	}
 40228c4:	0001883a 	nop
 40228c8:	e037883a 	mov	sp,fp
 40228cc:	df000017 	ldw	fp,0(sp)
 40228d0:	dec00104 	addi	sp,sp,4
 40228d4:	f800283a 	ret

040228d8 <_Znaj>:
 40228d8:	f811883a 	mov	r8,ra
 40228dc:	40346e80 	call	40346e8 <_mcount>
 40228e0:	403f883a 	mov	ra,r8
 40228e4:	defff004 	addi	sp,sp,-64
 40228e8:	dfc00f15 	stw	ra,60(sp)
 40228ec:	df000e15 	stw	fp,56(sp)
 40228f0:	008100b4 	movhi	r2,1026
 40228f4:	108c9504 	addi	r2,r2,12884
 40228f8:	d8800615 	stw	r2,24(sp)
 40228fc:	008100f4 	movhi	r2,1027
 4022900:	1097a004 	addi	r2,r2,24192
 4022904:	d8800715 	stw	r2,28(sp)
 4022908:	008100b4 	movhi	r2,1026
 402290c:	108a5604 	addi	r2,r2,10584
 4022910:	d9000d15 	stw	r4,52(sp)
 4022914:	d809883a 	mov	r4,sp
 4022918:	d8800915 	stw	r2,36(sp)
 402291c:	dec00815 	stw	sp,32(sp)
 4022920:	dec00a15 	stw	sp,40(sp)
 4022924:	40272900 	call	4027290 <_Unwind_SjLj_Register>
 4022928:	d9000d17 	ldw	r4,52(sp)
 402292c:	00800044 	movi	r2,1
 4022930:	d8800115 	stw	r2,4(sp)
 4022934:	40229780 	call	4022978 <_Znwj>
 4022938:	d809883a 	mov	r4,sp
 402293c:	d8800d15 	stw	r2,52(sp)
 4022940:	40272b40 	call	40272b4 <_Unwind_SjLj_Unregister>
 4022944:	d8800d17 	ldw	r2,52(sp)
 4022948:	dfc00f17 	ldw	ra,60(sp)
 402294c:	df000e17 	ldw	fp,56(sp)
 4022950:	dec01004 	addi	sp,sp,64
 4022954:	f800283a 	ret
 4022958:	d8800317 	ldw	r2,12(sp)
 402295c:	00ffffc4 	movi	r3,-1
 4022960:	d9000217 	ldw	r4,8(sp)
 4022964:	10c00226 	beq	r2,r3,4022970 <_Znaj+0x98>
 4022968:	d8c00115 	stw	r3,4(sp)
 402296c:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 4022970:	d8800115 	stw	r2,4(sp)
 4022974:	40238600 	call	4023860 <__cxa_call_unexpected>

04022978 <_Znwj>:
 4022978:	f811883a 	mov	r8,ra
 402297c:	40346e80 	call	40346e8 <_mcount>
 4022980:	403f883a 	mov	ra,r8
 4022984:	defffe04 	addi	sp,sp,-8
 4022988:	dfc00115 	stw	ra,4(sp)
 402298c:	dc000015 	stw	r16,0(sp)
 4022990:	2021883a 	mov	r16,r4
 4022994:	2000011e 	bne	r4,zero,402299c <_Znwj+0x24>
 4022998:	04000044 	movi	r16,1
 402299c:	8009883a 	mov	r4,r16
 40229a0:	40277200 	call	4027720 <malloc>
 40229a4:	10000426 	beq	r2,zero,40229b8 <_Znwj+0x40>
 40229a8:	dfc00117 	ldw	ra,4(sp)
 40229ac:	dc000017 	ldw	r16,0(sp)
 40229b0:	dec00204 	addi	sp,sp,8
 40229b4:	f800283a 	ret
 40229b8:	4022a240 	call	4022a24 <_ZSt15get_new_handlerv>
 40229bc:	10000226 	beq	r2,zero,40229c8 <_Znwj+0x50>
 40229c0:	103ee83a 	callr	r2
 40229c4:	003ff506 	br	402299c <__flash_rwdata_start+0xfffec444>
 40229c8:	01000104 	movi	r4,4
 40229cc:	40244940 	call	4024494 <__cxa_allocate_exception>
 40229d0:	00c00034 	movhi	r3,0
 40229d4:	018100b4 	movhi	r6,1026
 40229d8:	01400034 	movhi	r5,0
 40229dc:	18c06104 	addi	r3,r3,388
 40229e0:	318ead04 	addi	r6,r6,15028
 40229e4:	29405c04 	addi	r5,r5,368
 40229e8:	1009883a 	mov	r4,r2
 40229ec:	10c00015 	stw	r3,0(r2)
 40229f0:	4023b700 	call	4023b70 <__cxa_throw>

040229f4 <_ZdaPv>:
 40229f4:	f811883a 	mov	r8,ra
 40229f8:	40346e80 	call	40346e8 <_mcount>
 40229fc:	403f883a 	mov	ra,r8
 4022a00:	4023b101 	jmpi	4023b10 <_ZdlPv>

04022a04 <_ZSt15set_new_handlerPFvvE>:
 4022a04:	f811883a 	mov	r8,ra
 4022a08:	40346e80 	call	40346e8 <_mcount>
 4022a0c:	403f883a 	mov	ra,r8
 4022a10:	00c00034 	movhi	r3,0
 4022a14:	18c87904 	addi	r3,r3,8676
 4022a18:	18800017 	ldw	r2,0(r3)
 4022a1c:	19000015 	stw	r4,0(r3)
 4022a20:	f800283a 	ret

04022a24 <_ZSt15get_new_handlerv>:
 4022a24:	f811883a 	mov	r8,ra
 4022a28:	40346e80 	call	40346e8 <_mcount>
 4022a2c:	403f883a 	mov	ra,r8
 4022a30:	00800034 	movhi	r2,0
 4022a34:	10887904 	addi	r2,r2,8676
 4022a38:	10800017 	ldw	r2,0(r2)
 4022a3c:	f800283a 	ret

04022a40 <_ZL21size_of_encoded_valueh>:
 4022a40:	f811883a 	mov	r8,ra
 4022a44:	40346e80 	call	40346e8 <_mcount>
 4022a48:	403f883a 	mov	ra,r8
 4022a4c:	deffff04 	addi	sp,sp,-4
 4022a50:	dfc00015 	stw	ra,0(sp)
 4022a54:	00803fc4 	movi	r2,255
 4022a58:	20c03fcc 	andi	r3,r4,255
 4022a5c:	18802026 	beq	r3,r2,4022ae0 <_ZL21size_of_encoded_valueh+0xa0>
 4022a60:	210001cc 	andi	r4,r4,7
 4022a64:	00800144 	movi	r2,5
 4022a68:	11001c36 	bltu	r2,r4,4022adc <_ZL21size_of_encoded_valueh+0x9c>
 4022a6c:	200890ba 	slli	r4,r4,2
 4022a70:	008100b4 	movhi	r2,1026
 4022a74:	108aa104 	addi	r2,r2,10884
 4022a78:	2089883a 	add	r4,r4,r2
 4022a7c:	20800017 	ldw	r2,0(r4)
 4022a80:	1000683a 	jmp	r2
 4022a84:	04022a9c 	xori	r16,zero,2218
 4022a88:	04022adc 	xori	r16,zero,2219
 4022a8c:	04022aac 	andhi	r16,zero,2218
 4022a90:	04022a9c 	xori	r16,zero,2218
 4022a94:	04022acc 	andi	r16,zero,2219
 4022a98:	04022abc 	xorhi	r16,zero,2218
 4022a9c:	00800104 	movi	r2,4
 4022aa0:	dfc00017 	ldw	ra,0(sp)
 4022aa4:	dec00104 	addi	sp,sp,4
 4022aa8:	f800283a 	ret
 4022aac:	00800084 	movi	r2,2
 4022ab0:	dfc00017 	ldw	ra,0(sp)
 4022ab4:	dec00104 	addi	sp,sp,4
 4022ab8:	f800283a 	ret
 4022abc:	00800044 	movi	r2,1
 4022ac0:	dfc00017 	ldw	ra,0(sp)
 4022ac4:	dec00104 	addi	sp,sp,4
 4022ac8:	f800283a 	ret
 4022acc:	00800204 	movi	r2,8
 4022ad0:	dfc00017 	ldw	ra,0(sp)
 4022ad4:	dec00104 	addi	sp,sp,4
 4022ad8:	f800283a 	ret
 4022adc:	40276fc0 	call	40276fc <abort>
 4022ae0:	0005883a 	mov	r2,zero
 4022ae4:	dfc00017 	ldw	ra,0(sp)
 4022ae8:	dec00104 	addi	sp,sp,4
 4022aec:	f800283a 	ret

04022af0 <_ZL28read_encoded_value_with_basehjPKhPj>:
 4022af0:	f811883a 	mov	r8,ra
 4022af4:	40346e80 	call	40346e8 <_mcount>
 4022af8:	403f883a 	mov	ra,r8
 4022afc:	deffff04 	addi	sp,sp,-4
 4022b00:	dfc00015 	stw	ra,0(sp)
 4022b04:	00801404 	movi	r2,80
 4022b08:	20c03fcc 	andi	r3,r4,255
 4022b0c:	18807326 	beq	r3,r2,4022cdc <_ZL28read_encoded_value_with_basehjPKhPj+0x1ec>
 4022b10:	20c003cc 	andi	r3,r4,15
 4022b14:	00800304 	movi	r2,12
 4022b18:	10c06f36 	bltu	r2,r3,4022cd8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1e8>
 4022b1c:	180690ba 	slli	r3,r3,2
 4022b20:	020100b4 	movhi	r8,1026
 4022b24:	420acd04 	addi	r8,r8,11060
 4022b28:	1a07883a 	add	r3,r3,r8
 4022b2c:	18800017 	ldw	r2,0(r3)
 4022b30:	1000683a 	jmp	r2
 4022b34:	04022b68 	cmpgeui	r16,zero,2221
 4022b38:	04022c84 	movi	r16,2226
 4022b3c:	04022cc0 	call	4022cc <__alt_heap_start+0x3b4e3c>
 4022b40:	04022b68 	cmpgeui	r16,zero,2221
 4022b44:	04022bcc 	andi	r16,zero,2223
 4022b48:	04022c20 	cmpeqi	r16,zero,2224
 4022b4c:	04022cd8 	cmpnei	r16,zero,2227
 4022b50:	04022cd8 	cmpnei	r16,zero,2227
 4022b54:	04022cd8 	cmpnei	r16,zero,2227
 4022b58:	04022c2c 	andhi	r16,zero,2224
 4022b5c:	04022bfc 	xorhi	r16,zero,2223
 4022b60:	04022b68 	cmpgeui	r16,zero,2221
 4022b64:	04022bcc 	andi	r16,zero,2223
 4022b68:	30800043 	ldbu	r2,1(r6)
 4022b6c:	30c00083 	ldbu	r3,2(r6)
 4022b70:	324000c3 	ldbu	r9,3(r6)
 4022b74:	32000003 	ldbu	r8,0(r6)
 4022b78:	1004923a 	slli	r2,r2,8
 4022b7c:	1806943a 	slli	r3,r3,16
 4022b80:	4812963a 	slli	r9,r9,24
 4022b84:	1204b03a 	or	r2,r2,r8
 4022b88:	1884b03a 	or	r2,r3,r2
 4022b8c:	4886b03a 	or	r3,r9,r2
 4022b90:	30800104 	addi	r2,r6,4
 4022b94:	18000926 	beq	r3,zero,4022bbc <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 4022b98:	22001c0c 	andi	r8,r4,112
 4022b9c:	02400404 	movi	r9,16
 4022ba0:	42405726 	beq	r8,r9,4022d00 <_ZL28read_encoded_value_with_basehjPKhPj+0x210>
 4022ba4:	21003fcc 	andi	r4,r4,255
 4022ba8:	2100201c 	xori	r4,r4,128
 4022bac:	213fe004 	addi	r4,r4,-128
 4022bb0:	1947883a 	add	r3,r3,r5
 4022bb4:	2000010e 	bge	r4,zero,4022bbc <_ZL28read_encoded_value_with_basehjPKhPj+0xcc>
 4022bb8:	18c00017 	ldw	r3,0(r3)
 4022bbc:	38c00015 	stw	r3,0(r7)
 4022bc0:	dfc00017 	ldw	ra,0(sp)
 4022bc4:	dec00104 	addi	sp,sp,4
 4022bc8:	f800283a 	ret
 4022bcc:	30800043 	ldbu	r2,1(r6)
 4022bd0:	30c00083 	ldbu	r3,2(r6)
 4022bd4:	324000c3 	ldbu	r9,3(r6)
 4022bd8:	32000003 	ldbu	r8,0(r6)
 4022bdc:	1004923a 	slli	r2,r2,8
 4022be0:	1806943a 	slli	r3,r3,16
 4022be4:	4812963a 	slli	r9,r9,24
 4022be8:	1204b03a 	or	r2,r2,r8
 4022bec:	1884b03a 	or	r2,r3,r2
 4022bf0:	4886b03a 	or	r3,r9,r2
 4022bf4:	30800204 	addi	r2,r6,8
 4022bf8:	003fe606 	br	4022b94 <__flash_rwdata_start+0xfffec63c>
 4022bfc:	30c00043 	ldbu	r3,1(r6)
 4022c00:	32000003 	ldbu	r8,0(r6)
 4022c04:	30800084 	addi	r2,r6,2
 4022c08:	1806923a 	slli	r3,r3,8
 4022c0c:	1a06b03a 	or	r3,r3,r8
 4022c10:	18ffffcc 	andi	r3,r3,65535
 4022c14:	18e0001c 	xori	r3,r3,32768
 4022c18:	18e00004 	addi	r3,r3,-32768
 4022c1c:	003fdd06 	br	4022b94 <__flash_rwdata_start+0xfffec63c>
 4022c20:	30c00003 	ldbu	r3,0(r6)
 4022c24:	30800044 	addi	r2,r6,1
 4022c28:	003fda06 	br	4022b94 <__flash_rwdata_start+0xfffec63c>
 4022c2c:	3017883a 	mov	r11,r6
 4022c30:	0007883a 	mov	r3,zero
 4022c34:	0013883a 	mov	r9,zero
 4022c38:	5a800003 	ldbu	r10,0(r11)
 4022c3c:	58800044 	addi	r2,r11,1
 4022c40:	1017883a 	mov	r11,r2
 4022c44:	52001fcc 	andi	r8,r10,127
 4022c48:	4250983a 	sll	r8,r8,r9
 4022c4c:	53003fcc 	andi	r12,r10,255
 4022c50:	6300201c 	xori	r12,r12,128
 4022c54:	633fe004 	addi	r12,r12,-128
 4022c58:	1a06b03a 	or	r3,r3,r8
 4022c5c:	4a4001c4 	addi	r9,r9,7
 4022c60:	603ff516 	blt	r12,zero,4022c38 <__flash_rwdata_start+0xfffec6e0>
 4022c64:	020007c4 	movi	r8,31
 4022c68:	427fca36 	bltu	r8,r9,4022b94 <__flash_rwdata_start+0xfffec63c>
 4022c6c:	5280100c 	andi	r10,r10,64
 4022c70:	503fc826 	beq	r10,zero,4022b94 <__flash_rwdata_start+0xfffec63c>
 4022c74:	023fffc4 	movi	r8,-1
 4022c78:	4252983a 	sll	r9,r8,r9
 4022c7c:	1a46b03a 	or	r3,r3,r9
 4022c80:	003fc506 	br	4022b98 <__flash_rwdata_start+0xfffec640>
 4022c84:	3017883a 	mov	r11,r6
 4022c88:	0007883a 	mov	r3,zero
 4022c8c:	0015883a 	mov	r10,zero
 4022c90:	5a000003 	ldbu	r8,0(r11)
 4022c94:	58800044 	addi	r2,r11,1
 4022c98:	1017883a 	mov	r11,r2
 4022c9c:	42401fcc 	andi	r9,r8,127
 4022ca0:	4a92983a 	sll	r9,r9,r10
 4022ca4:	42003fcc 	andi	r8,r8,255
 4022ca8:	4200201c 	xori	r8,r8,128
 4022cac:	423fe004 	addi	r8,r8,-128
 4022cb0:	1a46b03a 	or	r3,r3,r9
 4022cb4:	528001c4 	addi	r10,r10,7
 4022cb8:	403ff516 	blt	r8,zero,4022c90 <__flash_rwdata_start+0xfffec738>
 4022cbc:	003fb506 	br	4022b94 <__flash_rwdata_start+0xfffec63c>
 4022cc0:	30c00043 	ldbu	r3,1(r6)
 4022cc4:	32000003 	ldbu	r8,0(r6)
 4022cc8:	30800084 	addi	r2,r6,2
 4022ccc:	1806923a 	slli	r3,r3,8
 4022cd0:	1a06b03a 	or	r3,r3,r8
 4022cd4:	003faf06 	br	4022b94 <__flash_rwdata_start+0xfffec63c>
 4022cd8:	40276fc0 	call	40276fc <abort>
 4022cdc:	308000c4 	addi	r2,r6,3
 4022ce0:	00ffff04 	movi	r3,-4
 4022ce4:	10c4703a 	and	r2,r2,r3
 4022ce8:	10c00017 	ldw	r3,0(r2)
 4022cec:	10800104 	addi	r2,r2,4
 4022cf0:	38c00015 	stw	r3,0(r7)
 4022cf4:	dfc00017 	ldw	ra,0(sp)
 4022cf8:	dec00104 	addi	sp,sp,4
 4022cfc:	f800283a 	ret
 4022d00:	300b883a 	mov	r5,r6
 4022d04:	003fa706 	br	4022ba4 <__flash_rwdata_start+0xfffec64c>

04022d08 <_ZL15get_ttype_entryP16lsda_header_infom>:
 4022d08:	f811883a 	mov	r8,ra
 4022d0c:	40346e80 	call	40346e8 <_mcount>
 4022d10:	403f883a 	mov	ra,r8
 4022d14:	defffc04 	addi	sp,sp,-16
 4022d18:	dfc00315 	stw	ra,12(sp)
 4022d1c:	dc400215 	stw	r17,8(sp)
 4022d20:	dc000115 	stw	r16,4(sp)
 4022d24:	2021883a 	mov	r16,r4
 4022d28:	21000503 	ldbu	r4,20(r4)
 4022d2c:	2823883a 	mov	r17,r5
 4022d30:	4022a400 	call	4022a40 <_ZL21size_of_encoded_valueh>
 4022d34:	1445383a 	mul	r2,r2,r17
 4022d38:	81800317 	ldw	r6,12(r16)
 4022d3c:	81400217 	ldw	r5,8(r16)
 4022d40:	81000503 	ldbu	r4,20(r16)
 4022d44:	d80f883a 	mov	r7,sp
 4022d48:	308dc83a 	sub	r6,r6,r2
 4022d4c:	4022af00 	call	4022af0 <_ZL28read_encoded_value_with_basehjPKhPj>
 4022d50:	d8800017 	ldw	r2,0(sp)
 4022d54:	dfc00317 	ldw	ra,12(sp)
 4022d58:	dc400217 	ldw	r17,8(sp)
 4022d5c:	dc000117 	ldw	r16,4(sp)
 4022d60:	dec00404 	addi	sp,sp,16
 4022d64:	f800283a 	ret

04022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 4022d68:	f811883a 	mov	r8,ra
 4022d6c:	40346e80 	call	40346e8 <_mcount>
 4022d70:	403f883a 	mov	ra,r8
 4022d74:	deffff04 	addi	sp,sp,-4
 4022d78:	dfc00015 	stw	ra,0(sp)
 4022d7c:	00803fc4 	movi	r2,255
 4022d80:	20c03fcc 	andi	r3,r4,255
 4022d84:	18800e26 	beq	r3,r2,4022dc0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
 4022d88:	20801c0c 	andi	r2,r4,112
 4022d8c:	00c00804 	movi	r3,32
 4022d90:	10c01726 	beq	r2,r3,4022df0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x88>
 4022d94:	18800e2e 	bgeu	r3,r2,4022dd0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x68>
 4022d98:	00c01004 	movi	r3,64
 4022d9c:	10c01026 	beq	r2,r3,4022de0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x78>
 4022da0:	00c01404 	movi	r3,80
 4022da4:	10c00626 	beq	r2,r3,4022dc0 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x58>
 4022da8:	00c00c04 	movi	r3,48
 4022dac:	10c00b1e 	bne	r2,r3,4022ddc <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x74>
 4022db0:	2809883a 	mov	r4,r5
 4022db4:	dfc00017 	ldw	ra,0(sp)
 4022db8:	dec00104 	addi	sp,sp,4
 4022dbc:	40273ec1 	jmpi	40273ec <_Unwind_GetDataRelBase>
 4022dc0:	0005883a 	mov	r2,zero
 4022dc4:	dfc00017 	ldw	ra,0(sp)
 4022dc8:	dec00104 	addi	sp,sp,4
 4022dcc:	f800283a 	ret
 4022dd0:	103ffb26 	beq	r2,zero,4022dc0 <__flash_rwdata_start+0xfffec868>
 4022dd4:	00c00404 	movi	r3,16
 4022dd8:	10fff926 	beq	r2,r3,4022dc0 <__flash_rwdata_start+0xfffec868>
 4022ddc:	40276fc0 	call	40276fc <abort>
 4022de0:	2809883a 	mov	r4,r5
 4022de4:	dfc00017 	ldw	ra,0(sp)
 4022de8:	dec00104 	addi	sp,sp,4
 4022dec:	40273c41 	jmpi	40273c4 <_Unwind_GetRegionStart>
 4022df0:	2809883a 	mov	r4,r5
 4022df4:	dfc00017 	ldw	ra,0(sp)
 4022df8:	dec00104 	addi	sp,sp,4
 4022dfc:	40274001 	jmpi	4027400 <_Unwind_GetTextRelBase>

04022e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 4022e00:	f811883a 	mov	r8,ra
 4022e04:	40346e80 	call	40346e8 <_mcount>
 4022e08:	403f883a 	mov	ra,r8
 4022e0c:	defffb04 	addi	sp,sp,-20
 4022e10:	dfc00415 	stw	ra,16(sp)
 4022e14:	dcc00315 	stw	r19,12(sp)
 4022e18:	dc800215 	stw	r18,8(sp)
 4022e1c:	dc400115 	stw	r17,4(sp)
 4022e20:	dc000015 	stw	r16,0(sp)
 4022e24:	2027883a 	mov	r19,r4
 4022e28:	2821883a 	mov	r16,r5
 4022e2c:	3023883a 	mov	r17,r6
 4022e30:	20003f26 	beq	r4,zero,4022f30 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x130>
 4022e34:	40273c40 	call	40273c4 <_Unwind_GetRegionStart>
 4022e38:	88800015 	stw	r2,0(r17)
 4022e3c:	84800003 	ldbu	r18,0(r16)
 4022e40:	00c03fc4 	movi	r3,255
 4022e44:	84000044 	addi	r16,r16,1
 4022e48:	90c03726 	beq	r18,r3,4022f28 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x128>
 4022e4c:	980b883a 	mov	r5,r19
 4022e50:	9009883a 	mov	r4,r18
 4022e54:	4022d680 	call	4022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4022e58:	800d883a 	mov	r6,r16
 4022e5c:	89c00104 	addi	r7,r17,4
 4022e60:	100b883a 	mov	r5,r2
 4022e64:	9009883a 	mov	r4,r18
 4022e68:	4022af00 	call	4022af0 <_ZL28read_encoded_value_with_basehjPKhPj>
 4022e6c:	1021883a 	mov	r16,r2
 4022e70:	80c00003 	ldbu	r3,0(r16)
 4022e74:	01003fc4 	movi	r4,255
 4022e78:	80800044 	addi	r2,r16,1
 4022e7c:	88c00505 	stb	r3,20(r17)
 4022e80:	18c03fcc 	andi	r3,r3,255
 4022e84:	19002c26 	beq	r3,r4,4022f38 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x138>
 4022e88:	100f883a 	mov	r7,r2
 4022e8c:	000d883a 	mov	r6,zero
 4022e90:	000b883a 	mov	r5,zero
 4022e94:	38c00003 	ldbu	r3,0(r7)
 4022e98:	10800044 	addi	r2,r2,1
 4022e9c:	100f883a 	mov	r7,r2
 4022ea0:	19001fcc 	andi	r4,r3,127
 4022ea4:	2148983a 	sll	r4,r4,r5
 4022ea8:	18c03fcc 	andi	r3,r3,255
 4022eac:	18c0201c 	xori	r3,r3,128
 4022eb0:	18ffe004 	addi	r3,r3,-128
 4022eb4:	310cb03a 	or	r6,r6,r4
 4022eb8:	294001c4 	addi	r5,r5,7
 4022ebc:	183ff516 	blt	r3,zero,4022e94 <__flash_rwdata_start+0xfffec93c>
 4022ec0:	118d883a 	add	r6,r2,r6
 4022ec4:	89800315 	stw	r6,12(r17)
 4022ec8:	10c00003 	ldbu	r3,0(r2)
 4022ecc:	000d883a 	mov	r6,zero
 4022ed0:	10800044 	addi	r2,r2,1
 4022ed4:	88c00545 	stb	r3,21(r17)
 4022ed8:	000b883a 	mov	r5,zero
 4022edc:	10c00003 	ldbu	r3,0(r2)
 4022ee0:	10800044 	addi	r2,r2,1
 4022ee4:	19001fcc 	andi	r4,r3,127
 4022ee8:	2148983a 	sll	r4,r4,r5
 4022eec:	18c03fcc 	andi	r3,r3,255
 4022ef0:	18c0201c 	xori	r3,r3,128
 4022ef4:	18ffe004 	addi	r3,r3,-128
 4022ef8:	310cb03a 	or	r6,r6,r4
 4022efc:	294001c4 	addi	r5,r5,7
 4022f00:	183ff616 	blt	r3,zero,4022edc <__flash_rwdata_start+0xfffec984>
 4022f04:	118d883a 	add	r6,r2,r6
 4022f08:	89800415 	stw	r6,16(r17)
 4022f0c:	dfc00417 	ldw	ra,16(sp)
 4022f10:	dcc00317 	ldw	r19,12(sp)
 4022f14:	dc800217 	ldw	r18,8(sp)
 4022f18:	dc400117 	ldw	r17,4(sp)
 4022f1c:	dc000017 	ldw	r16,0(sp)
 4022f20:	dec00504 	addi	sp,sp,20
 4022f24:	f800283a 	ret
 4022f28:	88800115 	stw	r2,4(r17)
 4022f2c:	003fd006 	br	4022e70 <__flash_rwdata_start+0xfffec918>
 4022f30:	0005883a 	mov	r2,zero
 4022f34:	003fc006 	br	4022e38 <__flash_rwdata_start+0xfffec8e0>
 4022f38:	88000315 	stw	zero,12(r17)
 4022f3c:	003fe206 	br	4022ec8 <__flash_rwdata_start+0xfffec970>

04022f40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>:
 4022f40:	f811883a 	mov	r8,ra
 4022f44:	40346e80 	call	40346e8 <_mcount>
 4022f48:	403f883a 	mov	ra,r8
 4022f4c:	defffb04 	addi	sp,sp,-20
 4022f50:	dfc00415 	stw	ra,16(sp)
 4022f54:	dc400315 	stw	r17,12(sp)
 4022f58:	dc000215 	stw	r16,8(sp)
 4022f5c:	28800017 	ldw	r2,0(r5)
 4022f60:	30c00017 	ldw	r3,0(r6)
 4022f64:	2021883a 	mov	r16,r4
 4022f68:	10800217 	ldw	r2,8(r2)
 4022f6c:	2809883a 	mov	r4,r5
 4022f70:	d9400115 	stw	r5,4(sp)
 4022f74:	d8c00015 	stw	r3,0(sp)
 4022f78:	3023883a 	mov	r17,r6
 4022f7c:	103ee83a 	callr	r2
 4022f80:	10803fcc 	andi	r2,r2,255
 4022f84:	d9400117 	ldw	r5,4(sp)
 4022f88:	10000326 	beq	r2,zero,4022f98 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x58>
 4022f8c:	d8800017 	ldw	r2,0(sp)
 4022f90:	10800017 	ldw	r2,0(r2)
 4022f94:	d8800015 	stw	r2,0(sp)
 4022f98:	80800017 	ldw	r2,0(r16)
 4022f9c:	01c00044 	movi	r7,1
 4022fa0:	d80d883a 	mov	r6,sp
 4022fa4:	10800417 	ldw	r2,16(r2)
 4022fa8:	8009883a 	mov	r4,r16
 4022fac:	103ee83a 	callr	r2
 4022fb0:	10c03fcc 	andi	r3,r2,255
 4022fb4:	18000226 	beq	r3,zero,4022fc0 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3+0x80>
 4022fb8:	d8c00017 	ldw	r3,0(sp)
 4022fbc:	88c00015 	stw	r3,0(r17)
 4022fc0:	dfc00417 	ldw	ra,16(sp)
 4022fc4:	dc400317 	ldw	r17,12(sp)
 4022fc8:	dc000217 	ldw	r16,8(sp)
 4022fcc:	dec00504 	addi	sp,sp,20
 4022fd0:	f800283a 	ret

04022fd4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>:
 4022fd4:	f811883a 	mov	r8,ra
 4022fd8:	40346e80 	call	40346e8 <_mcount>
 4022fdc:	403f883a 	mov	ra,r8
 4022fe0:	defff604 	addi	sp,sp,-40
 4022fe4:	dfc00915 	stw	ra,36(sp)
 4022fe8:	dd000815 	stw	r20,32(sp)
 4022fec:	dcc00715 	stw	r19,28(sp)
 4022ff0:	dc800615 	stw	r18,24(sp)
 4022ff4:	dc400515 	stw	r17,20(sp)
 4022ff8:	dc000415 	stw	r16,16(sp)
 4022ffc:	3821d23a 	srai	r16,r7,8
 4023000:	d9400215 	stw	r5,8(sp)
 4023004:	3825883a 	mov	r18,r7
 4023008:	2023883a 	mov	r17,r4
 402300c:	8000010e 	bge	r16,zero,4023014 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x40>
 4023010:	0421c83a 	sub	r16,zero,r16
 4023014:	000b883a 	mov	r5,zero
 4023018:	01000144 	movi	r4,5
 402301c:	d9800315 	stw	r6,12(sp)
 4023020:	4022d680 	call	4022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 4023024:	d9800317 	ldw	r6,12(sp)
 4023028:	d9c00104 	addi	r7,sp,4
 402302c:	100b883a 	mov	r5,r2
 4023030:	01000144 	movi	r4,5
 4023034:	4022af00 	call	4022af0 <_ZL28read_encoded_value_with_basehjPKhPj>
 4023038:	11fffe64 	muli	r7,r2,-7
 402303c:	0007883a 	mov	r3,zero
 4023040:	11400003 	ldbu	r5,0(r2)
 4023044:	110001e4 	muli	r4,r2,7
 4023048:	10800044 	addi	r2,r2,1
 402304c:	29801fcc 	andi	r6,r5,127
 4023050:	21c9883a 	add	r4,r4,r7
 4023054:	3108983a 	sll	r4,r6,r4
 4023058:	29403fcc 	andi	r5,r5,255
 402305c:	2940201c 	xori	r5,r5,128
 4023060:	297fe004 	addi	r5,r5,-128
 4023064:	1906b03a 	or	r3,r3,r4
 4023068:	283ff516 	blt	r5,zero,4023040 <__flash_rwdata_start+0xfffecae8>
 402306c:	10c5883a 	add	r2,r2,r3
 4023070:	11fffe64 	muli	r7,r2,-7
 4023074:	0009883a 	mov	r4,zero
 4023078:	11400003 	ldbu	r5,0(r2)
 402307c:	10c001e4 	muli	r3,r2,7
 4023080:	10800044 	addi	r2,r2,1
 4023084:	29801fcc 	andi	r6,r5,127
 4023088:	19c7883a 	add	r3,r3,r7
 402308c:	30c6983a 	sll	r3,r6,r3
 4023090:	29403fcc 	andi	r5,r5,255
 4023094:	2940201c 	xori	r5,r5,128
 4023098:	297fe004 	addi	r5,r5,-128
 402309c:	20c8b03a 	or	r4,r4,r3
 40230a0:	283ff516 	blt	r5,zero,4023078 <__flash_rwdata_start+0xfffecb20>
 40230a4:	80c03fcc 	andi	r3,r16,255
 40230a8:	18ffffc4 	addi	r3,r3,-1
 40230ac:	10c7883a 	add	r3,r2,r3
 40230b0:	210000c4 	addi	r4,r4,3
 40230b4:	197ffe64 	muli	r5,r3,-7
 40230b8:	2085883a 	add	r2,r4,r2
 40230bc:	04ffff04 	movi	r19,-4
 40230c0:	14e6703a 	and	r19,r2,r19
 40230c4:	0021883a 	mov	r16,zero
 40230c8:	18800003 	ldbu	r2,0(r3)
 40230cc:	190001e4 	muli	r4,r3,7
 40230d0:	1d000044 	addi	r20,r3,1
 40230d4:	10c01fcc 	andi	r3,r2,127
 40230d8:	2149883a 	add	r4,r4,r5
 40230dc:	1908983a 	sll	r4,r3,r4
 40230e0:	10803fcc 	andi	r2,r2,255
 40230e4:	1080201c 	xori	r2,r2,128
 40230e8:	10bfe004 	addi	r2,r2,-128
 40230ec:	a007883a 	mov	r3,r20
 40230f0:	8120b03a 	or	r16,r16,r4
 40230f4:	103ff416 	blt	r2,zero,40230c8 <__flash_rwdata_start+0xfffecb70>
 40230f8:	94803fcc 	andi	r18,r18,255
 40230fc:	80001f26 	beq	r16,zero,402317c <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1a8>
 4023100:	9009883a 	mov	r4,r18
 4023104:	4022a400 	call	4022a40 <_ZL21size_of_encoded_valueh>
 4023108:	81bfffc4 	addi	r6,r16,-1
 402310c:	308d383a 	mul	r6,r6,r2
 4023110:	d9400a17 	ldw	r5,40(sp)
 4023114:	d80f883a 	mov	r7,sp
 4023118:	9009883a 	mov	r4,r18
 402311c:	34cd883a 	add	r6,r6,r19
 4023120:	4022af00 	call	4022af0 <_ZL28read_encoded_value_with_basehjPKhPj>
 4023124:	d9000017 	ldw	r4,0(sp)
 4023128:	d9800204 	addi	r6,sp,8
 402312c:	880b883a 	mov	r5,r17
 4023130:	4022f400 	call	4022f40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 4023134:	10c03fcc 	andi	r3,r2,255
 4023138:	1800111e 	bne	r3,zero,4023180 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij+0x1ac>
 402313c:	a17ffe64 	muli	r5,r20,-7
 4023140:	a007883a 	mov	r3,r20
 4023144:	0021883a 	mov	r16,zero
 4023148:	19000003 	ldbu	r4,0(r3)
 402314c:	18c001e4 	muli	r3,r3,7
 4023150:	a5000044 	addi	r20,r20,1
 4023154:	20801fcc 	andi	r2,r4,127
 4023158:	1947883a 	add	r3,r3,r5
 402315c:	10c4983a 	sll	r2,r2,r3
 4023160:	21003fcc 	andi	r4,r4,255
 4023164:	2100201c 	xori	r4,r4,128
 4023168:	213fe004 	addi	r4,r4,-128
 402316c:	a007883a 	mov	r3,r20
 4023170:	80a0b03a 	or	r16,r16,r2
 4023174:	203ff416 	blt	r4,zero,4023148 <__flash_rwdata_start+0xfffecbf0>
 4023178:	003fe006 	br	40230fc <__flash_rwdata_start+0xfffecba4>
 402317c:	0005883a 	mov	r2,zero
 4023180:	dfc00917 	ldw	ra,36(sp)
 4023184:	dd000817 	ldw	r20,32(sp)
 4023188:	dcc00717 	ldw	r19,28(sp)
 402318c:	dc800617 	ldw	r18,24(sp)
 4023190:	dc400517 	ldw	r17,20(sp)
 4023194:	dc000417 	ldw	r16,16(sp)
 4023198:	dec00a04 	addi	sp,sp,40
 402319c:	f800283a 	ret

040231a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>:
 40231a0:	f811883a 	mov	r8,ra
 40231a4:	40346e80 	call	40346e8 <_mcount>
 40231a8:	403f883a 	mov	ra,r8
 40231ac:	defffb04 	addi	sp,sp,-20
 40231b0:	dfc00415 	stw	ra,16(sp)
 40231b4:	dc800315 	stw	r18,12(sp)
 40231b8:	dc400215 	stw	r17,8(sp)
 40231bc:	dc000115 	stw	r16,4(sp)
 40231c0:	24000317 	ldw	r16,12(r4)
 40231c4:	01ce303a 	nor	r7,zero,r7
 40231c8:	2023883a 	mov	r17,r4
 40231cc:	2825883a 	mov	r18,r5
 40231d0:	d9800015 	stw	r6,0(sp)
 40231d4:	81e1883a 	add	r16,r16,r7
 40231d8:	800d883a 	mov	r6,r16
 40231dc:	000b883a 	mov	r5,zero
 40231e0:	0009883a 	mov	r4,zero
 40231e4:	30800003 	ldbu	r2,0(r6)
 40231e8:	84000044 	addi	r16,r16,1
 40231ec:	800d883a 	mov	r6,r16
 40231f0:	10c01fcc 	andi	r3,r2,127
 40231f4:	1906983a 	sll	r3,r3,r4
 40231f8:	10803fcc 	andi	r2,r2,255
 40231fc:	1080201c 	xori	r2,r2,128
 4023200:	10bfe004 	addi	r2,r2,-128
 4023204:	28cab03a 	or	r5,r5,r3
 4023208:	210001c4 	addi	r4,r4,7
 402320c:	103ff516 	blt	r2,zero,40231e4 <__flash_rwdata_start+0xfffecc8c>
 4023210:	28000e26 	beq	r5,zero,402324c <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl+0xac>
 4023214:	8809883a 	mov	r4,r17
 4023218:	4022d080 	call	4022d08 <_ZL15get_ttype_entryP16lsda_header_infom>
 402321c:	d80d883a 	mov	r6,sp
 4023220:	900b883a 	mov	r5,r18
 4023224:	1009883a 	mov	r4,r2
 4023228:	4022f400 	call	4022f40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 402322c:	10c03fcc 	andi	r3,r2,255
 4023230:	183fe926 	beq	r3,zero,40231d8 <__flash_rwdata_start+0xfffecc80>
 4023234:	dfc00417 	ldw	ra,16(sp)
 4023238:	dc800317 	ldw	r18,12(sp)
 402323c:	dc400217 	ldw	r17,8(sp)
 4023240:	dc000117 	ldw	r16,4(sp)
 4023244:	dec00504 	addi	sp,sp,20
 4023248:	f800283a 	ret
 402324c:	0005883a 	mov	r2,zero
 4023250:	003ff806 	br	4023234 <__flash_rwdata_start+0xfffeccdc>

04023254 <__gxx_personality_sj0>:
 4023254:	f811883a 	mov	r8,ra
 4023258:	40346e80 	call	40346e8 <_mcount>
 402325c:	403f883a 	mov	ra,r8
 4023260:	deffdd04 	addi	sp,sp,-140
 4023264:	dfc02215 	stw	ra,136(sp)
 4023268:	df002115 	stw	fp,132(sp)
 402326c:	008100b4 	movhi	r2,1026
 4023270:	108c9504 	addi	r2,r2,12884
 4023274:	d8800e15 	stw	r2,56(sp)
 4023278:	008100f4 	movhi	r2,1027
 402327c:	1097a504 	addi	r2,r2,24212
 4023280:	d8800f15 	stw	r2,60(sp)
 4023284:	008100b4 	movhi	r2,1026
 4023288:	108e0e04 	addi	r2,r2,14392
 402328c:	d9001515 	stw	r4,84(sp)
 4023290:	d9000804 	addi	r4,sp,32
 4023294:	d8801115 	stw	r2,68(sp)
 4023298:	dec01015 	stw	sp,64(sp)
 402329c:	dec01215 	stw	sp,72(sp)
 40232a0:	d9401915 	stw	r5,100(sp)
 40232a4:	d9801615 	stw	r6,88(sp)
 40232a8:	d9c01715 	stw	r7,92(sp)
 40232ac:	40272900 	call	4027290 <_Unwind_SjLj_Register>
 40232b0:	d8c01517 	ldw	r3,84(sp)
 40232b4:	d8000715 	stw	zero,28(sp)
 40232b8:	d8000615 	stw	zero,24(sp)
 40232bc:	00800044 	movi	r2,1
 40232c0:	18800926 	beq	r3,r2,40232e8 <__gxx_personality_sj0+0x94>
 40232c4:	01c000c4 	movi	r7,3
 40232c8:	d9c01515 	stw	r7,84(sp)
 40232cc:	d9000804 	addi	r4,sp,32
 40232d0:	40272b40 	call	40272b4 <_Unwind_SjLj_Unregister>
 40232d4:	d8801517 	ldw	r2,84(sp)
 40232d8:	dfc02217 	ldw	ra,136(sp)
 40232dc:	df002117 	ldw	fp,132(sp)
 40232e0:	dec02304 	addi	sp,sp,140
 40232e4:	f800283a 	ret
 40232e8:	d9001617 	ldw	r4,88(sp)
 40232ec:	00af3574 	movhi	r2,48341
 40232f0:	d9c01717 	ldw	r7,92(sp)
 40232f4:	10b54004 	addi	r2,r2,-11008
 40232f8:	00ee2cb4 	movhi	r3,47282
 40232fc:	2085883a 	add	r2,r4,r2
 4023300:	18eaaf04 	addi	r3,r3,-21828
 4023304:	d8801b15 	stw	r2,108(sp)
 4023308:	38c7883a 	add	r3,r7,r3
 402330c:	1105803a 	cmpltu	r2,r2,r4
 4023310:	10c7883a 	add	r3,r2,r3
 4023314:	d8c01c15 	stw	r3,112(sp)
 4023318:	d8c01917 	ldw	r3,100(sp)
 402331c:	00800184 	movi	r2,6
 4023320:	18805426 	beq	r3,r2,4023474 <__gxx_personality_sj0+0x220>
 4023324:	d9002417 	ldw	r4,144(sp)
 4023328:	00bfffc4 	movi	r2,-1
 402332c:	d8800915 	stw	r2,36(sp)
 4023330:	40273ac0 	call	40273ac <_Unwind_GetLanguageSpecificData>
 4023334:	d8801a15 	stw	r2,104(sp)
 4023338:	1000c926 	beq	r2,zero,4023660 <__gxx_personality_sj0+0x40c>
 402333c:	d9002417 	ldw	r4,144(sp)
 4023340:	d80d883a 	mov	r6,sp
 4023344:	100b883a 	mov	r5,r2
 4023348:	4022e000 	call	4022e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 402334c:	d9402417 	ldw	r5,144(sp)
 4023350:	d9000503 	ldbu	r4,20(sp)
 4023354:	d8801515 	stw	r2,84(sp)
 4023358:	4022d680 	call	4022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 402335c:	d9002417 	ldw	r4,144(sp)
 4023360:	d9400604 	addi	r5,sp,24
 4023364:	d8800215 	stw	r2,8(sp)
 4023368:	40273640 	call	4027364 <_Unwind_GetIPInfo>
 402336c:	d8c00617 	ldw	r3,24(sp)
 4023370:	18006126 	beq	r3,zero,40234f8 <__gxx_personality_sj0+0x2a4>
 4023374:	1000ba16 	blt	r2,zero,4023660 <__gxx_personality_sj0+0x40c>
 4023378:	10002f1e 	bne	r2,zero,4023438 <__gxx_personality_sj0+0x1e4>
 402337c:	d8001515 	stw	zero,84(sp)
 4023380:	d8001f15 	stw	zero,124(sp)
 4023384:	d8001815 	stw	zero,96(sp)
 4023388:	00c00044 	movi	r3,1
 402338c:	d9001917 	ldw	r4,100(sp)
 4023390:	2080004c 	andi	r2,r4,1
 4023394:	1000b51e 	bne	r2,zero,402366c <__gxx_personality_sj0+0x418>
 4023398:	d9001917 	ldw	r4,100(sp)
 402339c:	2080020c 	andi	r2,r4,8
 40233a0:	1000b71e 	bne	r2,zero,4023680 <__gxx_personality_sj0+0x42c>
 40233a4:	d9c01c17 	ldw	r7,112(sp)
 40233a8:	3800b826 	beq	r7,zero,402368c <__gxx_personality_sj0+0x438>
 40233ac:	00800044 	movi	r2,1
 40233b0:	1880b526 	beq	r3,r2,4023688 <__gxx_personality_sj0+0x434>
 40233b4:	d9c01517 	ldw	r7,84(sp)
 40233b8:	3800f516 	blt	r7,zero,4023790 <__gxx_personality_sj0+0x53c>
 40233bc:	d9002417 	ldw	r4,144(sp)
 40233c0:	d9802317 	ldw	r6,140(sp)
 40233c4:	00bfffc4 	movi	r2,-1
 40233c8:	000b883a 	mov	r5,zero
 40233cc:	d8800915 	stw	r2,36(sp)
 40233d0:	40273200 	call	4027320 <_Unwind_SetGR>
 40233d4:	d9801517 	ldw	r6,84(sp)
 40233d8:	d9002417 	ldw	r4,144(sp)
 40233dc:	01400044 	movi	r5,1
 40233e0:	40273200 	call	4027320 <_Unwind_SetGR>
 40233e4:	d9002417 	ldw	r4,144(sp)
 40233e8:	d9401f17 	ldw	r5,124(sp)
 40233ec:	40273900 	call	4027390 <_Unwind_SetIP>
 40233f0:	010001c4 	movi	r4,7
 40233f4:	d9001515 	stw	r4,84(sp)
 40233f8:	003fb406 	br	40232cc <__flash_rwdata_start+0xfffecd74>
 40233fc:	000f883a 	mov	r7,zero
 4023400:	000d883a 	mov	r6,zero
 4023404:	19000003 	ldbu	r4,0(r3)
 4023408:	18c00044 	addi	r3,r3,1
 402340c:	d8c01515 	stw	r3,84(sp)
 4023410:	21401fcc 	andi	r5,r4,127
 4023414:	298a983a 	sll	r5,r5,r6
 4023418:	21003fcc 	andi	r4,r4,255
 402341c:	2100201c 	xori	r4,r4,128
 4023420:	213fe004 	addi	r4,r4,-128
 4023424:	394eb03a 	or	r7,r7,r5
 4023428:	318001c4 	addi	r6,r6,7
 402342c:	203ff516 	blt	r4,zero,4023404 <__flash_rwdata_start+0xfffeceac>
 4023430:	10bfffc4 	addi	r2,r2,-1
 4023434:	10003226 	beq	r2,zero,4023500 <__gxx_personality_sj0+0x2ac>
 4023438:	d9c01517 	ldw	r7,84(sp)
 402343c:	0011883a 	mov	r8,zero
 4023440:	000d883a 	mov	r6,zero
 4023444:	39000003 	ldbu	r4,0(r7)
 4023448:	38c00044 	addi	r3,r7,1
 402344c:	180f883a 	mov	r7,r3
 4023450:	21401fcc 	andi	r5,r4,127
 4023454:	298a983a 	sll	r5,r5,r6
 4023458:	21003fcc 	andi	r4,r4,255
 402345c:	2100201c 	xori	r4,r4,128
 4023460:	213fe004 	addi	r4,r4,-128
 4023464:	4150b03a 	or	r8,r8,r5
 4023468:	318001c4 	addi	r6,r6,7
 402346c:	203ff516 	blt	r4,zero,4023444 <__flash_rwdata_start+0xfffeceec>
 4023470:	003fe206 	br	40233fc <__flash_rwdata_start+0xfffecea4>
 4023474:	d9001c17 	ldw	r4,112(sp)
 4023478:	203faa1e 	bne	r4,zero,4023324 <__flash_rwdata_start+0xfffecdcc>
 402347c:	d9c01517 	ldw	r7,84(sp)
 4023480:	d8801b17 	ldw	r2,108(sp)
 4023484:	38bfa736 	bltu	r7,r2,4023324 <__flash_rwdata_start+0xfffecdcc>
 4023488:	d8c02317 	ldw	r3,140(sp)
 402348c:	18fffe17 	ldw	r3,-8(r3)
 4023490:	d8c01f15 	stw	r3,124(sp)
 4023494:	18008226 	beq	r3,zero,40236a0 <__gxx_personality_sj0+0x44c>
 4023498:	d9002317 	ldw	r4,140(sp)
 402349c:	d9c02317 	ldw	r7,140(sp)
 40234a0:	213ffb17 	ldw	r4,-20(r4)
 40234a4:	39fffd17 	ldw	r7,-12(r7)
 40234a8:	d9001515 	stw	r4,84(sp)
 40234ac:	d9c01a15 	stw	r7,104(sp)
 40234b0:	d8801517 	ldw	r2,84(sp)
 40234b4:	103fc10e 	bge	r2,zero,40233bc <__flash_rwdata_start+0xfffece64>
 40234b8:	d9002417 	ldw	r4,144(sp)
 40234bc:	d9401a17 	ldw	r5,104(sp)
 40234c0:	d80d883a 	mov	r6,sp
 40234c4:	00bfffc4 	movi	r2,-1
 40234c8:	d8800915 	stw	r2,36(sp)
 40234cc:	4022e000 	call	4022e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 40234d0:	d9402417 	ldw	r5,144(sp)
 40234d4:	d9000503 	ldbu	r4,20(sp)
 40234d8:	4022d680 	call	4022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 40234dc:	d9000503 	ldbu	r4,20(sp)
 40234e0:	d9402417 	ldw	r5,144(sp)
 40234e4:	d8800215 	stw	r2,8(sp)
 40234e8:	4022d680 	call	4022d68 <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 40234ec:	d8c02317 	ldw	r3,140(sp)
 40234f0:	18bffe15 	stw	r2,-8(r3)
 40234f4:	003fb106 	br	40233bc <__flash_rwdata_start+0xfffece64>
 40234f8:	10bfffc4 	addi	r2,r2,-1
 40234fc:	003f9d06 	br	4023374 <__flash_rwdata_start+0xfffece1c>
 4023500:	42000044 	addi	r8,r8,1
 4023504:	da001f15 	stw	r8,124(sp)
 4023508:	38005326 	beq	r7,zero,4023658 <__gxx_personality_sj0+0x404>
 402350c:	d8800417 	ldw	r2,16(sp)
 4023510:	39ffffc4 	addi	r7,r7,-1
 4023514:	11c5883a 	add	r2,r2,r7
 4023518:	d8801815 	stw	r2,96(sp)
 402351c:	40005026 	beq	r8,zero,4023660 <__gxx_personality_sj0+0x40c>
 4023520:	10007426 	beq	r2,zero,40236f4 <__gxx_personality_sj0+0x4a0>
 4023524:	d8801917 	ldw	r2,100(sp)
 4023528:	1080020c 	andi	r2,r2,8
 402352c:	d8802015 	stw	r2,128(sp)
 4023530:	1000a21e 	bne	r2,zero,40237bc <__gxx_personality_sj0+0x568>
 4023534:	d8c01c17 	ldw	r3,112(sp)
 4023538:	1800b026 	beq	r3,zero,40237fc <__gxx_personality_sj0+0x5a8>
 402353c:	01c00034 	movhi	r7,0
 4023540:	39c86104 	addi	r7,r7,8580
 4023544:	d9c01e15 	stw	r7,120(sp)
 4023548:	d8001d05 	stb	zero,116(sp)
 402354c:	d8c01817 	ldw	r3,96(sp)
 4023550:	d8001515 	stw	zero,84(sp)
 4023554:	0009883a 	mov	r4,zero
 4023558:	19400003 	ldbu	r5,0(r3)
 402355c:	18800044 	addi	r2,r3,1
 4023560:	d9c01517 	ldw	r7,84(sp)
 4023564:	28c01fcc 	andi	r3,r5,127
 4023568:	1906983a 	sll	r3,r3,r4
 402356c:	29803fcc 	andi	r6,r5,255
 4023570:	3180201c 	xori	r6,r6,128
 4023574:	38ceb03a 	or	r7,r7,r3
 4023578:	d8801715 	stw	r2,92(sp)
 402357c:	31bfe004 	addi	r6,r6,-128
 4023580:	d9c01515 	stw	r7,84(sp)
 4023584:	210001c4 	addi	r4,r4,7
 4023588:	1007883a 	mov	r3,r2
 402358c:	303ff216 	blt	r6,zero,4023558 <__flash_rwdata_start+0xfffed000>
 4023590:	00c007c4 	movi	r3,31
 4023594:	19000836 	bltu	r3,r4,40235b8 <__gxx_personality_sj0+0x364>
 4023598:	2940100c 	andi	r5,r5,64
 402359c:	28000626 	beq	r5,zero,40235b8 <__gxx_personality_sj0+0x364>
 40235a0:	01c00044 	movi	r7,1
 40235a4:	3908983a 	sll	r4,r7,r4
 40235a8:	d8c01517 	ldw	r3,84(sp)
 40235ac:	0109c83a 	sub	r4,zero,r4
 40235b0:	1906b03a 	or	r3,r3,r4
 40235b4:	d8c01515 	stw	r3,84(sp)
 40235b8:	d8001615 	stw	zero,88(sp)
 40235bc:	0009883a 	mov	r4,zero
 40235c0:	11400003 	ldbu	r5,0(r2)
 40235c4:	d9c01617 	ldw	r7,88(sp)
 40235c8:	10800044 	addi	r2,r2,1
 40235cc:	28c01fcc 	andi	r3,r5,127
 40235d0:	1906983a 	sll	r3,r3,r4
 40235d4:	29803fcc 	andi	r6,r5,255
 40235d8:	3180201c 	xori	r6,r6,128
 40235dc:	38ceb03a 	or	r7,r7,r3
 40235e0:	31bfe004 	addi	r6,r6,-128
 40235e4:	d9c01615 	stw	r7,88(sp)
 40235e8:	210001c4 	addi	r4,r4,7
 40235ec:	303ff416 	blt	r6,zero,40235c0 <__flash_rwdata_start+0xfffed068>
 40235f0:	008007c4 	movi	r2,31
 40235f4:	11000736 	bltu	r2,r4,4023614 <__gxx_personality_sj0+0x3c0>
 40235f8:	2940100c 	andi	r5,r5,64
 40235fc:	28000526 	beq	r5,zero,4023614 <__gxx_personality_sj0+0x3c0>
 4023600:	00c00044 	movi	r3,1
 4023604:	1908983a 	sll	r4,r3,r4
 4023608:	0109c83a 	sub	r4,zero,r4
 402360c:	390eb03a 	or	r7,r7,r4
 4023610:	d9c01615 	stw	r7,88(sp)
 4023614:	d9001517 	ldw	r4,84(sp)
 4023618:	20003c26 	beq	r4,zero,402370c <__gxx_personality_sj0+0x4b8>
 402361c:	01003e0e 	bge	zero,r4,4023718 <__gxx_personality_sj0+0x4c4>
 4023620:	01ffffc4 	movi	r7,-1
 4023624:	200b883a 	mov	r5,r4
 4023628:	d809883a 	mov	r4,sp
 402362c:	d9c00915 	stw	r7,36(sp)
 4023630:	4022d080 	call	4022d08 <_ZL15get_ttype_entryP16lsda_header_infom>
 4023634:	10005f26 	beq	r2,zero,40237b4 <__gxx_personality_sj0+0x560>
 4023638:	d8c01e17 	ldw	r3,120(sp)
 402363c:	1800571e 	bne	r3,zero,402379c <__gxx_personality_sj0+0x548>
 4023640:	d9001617 	ldw	r4,88(sp)
 4023644:	20002926 	beq	r4,zero,40236ec <__gxx_personality_sj0+0x498>
 4023648:	d9c01717 	ldw	r7,92(sp)
 402364c:	390f883a 	add	r7,r7,r4
 4023650:	d9c01815 	stw	r7,96(sp)
 4023654:	003fbd06 	br	402354c <__flash_rwdata_start+0xfffecff4>
 4023658:	d8c01f17 	ldw	r3,124(sp)
 402365c:	1800251e 	bne	r3,zero,40236f4 <__gxx_personality_sj0+0x4a0>
 4023660:	01000204 	movi	r4,8
 4023664:	d9001515 	stw	r4,84(sp)
 4023668:	003f1806 	br	40232cc <__flash_rwdata_start+0xfffecd74>
 402366c:	d8801c17 	ldw	r2,112(sp)
 4023670:	10000d26 	beq	r2,zero,40236a8 <__gxx_personality_sj0+0x454>
 4023674:	00800184 	movi	r2,6
 4023678:	d8801515 	stw	r2,84(sp)
 402367c:	003f1306 	br	40232cc <__flash_rwdata_start+0xfffecd74>
 4023680:	00800044 	movi	r2,1
 4023684:	18bf4d1e 	bne	r3,r2,40233bc <__flash_rwdata_start+0xfffece64>
 4023688:	40242440 	call	4024244 <_ZSt9terminatev>
 402368c:	d9001b17 	ldw	r4,108(sp)
 4023690:	00800044 	movi	r2,1
 4023694:	113f4536 	bltu	r2,r4,40233ac <__flash_rwdata_start+0xfffece54>
 4023698:	00800044 	movi	r2,1
 402369c:	18bf841e 	bne	r3,r2,40234b0 <__flash_rwdata_start+0xfffecf58>
 40236a0:	d9002317 	ldw	r4,140(sp)
 40236a4:	40246340 	call	4024634 <__cxa_call_terminate>
 40236a8:	d8c01b17 	ldw	r3,108(sp)
 40236ac:	00800044 	movi	r2,1
 40236b0:	10fff036 	bltu	r2,r3,4023674 <__flash_rwdata_start+0xfffed11c>
 40236b4:	d9002317 	ldw	r4,140(sp)
 40236b8:	d8801817 	ldw	r2,96(sp)
 40236bc:	d9c01517 	ldw	r7,84(sp)
 40236c0:	d8c01a17 	ldw	r3,104(sp)
 40236c4:	20bffc15 	stw	r2,-16(r4)
 40236c8:	d8800717 	ldw	r2,28(sp)
 40236cc:	21fffb15 	stw	r7,-20(r4)
 40236d0:	d9c01f17 	ldw	r7,124(sp)
 40236d4:	20bfff15 	stw	r2,-4(r4)
 40236d8:	00800184 	movi	r2,6
 40236dc:	20fffd15 	stw	r3,-12(r4)
 40236e0:	21fffe15 	stw	r7,-8(r4)
 40236e4:	d8801515 	stw	r2,84(sp)
 40236e8:	003ef806 	br	40232cc <__flash_rwdata_start+0xfffecd74>
 40236ec:	d8801d03 	ldbu	r2,116(sp)
 40236f0:	103fdb26 	beq	r2,zero,4023660 <__flash_rwdata_start+0xfffed108>
 40236f4:	d8c01917 	ldw	r3,100(sp)
 40236f8:	1880004c 	andi	r2,r3,1
 40236fc:	103fd81e 	bne	r2,zero,4023660 <__flash_rwdata_start+0xfffed108>
 4023700:	d8001515 	stw	zero,84(sp)
 4023704:	00c00084 	movi	r3,2
 4023708:	003f2306 	br	4023398 <__flash_rwdata_start+0xfffece40>
 402370c:	00c00044 	movi	r3,1
 4023710:	d8c01d05 	stb	r3,116(sp)
 4023714:	003fca06 	br	4023640 <__flash_rwdata_start+0xfffed0e8>
 4023718:	d9001e17 	ldw	r4,120(sp)
 402371c:	20000426 	beq	r4,zero,4023730 <__gxx_personality_sj0+0x4dc>
 4023720:	d9c02017 	ldw	r7,128(sp)
 4023724:	3800021e 	bne	r7,zero,4023730 <__gxx_personality_sj0+0x4dc>
 4023728:	d8801c17 	ldw	r2,112(sp)
 402372c:	10002726 	beq	r2,zero,40237cc <__gxx_personality_sj0+0x578>
 4023730:	d8801517 	ldw	r2,84(sp)
 4023734:	000d883a 	mov	r6,zero
 4023738:	000b883a 	mov	r5,zero
 402373c:	0088303a 	nor	r4,zero,r2
 4023740:	d8800317 	ldw	r2,12(sp)
 4023744:	1109883a 	add	r4,r2,r4
 4023748:	20800003 	ldbu	r2,0(r4)
 402374c:	21000044 	addi	r4,r4,1
 4023750:	10c01fcc 	andi	r3,r2,127
 4023754:	1946983a 	sll	r3,r3,r5
 4023758:	10803fcc 	andi	r2,r2,255
 402375c:	1080201c 	xori	r2,r2,128
 4023760:	10bfe004 	addi	r2,r2,-128
 4023764:	30ccb03a 	or	r6,r6,r3
 4023768:	294001c4 	addi	r5,r5,7
 402376c:	103ff616 	blt	r2,zero,4023748 <__flash_rwdata_start+0xfffed1f0>
 4023770:	3005003a 	cmpeq	r2,r6,zero
 4023774:	10803fcc 	andi	r2,r2,255
 4023778:	103fb126 	beq	r2,zero,4023640 <__flash_rwdata_start+0xfffed0e8>
 402377c:	d9c01917 	ldw	r7,100(sp)
 4023780:	3880004c 	andi	r2,r7,1
 4023784:	103fb91e 	bne	r2,zero,402366c <__flash_rwdata_start+0xfffed114>
 4023788:	d8802017 	ldw	r2,128(sp)
 402378c:	10002d26 	beq	r2,zero,4023844 <__gxx_personality_sj0+0x5f0>
 4023790:	00800044 	movi	r2,1
 4023794:	d8800915 	stw	r2,36(sp)
 4023798:	40242840 	call	4024284 <_ZSt10unexpectedv>
 402379c:	d9800704 	addi	r6,sp,28
 40237a0:	180b883a 	mov	r5,r3
 40237a4:	1009883a 	mov	r4,r2
 40237a8:	4022f400 	call	4022f40 <_ZL16get_adjusted_ptrPKSt9type_infoS1_PPv.constprop.3>
 40237ac:	10803fcc 	andi	r2,r2,255
 40237b0:	103fa326 	beq	r2,zero,4023640 <__flash_rwdata_start+0xfffed0e8>
 40237b4:	00c000c4 	movi	r3,3
 40237b8:	003ef406 	br	402338c <__flash_rwdata_start+0xfffece34>
 40237bc:	01000034 	movhi	r4,0
 40237c0:	21085f04 	addi	r4,r4,8572
 40237c4:	d9001e15 	stw	r4,120(sp)
 40237c8:	003f5f06 	br	4023548 <__flash_rwdata_start+0xfffecff0>
 40237cc:	d9001b17 	ldw	r4,108(sp)
 40237d0:	00c00044 	movi	r3,1
 40237d4:	193fd636 	bltu	r3,r4,4023730 <__flash_rwdata_start+0xfffed1d8>
 40237d8:	01ffffc4 	movi	r7,-1
 40237dc:	d9c00915 	stw	r7,36(sp)
 40237e0:	d9800717 	ldw	r6,28(sp)
 40237e4:	d9c01517 	ldw	r7,84(sp)
 40237e8:	d9401e17 	ldw	r5,120(sp)
 40237ec:	d809883a 	mov	r4,sp
 40237f0:	40231a00 	call	40231a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 40237f4:	1080005c 	xori	r2,r2,1
 40237f8:	003fde06 	br	4023774 <__flash_rwdata_start+0xfffed21c>
 40237fc:	d9001b17 	ldw	r4,108(sp)
 4023800:	00800044 	movi	r2,1
 4023804:	113f4d36 	bltu	r2,r4,402353c <__flash_rwdata_start+0xfffecfe4>
 4023808:	d9c02317 	ldw	r7,140(sp)
 402380c:	38800017 	ldw	r2,0(r7)
 4023810:	1080004c 	andi	r2,r2,1
 4023814:	1000061e 	bne	r2,zero,4023830 <__gxx_personality_sj0+0x5dc>
 4023818:	d8c02317 	ldw	r3,140(sp)
 402381c:	18800504 	addi	r2,r3,20
 4023820:	d8800715 	stw	r2,28(sp)
 4023824:	10bff017 	ldw	r2,-64(r2)
 4023828:	d8801e15 	stw	r2,120(sp)
 402382c:	003f4606 	br	4023548 <__flash_rwdata_start+0xfffecff0>
 4023830:	38bff517 	ldw	r2,-44(r7)
 4023834:	003ffa06 	br	4023820 <__flash_rwdata_start+0xfffed2c8>
 4023838:	d9000a17 	ldw	r4,40(sp)
 402383c:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4023840:	003f9106 	br	4023688 <__flash_rwdata_start+0xfffed130>
 4023844:	d9c01c17 	ldw	r7,112(sp)
 4023848:	383eda1e 	bne	r7,zero,40233b4 <__flash_rwdata_start+0xfffece5c>
 402384c:	d8c01b17 	ldw	r3,108(sp)
 4023850:	00800044 	movi	r2,1
 4023854:	10fed736 	bltu	r2,r3,40233b4 <__flash_rwdata_start+0xfffece5c>
 4023858:	00c000c4 	movi	r3,3
 402385c:	003f8e06 	br	4023698 <__flash_rwdata_start+0xfffed140>

04023860 <__cxa_call_unexpected>:
 4023860:	f811883a 	mov	r8,ra
 4023864:	40346e80 	call	40346e8 <_mcount>
 4023868:	403f883a 	mov	ra,r8
 402386c:	deffe604 	addi	sp,sp,-104
 4023870:	dfc01915 	stw	ra,100(sp)
 4023874:	df001815 	stw	fp,96(sp)
 4023878:	008100b4 	movhi	r2,1026
 402387c:	108c9504 	addi	r2,r2,12884
 4023880:	d8800d15 	stw	r2,52(sp)
 4023884:	008100f4 	movhi	r2,1027
 4023888:	1097a904 	addi	r2,r2,24228
 402388c:	d8800e15 	stw	r2,56(sp)
 4023890:	d8800104 	addi	r2,sp,4
 4023894:	d8800f15 	stw	r2,60(sp)
 4023898:	008100b4 	movhi	r2,1026
 402389c:	108e3e04 	addi	r2,r2,14584
 40238a0:	d9001415 	stw	r4,80(sp)
 40238a4:	d9000704 	addi	r4,sp,28
 40238a8:	d8801015 	stw	r2,64(sp)
 40238ac:	dec01115 	stw	sp,68(sp)
 40238b0:	40272900 	call	4027290 <_Unwind_SjLj_Register>
 40238b4:	d9001417 	ldw	r4,80(sp)
 40238b8:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 40238bc:	d8c01417 	ldw	r3,80(sp)
 40238c0:	18bffe17 	ldw	r2,-8(r3)
 40238c4:	193ff717 	ldw	r4,-36(r3)
 40238c8:	18fffd17 	ldw	r3,-12(r3)
 40238cc:	d8800315 	stw	r2,12(sp)
 40238d0:	d8c01615 	stw	r3,88(sp)
 40238d4:	d8c01417 	ldw	r3,80(sp)
 40238d8:	18fffb17 	ldw	r3,-20(r3)
 40238dc:	d8c01515 	stw	r3,84(sp)
 40238e0:	d8c01417 	ldw	r3,80(sp)
 40238e4:	18fff817 	ldw	r3,-32(r3)
 40238e8:	d8c01415 	stw	r3,80(sp)
 40238ec:	00c00044 	movi	r3,1
 40238f0:	d8c00815 	stw	r3,32(sp)
 40238f4:	40242680 	call	4024268 <_ZN10__cxxabiv112__unexpectedEPFvvE>
 40238f8:	d8c00917 	ldw	r3,36(sp)
 40238fc:	d8800817 	ldw	r2,32(sp)
 4023900:	d8c01715 	stw	r3,92(sp)
 4023904:	10000a26 	beq	r2,zero,4023930 <__cxa_call_unexpected+0xd0>
 4023908:	10bfffc4 	addi	r2,r2,-1
 402390c:	10000126 	beq	r2,zero,4023914 <__cxa_call_unexpected+0xb4>
 4023910:	003b68fa 	trap	3
 4023914:	d8000815 	stw	zero,32(sp)
 4023918:	4023d700 	call	4023d70 <__cxa_end_catch>
 402391c:	4023d700 	call	4023d70 <__cxa_end_catch>
 4023920:	d9001717 	ldw	r4,92(sp)
 4023924:	00bfffc4 	movi	r2,-1
 4023928:	d8800815 	stw	r2,32(sp)
 402392c:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 4023930:	d9001717 	ldw	r4,92(sp)
 4023934:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4023938:	40246980 	call	4024698 <__cxa_get_globals_fast>
 402393c:	10800017 	ldw	r2,0(r2)
 4023940:	10c00b17 	ldw	r3,44(r2)
 4023944:	18c0004c 	andi	r3,r3,1
 4023948:	18001e26 	beq	r3,zero,40239c4 <__cxa_call_unexpected+0x164>
 402394c:	10800017 	ldw	r2,0(r2)
 4023950:	d8801715 	stw	r2,92(sp)
 4023954:	d8801517 	ldw	r2,84(sp)
 4023958:	00802b0e 	bge	zero,r2,4023a08 <__cxa_call_unexpected+0x1a8>
 402395c:	d8c01717 	ldw	r3,92(sp)
 4023960:	d8800317 	ldw	r2,12(sp)
 4023964:	d9c01517 	ldw	r7,84(sp)
 4023968:	193ff017 	ldw	r4,-64(r3)
 402396c:	d9801617 	ldw	r6,88(sp)
 4023970:	d8800015 	stw	r2,0(sp)
 4023974:	180b883a 	mov	r5,r3
 4023978:	00800084 	movi	r2,2
 402397c:	d8800815 	stw	r2,32(sp)
 4023980:	4022fd40 	call	4022fd4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 4023984:	10803fcc 	andi	r2,r2,255
 4023988:	10001e1e 	bne	r2,zero,4023a04 <__cxa_call_unexpected+0x1a4>
 402398c:	d8800317 	ldw	r2,12(sp)
 4023990:	d9c01517 	ldw	r7,84(sp)
 4023994:	d9801617 	ldw	r6,88(sp)
 4023998:	01000034 	movhi	r4,0
 402399c:	d8800015 	stw	r2,0(sp)
 40239a0:	2100a504 	addi	r4,r4,660
 40239a4:	00800084 	movi	r2,2
 40239a8:	000b883a 	mov	r5,zero
 40239ac:	d8800815 	stw	r2,32(sp)
 40239b0:	4022fd40 	call	4022fd4 <_ZL28check_compact_exception_specPKSt9type_infoPvPKhij>
 40239b4:	10803fcc 	andi	r2,r2,255
 40239b8:	1000051e 	bne	r2,zero,40239d0 <__cxa_call_unexpected+0x170>
 40239bc:	d9001417 	ldw	r4,80(sp)
 40239c0:	40241780 	call	4024178 <_ZN10__cxxabiv111__terminateEPFvvE>
 40239c4:	10801004 	addi	r2,r2,64
 40239c8:	d8801715 	stw	r2,92(sp)
 40239cc:	003fe106 	br	4023954 <__flash_rwdata_start+0xfffed3fc>
 40239d0:	01000104 	movi	r4,4
 40239d4:	40244940 	call	4024494 <__cxa_allocate_exception>
 40239d8:	00c00034 	movhi	r3,0
 40239dc:	18c0c004 	addi	r3,r3,768
 40239e0:	018100b4 	movhi	r6,1026
 40239e4:	01400034 	movhi	r5,0
 40239e8:	10c00015 	stw	r3,0(r2)
 40239ec:	31927604 	addi	r6,r6,18904
 40239f0:	00c00084 	movi	r3,2
 40239f4:	2940a504 	addi	r5,r5,660
 40239f8:	1009883a 	mov	r4,r2
 40239fc:	d8c00815 	stw	r3,32(sp)
 4023a00:	4023b700 	call	4023b70 <__cxa_throw>
 4023a04:	4023c0c0 	call	4023c0c <__cxa_rethrow>
 4023a08:	d9401617 	ldw	r5,88(sp)
 4023a0c:	00800084 	movi	r2,2
 4023a10:	d9800104 	addi	r6,sp,4
 4023a14:	0009883a 	mov	r4,zero
 4023a18:	d8800815 	stw	r2,32(sp)
 4023a1c:	4022e000 	call	4022e00 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 4023a20:	d9801717 	ldw	r6,92(sp)
 4023a24:	d9c01517 	ldw	r7,84(sp)
 4023a28:	d9000104 	addi	r4,sp,4
 4023a2c:	317ff017 	ldw	r5,-64(r6)
 4023a30:	40231a00 	call	40231a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 4023a34:	10803fcc 	andi	r2,r2,255
 4023a38:	1000171e 	bne	r2,zero,4023a98 <__cxa_call_unexpected+0x238>
 4023a3c:	d9c01517 	ldw	r7,84(sp)
 4023a40:	01400034 	movhi	r5,0
 4023a44:	00800084 	movi	r2,2
 4023a48:	2940a504 	addi	r5,r5,660
 4023a4c:	000d883a 	mov	r6,zero
 4023a50:	d9000104 	addi	r4,sp,4
 4023a54:	d8800815 	stw	r2,32(sp)
 4023a58:	40231a00 	call	40231a0 <_ZL20check_exception_specP16lsda_header_infoPKSt9type_infoPvl>
 4023a5c:	10803fcc 	andi	r2,r2,255
 4023a60:	103fd626 	beq	r2,zero,40239bc <__flash_rwdata_start+0xfffed464>
 4023a64:	01000104 	movi	r4,4
 4023a68:	40244940 	call	4024494 <__cxa_allocate_exception>
 4023a6c:	00c00034 	movhi	r3,0
 4023a70:	18c0c004 	addi	r3,r3,768
 4023a74:	018100b4 	movhi	r6,1026
 4023a78:	01400034 	movhi	r5,0
 4023a7c:	10c00015 	stw	r3,0(r2)
 4023a80:	31927604 	addi	r6,r6,18904
 4023a84:	00c00084 	movi	r3,2
 4023a88:	2940a504 	addi	r5,r5,660
 4023a8c:	1009883a 	mov	r4,r2
 4023a90:	d8c00815 	stw	r3,32(sp)
 4023a94:	4023b700 	call	4023b70 <__cxa_throw>
 4023a98:	4023c0c0 	call	4023c0c <__cxa_rethrow>

04023a9c <_ZNKSt9bad_alloc4whatEv>:
 4023a9c:	f811883a 	mov	r8,ra
 4023aa0:	40346e80 	call	40346e8 <_mcount>
 4023aa4:	403f883a 	mov	ra,r8
 4023aa8:	00800034 	movhi	r2,0
 4023aac:	10805404 	addi	r2,r2,336
 4023ab0:	f800283a 	ret

04023ab4 <_ZNSt9bad_allocD1Ev>:
 4023ab4:	f811883a 	mov	r8,ra
 4023ab8:	40346e80 	call	40346e8 <_mcount>
 4023abc:	403f883a 	mov	ra,r8
 4023ac0:	00800034 	movhi	r2,0
 4023ac4:	10806104 	addi	r2,r2,388
 4023ac8:	20800015 	stw	r2,0(r4)
 4023acc:	40249c81 	jmpi	40249c8 <_ZNSt9exceptionD1Ev>

04023ad0 <_ZNSt9bad_allocD0Ev>:
 4023ad0:	f811883a 	mov	r8,ra
 4023ad4:	40346e80 	call	40346e8 <_mcount>
 4023ad8:	403f883a 	mov	ra,r8
 4023adc:	defffe04 	addi	sp,sp,-8
 4023ae0:	dfc00115 	stw	ra,4(sp)
 4023ae4:	dc000015 	stw	r16,0(sp)
 4023ae8:	00800034 	movhi	r2,0
 4023aec:	10806104 	addi	r2,r2,388
 4023af0:	20800015 	stw	r2,0(r4)
 4023af4:	2021883a 	mov	r16,r4
 4023af8:	40249c80 	call	40249c8 <_ZNSt9exceptionD1Ev>
 4023afc:	8009883a 	mov	r4,r16
 4023b00:	dfc00117 	ldw	ra,4(sp)
 4023b04:	dc000017 	ldw	r16,0(sp)
 4023b08:	dec00204 	addi	sp,sp,8
 4023b0c:	4023b101 	jmpi	4023b10 <_ZdlPv>

04023b10 <_ZdlPv>:
 4023b10:	f811883a 	mov	r8,ra
 4023b14:	40346e80 	call	40346e8 <_mcount>
 4023b18:	403f883a 	mov	ra,r8
 4023b1c:	40277401 	jmpi	4027740 <free>

04023b20 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception>:
 4023b20:	f811883a 	mov	r8,ra
 4023b24:	40346e80 	call	40346e8 <_mcount>
 4023b28:	403f883a 	mov	ra,r8
 4023b2c:	defffe04 	addi	sp,sp,-8
 4023b30:	dfc00115 	stw	ra,4(sp)
 4023b34:	dc000015 	stw	r16,0(sp)
 4023b38:	00800044 	movi	r2,1
 4023b3c:	11000a36 	bltu	r2,r4,4023b68 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x48>
 4023b40:	28bff617 	ldw	r2,-40(r5)
 4023b44:	2c000504 	addi	r16,r5,20
 4023b48:	10000226 	beq	r2,zero,4023b54 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP17_Unwind_Exception+0x34>
 4023b4c:	8009883a 	mov	r4,r16
 4023b50:	103ee83a 	callr	r2
 4023b54:	8009883a 	mov	r4,r16
 4023b58:	dfc00117 	ldw	ra,4(sp)
 4023b5c:	dc000017 	ldw	r16,0(sp)
 4023b60:	dec00204 	addi	sp,sp,8
 4023b64:	40245001 	jmpi	4024500 <__cxa_free_exception>
 4023b68:	293ff817 	ldw	r4,-32(r5)
 4023b6c:	40241780 	call	4024178 <_ZN10__cxxabiv111__terminateEPFvvE>

04023b70 <__cxa_throw>:
 4023b70:	f811883a 	mov	r8,ra
 4023b74:	40346e80 	call	40346e8 <_mcount>
 4023b78:	403f883a 	mov	ra,r8
 4023b7c:	defffb04 	addi	sp,sp,-20
 4023b80:	dfc00415 	stw	ra,16(sp)
 4023b84:	dcc00315 	stw	r19,12(sp)
 4023b88:	dc800215 	stw	r18,8(sp)
 4023b8c:	dc400115 	stw	r17,4(sp)
 4023b90:	dc000015 	stw	r16,0(sp)
 4023b94:	2021883a 	mov	r16,r4
 4023b98:	2827883a 	mov	r19,r5
 4023b9c:	3025883a 	mov	r18,r6
 4023ba0:	40246b00 	call	40246b0 <__cxa_get_globals>
 4023ba4:	10c00117 	ldw	r3,4(r2)
 4023ba8:	847ffb04 	addi	r17,r16,-20
 4023bac:	18c00044 	addi	r3,r3,1
 4023bb0:	10c00115 	stw	r3,4(r2)
 4023bb4:	00800044 	movi	r2,1
 4023bb8:	80bfef15 	stw	r2,-68(r16)
 4023bbc:	84fff015 	stw	r19,-64(r16)
 4023bc0:	84bff115 	stw	r18,-60(r16)
 4023bc4:	40243040 	call	4024304 <_ZSt14get_unexpectedv>
 4023bc8:	80bff215 	stw	r2,-56(r16)
 4023bcc:	40242c80 	call	40242c8 <_ZSt13get_terminatev>
 4023bd0:	80bff315 	stw	r2,-52(r16)
 4023bd4:	0090caf4 	movhi	r2,17195
 4023bd8:	108ac004 	addi	r2,r2,11008
 4023bdc:	80bffb15 	stw	r2,-20(r16)
 4023be0:	0091d3b4 	movhi	r2,18254
 4023be4:	109550c4 	addi	r2,r2,21827
 4023be8:	80bffc15 	stw	r2,-16(r16)
 4023bec:	008100b4 	movhi	r2,1026
 4023bf0:	108ec804 	addi	r2,r2,15136
 4023bf4:	8809883a 	mov	r4,r17
 4023bf8:	80bffd15 	stw	r2,-12(r16)
 4023bfc:	40274140 	call	4027414 <_Unwind_SjLj_RaiseException>
 4023c00:	8809883a 	mov	r4,r17
 4023c04:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4023c08:	40242440 	call	4024244 <_ZSt9terminatev>

04023c0c <__cxa_rethrow>:
 4023c0c:	f811883a 	mov	r8,ra
 4023c10:	40346e80 	call	40346e8 <_mcount>
 4023c14:	403f883a 	mov	ra,r8
 4023c18:	defffe04 	addi	sp,sp,-8
 4023c1c:	dfc00115 	stw	ra,4(sp)
 4023c20:	dc000015 	stw	r16,0(sp)
 4023c24:	40246b00 	call	40246b0 <__cxa_get_globals>
 4023c28:	10c00117 	ldw	r3,4(r2)
 4023c2c:	11000017 	ldw	r4,0(r2)
 4023c30:	18c00044 	addi	r3,r3,1
 4023c34:	10c00115 	stw	r3,4(r2)
 4023c38:	20001126 	beq	r4,zero,4023c80 <__cxa_rethrow+0x74>
 4023c3c:	21400b17 	ldw	r5,44(r4)
 4023c40:	01ef3574 	movhi	r7,48341
 4023c44:	39f54004 	addi	r7,r7,-11008
 4023c48:	29cf883a 	add	r7,r5,r7
 4023c4c:	20c00c17 	ldw	r3,48(r4)
 4023c50:	394d803a 	cmpltu	r6,r7,r5
 4023c54:	016e2cb4 	movhi	r5,47282
 4023c58:	296aaf04 	addi	r5,r5,-21828
 4023c5c:	1947883a 	add	r3,r3,r5
 4023c60:	30c7883a 	add	r3,r6,r3
 4023c64:	18000726 	beq	r3,zero,4023c84 <__cxa_rethrow+0x78>
 4023c68:	10000015 	stw	zero,0(r2)
 4023c6c:	24000b04 	addi	r16,r4,44
 4023c70:	8009883a 	mov	r4,r16
 4023c74:	40275900 	call	4027590 <_Unwind_SjLj_Resume_or_Rethrow>
 4023c78:	8009883a 	mov	r4,r16
 4023c7c:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4023c80:	40242440 	call	4024244 <_ZSt9terminatev>
 4023c84:	00c00044 	movi	r3,1
 4023c88:	19fff736 	bltu	r3,r7,4023c68 <__flash_rwdata_start+0xfffed710>
 4023c8c:	20800517 	ldw	r2,20(r4)
 4023c90:	0085c83a 	sub	r2,zero,r2
 4023c94:	20800515 	stw	r2,20(r4)
 4023c98:	003ff406 	br	4023c6c <__flash_rwdata_start+0xfffed714>

04023c9c <__cxa_get_exception_ptr>:
 4023c9c:	f811883a 	mov	r8,ra
 4023ca0:	40346e80 	call	40346e8 <_mcount>
 4023ca4:	403f883a 	mov	ra,r8
 4023ca8:	20bfff17 	ldw	r2,-4(r4)
 4023cac:	f800283a 	ret

04023cb0 <__cxa_begin_catch>:
 4023cb0:	f811883a 	mov	r8,ra
 4023cb4:	40346e80 	call	40346e8 <_mcount>
 4023cb8:	403f883a 	mov	ra,r8
 4023cbc:	defffe04 	addi	sp,sp,-8
 4023cc0:	dfc00115 	stw	ra,4(sp)
 4023cc4:	dc000015 	stw	r16,0(sp)
 4023cc8:	2021883a 	mov	r16,r4
 4023ccc:	40246b00 	call	40246b0 <__cxa_get_globals>
 4023cd0:	81000017 	ldw	r4,0(r16)
 4023cd4:	80c00117 	ldw	r3,4(r16)
 4023cd8:	01af3574 	movhi	r6,48341
 4023cdc:	31b54004 	addi	r6,r6,-11008
 4023ce0:	016e2cb4 	movhi	r5,47282
 4023ce4:	296aaf04 	addi	r5,r5,-21828
 4023ce8:	218d883a 	add	r6,r4,r6
 4023cec:	3109803a 	cmpltu	r4,r6,r4
 4023cf0:	1947883a 	add	r3,r3,r5
 4023cf4:	20c7883a 	add	r3,r4,r3
 4023cf8:	817ff504 	addi	r5,r16,-44
 4023cfc:	11000017 	ldw	r4,0(r2)
 4023d00:	18000726 	beq	r3,zero,4023d20 <__cxa_begin_catch+0x70>
 4023d04:	2000191e 	bne	r4,zero,4023d6c <__cxa_begin_catch+0xbc>
 4023d08:	11400015 	stw	r5,0(r2)
 4023d0c:	0005883a 	mov	r2,zero
 4023d10:	dfc00117 	ldw	ra,4(sp)
 4023d14:	dc000017 	ldw	r16,0(sp)
 4023d18:	dec00204 	addi	sp,sp,8
 4023d1c:	f800283a 	ret
 4023d20:	01c00044 	movi	r7,1
 4023d24:	39bff736 	bltu	r7,r6,4023d04 <__flash_rwdata_start+0xfffed7ac>
 4023d28:	80fffa17 	ldw	r3,-24(r16)
 4023d2c:	18000d16 	blt	r3,zero,4023d64 <__cxa_begin_catch+0xb4>
 4023d30:	18c00044 	addi	r3,r3,1
 4023d34:	11800117 	ldw	r6,4(r2)
 4023d38:	80fffa15 	stw	r3,-24(r16)
 4023d3c:	30ffffc4 	addi	r3,r6,-1
 4023d40:	10c00115 	stw	r3,4(r2)
 4023d44:	21400226 	beq	r4,r5,4023d50 <__cxa_begin_catch+0xa0>
 4023d48:	813ff915 	stw	r4,-28(r16)
 4023d4c:	11400015 	stw	r5,0(r2)
 4023d50:	80bfff17 	ldw	r2,-4(r16)
 4023d54:	dfc00117 	ldw	ra,4(sp)
 4023d58:	dc000017 	ldw	r16,0(sp)
 4023d5c:	dec00204 	addi	sp,sp,8
 4023d60:	f800283a 	ret
 4023d64:	38c7c83a 	sub	r3,r7,r3
 4023d68:	003ff206 	br	4023d34 <__flash_rwdata_start+0xfffed7dc>
 4023d6c:	40242440 	call	4024244 <_ZSt9terminatev>

04023d70 <__cxa_end_catch>:
 4023d70:	f811883a 	mov	r8,ra
 4023d74:	40346e80 	call	40346e8 <_mcount>
 4023d78:	403f883a 	mov	ra,r8
 4023d7c:	deffff04 	addi	sp,sp,-4
 4023d80:	dfc00015 	stw	ra,0(sp)
 4023d84:	40246980 	call	4024698 <__cxa_get_globals_fast>
 4023d88:	11000017 	ldw	r4,0(r2)
 4023d8c:	20001426 	beq	r4,zero,4023de0 <__cxa_end_catch+0x70>
 4023d90:	21400b17 	ldw	r5,44(r4)
 4023d94:	01ef3574 	movhi	r7,48341
 4023d98:	39f54004 	addi	r7,r7,-11008
 4023d9c:	29cf883a 	add	r7,r5,r7
 4023da0:	20c00c17 	ldw	r3,48(r4)
 4023da4:	394d803a 	cmpltu	r6,r7,r5
 4023da8:	016e2cb4 	movhi	r5,47282
 4023dac:	296aaf04 	addi	r5,r5,-21828
 4023db0:	1947883a 	add	r3,r3,r5
 4023db4:	30c7883a 	add	r3,r6,r3
 4023db8:	18000c1e 	bne	r3,zero,4023dec <__cxa_end_catch+0x7c>
 4023dbc:	00c00044 	movi	r3,1
 4023dc0:	19c00a36 	bltu	r3,r7,4023dec <__cxa_end_catch+0x7c>
 4023dc4:	20c00517 	ldw	r3,20(r4)
 4023dc8:	18000d16 	blt	r3,zero,4023e00 <__cxa_end_catch+0x90>
 4023dcc:	18ffffc4 	addi	r3,r3,-1
 4023dd0:	18001026 	beq	r3,zero,4023e14 <__cxa_end_catch+0xa4>
 4023dd4:	00bfffc4 	movi	r2,-1
 4023dd8:	18801426 	beq	r3,r2,4023e2c <__cxa_end_catch+0xbc>
 4023ddc:	20c00515 	stw	r3,20(r4)
 4023de0:	dfc00017 	ldw	ra,0(sp)
 4023de4:	dec00104 	addi	sp,sp,4
 4023de8:	f800283a 	ret
 4023dec:	21000b04 	addi	r4,r4,44
 4023df0:	10000015 	stw	zero,0(r2)
 4023df4:	dfc00017 	ldw	ra,0(sp)
 4023df8:	dec00104 	addi	sp,sp,4
 4023dfc:	40275e81 	jmpi	40275e8 <_Unwind_DeleteException>
 4023e00:	18c00044 	addi	r3,r3,1
 4023e04:	183ff51e 	bne	r3,zero,4023ddc <__flash_rwdata_start+0xfffed884>
 4023e08:	21400417 	ldw	r5,16(r4)
 4023e0c:	11400015 	stw	r5,0(r2)
 4023e10:	003ff206 	br	4023ddc <__flash_rwdata_start+0xfffed884>
 4023e14:	20c00417 	ldw	r3,16(r4)
 4023e18:	21000b04 	addi	r4,r4,44
 4023e1c:	10c00015 	stw	r3,0(r2)
 4023e20:	dfc00017 	ldw	ra,0(sp)
 4023e24:	dec00104 	addi	sp,sp,4
 4023e28:	40275e81 	jmpi	40275e8 <_Unwind_DeleteException>
 4023e2c:	40242440 	call	4024244 <_ZSt9terminatev>

04023e30 <_ZSt18uncaught_exceptionv>:
 4023e30:	f811883a 	mov	r8,ra
 4023e34:	40346e80 	call	40346e8 <_mcount>
 4023e38:	403f883a 	mov	ra,r8
 4023e3c:	deffff04 	addi	sp,sp,-4
 4023e40:	dfc00015 	stw	ra,0(sp)
 4023e44:	40246b00 	call	40246b0 <__cxa_get_globals>
 4023e48:	10800117 	ldw	r2,4(r2)
 4023e4c:	1004c03a 	cmpne	r2,r2,zero
 4023e50:	dfc00017 	ldw	ra,0(sp)
 4023e54:	dec00104 	addi	sp,sp,4
 4023e58:	f800283a 	ret

04023e5c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 4023e5c:	f811883a 	mov	r8,ra
 4023e60:	40346e80 	call	40346e8 <_mcount>
 4023e64:	403f883a 	mov	ra,r8
 4023e68:	defffa04 	addi	sp,sp,-24
 4023e6c:	dfc00515 	stw	ra,20(sp)
 4023e70:	dc000415 	stw	r16,16(sp)
 4023e74:	20800017 	ldw	r2,0(r4)
 4023e78:	3021883a 	mov	r16,r6
 4023e7c:	31800017 	ldw	r6,0(r6)
 4023e80:	10800617 	ldw	r2,24(r2)
 4023e84:	00c00404 	movi	r3,16
 4023e88:	d8c00215 	stw	r3,8(sp)
 4023e8c:	d8000015 	stw	zero,0(sp)
 4023e90:	d8000115 	stw	zero,4(sp)
 4023e94:	d8000315 	stw	zero,12(sp)
 4023e98:	d80f883a 	mov	r7,sp
 4023e9c:	103ee83a 	callr	r2
 4023ea0:	d8800117 	ldw	r2,4(sp)
 4023ea4:	00c00184 	movi	r3,6
 4023ea8:	1080018c 	andi	r2,r2,6
 4023eac:	10c00526 	beq	r2,r3,4023ec4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x68>
 4023eb0:	0005883a 	mov	r2,zero
 4023eb4:	dfc00517 	ldw	ra,20(sp)
 4023eb8:	dc000417 	ldw	r16,16(sp)
 4023ebc:	dec00604 	addi	sp,sp,24
 4023ec0:	f800283a 	ret
 4023ec4:	d8c00017 	ldw	r3,0(sp)
 4023ec8:	00800044 	movi	r2,1
 4023ecc:	80c00015 	stw	r3,0(r16)
 4023ed0:	dfc00517 	ldw	ra,20(sp)
 4023ed4:	dc000417 	ldw	r16,16(sp)
 4023ed8:	dec00604 	addi	sp,sp,24
 4023edc:	f800283a 	ret

04023ee0 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 4023ee0:	f811883a 	mov	r8,ra
 4023ee4:	40346e80 	call	40346e8 <_mcount>
 4023ee8:	403f883a 	mov	ra,r8
 4023eec:	d8800017 	ldw	r2,0(sp)
 4023ef0:	11800226 	beq	r2,r6,4023efc <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x1c>
 4023ef4:	00800044 	movi	r2,1
 4023ef8:	f800283a 	ret
 4023efc:	00800184 	movi	r2,6
 4023f00:	f800283a 	ret

04023f04 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 4023f04:	f811883a 	mov	r8,ra
 4023f08:	40346e80 	call	40346e8 <_mcount>
 4023f0c:	403f883a 	mov	ra,r8
 4023f10:	00800034 	movhi	r2,0
 4023f14:	10807204 	addi	r2,r2,456
 4023f18:	20800015 	stw	r2,0(r4)
 4023f1c:	4024a781 	jmpi	4024a78 <_ZNSt9type_infoD1Ev>

04023f20 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 4023f20:	f811883a 	mov	r8,ra
 4023f24:	40346e80 	call	40346e8 <_mcount>
 4023f28:	403f883a 	mov	ra,r8
 4023f2c:	defffe04 	addi	sp,sp,-8
 4023f30:	dfc00115 	stw	ra,4(sp)
 4023f34:	dc000015 	stw	r16,0(sp)
 4023f38:	00800034 	movhi	r2,0
 4023f3c:	10807204 	addi	r2,r2,456
 4023f40:	20800015 	stw	r2,0(r4)
 4023f44:	2021883a 	mov	r16,r4
 4023f48:	4024a780 	call	4024a78 <_ZNSt9type_infoD1Ev>
 4023f4c:	8009883a 	mov	r4,r16
 4023f50:	dfc00117 	ldw	ra,4(sp)
 4023f54:	dc000017 	ldw	r16,0(sp)
 4023f58:	dec00204 	addi	sp,sp,8
 4023f5c:	4023b101 	jmpi	4023b10 <_ZdlPv>

04023f60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 4023f60:	f811883a 	mov	r8,ra
 4023f64:	40346e80 	call	40346e8 <_mcount>
 4023f68:	403f883a 	mov	ra,r8
 4023f6c:	defffd04 	addi	sp,sp,-12
 4023f70:	dfc00215 	stw	ra,8(sp)
 4023f74:	dc400115 	stw	r17,4(sp)
 4023f78:	dc000015 	stw	r16,0(sp)
 4023f7c:	21000117 	ldw	r4,4(r4)
 4023f80:	29400117 	ldw	r5,4(r5)
 4023f84:	3023883a 	mov	r17,r6
 4023f88:	3821883a 	mov	r16,r7
 4023f8c:	21400526 	beq	r4,r5,4023fa4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x44>
 4023f90:	20c00007 	ldb	r3,0(r4)
 4023f94:	00800a84 	movi	r2,42
 4023f98:	18800d26 	beq	r3,r2,4023fd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x70>
 4023f9c:	40286c00 	call	40286c0 <strcmp>
 4023fa0:	10000b1e 	bne	r2,zero,4023fd0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x70>
 4023fa4:	00800204 	movi	r2,8
 4023fa8:	80800315 	stw	r2,12(r16)
 4023fac:	00800184 	movi	r2,6
 4023fb0:	80800115 	stw	r2,4(r16)
 4023fb4:	84400015 	stw	r17,0(r16)
 4023fb8:	00800044 	movi	r2,1
 4023fbc:	dfc00217 	ldw	ra,8(sp)
 4023fc0:	dc400117 	ldw	r17,4(sp)
 4023fc4:	dc000017 	ldw	r16,0(sp)
 4023fc8:	dec00304 	addi	sp,sp,12
 4023fcc:	f800283a 	ret
 4023fd0:	0005883a 	mov	r2,zero
 4023fd4:	003ff906 	br	4023fbc <__flash_rwdata_start+0xfffeda64>

04023fd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 4023fd8:	f811883a 	mov	r8,ra
 4023fdc:	40346e80 	call	40346e8 <_mcount>
 4023fe0:	403f883a 	mov	ra,r8
 4023fe4:	defffa04 	addi	sp,sp,-24
 4023fe8:	dfc00515 	stw	ra,20(sp)
 4023fec:	dc800415 	stw	r18,16(sp)
 4023ff0:	dc400315 	stw	r17,12(sp)
 4023ff4:	dc000215 	stw	r16,8(sp)
 4023ff8:	dc800617 	ldw	r18,24(sp)
 4023ffc:	d8800817 	ldw	r2,32(sp)
 4024000:	dc400917 	ldw	r17,36(sp)
 4024004:	24000117 	ldw	r16,4(r4)
 4024008:	90801526 	beq	r18,r2,4024060 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x88>
 402400c:	39400117 	ldw	r5,4(r7)
 4024010:	2c000826 	beq	r5,r16,4024034 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x5c>
 4024014:	80c00007 	ldb	r3,0(r16)
 4024018:	00800a84 	movi	r2,42
 402401c:	18800926 	beq	r3,r2,4024044 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x6c>
 4024020:	8009883a 	mov	r4,r16
 4024024:	d9800115 	stw	r6,4(sp)
 4024028:	40286c00 	call	40286c0 <strcmp>
 402402c:	d9800117 	ldw	r6,4(sp)
 4024030:	1000041e 	bne	r2,zero,4024044 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x6c>
 4024034:	00800044 	movi	r2,1
 4024038:	8c800015 	stw	r18,0(r17)
 402403c:	89800115 	stw	r6,4(r17)
 4024040:	88800315 	stw	r2,12(r17)
 4024044:	0005883a 	mov	r2,zero
 4024048:	dfc00517 	ldw	ra,20(sp)
 402404c:	dc800417 	ldw	r18,16(sp)
 4024050:	dc400317 	ldw	r17,12(sp)
 4024054:	dc000217 	ldw	r16,8(sp)
 4024058:	dec00604 	addi	sp,sp,24
 402405c:	f800283a 	ret
 4024060:	d8800717 	ldw	r2,28(sp)
 4024064:	11400117 	ldw	r5,4(r2)
 4024068:	81400a26 	beq	r16,r5,4024094 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xbc>
 402406c:	80c00007 	ldb	r3,0(r16)
 4024070:	00800a84 	movi	r2,42
 4024074:	18800c26 	beq	r3,r2,40240a8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xd0>
 4024078:	8009883a 	mov	r4,r16
 402407c:	d9800115 	stw	r6,4(sp)
 4024080:	d9c00015 	stw	r7,0(sp)
 4024084:	40286c00 	call	40286c0 <strcmp>
 4024088:	d9800117 	ldw	r6,4(sp)
 402408c:	d9c00017 	ldw	r7,0(sp)
 4024090:	1000021e 	bne	r2,zero,402409c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 4024094:	89800215 	stw	r6,8(r17)
 4024098:	003fea06 	br	4024044 <__flash_rwdata_start+0xfffedaec>
 402409c:	39400117 	ldw	r5,4(r7)
 40240a0:	817fdf1e 	bne	r16,r5,4024020 <__flash_rwdata_start+0xfffedac8>
 40240a4:	003fe306 	br	4024034 <__flash_rwdata_start+0xfffedadc>
 40240a8:	38800117 	ldw	r2,4(r7)
 40240ac:	80bfe51e 	bne	r16,r2,4024044 <__flash_rwdata_start+0xfffedaec>
 40240b0:	003fe006 	br	4024034 <__flash_rwdata_start+0xfffedadc>

040240b4 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 40240b4:	f811883a 	mov	r8,ra
 40240b8:	40346e80 	call	40346e8 <_mcount>
 40240bc:	403f883a 	mov	ra,r8
 40240c0:	20800117 	ldw	r2,4(r4)
 40240c4:	28c00117 	ldw	r3,4(r5)
 40240c8:	10c02926 	beq	r2,r3,4024170 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xbc>
 40240cc:	defffb04 	addi	sp,sp,-20
 40240d0:	dfc00415 	stw	ra,16(sp)
 40240d4:	dcc00315 	stw	r19,12(sp)
 40240d8:	dc800215 	stw	r18,8(sp)
 40240dc:	dc400115 	stw	r17,4(sp)
 40240e0:	dc000015 	stw	r16,0(sp)
 40240e4:	2821883a 	mov	r16,r5
 40240e8:	11400007 	ldb	r5,0(r2)
 40240ec:	2025883a 	mov	r18,r4
 40240f0:	01000a84 	movi	r4,42
 40240f4:	3823883a 	mov	r17,r7
 40240f8:	3027883a 	mov	r19,r6
 40240fc:	29000626 	beq	r5,r4,4024118 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 4024100:	180b883a 	mov	r5,r3
 4024104:	1009883a 	mov	r4,r2
 4024108:	40286c00 	call	40286c0 <strcmp>
 402410c:	1000021e 	bne	r2,zero,4024118 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x64>
 4024110:	00800044 	movi	r2,1
 4024114:	00000306 	br	4024124 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x70>
 4024118:	008000c4 	movi	r2,3
 402411c:	1440082e 	bgeu	r2,r17,4024140 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x8c>
 4024120:	0005883a 	mov	r2,zero
 4024124:	dfc00417 	ldw	ra,16(sp)
 4024128:	dcc00317 	ldw	r19,12(sp)
 402412c:	dc800217 	ldw	r18,8(sp)
 4024130:	dc400117 	ldw	r17,4(sp)
 4024134:	dc000017 	ldw	r16,0(sp)
 4024138:	dec00504 	addi	sp,sp,20
 402413c:	f800283a 	ret
 4024140:	80800017 	ldw	r2,0(r16)
 4024144:	980d883a 	mov	r6,r19
 4024148:	900b883a 	mov	r5,r18
 402414c:	10800517 	ldw	r2,20(r2)
 4024150:	8009883a 	mov	r4,r16
 4024154:	dfc00417 	ldw	ra,16(sp)
 4024158:	dcc00317 	ldw	r19,12(sp)
 402415c:	dc800217 	ldw	r18,8(sp)
 4024160:	dc400117 	ldw	r17,4(sp)
 4024164:	dc000017 	ldw	r16,0(sp)
 4024168:	dec00504 	addi	sp,sp,20
 402416c:	1000683a 	jmp	r2
 4024170:	00800044 	movi	r2,1
 4024174:	f800283a 	ret

04024178 <_ZN10__cxxabiv111__terminateEPFvvE>:
 4024178:	f811883a 	mov	r8,ra
 402417c:	40346e80 	call	40346e8 <_mcount>
 4024180:	403f883a 	mov	ra,r8
 4024184:	deffef04 	addi	sp,sp,-68
 4024188:	dfc01015 	stw	ra,64(sp)
 402418c:	df000f15 	stw	fp,60(sp)
 4024190:	008100b4 	movhi	r2,1026
 4024194:	108c9504 	addi	r2,r2,12884
 4024198:	d8800615 	stw	r2,24(sp)
 402419c:	008100f4 	movhi	r2,1027
 40241a0:	1097ad04 	addi	r2,r2,24244
 40241a4:	d8800715 	stw	r2,28(sp)
 40241a8:	008100b4 	movhi	r2,1026
 40241ac:	10907704 	addi	r2,r2,16860
 40241b0:	d9000d15 	stw	r4,52(sp)
 40241b4:	d809883a 	mov	r4,sp
 40241b8:	d8800915 	stw	r2,36(sp)
 40241bc:	dec00815 	stw	sp,32(sp)
 40241c0:	dec00a15 	stw	sp,40(sp)
 40241c4:	40272900 	call	4027290 <_Unwind_SjLj_Register>
 40241c8:	00800044 	movi	r2,1
 40241cc:	d8800115 	stw	r2,4(sp)
 40241d0:	d8800d17 	ldw	r2,52(sp)
 40241d4:	103ee83a 	callr	r2
 40241d8:	40276fc0 	call	40276fc <abort>
 40241dc:	d8c00217 	ldw	r3,8(sp)
 40241e0:	d8800117 	ldw	r2,4(sp)
 40241e4:	d8c00d15 	stw	r3,52(sp)
 40241e8:	d8c00317 	ldw	r3,12(sp)
 40241ec:	d8c00e15 	stw	r3,56(sp)
 40241f0:	10000b26 	beq	r2,zero,4024220 <_ZN10__cxxabiv111__terminateEPFvvE+0xa8>
 40241f4:	10bfffc4 	addi	r2,r2,-1
 40241f8:	10000126 	beq	r2,zero,4024200 <_ZN10__cxxabiv111__terminateEPFvvE+0x88>
 40241fc:	003b68fa 	trap	3
 4024200:	d8000115 	stw	zero,4(sp)
 4024204:	4023d700 	call	4023d70 <__cxa_end_catch>
 4024208:	d8c00e17 	ldw	r3,56(sp)
 402420c:	00bfffc4 	movi	r2,-1
 4024210:	18800826 	beq	r3,r2,4024234 <_ZN10__cxxabiv111__terminateEPFvvE+0xbc>
 4024214:	d9000d17 	ldw	r4,52(sp)
 4024218:	d8800115 	stw	r2,4(sp)
 402421c:	40275400 	call	4027540 <_Unwind_SjLj_Resume>
 4024220:	d9000d17 	ldw	r4,52(sp)
 4024224:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4024228:	00800084 	movi	r2,2
 402422c:	d8800115 	stw	r2,4(sp)
 4024230:	40276fc0 	call	40276fc <abort>
 4024234:	d8800e17 	ldw	r2,56(sp)
 4024238:	d9000d17 	ldw	r4,52(sp)
 402423c:	d8800115 	stw	r2,4(sp)
 4024240:	40238600 	call	4023860 <__cxa_call_unexpected>

04024244 <_ZSt9terminatev>:
 4024244:	f811883a 	mov	r8,ra
 4024248:	40346e80 	call	40346e8 <_mcount>
 402424c:	403f883a 	mov	ra,r8
 4024250:	deffff04 	addi	sp,sp,-4
 4024254:	dfc00015 	stw	ra,0(sp)
 4024258:	00800034 	movhi	r2,0
 402425c:	10886304 	addi	r2,r2,8588
 4024260:	11000017 	ldw	r4,0(r2)
 4024264:	40241780 	call	4024178 <_ZN10__cxxabiv111__terminateEPFvvE>

04024268 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 4024268:	f811883a 	mov	r8,ra
 402426c:	40346e80 	call	40346e8 <_mcount>
 4024270:	403f883a 	mov	ra,r8
 4024274:	deffff04 	addi	sp,sp,-4
 4024278:	dfc00015 	stw	ra,0(sp)
 402427c:	203ee83a 	callr	r4
 4024280:	40242440 	call	4024244 <_ZSt9terminatev>

04024284 <_ZSt10unexpectedv>:
 4024284:	f811883a 	mov	r8,ra
 4024288:	40346e80 	call	40346e8 <_mcount>
 402428c:	403f883a 	mov	ra,r8
 4024290:	deffff04 	addi	sp,sp,-4
 4024294:	dfc00015 	stw	ra,0(sp)
 4024298:	00800034 	movhi	r2,0
 402429c:	10885c04 	addi	r2,r2,8560
 40242a0:	11000017 	ldw	r4,0(r2)
 40242a4:	40242680 	call	4024268 <_ZN10__cxxabiv112__unexpectedEPFvvE>

040242a8 <_ZSt13set_terminatePFvvE>:
 40242a8:	f811883a 	mov	r8,ra
 40242ac:	40346e80 	call	40346e8 <_mcount>
 40242b0:	403f883a 	mov	ra,r8
 40242b4:	00c00034 	movhi	r3,0
 40242b8:	18c86304 	addi	r3,r3,8588
 40242bc:	18800017 	ldw	r2,0(r3)
 40242c0:	19000015 	stw	r4,0(r3)
 40242c4:	f800283a 	ret

040242c8 <_ZSt13get_terminatev>:
 40242c8:	f811883a 	mov	r8,ra
 40242cc:	40346e80 	call	40346e8 <_mcount>
 40242d0:	403f883a 	mov	ra,r8
 40242d4:	00800034 	movhi	r2,0
 40242d8:	10886304 	addi	r2,r2,8588
 40242dc:	10800017 	ldw	r2,0(r2)
 40242e0:	f800283a 	ret

040242e4 <_ZSt14set_unexpectedPFvvE>:
 40242e4:	f811883a 	mov	r8,ra
 40242e8:	40346e80 	call	40346e8 <_mcount>
 40242ec:	403f883a 	mov	ra,r8
 40242f0:	00c00034 	movhi	r3,0
 40242f4:	18c85c04 	addi	r3,r3,8560
 40242f8:	18800017 	ldw	r2,0(r3)
 40242fc:	19000015 	stw	r4,0(r3)
 4024300:	f800283a 	ret

04024304 <_ZSt14get_unexpectedv>:
 4024304:	f811883a 	mov	r8,ra
 4024308:	40346e80 	call	40346e8 <_mcount>
 402430c:	403f883a 	mov	ra,r8
 4024310:	00800034 	movhi	r2,0
 4024314:	10885c04 	addi	r2,r2,8560
 4024318:	10800017 	ldw	r2,0(r2)
 402431c:	f800283a 	ret

04024320 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>:
 4024320:	f811883a 	mov	r8,ra
 4024324:	40346e80 	call	40346e8 <_mcount>
 4024328:	403f883a 	mov	ra,r8
 402432c:	01800174 	movhi	r6,5
 4024330:	31b49004 	addi	r6,r6,-11712
 4024334:	31400117 	ldw	r5,4(r6)
 4024338:	223fff04 	addi	r8,r4,-4
 402433c:	227fff17 	ldw	r9,-4(r4)
 4024340:	28001326 	beq	r5,zero,4024390 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x70>
 4024344:	424f883a 	add	r7,r8,r9
 4024348:	29c01426 	beq	r5,r7,402439c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x7c>
 402434c:	28c00117 	ldw	r3,4(r5)
 4024350:	18001c26 	beq	r3,zero,40243c4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xa4>
 4024354:	38c00336 	bltu	r7,r3,4024364 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x44>
 4024358:	00001e06 	br	40243d4 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0xb4>
 402435c:	3880052e 	bgeu	r7,r2,4024374 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x54>
 4024360:	1007883a 	mov	r3,r2
 4024364:	18800117 	ldw	r2,4(r3)
 4024368:	29800104 	addi	r6,r5,4
 402436c:	180b883a 	mov	r5,r3
 4024370:	103ffa1e 	bne	r2,zero,402435c <__flash_rwdata_start+0xfffede04>
 4024374:	19400017 	ldw	r5,0(r3)
 4024378:	194f883a 	add	r7,r3,r5
 402437c:	41c00e26 	beq	r8,r7,40243b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4+0x98>
 4024380:	20800015 	stw	r2,0(r4)
 4024384:	30800017 	ldw	r2,0(r6)
 4024388:	12000115 	stw	r8,4(r2)
 402438c:	f800283a 	ret
 4024390:	20000015 	stw	zero,0(r4)
 4024394:	32000115 	stw	r8,4(r6)
 4024398:	f800283a 	ret
 402439c:	28c00017 	ldw	r3,0(r5)
 40243a0:	28800117 	ldw	r2,4(r5)
 40243a4:	1a53883a 	add	r9,r3,r9
 40243a8:	227fff15 	stw	r9,-4(r4)
 40243ac:	20800015 	stw	r2,0(r4)
 40243b0:	32000115 	stw	r8,4(r6)
 40243b4:	003ff506 	br	402438c <__flash_rwdata_start+0xfffede34>
 40243b8:	494b883a 	add	r5,r9,r5
 40243bc:	19400015 	stw	r5,0(r3)
 40243c0:	003ff206 	br	402438c <__flash_rwdata_start+0xfffede34>
 40243c4:	0005883a 	mov	r2,zero
 40243c8:	2807883a 	mov	r3,r5
 40243cc:	31800104 	addi	r6,r6,4
 40243d0:	003fe806 	br	4024374 <__flash_rwdata_start+0xfffede1c>
 40243d4:	1805883a 	mov	r2,r3
 40243d8:	31800104 	addi	r6,r6,4
 40243dc:	2807883a 	mov	r3,r5
 40243e0:	003fe406 	br	4024374 <__flash_rwdata_start+0xfffede1c>

040243e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>:
 40243e4:	f811883a 	mov	r8,ra
 40243e8:	40346e80 	call	40346e8 <_mcount>
 40243ec:	403f883a 	mov	ra,r8
 40243f0:	00c001c4 	movi	r3,7
 40243f4:	20800104 	addi	r2,r4,4
 40243f8:	1880112e 	bgeu	r3,r2,4024440 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x5c>
 40243fc:	20c9883a 	add	r4,r4,r3
 4024400:	00bfff04 	movi	r2,-4
 4024404:	208a703a 	and	r5,r4,r2
 4024408:	01800174 	movhi	r6,5
 402440c:	31b49004 	addi	r6,r6,-11712
 4024410:	30c00117 	ldw	r3,4(r6)
 4024414:	18000826 	beq	r3,zero,4024438 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x54>
 4024418:	19000017 	ldw	r4,0(r3)
 402441c:	21400436 	bltu	r4,r5,4024430 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x4c>
 4024420:	00001906 	br	4024488 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0xa4>
 4024424:	11000017 	ldw	r4,0(r2)
 4024428:	2140072e 	bgeu	r4,r5,4024448 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x64>
 402442c:	1007883a 	mov	r3,r2
 4024430:	18800117 	ldw	r2,4(r3)
 4024434:	103ffb1e 	bne	r2,zero,4024424 <__flash_rwdata_start+0xfffedecc>
 4024438:	0005883a 	mov	r2,zero
 402443c:	f800283a 	ret
 4024440:	01400204 	movi	r5,8
 4024444:	003ff006 	br	4024408 <__flash_rwdata_start+0xfffedeb0>
 4024448:	18c00104 	addi	r3,r3,4
 402444c:	2149c83a 	sub	r4,r4,r5
 4024450:	018001c4 	movi	r6,7
 4024454:	3100092e 	bgeu	r6,r4,402447c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5+0x98>
 4024458:	11c00117 	ldw	r7,4(r2)
 402445c:	114d883a 	add	r6,r2,r5
 4024460:	31000015 	stw	r4,0(r6)
 4024464:	31c00115 	stw	r7,4(r6)
 4024468:	18800017 	ldw	r2,0(r3)
 402446c:	11400015 	stw	r5,0(r2)
 4024470:	19800015 	stw	r6,0(r3)
 4024474:	10800104 	addi	r2,r2,4
 4024478:	f800283a 	ret
 402447c:	11000117 	ldw	r4,4(r2)
 4024480:	19000015 	stw	r4,0(r3)
 4024484:	003ffb06 	br	4024474 <__flash_rwdata_start+0xfffedf1c>
 4024488:	1805883a 	mov	r2,r3
 402448c:	30c00104 	addi	r3,r6,4
 4024490:	003fee06 	br	402444c <__flash_rwdata_start+0xfffedef4>

04024494 <__cxa_allocate_exception>:
 4024494:	f811883a 	mov	r8,ra
 4024498:	40346e80 	call	40346e8 <_mcount>
 402449c:	403f883a 	mov	ra,r8
 40244a0:	defffd04 	addi	sp,sp,-12
 40244a4:	dfc00215 	stw	ra,8(sp)
 40244a8:	dc400115 	stw	r17,4(sp)
 40244ac:	dc000015 	stw	r16,0(sp)
 40244b0:	24401104 	addi	r17,r4,68
 40244b4:	8809883a 	mov	r4,r17
 40244b8:	40277200 	call	4027720 <malloc>
 40244bc:	1021883a 	mov	r16,r2
 40244c0:	10000a26 	beq	r2,zero,40244ec <__cxa_allocate_exception+0x58>
 40244c4:	01801104 	movi	r6,68
 40244c8:	000b883a 	mov	r5,zero
 40244cc:	8009883a 	mov	r4,r16
 40244d0:	4027f780 	call	4027f78 <memset>
 40244d4:	80801104 	addi	r2,r16,68
 40244d8:	dfc00217 	ldw	ra,8(sp)
 40244dc:	dc400117 	ldw	r17,4(sp)
 40244e0:	dc000017 	ldw	r16,0(sp)
 40244e4:	dec00304 	addi	sp,sp,12
 40244e8:	f800283a 	ret
 40244ec:	8809883a 	mov	r4,r17
 40244f0:	40243e40 	call	40243e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 40244f4:	1021883a 	mov	r16,r2
 40244f8:	103ff21e 	bne	r2,zero,40244c4 <__flash_rwdata_start+0xfffedf6c>
 40244fc:	40242440 	call	4024244 <_ZSt9terminatev>

04024500 <__cxa_free_exception>:
 4024500:	f811883a 	mov	r8,ra
 4024504:	40346e80 	call	40346e8 <_mcount>
 4024508:	403f883a 	mov	ra,r8
 402450c:	00c00174 	movhi	r3,5
 4024510:	18f49004 	addi	r3,r3,-11712
 4024514:	18800217 	ldw	r2,8(r3)
 4024518:	213fef04 	addi	r4,r4,-68
 402451c:	1100042e 	bgeu	r2,r4,4024530 <__cxa_free_exception+0x30>
 4024520:	18c00317 	ldw	r3,12(r3)
 4024524:	10c5883a 	add	r2,r2,r3
 4024528:	2080012e 	bgeu	r4,r2,4024530 <__cxa_free_exception+0x30>
 402452c:	40243201 	jmpi	4024320 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 4024530:	40277401 	jmpi	4027740 <free>

04024534 <__cxa_allocate_dependent_exception>:
 4024534:	f811883a 	mov	r8,ra
 4024538:	40346e80 	call	40346e8 <_mcount>
 402453c:	403f883a 	mov	ra,r8
 4024540:	defffe04 	addi	sp,sp,-8
 4024544:	dfc00115 	stw	ra,4(sp)
 4024548:	dc000015 	stw	r16,0(sp)
 402454c:	01001004 	movi	r4,64
 4024550:	40277200 	call	4027720 <malloc>
 4024554:	1021883a 	mov	r16,r2
 4024558:	10000926 	beq	r2,zero,4024580 <__cxa_allocate_dependent_exception+0x4c>
 402455c:	01801004 	movi	r6,64
 4024560:	000b883a 	mov	r5,zero
 4024564:	8009883a 	mov	r4,r16
 4024568:	4027f780 	call	4027f78 <memset>
 402456c:	8005883a 	mov	r2,r16
 4024570:	dfc00117 	ldw	ra,4(sp)
 4024574:	dc000017 	ldw	r16,0(sp)
 4024578:	dec00204 	addi	sp,sp,8
 402457c:	f800283a 	ret
 4024580:	01001004 	movi	r4,64
 4024584:	40243e40 	call	40243e4 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.5>
 4024588:	1021883a 	mov	r16,r2
 402458c:	103ff31e 	bne	r2,zero,402455c <__flash_rwdata_start+0xfffee004>
 4024590:	40242440 	call	4024244 <_ZSt9terminatev>

04024594 <__cxa_free_dependent_exception>:
 4024594:	f811883a 	mov	r8,ra
 4024598:	40346e80 	call	40346e8 <_mcount>
 402459c:	403f883a 	mov	ra,r8
 40245a0:	01400174 	movhi	r5,5
 40245a4:	29749004 	addi	r5,r5,-11712
 40245a8:	28c00217 	ldw	r3,8(r5)
 40245ac:	2005883a 	mov	r2,r4
 40245b0:	1900042e 	bgeu	r3,r4,40245c4 <__cxa_free_dependent_exception+0x30>
 40245b4:	29400317 	ldw	r5,12(r5)
 40245b8:	1947883a 	add	r3,r3,r5
 40245bc:	20c0012e 	bgeu	r4,r3,40245c4 <__cxa_free_dependent_exception+0x30>
 40245c0:	40243201 	jmpi	4024320 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.4>
 40245c4:	1009883a 	mov	r4,r2
 40245c8:	40277401 	jmpi	4027740 <free>

040245cc <_GLOBAL__sub_I___cxa_allocate_exception>:
 40245cc:	f811883a 	mov	r8,ra
 40245d0:	40346e80 	call	40346e8 <_mcount>
 40245d4:	403f883a 	mov	ra,r8
 40245d8:	defffd04 	addi	sp,sp,-12
 40245dc:	dfc00215 	stw	ra,8(sp)
 40245e0:	dc400115 	stw	r17,4(sp)
 40245e4:	dc000015 	stw	r16,0(sp)
 40245e8:	04424004 	movi	r17,2304
 40245ec:	04000174 	movhi	r16,5
 40245f0:	84349004 	addi	r16,r16,-11712
 40245f4:	8809883a 	mov	r4,r17
 40245f8:	84400315 	stw	r17,12(r16)
 40245fc:	40277200 	call	4027720 <malloc>
 4024600:	80800215 	stw	r2,8(r16)
 4024604:	10000826 	beq	r2,zero,4024628 <_GLOBAL__sub_I___cxa_allocate_exception+0x5c>
 4024608:	80800115 	stw	r2,4(r16)
 402460c:	14400015 	stw	r17,0(r2)
 4024610:	10000115 	stw	zero,4(r2)
 4024614:	dfc00217 	ldw	ra,8(sp)
 4024618:	dc400117 	ldw	r17,4(sp)
 402461c:	dc000017 	ldw	r16,0(sp)
 4024620:	dec00304 	addi	sp,sp,12
 4024624:	f800283a 	ret
 4024628:	80000315 	stw	zero,12(r16)
 402462c:	80000115 	stw	zero,4(r16)
 4024630:	003ff806 	br	4024614 <__flash_rwdata_start+0xfffee0bc>

04024634 <__cxa_call_terminate>:
 4024634:	f811883a 	mov	r8,ra
 4024638:	40346e80 	call	40346e8 <_mcount>
 402463c:	403f883a 	mov	ra,r8
 4024640:	defffe04 	addi	sp,sp,-8
 4024644:	dfc00115 	stw	ra,4(sp)
 4024648:	dc000015 	stw	r16,0(sp)
 402464c:	20000d26 	beq	r4,zero,4024684 <__cxa_call_terminate+0x50>
 4024650:	2021883a 	mov	r16,r4
 4024654:	4023cb00 	call	4023cb0 <__cxa_begin_catch>
 4024658:	80c00017 	ldw	r3,0(r16)
 402465c:	016f3574 	movhi	r5,48341
 4024660:	29754004 	addi	r5,r5,-11008
 4024664:	194b883a 	add	r5,r3,r5
 4024668:	80800117 	ldw	r2,4(r16)
 402466c:	28c9803a 	cmpltu	r4,r5,r3
 4024670:	00ee2cb4 	movhi	r3,47282
 4024674:	18eaaf04 	addi	r3,r3,-21828
 4024678:	10c5883a 	add	r2,r2,r3
 402467c:	2085883a 	add	r2,r4,r2
 4024680:	10000126 	beq	r2,zero,4024688 <__cxa_call_terminate+0x54>
 4024684:	40242440 	call	4024244 <_ZSt9terminatev>
 4024688:	00800044 	movi	r2,1
 402468c:	117ffd36 	bltu	r2,r5,4024684 <__flash_rwdata_start+0xfffee12c>
 4024690:	813ff817 	ldw	r4,-32(r16)
 4024694:	40241780 	call	4024178 <_ZN10__cxxabiv111__terminateEPFvvE>

04024698 <__cxa_get_globals_fast>:
 4024698:	f811883a 	mov	r8,ra
 402469c:	40346e80 	call	40346e8 <_mcount>
 40246a0:	403f883a 	mov	ra,r8
 40246a4:	00800034 	movhi	r2,0
 40246a8:	10887a04 	addi	r2,r2,8680
 40246ac:	f800283a 	ret

040246b0 <__cxa_get_globals>:
 40246b0:	f811883a 	mov	r8,ra
 40246b4:	40346e80 	call	40346e8 <_mcount>
 40246b8:	403f883a 	mov	ra,r8
 40246bc:	00800034 	movhi	r2,0
 40246c0:	10887a04 	addi	r2,r2,8680
 40246c4:	f800283a 	ret

040246c8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 40246c8:	f811883a 	mov	r8,ra
 40246cc:	40346e80 	call	40346e8 <_mcount>
 40246d0:	403f883a 	mov	ra,r8
 40246d4:	00800034 	movhi	r2,0
 40246d8:	10808a04 	addi	r2,r2,552
 40246dc:	20800015 	stw	r2,0(r4)
 40246e0:	4023f041 	jmpi	4023f04 <_ZN10__cxxabiv117__class_type_infoD1Ev>

040246e4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 40246e4:	f811883a 	mov	r8,ra
 40246e8:	40346e80 	call	40346e8 <_mcount>
 40246ec:	403f883a 	mov	ra,r8
 40246f0:	defffe04 	addi	sp,sp,-8
 40246f4:	dfc00115 	stw	ra,4(sp)
 40246f8:	dc000015 	stw	r16,0(sp)
 40246fc:	00800034 	movhi	r2,0
 4024700:	10808a04 	addi	r2,r2,552
 4024704:	20800015 	stw	r2,0(r4)
 4024708:	2021883a 	mov	r16,r4
 402470c:	4023f040 	call	4023f04 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 4024710:	8009883a 	mov	r4,r16
 4024714:	dfc00117 	ldw	ra,4(sp)
 4024718:	dc000017 	ldw	r16,0(sp)
 402471c:	dec00204 	addi	sp,sp,8
 4024720:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024724 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 4024724:	f811883a 	mov	r8,ra
 4024728:	40346e80 	call	40346e8 <_mcount>
 402472c:	403f883a 	mov	ra,r8
 4024730:	defff504 	addi	sp,sp,-44
 4024734:	dfc00a15 	stw	ra,40(sp)
 4024738:	df000915 	stw	fp,36(sp)
 402473c:	ddc00815 	stw	r23,32(sp)
 4024740:	dd800715 	stw	r22,28(sp)
 4024744:	dd400615 	stw	r21,24(sp)
 4024748:	dd000515 	stw	r20,20(sp)
 402474c:	dcc00415 	stw	r19,16(sp)
 4024750:	dc800315 	stw	r18,12(sp)
 4024754:	dc400215 	stw	r17,8(sp)
 4024758:	dc000115 	stw	r16,4(sp)
 402475c:	24000117 	ldw	r16,4(r4)
 4024760:	38800117 	ldw	r2,4(r7)
 4024764:	2823883a 	mov	r17,r5
 4024768:	3039883a 	mov	fp,r6
 402476c:	dcc00b17 	ldw	r19,44(sp)
 4024770:	ddc00c17 	ldw	r23,48(sp)
 4024774:	dd800d17 	ldw	r22,52(sp)
 4024778:	dc800e17 	ldw	r18,56(sp)
 402477c:	80800b26 	beq	r16,r2,40247ac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x88>
 4024780:	80c00007 	ldb	r3,0(r16)
 4024784:	2029883a 	mov	r20,r4
 4024788:	01000a84 	movi	r4,42
 402478c:	382b883a 	mov	r21,r7
 4024790:	19001a26 	beq	r3,r4,40247fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd8>
 4024794:	100b883a 	mov	r5,r2
 4024798:	8009883a 	mov	r4,r16
 402479c:	d8c00015 	stw	r3,0(sp)
 40247a0:	40286c00 	call	40286c0 <strcmp>
 40247a4:	d8c00017 	ldw	r3,0(sp)
 40247a8:	1000141e 	bne	r2,zero,40247fc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd8>
 40247ac:	94c00015 	stw	r19,0(r18)
 40247b0:	97000115 	stw	fp,4(r18)
 40247b4:	88002816 	blt	r17,zero,4024858 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 40247b8:	9c63883a 	add	r17,r19,r17
 40247bc:	b4403226 	beq	r22,r17,4024888 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x164>
 40247c0:	00800044 	movi	r2,1
 40247c4:	90800315 	stw	r2,12(r18)
 40247c8:	0005883a 	mov	r2,zero
 40247cc:	dfc00a17 	ldw	ra,40(sp)
 40247d0:	df000917 	ldw	fp,36(sp)
 40247d4:	ddc00817 	ldw	r23,32(sp)
 40247d8:	dd800717 	ldw	r22,28(sp)
 40247dc:	dd400617 	ldw	r21,24(sp)
 40247e0:	dd000517 	ldw	r20,20(sp)
 40247e4:	dcc00417 	ldw	r19,16(sp)
 40247e8:	dc800317 	ldw	r18,12(sp)
 40247ec:	dc400217 	ldw	r17,8(sp)
 40247f0:	dc000117 	ldw	r16,4(sp)
 40247f4:	dec00b04 	addi	sp,sp,44
 40247f8:	f800283a 	ret
 40247fc:	9d801926 	beq	r19,r22,4024864 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 4024800:	a1000217 	ldw	r4,8(r20)
 4024804:	a80f883a 	mov	r7,r21
 4024808:	e00d883a 	mov	r6,fp
 402480c:	20800017 	ldw	r2,0(r4)
 4024810:	dc800e15 	stw	r18,56(sp)
 4024814:	dd800d15 	stw	r22,52(sp)
 4024818:	ddc00c15 	stw	r23,48(sp)
 402481c:	dcc00b15 	stw	r19,44(sp)
 4024820:	10800717 	ldw	r2,28(r2)
 4024824:	880b883a 	mov	r5,r17
 4024828:	dfc00a17 	ldw	ra,40(sp)
 402482c:	df000917 	ldw	fp,36(sp)
 4024830:	ddc00817 	ldw	r23,32(sp)
 4024834:	dd800717 	ldw	r22,28(sp)
 4024838:	dd400617 	ldw	r21,24(sp)
 402483c:	dd000517 	ldw	r20,20(sp)
 4024840:	dcc00417 	ldw	r19,16(sp)
 4024844:	dc800317 	ldw	r18,12(sp)
 4024848:	dc400217 	ldw	r17,8(sp)
 402484c:	dc000117 	ldw	r16,4(sp)
 4024850:	dec00b04 	addi	sp,sp,44
 4024854:	1000683a 	jmp	r2
 4024858:	00bfff84 	movi	r2,-2
 402485c:	88bfda1e 	bne	r17,r2,40247c8 <__flash_rwdata_start+0xfffee270>
 4024860:	003fd706 	br	40247c0 <__flash_rwdata_start+0xfffee268>
 4024864:	b9400117 	ldw	r5,4(r23)
 4024868:	81400526 	beq	r16,r5,4024880 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x15c>
 402486c:	00800a84 	movi	r2,42
 4024870:	18bfe326 	beq	r3,r2,4024800 <__flash_rwdata_start+0xfffee2a8>
 4024874:	8009883a 	mov	r4,r16
 4024878:	40286c00 	call	40286c0 <strcmp>
 402487c:	103fe01e 	bne	r2,zero,4024800 <__flash_rwdata_start+0xfffee2a8>
 4024880:	97000215 	stw	fp,8(r18)
 4024884:	003fd006 	br	40247c8 <__flash_rwdata_start+0xfffee270>
 4024888:	00800184 	movi	r2,6
 402488c:	003fcd06 	br	40247c4 <__flash_rwdata_start+0xfffee26c>

04024890 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 4024890:	f811883a 	mov	r8,ra
 4024894:	40346e80 	call	40346e8 <_mcount>
 4024898:	403f883a 	mov	ra,r8
 402489c:	defffa04 	addi	sp,sp,-24
 40248a0:	dfc00515 	stw	ra,20(sp)
 40248a4:	dc800415 	stw	r18,16(sp)
 40248a8:	dc400315 	stw	r17,12(sp)
 40248ac:	dc000215 	stw	r16,8(sp)
 40248b0:	dc000617 	ldw	r16,24(sp)
 40248b4:	2023883a 	mov	r17,r4
 40248b8:	2825883a 	mov	r18,r5
 40248bc:	81800b26 	beq	r16,r6,40248ec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5c>
 40248c0:	89000217 	ldw	r4,8(r17)
 40248c4:	900b883a 	mov	r5,r18
 40248c8:	20800017 	ldw	r2,0(r4)
 40248cc:	dc000615 	stw	r16,24(sp)
 40248d0:	10800817 	ldw	r2,32(r2)
 40248d4:	dfc00517 	ldw	ra,20(sp)
 40248d8:	dc800417 	ldw	r18,16(sp)
 40248dc:	dc400317 	ldw	r17,12(sp)
 40248e0:	dc000217 	ldw	r16,8(sp)
 40248e4:	dec00604 	addi	sp,sp,24
 40248e8:	1000683a 	jmp	r2
 40248ec:	21000117 	ldw	r4,4(r4)
 40248f0:	39400117 	ldw	r5,4(r7)
 40248f4:	21400926 	beq	r4,r5,402491c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x8c>
 40248f8:	20c00007 	ldb	r3,0(r4)
 40248fc:	00800a84 	movi	r2,42
 4024900:	18bfef26 	beq	r3,r2,40248c0 <__flash_rwdata_start+0xfffee368>
 4024904:	d9800015 	stw	r6,0(sp)
 4024908:	d9c00115 	stw	r7,4(sp)
 402490c:	40286c00 	call	40286c0 <strcmp>
 4024910:	d9800017 	ldw	r6,0(sp)
 4024914:	d9c00117 	ldw	r7,4(sp)
 4024918:	103fe91e 	bne	r2,zero,40248c0 <__flash_rwdata_start+0xfffee368>
 402491c:	00800184 	movi	r2,6
 4024920:	dfc00517 	ldw	ra,20(sp)
 4024924:	dc800417 	ldw	r18,16(sp)
 4024928:	dc400317 	ldw	r17,12(sp)
 402492c:	dc000217 	ldw	r16,8(sp)
 4024930:	dec00604 	addi	sp,sp,24
 4024934:	f800283a 	ret

04024938 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 4024938:	f811883a 	mov	r8,ra
 402493c:	40346e80 	call	40346e8 <_mcount>
 4024940:	403f883a 	mov	ra,r8
 4024944:	defffb04 	addi	sp,sp,-20
 4024948:	dfc00415 	stw	ra,16(sp)
 402494c:	dcc00315 	stw	r19,12(sp)
 4024950:	dc800215 	stw	r18,8(sp)
 4024954:	dc400115 	stw	r17,4(sp)
 4024958:	dc000015 	stw	r16,0(sp)
 402495c:	2027883a 	mov	r19,r4
 4024960:	2821883a 	mov	r16,r5
 4024964:	3023883a 	mov	r17,r6
 4024968:	3825883a 	mov	r18,r7
 402496c:	4023f600 	call	4023f60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 4024970:	10c03fcc 	andi	r3,r2,255
 4024974:	18000726 	beq	r3,zero,4024994 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x5c>
 4024978:	dfc00417 	ldw	ra,16(sp)
 402497c:	dcc00317 	ldw	r19,12(sp)
 4024980:	dc800217 	ldw	r18,8(sp)
 4024984:	dc400117 	ldw	r17,4(sp)
 4024988:	dc000017 	ldw	r16,0(sp)
 402498c:	dec00504 	addi	sp,sp,20
 4024990:	f800283a 	ret
 4024994:	99000217 	ldw	r4,8(r19)
 4024998:	900f883a 	mov	r7,r18
 402499c:	880d883a 	mov	r6,r17
 40249a0:	20800017 	ldw	r2,0(r4)
 40249a4:	800b883a 	mov	r5,r16
 40249a8:	10800617 	ldw	r2,24(r2)
 40249ac:	dfc00417 	ldw	ra,16(sp)
 40249b0:	dcc00317 	ldw	r19,12(sp)
 40249b4:	dc800217 	ldw	r18,8(sp)
 40249b8:	dc400117 	ldw	r17,4(sp)
 40249bc:	dc000017 	ldw	r16,0(sp)
 40249c0:	dec00504 	addi	sp,sp,20
 40249c4:	1000683a 	jmp	r2

040249c8 <_ZNSt9exceptionD1Ev>:
 40249c8:	f811883a 	mov	r8,ra
 40249cc:	40346e80 	call	40346e8 <_mcount>
 40249d0:	403f883a 	mov	ra,r8
 40249d4:	f800283a 	ret

040249d8 <_ZNSt13bad_exceptionD1Ev>:
 40249d8:	f811883a 	mov	r8,ra
 40249dc:	40346e80 	call	40346e8 <_mcount>
 40249e0:	403f883a 	mov	ra,r8
 40249e4:	f800283a 	ret

040249e8 <_ZNKSt9exception4whatEv>:
 40249e8:	f811883a 	mov	r8,ra
 40249ec:	40346e80 	call	40346e8 <_mcount>
 40249f0:	403f883a 	mov	ra,r8
 40249f4:	00800034 	movhi	r2,0
 40249f8:	10809304 	addi	r2,r2,588
 40249fc:	f800283a 	ret

04024a00 <_ZNKSt13bad_exception4whatEv>:
 4024a00:	f811883a 	mov	r8,ra
 4024a04:	40346e80 	call	40346e8 <_mcount>
 4024a08:	403f883a 	mov	ra,r8
 4024a0c:	00800034 	movhi	r2,0
 4024a10:	10809704 	addi	r2,r2,604
 4024a14:	f800283a 	ret

04024a18 <_ZNSt9exceptionD0Ev>:
 4024a18:	f811883a 	mov	r8,ra
 4024a1c:	40346e80 	call	40346e8 <_mcount>
 4024a20:	403f883a 	mov	ra,r8
 4024a24:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024a28 <_ZNSt13bad_exceptionD0Ev>:
 4024a28:	f811883a 	mov	r8,ra
 4024a2c:	40346e80 	call	40346e8 <_mcount>
 4024a30:	403f883a 	mov	ra,r8
 4024a34:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024a38 <_ZN10__cxxabiv115__forced_unwindD1Ev>:
 4024a38:	f811883a 	mov	r8,ra
 4024a3c:	40346e80 	call	40346e8 <_mcount>
 4024a40:	403f883a 	mov	ra,r8
 4024a44:	f800283a 	ret

04024a48 <_ZN10__cxxabiv115__forced_unwindD0Ev>:
 4024a48:	f811883a 	mov	r8,ra
 4024a4c:	40346e80 	call	40346e8 <_mcount>
 4024a50:	403f883a 	mov	ra,r8
 4024a54:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024a58 <_ZN10__cxxabiv119__foreign_exceptionD1Ev>:
 4024a58:	f811883a 	mov	r8,ra
 4024a5c:	40346e80 	call	40346e8 <_mcount>
 4024a60:	403f883a 	mov	ra,r8
 4024a64:	f800283a 	ret

04024a68 <_ZN10__cxxabiv119__foreign_exceptionD0Ev>:
 4024a68:	f811883a 	mov	r8,ra
 4024a6c:	40346e80 	call	40346e8 <_mcount>
 4024a70:	403f883a 	mov	ra,r8
 4024a74:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024a78 <_ZNSt9type_infoD1Ev>:
 4024a78:	f811883a 	mov	r8,ra
 4024a7c:	40346e80 	call	40346e8 <_mcount>
 4024a80:	403f883a 	mov	ra,r8
 4024a84:	f800283a 	ret

04024a88 <_ZNKSt9type_info14__is_pointer_pEv>:
 4024a88:	f811883a 	mov	r8,ra
 4024a8c:	40346e80 	call	40346e8 <_mcount>
 4024a90:	403f883a 	mov	ra,r8
 4024a94:	0005883a 	mov	r2,zero
 4024a98:	f800283a 	ret

04024a9c <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 4024a9c:	f811883a 	mov	r8,ra
 4024aa0:	40346e80 	call	40346e8 <_mcount>
 4024aa4:	403f883a 	mov	ra,r8
 4024aa8:	0005883a 	mov	r2,zero
 4024aac:	f800283a 	ret

04024ab0 <_ZNSt9type_infoD0Ev>:
 4024ab0:	f811883a 	mov	r8,ra
 4024ab4:	40346e80 	call	40346e8 <_mcount>
 4024ab8:	403f883a 	mov	ra,r8
 4024abc:	4023b101 	jmpi	4023b10 <_ZdlPv>

04024ac0 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 4024ac0:	f811883a 	mov	r8,ra
 4024ac4:	40346e80 	call	40346e8 <_mcount>
 4024ac8:	403f883a 	mov	ra,r8
 4024acc:	21000117 	ldw	r4,4(r4)
 4024ad0:	29400117 	ldw	r5,4(r5)
 4024ad4:	21400c26 	beq	r4,r5,4024b08 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x48>
 4024ad8:	20c00007 	ldb	r3,0(r4)
 4024adc:	00800a84 	movi	r2,42
 4024ae0:	18800726 	beq	r3,r2,4024b00 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x40>
 4024ae4:	deffff04 	addi	sp,sp,-4
 4024ae8:	dfc00015 	stw	ra,0(sp)
 4024aec:	40286c00 	call	40286c0 <strcmp>
 4024af0:	1005003a 	cmpeq	r2,r2,zero
 4024af4:	dfc00017 	ldw	ra,0(sp)
 4024af8:	dec00104 	addi	sp,sp,4
 4024afc:	f800283a 	ret
 4024b00:	0005883a 	mov	r2,zero
 4024b04:	f800283a 	ret
 4024b08:	00800044 	movi	r2,1
 4024b0c:	f800283a 	ret

04024b10 <__cxa_pure_virtual>:
 4024b10:	f811883a 	mov	r8,ra
 4024b14:	40346e80 	call	40346e8 <_mcount>
 4024b18:	403f883a 	mov	ra,r8
 4024b1c:	deffff04 	addi	sp,sp,-4
 4024b20:	dfc00015 	stw	ra,0(sp)
 4024b24:	01400034 	movhi	r5,0
 4024b28:	2940d904 	addi	r5,r5,868
 4024b2c:	018006c4 	movi	r6,27
 4024b30:	01000084 	movi	r4,2
 4024b34:	4034a140 	call	4034a14 <write>
 4024b38:	40242440 	call	4024244 <_ZSt9terminatev>

04024b3c <__cxa_deleted_virtual>:
 4024b3c:	f811883a 	mov	r8,ra
 4024b40:	40346e80 	call	40346e8 <_mcount>
 4024b44:	403f883a 	mov	ra,r8
 4024b48:	deffff04 	addi	sp,sp,-4
 4024b4c:	dfc00015 	stw	ra,0(sp)
 4024b50:	01400034 	movhi	r5,0
 4024b54:	2940e004 	addi	r5,r5,896
 4024b58:	01800784 	movi	r6,30
 4024b5c:	01000084 	movi	r4,2
 4024b60:	4034a140 	call	4034a14 <write>
 4024b64:	40242440 	call	4024244 <_ZSt9terminatev>

04024b68 <__fixunssfsi>:
 4024b68:	f811883a 	mov	r8,ra
 4024b6c:	40346e80 	call	40346e8 <_mcount>
 4024b70:	403f883a 	mov	ra,r8
 4024b74:	defffd04 	addi	sp,sp,-12
 4024b78:	dfc00215 	stw	ra,8(sp)
 4024b7c:	dc400115 	stw	r17,4(sp)
 4024b80:	dc000015 	stw	r16,0(sp)
 4024b84:	0413c034 	movhi	r16,20224
 4024b88:	800b883a 	mov	r5,r16
 4024b8c:	2023883a 	mov	r17,r4
 4024b90:	40257540 	call	4025754 <__gesf2>
 4024b94:	1000070e 	bge	r2,zero,4024bb4 <__fixunssfsi+0x4c>
 4024b98:	8809883a 	mov	r4,r17
 4024b9c:	40261100 	call	4026110 <__fixsfsi>
 4024ba0:	dfc00217 	ldw	ra,8(sp)
 4024ba4:	dc400117 	ldw	r17,4(sp)
 4024ba8:	dc000017 	ldw	r16,0(sp)
 4024bac:	dec00304 	addi	sp,sp,12
 4024bb0:	f800283a 	ret
 4024bb4:	800b883a 	mov	r5,r16
 4024bb8:	8809883a 	mov	r4,r17
 4024bbc:	4025c200 	call	4025c20 <__subsf3>
 4024bc0:	1009883a 	mov	r4,r2
 4024bc4:	40261100 	call	4026110 <__fixsfsi>
 4024bc8:	00e00034 	movhi	r3,32768
 4024bcc:	10c5883a 	add	r2,r2,r3
 4024bd0:	003ff306 	br	4024ba0 <__flash_rwdata_start+0xfffee648>

04024bd4 <__divsi3>:
 4024bd4:	f811883a 	mov	r8,ra
 4024bd8:	40346e80 	call	40346e8 <_mcount>
 4024bdc:	403f883a 	mov	ra,r8
 4024be0:	20001b16 	blt	r4,zero,4024c50 <__divsi3+0x7c>
 4024be4:	000f883a 	mov	r7,zero
 4024be8:	28001616 	blt	r5,zero,4024c44 <__divsi3+0x70>
 4024bec:	200d883a 	mov	r6,r4
 4024bf0:	29001a2e 	bgeu	r5,r4,4024c5c <__divsi3+0x88>
 4024bf4:	00800804 	movi	r2,32
 4024bf8:	00c00044 	movi	r3,1
 4024bfc:	00000106 	br	4024c04 <__divsi3+0x30>
 4024c00:	10000d26 	beq	r2,zero,4024c38 <__divsi3+0x64>
 4024c04:	294b883a 	add	r5,r5,r5
 4024c08:	10bfffc4 	addi	r2,r2,-1
 4024c0c:	18c7883a 	add	r3,r3,r3
 4024c10:	293ffb36 	bltu	r5,r4,4024c00 <__flash_rwdata_start+0xfffee6a8>
 4024c14:	0005883a 	mov	r2,zero
 4024c18:	18000726 	beq	r3,zero,4024c38 <__divsi3+0x64>
 4024c1c:	0005883a 	mov	r2,zero
 4024c20:	31400236 	bltu	r6,r5,4024c2c <__divsi3+0x58>
 4024c24:	314dc83a 	sub	r6,r6,r5
 4024c28:	10c4b03a 	or	r2,r2,r3
 4024c2c:	1806d07a 	srli	r3,r3,1
 4024c30:	280ad07a 	srli	r5,r5,1
 4024c34:	183ffa1e 	bne	r3,zero,4024c20 <__flash_rwdata_start+0xfffee6c8>
 4024c38:	38000126 	beq	r7,zero,4024c40 <__divsi3+0x6c>
 4024c3c:	0085c83a 	sub	r2,zero,r2
 4024c40:	f800283a 	ret
 4024c44:	014bc83a 	sub	r5,zero,r5
 4024c48:	39c0005c 	xori	r7,r7,1
 4024c4c:	003fe706 	br	4024bec <__flash_rwdata_start+0xfffee694>
 4024c50:	0109c83a 	sub	r4,zero,r4
 4024c54:	01c00044 	movi	r7,1
 4024c58:	003fe306 	br	4024be8 <__flash_rwdata_start+0xfffee690>
 4024c5c:	00c00044 	movi	r3,1
 4024c60:	003fee06 	br	4024c1c <__flash_rwdata_start+0xfffee6c4>

04024c64 <__modsi3>:
 4024c64:	f811883a 	mov	r8,ra
 4024c68:	40346e80 	call	40346e8 <_mcount>
 4024c6c:	403f883a 	mov	ra,r8
 4024c70:	20001716 	blt	r4,zero,4024cd0 <__modsi3+0x6c>
 4024c74:	000f883a 	mov	r7,zero
 4024c78:	2005883a 	mov	r2,r4
 4024c7c:	28001216 	blt	r5,zero,4024cc8 <__modsi3+0x64>
 4024c80:	2900162e 	bgeu	r5,r4,4024cdc <__modsi3+0x78>
 4024c84:	01800804 	movi	r6,32
 4024c88:	00c00044 	movi	r3,1
 4024c8c:	00000106 	br	4024c94 <__modsi3+0x30>
 4024c90:	30000a26 	beq	r6,zero,4024cbc <__modsi3+0x58>
 4024c94:	294b883a 	add	r5,r5,r5
 4024c98:	31bfffc4 	addi	r6,r6,-1
 4024c9c:	18c7883a 	add	r3,r3,r3
 4024ca0:	293ffb36 	bltu	r5,r4,4024c90 <__flash_rwdata_start+0xfffee738>
 4024ca4:	18000526 	beq	r3,zero,4024cbc <__modsi3+0x58>
 4024ca8:	1806d07a 	srli	r3,r3,1
 4024cac:	11400136 	bltu	r2,r5,4024cb4 <__modsi3+0x50>
 4024cb0:	1145c83a 	sub	r2,r2,r5
 4024cb4:	280ad07a 	srli	r5,r5,1
 4024cb8:	183ffb1e 	bne	r3,zero,4024ca8 <__flash_rwdata_start+0xfffee750>
 4024cbc:	38000126 	beq	r7,zero,4024cc4 <__modsi3+0x60>
 4024cc0:	0085c83a 	sub	r2,zero,r2
 4024cc4:	f800283a 	ret
 4024cc8:	014bc83a 	sub	r5,zero,r5
 4024ccc:	003fec06 	br	4024c80 <__flash_rwdata_start+0xfffee728>
 4024cd0:	0109c83a 	sub	r4,zero,r4
 4024cd4:	01c00044 	movi	r7,1
 4024cd8:	003fe706 	br	4024c78 <__flash_rwdata_start+0xfffee720>
 4024cdc:	00c00044 	movi	r3,1
 4024ce0:	003ff106 	br	4024ca8 <__flash_rwdata_start+0xfffee750>

04024ce4 <__udivsi3>:
 4024ce4:	f811883a 	mov	r8,ra
 4024ce8:	40346e80 	call	40346e8 <_mcount>
 4024cec:	403f883a 	mov	ra,r8
 4024cf0:	200d883a 	mov	r6,r4
 4024cf4:	2900152e 	bgeu	r5,r4,4024d4c <__udivsi3+0x68>
 4024cf8:	28001416 	blt	r5,zero,4024d4c <__udivsi3+0x68>
 4024cfc:	00800804 	movi	r2,32
 4024d00:	00c00044 	movi	r3,1
 4024d04:	00000206 	br	4024d10 <__udivsi3+0x2c>
 4024d08:	10000e26 	beq	r2,zero,4024d44 <__udivsi3+0x60>
 4024d0c:	28000516 	blt	r5,zero,4024d24 <__udivsi3+0x40>
 4024d10:	294b883a 	add	r5,r5,r5
 4024d14:	10bfffc4 	addi	r2,r2,-1
 4024d18:	18c7883a 	add	r3,r3,r3
 4024d1c:	293ffa36 	bltu	r5,r4,4024d08 <__flash_rwdata_start+0xfffee7b0>
 4024d20:	18000826 	beq	r3,zero,4024d44 <__udivsi3+0x60>
 4024d24:	0005883a 	mov	r2,zero
 4024d28:	31400236 	bltu	r6,r5,4024d34 <__udivsi3+0x50>
 4024d2c:	314dc83a 	sub	r6,r6,r5
 4024d30:	10c4b03a 	or	r2,r2,r3
 4024d34:	1806d07a 	srli	r3,r3,1
 4024d38:	280ad07a 	srli	r5,r5,1
 4024d3c:	183ffa1e 	bne	r3,zero,4024d28 <__flash_rwdata_start+0xfffee7d0>
 4024d40:	f800283a 	ret
 4024d44:	0005883a 	mov	r2,zero
 4024d48:	f800283a 	ret
 4024d4c:	00c00044 	movi	r3,1
 4024d50:	003ff406 	br	4024d24 <__flash_rwdata_start+0xfffee7cc>

04024d54 <__umodsi3>:
 4024d54:	f811883a 	mov	r8,ra
 4024d58:	40346e80 	call	40346e8 <_mcount>
 4024d5c:	403f883a 	mov	ra,r8
 4024d60:	2005883a 	mov	r2,r4
 4024d64:	2900112e 	bgeu	r5,r4,4024dac <__umodsi3+0x58>
 4024d68:	28001016 	blt	r5,zero,4024dac <__umodsi3+0x58>
 4024d6c:	01800804 	movi	r6,32
 4024d70:	00c00044 	movi	r3,1
 4024d74:	00000206 	br	4024d80 <__umodsi3+0x2c>
 4024d78:	30000b26 	beq	r6,zero,4024da8 <__umodsi3+0x54>
 4024d7c:	28000516 	blt	r5,zero,4024d94 <__umodsi3+0x40>
 4024d80:	294b883a 	add	r5,r5,r5
 4024d84:	31bfffc4 	addi	r6,r6,-1
 4024d88:	18c7883a 	add	r3,r3,r3
 4024d8c:	293ffa36 	bltu	r5,r4,4024d78 <__flash_rwdata_start+0xfffee820>
 4024d90:	18000526 	beq	r3,zero,4024da8 <__umodsi3+0x54>
 4024d94:	1806d07a 	srli	r3,r3,1
 4024d98:	11400136 	bltu	r2,r5,4024da0 <__umodsi3+0x4c>
 4024d9c:	1145c83a 	sub	r2,r2,r5
 4024da0:	280ad07a 	srli	r5,r5,1
 4024da4:	183ffb1e 	bne	r3,zero,4024d94 <__flash_rwdata_start+0xfffee83c>
 4024da8:	f800283a 	ret
 4024dac:	00c00044 	movi	r3,1
 4024db0:	003ff806 	br	4024d94 <__flash_rwdata_start+0xfffee83c>

04024db4 <__addsf3>:
 4024db4:	f811883a 	mov	r8,ra
 4024db8:	40346e80 	call	40346e8 <_mcount>
 4024dbc:	403f883a 	mov	ra,r8
 4024dc0:	defffc04 	addi	sp,sp,-16
 4024dc4:	dfc00315 	stw	ra,12(sp)
 4024dc8:	dc800215 	stw	r18,8(sp)
 4024dcc:	dc400115 	stw	r17,4(sp)
 4024dd0:	dc000015 	stw	r16,0(sp)
 4024dd4:	2004d7fa 	srli	r2,r4,31
 4024dd8:	2020d5fa 	srli	r16,r4,23
 4024ddc:	280cd5fa 	srli	r6,r5,23
 4024de0:	00c02034 	movhi	r3,128
 4024de4:	280ed7fa 	srli	r7,r5,31
 4024de8:	18ffffc4 	addi	r3,r3,-1
 4024dec:	1908703a 	and	r4,r3,r4
 4024df0:	194a703a 	and	r5,r3,r5
 4024df4:	14403fcc 	andi	r17,r2,255
 4024df8:	84003fcc 	andi	r16,r16,255
 4024dfc:	200890fa 	slli	r4,r4,3
 4024e00:	31803fcc 	andi	r6,r6,255
 4024e04:	280a90fa 	slli	r5,r5,3
 4024e08:	89c05026 	beq	r17,r7,4024f4c <__addsf3+0x198>
 4024e0c:	8185c83a 	sub	r2,r16,r6
 4024e10:	00807a0e 	bge	zero,r2,4024ffc <__addsf3+0x248>
 4024e14:	30001e1e 	bne	r6,zero,4024e90 <__addsf3+0xdc>
 4024e18:	28006d1e 	bne	r5,zero,4024fd0 <__addsf3+0x21c>
 4024e1c:	208001cc 	andi	r2,r4,7
 4024e20:	10000426 	beq	r2,zero,4024e34 <__addsf3+0x80>
 4024e24:	208003cc 	andi	r2,r4,15
 4024e28:	00c00104 	movi	r3,4
 4024e2c:	10c00126 	beq	r2,r3,4024e34 <__addsf3+0x80>
 4024e30:	20c9883a 	add	r4,r4,r3
 4024e34:	2081002c 	andhi	r2,r4,1024
 4024e38:	10003926 	beq	r2,zero,4024f20 <__addsf3+0x16c>
 4024e3c:	84000044 	addi	r16,r16,1
 4024e40:	00803fc4 	movi	r2,255
 4024e44:	80807826 	beq	r16,r2,4025028 <__addsf3+0x274>
 4024e48:	200891ba 	slli	r4,r4,6
 4024e4c:	8805883a 	mov	r2,r17
 4024e50:	2008d27a 	srli	r4,r4,9
 4024e54:	84003fcc 	andi	r16,r16,255
 4024e58:	800695fa 	slli	r3,r16,23
 4024e5c:	10803fcc 	andi	r2,r2,255
 4024e60:	04002034 	movhi	r16,128
 4024e64:	843fffc4 	addi	r16,r16,-1
 4024e68:	100497fa 	slli	r2,r2,31
 4024e6c:	2408703a 	and	r4,r4,r16
 4024e70:	20e0b03a 	or	r16,r4,r3
 4024e74:	8084b03a 	or	r2,r16,r2
 4024e78:	dfc00317 	ldw	ra,12(sp)
 4024e7c:	dc800217 	ldw	r18,8(sp)
 4024e80:	dc400117 	ldw	r17,4(sp)
 4024e84:	dc000017 	ldw	r16,0(sp)
 4024e88:	dec00404 	addi	sp,sp,16
 4024e8c:	f800283a 	ret
 4024e90:	00c03fc4 	movi	r3,255
 4024e94:	80ffe126 	beq	r16,r3,4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024e98:	29410034 	orhi	r5,r5,1024
 4024e9c:	00c006c4 	movi	r3,27
 4024ea0:	18807516 	blt	r3,r2,4025078 <__addsf3+0x2c4>
 4024ea4:	00c00804 	movi	r3,32
 4024ea8:	1887c83a 	sub	r3,r3,r2
 4024eac:	28c6983a 	sll	r3,r5,r3
 4024eb0:	288ad83a 	srl	r5,r5,r2
 4024eb4:	1804c03a 	cmpne	r2,r3,zero
 4024eb8:	288ab03a 	or	r5,r5,r2
 4024ebc:	2149c83a 	sub	r4,r4,r5
 4024ec0:	2081002c 	andhi	r2,r4,1024
 4024ec4:	10001426 	beq	r2,zero,4024f18 <__addsf3+0x164>
 4024ec8:	04810034 	movhi	r18,1024
 4024ecc:	94bfffc4 	addi	r18,r18,-1
 4024ed0:	24a4703a 	and	r18,r4,r18
 4024ed4:	9009883a 	mov	r4,r18
 4024ed8:	402768c0 	call	402768c <__clzsi2>
 4024edc:	10bffec4 	addi	r2,r2,-5
 4024ee0:	90a4983a 	sll	r18,r18,r2
 4024ee4:	14005416 	blt	r2,r16,4025038 <__addsf3+0x284>
 4024ee8:	1405c83a 	sub	r2,r2,r16
 4024eec:	11000044 	addi	r4,r2,1
 4024ef0:	00800804 	movi	r2,32
 4024ef4:	1105c83a 	sub	r2,r2,r4
 4024ef8:	9084983a 	sll	r2,r18,r2
 4024efc:	9124d83a 	srl	r18,r18,r4
 4024f00:	0021883a 	mov	r16,zero
 4024f04:	1008c03a 	cmpne	r4,r2,zero
 4024f08:	9108b03a 	or	r4,r18,r4
 4024f0c:	003fc306 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024f10:	1000db26 	beq	r2,zero,4025280 <__addsf3+0x4cc>
 4024f14:	1009883a 	mov	r4,r2
 4024f18:	208001cc 	andi	r2,r4,7
 4024f1c:	103fc11e 	bne	r2,zero,4024e24 <__flash_rwdata_start+0xfffee8cc>
 4024f20:	2006d0fa 	srli	r3,r4,3
 4024f24:	01003fc4 	movi	r4,255
 4024f28:	8805883a 	mov	r2,r17
 4024f2c:	8100241e 	bne	r16,r4,4024fc0 <__addsf3+0x20c>
 4024f30:	18006e26 	beq	r3,zero,40250ec <__addsf3+0x338>
 4024f34:	19001034 	orhi	r4,r3,64
 4024f38:	00c02034 	movhi	r3,128
 4024f3c:	18ffffc4 	addi	r3,r3,-1
 4024f40:	043fffc4 	movi	r16,-1
 4024f44:	20c8703a 	and	r4,r4,r3
 4024f48:	003fc206 	br	4024e54 <__flash_rwdata_start+0xfffee8fc>
 4024f4c:	8187c83a 	sub	r3,r16,r6
 4024f50:	00c03e0e 	bge	zero,r3,402504c <__addsf3+0x298>
 4024f54:	30002326 	beq	r6,zero,4024fe4 <__addsf3+0x230>
 4024f58:	01803fc4 	movi	r6,255
 4024f5c:	81bfaf26 	beq	r16,r6,4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024f60:	29410034 	orhi	r5,r5,1024
 4024f64:	018006c4 	movi	r6,27
 4024f68:	30c07416 	blt	r6,r3,402513c <__addsf3+0x388>
 4024f6c:	01800804 	movi	r6,32
 4024f70:	30cdc83a 	sub	r6,r6,r3
 4024f74:	298c983a 	sll	r6,r5,r6
 4024f78:	28cad83a 	srl	r5,r5,r3
 4024f7c:	3006c03a 	cmpne	r3,r6,zero
 4024f80:	28cab03a 	or	r5,r5,r3
 4024f84:	2149883a 	add	r4,r4,r5
 4024f88:	20c1002c 	andhi	r3,r4,1024
 4024f8c:	183fe226 	beq	r3,zero,4024f18 <__flash_rwdata_start+0xfffee9c0>
 4024f90:	84000044 	addi	r16,r16,1
 4024f94:	00c03fc4 	movi	r3,255
 4024f98:	80c05426 	beq	r16,r3,40250ec <__addsf3+0x338>
 4024f9c:	00bf0034 	movhi	r2,64512
 4024fa0:	10bfffc4 	addi	r2,r2,-1
 4024fa4:	20c0004c 	andi	r3,r4,1
 4024fa8:	2088703a 	and	r4,r4,r2
 4024fac:	2008d07a 	srli	r4,r4,1
 4024fb0:	20c8b03a 	or	r4,r4,r3
 4024fb4:	003f9906 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024fb8:	0007883a 	mov	r3,zero
 4024fbc:	0005883a 	mov	r2,zero
 4024fc0:	01002034 	movhi	r4,128
 4024fc4:	213fffc4 	addi	r4,r4,-1
 4024fc8:	1908703a 	and	r4,r3,r4
 4024fcc:	003fa106 	br	4024e54 <__flash_rwdata_start+0xfffee8fc>
 4024fd0:	10bfffc4 	addi	r2,r2,-1
 4024fd4:	103fb926 	beq	r2,zero,4024ebc <__flash_rwdata_start+0xfffee964>
 4024fd8:	00c03fc4 	movi	r3,255
 4024fdc:	80ffaf1e 	bne	r16,r3,4024e9c <__flash_rwdata_start+0xfffee944>
 4024fe0:	003f8e06 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024fe4:	283f8d26 	beq	r5,zero,4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024fe8:	18ffffc4 	addi	r3,r3,-1
 4024fec:	183fe526 	beq	r3,zero,4024f84 <__flash_rwdata_start+0xfffeea2c>
 4024ff0:	01803fc4 	movi	r6,255
 4024ff4:	81bfdb1e 	bne	r16,r6,4024f64 <__flash_rwdata_start+0xfffeea0c>
 4024ff8:	003f8806 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4024ffc:	1000201e 	bne	r2,zero,4025080 <__addsf3+0x2cc>
 4025000:	80800044 	addi	r2,r16,1
 4025004:	10803fcc 	andi	r2,r2,255
 4025008:	01800044 	movi	r6,1
 402500c:	3080450e 	bge	r6,r2,4025124 <__addsf3+0x370>
 4025010:	2165c83a 	sub	r18,r4,r5
 4025014:	90c1002c 	andhi	r3,r18,1024
 4025018:	18002b26 	beq	r3,zero,40250c8 <__addsf3+0x314>
 402501c:	2925c83a 	sub	r18,r5,r4
 4025020:	3823883a 	mov	r17,r7
 4025024:	003fab06 	br	4024ed4 <__flash_rwdata_start+0xfffee97c>
 4025028:	8805883a 	mov	r2,r17
 402502c:	043fffc4 	movi	r16,-1
 4025030:	0009883a 	mov	r4,zero
 4025034:	003f8706 	br	4024e54 <__flash_rwdata_start+0xfffee8fc>
 4025038:	013f0034 	movhi	r4,64512
 402503c:	213fffc4 	addi	r4,r4,-1
 4025040:	80a1c83a 	sub	r16,r16,r2
 4025044:	9108703a 	and	r4,r18,r4
 4025048:	003f7406 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 402504c:	1800411e 	bne	r3,zero,4025154 <__addsf3+0x3a0>
 4025050:	80c00044 	addi	r3,r16,1
 4025054:	19c03fcc 	andi	r7,r3,255
 4025058:	01800044 	movi	r6,1
 402505c:	31c0260e 	bge	r6,r7,40250f8 <__addsf3+0x344>
 4025060:	01803fc4 	movi	r6,255
 4025064:	19802126 	beq	r3,r6,40250ec <__addsf3+0x338>
 4025068:	2149883a 	add	r4,r4,r5
 402506c:	2008d07a 	srli	r4,r4,1
 4025070:	1821883a 	mov	r16,r3
 4025074:	003f6906 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025078:	01400044 	movi	r5,1
 402507c:	003f8f06 	br	4024ebc <__flash_rwdata_start+0xfffee964>
 4025080:	8000151e 	bne	r16,zero,40250d8 <__addsf3+0x324>
 4025084:	20002f26 	beq	r4,zero,4025144 <__addsf3+0x390>
 4025088:	0084303a 	nor	r2,zero,r2
 402508c:	10000a26 	beq	r2,zero,40250b8 <__addsf3+0x304>
 4025090:	00c03fc4 	movi	r3,255
 4025094:	30c02b26 	beq	r6,r3,4025144 <__addsf3+0x390>
 4025098:	00c006c4 	movi	r3,27
 402509c:	18806d16 	blt	r3,r2,4025254 <__addsf3+0x4a0>
 40250a0:	00c00804 	movi	r3,32
 40250a4:	1887c83a 	sub	r3,r3,r2
 40250a8:	20c6983a 	sll	r3,r4,r3
 40250ac:	2084d83a 	srl	r2,r4,r2
 40250b0:	1808c03a 	cmpne	r4,r3,zero
 40250b4:	1108b03a 	or	r4,r2,r4
 40250b8:	2909c83a 	sub	r4,r5,r4
 40250bc:	3021883a 	mov	r16,r6
 40250c0:	3823883a 	mov	r17,r7
 40250c4:	003f7e06 	br	4024ec0 <__flash_rwdata_start+0xfffee968>
 40250c8:	903f821e 	bne	r18,zero,4024ed4 <__flash_rwdata_start+0xfffee97c>
 40250cc:	0005883a 	mov	r2,zero
 40250d0:	0021883a 	mov	r16,zero
 40250d4:	003fba06 	br	4024fc0 <__flash_rwdata_start+0xfffeea68>
 40250d8:	00c03fc4 	movi	r3,255
 40250dc:	30c01926 	beq	r6,r3,4025144 <__addsf3+0x390>
 40250e0:	0085c83a 	sub	r2,zero,r2
 40250e4:	21010034 	orhi	r4,r4,1024
 40250e8:	003feb06 	br	4025098 <__flash_rwdata_start+0xfffeeb40>
 40250ec:	043fffc4 	movi	r16,-1
 40250f0:	0009883a 	mov	r4,zero
 40250f4:	003f5706 	br	4024e54 <__flash_rwdata_start+0xfffee8fc>
 40250f8:	80004a1e 	bne	r16,zero,4025224 <__addsf3+0x470>
 40250fc:	20005926 	beq	r4,zero,4025264 <__addsf3+0x4b0>
 4025100:	283f4626 	beq	r5,zero,4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025104:	2149883a 	add	r4,r4,r5
 4025108:	2081002c 	andhi	r2,r4,1024
 402510c:	103f8226 	beq	r2,zero,4024f18 <__flash_rwdata_start+0xfffee9c0>
 4025110:	00bf0034 	movhi	r2,64512
 4025114:	10bfffc4 	addi	r2,r2,-1
 4025118:	3021883a 	mov	r16,r6
 402511c:	2088703a 	and	r4,r4,r2
 4025120:	003f3e06 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025124:	8000121e 	bne	r16,zero,4025170 <__addsf3+0x3bc>
 4025128:	2000261e 	bne	r4,zero,40251c4 <__addsf3+0x410>
 402512c:	283fa226 	beq	r5,zero,4024fb8 <__flash_rwdata_start+0xfffeea60>
 4025130:	2809883a 	mov	r4,r5
 4025134:	3823883a 	mov	r17,r7
 4025138:	003f3806 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 402513c:	01400044 	movi	r5,1
 4025140:	003f9006 	br	4024f84 <__flash_rwdata_start+0xfffeea2c>
 4025144:	2809883a 	mov	r4,r5
 4025148:	3021883a 	mov	r16,r6
 402514c:	3823883a 	mov	r17,r7
 4025150:	003f3206 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025154:	80000c1e 	bne	r16,zero,4025188 <__addsf3+0x3d4>
 4025158:	20002f26 	beq	r4,zero,4025218 <__addsf3+0x464>
 402515c:	00c6303a 	nor	r3,zero,r3
 4025160:	18002b1e 	bne	r3,zero,4025210 <__addsf3+0x45c>
 4025164:	2149883a 	add	r4,r4,r5
 4025168:	3021883a 	mov	r16,r6
 402516c:	003f8606 	br	4024f88 <__flash_rwdata_start+0xfffeea30>
 4025170:	20001b1e 	bne	r4,zero,40251e0 <__addsf3+0x42c>
 4025174:	28003926 	beq	r5,zero,402525c <__addsf3+0x4a8>
 4025178:	2809883a 	mov	r4,r5
 402517c:	3823883a 	mov	r17,r7
 4025180:	04003fc4 	movi	r16,255
 4025184:	003f2506 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025188:	01c03fc4 	movi	r7,255
 402518c:	31c02226 	beq	r6,r7,4025218 <__addsf3+0x464>
 4025190:	00c7c83a 	sub	r3,zero,r3
 4025194:	21010034 	orhi	r4,r4,1024
 4025198:	01c006c4 	movi	r7,27
 402519c:	38c03616 	blt	r7,r3,4025278 <__addsf3+0x4c4>
 40251a0:	01c00804 	movi	r7,32
 40251a4:	38cfc83a 	sub	r7,r7,r3
 40251a8:	21ce983a 	sll	r7,r4,r7
 40251ac:	20c6d83a 	srl	r3,r4,r3
 40251b0:	3808c03a 	cmpne	r4,r7,zero
 40251b4:	1906b03a 	or	r3,r3,r4
 40251b8:	1949883a 	add	r4,r3,r5
 40251bc:	3021883a 	mov	r16,r6
 40251c0:	003f7106 	br	4024f88 <__flash_rwdata_start+0xfffeea30>
 40251c4:	283f1526 	beq	r5,zero,4024e1c <__flash_rwdata_start+0xfffee8c4>
 40251c8:	2145c83a 	sub	r2,r4,r5
 40251cc:	10c1002c 	andhi	r3,r2,1024
 40251d0:	183f4f26 	beq	r3,zero,4024f10 <__flash_rwdata_start+0xfffee9b8>
 40251d4:	2909c83a 	sub	r4,r5,r4
 40251d8:	3823883a 	mov	r17,r7
 40251dc:	003f0f06 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 40251e0:	28001a26 	beq	r5,zero,402524c <__addsf3+0x498>
 40251e4:	2008d0fa 	srli	r4,r4,3
 40251e8:	2080102c 	andhi	r2,r4,64
 40251ec:	10000526 	beq	r2,zero,4025204 <__addsf3+0x450>
 40251f0:	280ad0fa 	srli	r5,r5,3
 40251f4:	2880102c 	andhi	r2,r5,64
 40251f8:	1000021e 	bne	r2,zero,4025204 <__addsf3+0x450>
 40251fc:	2809883a 	mov	r4,r5
 4025200:	3823883a 	mov	r17,r7
 4025204:	200890fa 	slli	r4,r4,3
 4025208:	04003fc4 	movi	r16,255
 402520c:	003f0306 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025210:	01c03fc4 	movi	r7,255
 4025214:	31ffe01e 	bne	r6,r7,4025198 <__flash_rwdata_start+0xfffeec40>
 4025218:	2809883a 	mov	r4,r5
 402521c:	3021883a 	mov	r16,r6
 4025220:	003efe06 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025224:	20001126 	beq	r4,zero,402526c <__addsf3+0x4b8>
 4025228:	28000826 	beq	r5,zero,402524c <__addsf3+0x498>
 402522c:	2008d0fa 	srli	r4,r4,3
 4025230:	2080102c 	andhi	r2,r4,64
 4025234:	103ff326 	beq	r2,zero,4025204 <__flash_rwdata_start+0xfffeecac>
 4025238:	280ad0fa 	srli	r5,r5,3
 402523c:	2880102c 	andhi	r2,r5,64
 4025240:	103ff01e 	bne	r2,zero,4025204 <__flash_rwdata_start+0xfffeecac>
 4025244:	2809883a 	mov	r4,r5
 4025248:	003fee06 	br	4025204 <__flash_rwdata_start+0xfffeecac>
 402524c:	04003fc4 	movi	r16,255
 4025250:	003ef206 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025254:	01000044 	movi	r4,1
 4025258:	003f9706 	br	40250b8 <__flash_rwdata_start+0xfffeeb60>
 402525c:	0005883a 	mov	r2,zero
 4025260:	003f3406 	br	4024f34 <__flash_rwdata_start+0xfffee9dc>
 4025264:	2809883a 	mov	r4,r5
 4025268:	003eec06 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 402526c:	2809883a 	mov	r4,r5
 4025270:	04003fc4 	movi	r16,255
 4025274:	003ee906 	br	4024e1c <__flash_rwdata_start+0xfffee8c4>
 4025278:	00c00044 	movi	r3,1
 402527c:	003fce06 	br	40251b8 <__flash_rwdata_start+0xfffeec60>
 4025280:	0005883a 	mov	r2,zero
 4025284:	003f4e06 	br	4024fc0 <__flash_rwdata_start+0xfffeea68>

04025288 <__divsf3>:
 4025288:	f811883a 	mov	r8,ra
 402528c:	40346e80 	call	40346e8 <_mcount>
 4025290:	403f883a 	mov	ra,r8
 4025294:	defff504 	addi	sp,sp,-44
 4025298:	dfc00a15 	stw	ra,40(sp)
 402529c:	df000915 	stw	fp,36(sp)
 40252a0:	ddc00815 	stw	r23,32(sp)
 40252a4:	dd800715 	stw	r22,28(sp)
 40252a8:	dd400615 	stw	r21,24(sp)
 40252ac:	dd000515 	stw	r20,20(sp)
 40252b0:	dcc00415 	stw	r19,16(sp)
 40252b4:	dc800315 	stw	r18,12(sp)
 40252b8:	dc400215 	stw	r17,8(sp)
 40252bc:	dc000115 	stw	r16,4(sp)
 40252c0:	200cd5fa 	srli	r6,r4,23
 40252c4:	2026d7fa 	srli	r19,r4,31
 40252c8:	00c02034 	movhi	r3,128
 40252cc:	18ffffc4 	addi	r3,r3,-1
 40252d0:	35003fcc 	andi	r20,r6,255
 40252d4:	1924703a 	and	r18,r3,r4
 40252d8:	9d803fcc 	andi	r22,r19,255
 40252dc:	a0005226 	beq	r20,zero,4025428 <__divsf3+0x1a0>
 40252e0:	00803fc4 	movi	r2,255
 40252e4:	a0802e26 	beq	r20,r2,40253a0 <__divsf3+0x118>
 40252e8:	91002034 	orhi	r4,r18,128
 40252ec:	202490fa 	slli	r18,r4,3
 40252f0:	a53fe044 	addi	r20,r20,-127
 40252f4:	0021883a 	mov	r16,zero
 40252f8:	002f883a 	mov	r23,zero
 40252fc:	280cd5fa 	srli	r6,r5,23
 4025300:	282ad7fa 	srli	r21,r5,31
 4025304:	00c02034 	movhi	r3,128
 4025308:	18ffffc4 	addi	r3,r3,-1
 402530c:	31803fcc 	andi	r6,r6,255
 4025310:	1962703a 	and	r17,r3,r5
 4025314:	af003fcc 	andi	fp,r21,255
 4025318:	30004a26 	beq	r6,zero,4025444 <__divsf3+0x1bc>
 402531c:	00803fc4 	movi	r2,255
 4025320:	30804526 	beq	r6,r2,4025438 <__divsf3+0x1b0>
 4025324:	89402034 	orhi	r5,r17,128
 4025328:	282290fa 	slli	r17,r5,3
 402532c:	31bfe044 	addi	r6,r6,-127
 4025330:	000b883a 	mov	r5,zero
 4025334:	2c20b03a 	or	r16,r5,r16
 4025338:	802090ba 	slli	r16,r16,2
 402533c:	008100b4 	movhi	r2,1026
 4025340:	1094d804 	addi	r2,r2,21344
 4025344:	80a1883a 	add	r16,r16,r2
 4025348:	81000017 	ldw	r4,0(r16)
 402534c:	9d46f03a 	xor	r3,r19,r21
 4025350:	180f883a 	mov	r7,r3
 4025354:	18803fcc 	andi	r2,r3,255
 4025358:	a18dc83a 	sub	r6,r20,r6
 402535c:	2000683a 	jmp	r4
 4025360:	04025544 	movi	r16,2389
 4025364:	040253c8 	cmpgei	r16,zero,2383
 4025368:	04025538 	rdprs	r16,zero,2388
 402536c:	040253b4 	movhi	r16,2382
 4025370:	04025538 	rdprs	r16,zero,2388
 4025374:	04025510 	cmplti	r16,zero,2388
 4025378:	04025538 	rdprs	r16,zero,2388
 402537c:	040253b4 	movhi	r16,2382
 4025380:	040253c8 	cmpgei	r16,zero,2383
 4025384:	040253c8 	cmpgei	r16,zero,2383
 4025388:	04025510 	cmplti	r16,zero,2388
 402538c:	040253b4 	movhi	r16,2382
 4025390:	04025624 	muli	r16,zero,2392
 4025394:	04025624 	muli	r16,zero,2392
 4025398:	04025624 	muli	r16,zero,2392
 402539c:	040255d8 	cmpnei	r16,zero,2391
 40253a0:	9000581e 	bne	r18,zero,4025504 <__divsf3+0x27c>
 40253a4:	04000204 	movi	r16,8
 40253a8:	05c00084 	movi	r23,2
 40253ac:	003fd306 	br	40252fc <__flash_rwdata_start+0xfffeeda4>
 40253b0:	0023883a 	mov	r17,zero
 40253b4:	e02d883a 	mov	r22,fp
 40253b8:	282f883a 	mov	r23,r5
 40253bc:	00800084 	movi	r2,2
 40253c0:	b8808f1e 	bne	r23,r2,4025600 <__divsf3+0x378>
 40253c4:	b005883a 	mov	r2,r22
 40253c8:	11c0004c 	andi	r7,r2,1
 40253cc:	013fffc4 	movi	r4,-1
 40253d0:	000d883a 	mov	r6,zero
 40253d4:	21003fcc 	andi	r4,r4,255
 40253d8:	200895fa 	slli	r4,r4,23
 40253dc:	38803fcc 	andi	r2,r7,255
 40253e0:	00c02034 	movhi	r3,128
 40253e4:	100497fa 	slli	r2,r2,31
 40253e8:	18ffffc4 	addi	r3,r3,-1
 40253ec:	30c6703a 	and	r3,r6,r3
 40253f0:	1906b03a 	or	r3,r3,r4
 40253f4:	1884b03a 	or	r2,r3,r2
 40253f8:	dfc00a17 	ldw	ra,40(sp)
 40253fc:	df000917 	ldw	fp,36(sp)
 4025400:	ddc00817 	ldw	r23,32(sp)
 4025404:	dd800717 	ldw	r22,28(sp)
 4025408:	dd400617 	ldw	r21,24(sp)
 402540c:	dd000517 	ldw	r20,20(sp)
 4025410:	dcc00417 	ldw	r19,16(sp)
 4025414:	dc800317 	ldw	r18,12(sp)
 4025418:	dc400217 	ldw	r17,8(sp)
 402541c:	dc000117 	ldw	r16,4(sp)
 4025420:	dec00b04 	addi	sp,sp,44
 4025424:	f800283a 	ret
 4025428:	90002b1e 	bne	r18,zero,40254d8 <__divsf3+0x250>
 402542c:	04000104 	movi	r16,4
 4025430:	05c00044 	movi	r23,1
 4025434:	003fb106 	br	40252fc <__flash_rwdata_start+0xfffeeda4>
 4025438:	8800251e 	bne	r17,zero,40254d0 <__divsf3+0x248>
 402543c:	01400084 	movi	r5,2
 4025440:	00000206 	br	402544c <__divsf3+0x1c4>
 4025444:	88001a1e 	bne	r17,zero,40254b0 <__divsf3+0x228>
 4025448:	01400044 	movi	r5,1
 402544c:	8160b03a 	or	r16,r16,r5
 4025450:	802090ba 	slli	r16,r16,2
 4025454:	00c100b4 	movhi	r3,1026
 4025458:	18d51c04 	addi	r3,r3,21616
 402545c:	80e1883a 	add	r16,r16,r3
 4025460:	80c00017 	ldw	r3,0(r16)
 4025464:	9d44f03a 	xor	r2,r19,r21
 4025468:	a18dc83a 	sub	r6,r20,r6
 402546c:	1800683a 	jmp	r3
 4025470:	040253c8 	cmpgei	r16,zero,2383
 4025474:	040253c8 	cmpgei	r16,zero,2383
 4025478:	04025614 	movui	r16,2392
 402547c:	040253b0 	cmpltui	r16,zero,2382
 4025480:	04025614 	movui	r16,2392
 4025484:	04025510 	cmplti	r16,zero,2388
 4025488:	04025614 	movui	r16,2392
 402548c:	040253b0 	cmpltui	r16,zero,2382
 4025490:	040253c8 	cmpgei	r16,zero,2383
 4025494:	040253c8 	cmpgei	r16,zero,2383
 4025498:	04025510 	cmplti	r16,zero,2388
 402549c:	040253b0 	cmpltui	r16,zero,2382
 40254a0:	04025624 	muli	r16,zero,2392
 40254a4:	04025624 	muli	r16,zero,2392
 40254a8:	04025624 	muli	r16,zero,2392
 40254ac:	0402563c 	xorhi	r16,zero,2392
 40254b0:	8809883a 	mov	r4,r17
 40254b4:	402768c0 	call	402768c <__clzsi2>
 40254b8:	10fffec4 	addi	r3,r2,-5
 40254bc:	10801d84 	addi	r2,r2,118
 40254c0:	88e2983a 	sll	r17,r17,r3
 40254c4:	008dc83a 	sub	r6,zero,r2
 40254c8:	000b883a 	mov	r5,zero
 40254cc:	003f9906 	br	4025334 <__flash_rwdata_start+0xfffeeddc>
 40254d0:	014000c4 	movi	r5,3
 40254d4:	003f9706 	br	4025334 <__flash_rwdata_start+0xfffeeddc>
 40254d8:	9009883a 	mov	r4,r18
 40254dc:	d9400015 	stw	r5,0(sp)
 40254e0:	402768c0 	call	402768c <__clzsi2>
 40254e4:	10fffec4 	addi	r3,r2,-5
 40254e8:	11801d84 	addi	r6,r2,118
 40254ec:	90e4983a 	sll	r18,r18,r3
 40254f0:	01a9c83a 	sub	r20,zero,r6
 40254f4:	0021883a 	mov	r16,zero
 40254f8:	002f883a 	mov	r23,zero
 40254fc:	d9400017 	ldw	r5,0(sp)
 4025500:	003f7e06 	br	40252fc <__flash_rwdata_start+0xfffeeda4>
 4025504:	04000304 	movi	r16,12
 4025508:	05c000c4 	movi	r23,3
 402550c:	003f7b06 	br	40252fc <__flash_rwdata_start+0xfffeeda4>
 4025510:	01802034 	movhi	r6,128
 4025514:	000f883a 	mov	r7,zero
 4025518:	31bfffc4 	addi	r6,r6,-1
 402551c:	013fffc4 	movi	r4,-1
 4025520:	003fac06 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 4025524:	01400044 	movi	r5,1
 4025528:	2909c83a 	sub	r4,r5,r4
 402552c:	00c006c4 	movi	r3,27
 4025530:	19004b0e 	bge	r3,r4,4025660 <__divsf3+0x3d8>
 4025534:	114e703a 	and	r7,r2,r5
 4025538:	0009883a 	mov	r4,zero
 402553c:	000d883a 	mov	r6,zero
 4025540:	003fa406 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 4025544:	9006917a 	slli	r3,r18,5
 4025548:	8822917a 	slli	r17,r17,5
 402554c:	1c40372e 	bgeu	r3,r17,402562c <__divsf3+0x3a4>
 4025550:	31bfffc4 	addi	r6,r6,-1
 4025554:	010006c4 	movi	r4,27
 4025558:	000b883a 	mov	r5,zero
 402555c:	180f883a 	mov	r7,r3
 4025560:	294b883a 	add	r5,r5,r5
 4025564:	18c7883a 	add	r3,r3,r3
 4025568:	38000116 	blt	r7,zero,4025570 <__divsf3+0x2e8>
 402556c:	1c400236 	bltu	r3,r17,4025578 <__divsf3+0x2f0>
 4025570:	1c47c83a 	sub	r3,r3,r17
 4025574:	29400054 	ori	r5,r5,1
 4025578:	213fffc4 	addi	r4,r4,-1
 402557c:	203ff71e 	bne	r4,zero,402555c <__flash_rwdata_start+0xfffef004>
 4025580:	1806c03a 	cmpne	r3,r3,zero
 4025584:	1962b03a 	or	r17,r3,r5
 4025588:	31001fc4 	addi	r4,r6,127
 402558c:	013fe50e 	bge	zero,r4,4025524 <__flash_rwdata_start+0xfffeefcc>
 4025590:	88c001cc 	andi	r3,r17,7
 4025594:	18000426 	beq	r3,zero,40255a8 <__divsf3+0x320>
 4025598:	88c003cc 	andi	r3,r17,15
 402559c:	01400104 	movi	r5,4
 40255a0:	19400126 	beq	r3,r5,40255a8 <__divsf3+0x320>
 40255a4:	8963883a 	add	r17,r17,r5
 40255a8:	88c2002c 	andhi	r3,r17,2048
 40255ac:	18000426 	beq	r3,zero,40255c0 <__divsf3+0x338>
 40255b0:	00fe0034 	movhi	r3,63488
 40255b4:	18ffffc4 	addi	r3,r3,-1
 40255b8:	31002004 	addi	r4,r6,128
 40255bc:	88e2703a 	and	r17,r17,r3
 40255c0:	00c03f84 	movi	r3,254
 40255c4:	193f8016 	blt	r3,r4,40253c8 <__flash_rwdata_start+0xfffeee70>
 40255c8:	880c91ba 	slli	r6,r17,6
 40255cc:	11c0004c 	andi	r7,r2,1
 40255d0:	300cd27a 	srli	r6,r6,9
 40255d4:	003f7f06 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 40255d8:	9080102c 	andhi	r2,r18,64
 40255dc:	10000226 	beq	r2,zero,40255e8 <__divsf3+0x360>
 40255e0:	8880102c 	andhi	r2,r17,64
 40255e4:	10001826 	beq	r2,zero,4025648 <__divsf3+0x3c0>
 40255e8:	00802034 	movhi	r2,128
 40255ec:	91801034 	orhi	r6,r18,64
 40255f0:	10bfffc4 	addi	r2,r2,-1
 40255f4:	980f883a 	mov	r7,r19
 40255f8:	308c703a 	and	r6,r6,r2
 40255fc:	003fc706 	br	402551c <__flash_rwdata_start+0xfffeefc4>
 4025600:	008000c4 	movi	r2,3
 4025604:	b8802d26 	beq	r23,r2,40256bc <__divsf3+0x434>
 4025608:	00c00044 	movi	r3,1
 402560c:	b005883a 	mov	r2,r22
 4025610:	b8ffdd1e 	bne	r23,r3,4025588 <__flash_rwdata_start+0xfffef030>
 4025614:	11c0004c 	andi	r7,r2,1
 4025618:	0009883a 	mov	r4,zero
 402561c:	000d883a 	mov	r6,zero
 4025620:	003f6c06 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 4025624:	9023883a 	mov	r17,r18
 4025628:	003f6406 	br	40253bc <__flash_rwdata_start+0xfffeee64>
 402562c:	1c47c83a 	sub	r3,r3,r17
 4025630:	01000684 	movi	r4,26
 4025634:	01400044 	movi	r5,1
 4025638:	003fc806 	br	402555c <__flash_rwdata_start+0xfffef004>
 402563c:	9080102c 	andhi	r2,r18,64
 4025640:	103fe926 	beq	r2,zero,40255e8 <__flash_rwdata_start+0xfffef090>
 4025644:	0023883a 	mov	r17,zero
 4025648:	00802034 	movhi	r2,128
 402564c:	89801034 	orhi	r6,r17,64
 4025650:	10bfffc4 	addi	r2,r2,-1
 4025654:	a80f883a 	mov	r7,r21
 4025658:	308c703a 	and	r6,r6,r2
 402565c:	003faf06 	br	402551c <__flash_rwdata_start+0xfffeefc4>
 4025660:	01c00804 	movi	r7,32
 4025664:	390fc83a 	sub	r7,r7,r4
 4025668:	89ce983a 	sll	r7,r17,r7
 402566c:	890ad83a 	srl	r5,r17,r4
 4025670:	380ec03a 	cmpne	r7,r7,zero
 4025674:	29cab03a 	or	r5,r5,r7
 4025678:	28c001cc 	andi	r3,r5,7
 402567c:	18000426 	beq	r3,zero,4025690 <__divsf3+0x408>
 4025680:	28c003cc 	andi	r3,r5,15
 4025684:	01000104 	movi	r4,4
 4025688:	19000126 	beq	r3,r4,4025690 <__divsf3+0x408>
 402568c:	290b883a 	add	r5,r5,r4
 4025690:	28c1002c 	andhi	r3,r5,1024
 4025694:	18000426 	beq	r3,zero,40256a8 <__divsf3+0x420>
 4025698:	11c0004c 	andi	r7,r2,1
 402569c:	01000044 	movi	r4,1
 40256a0:	000d883a 	mov	r6,zero
 40256a4:	003f4b06 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 40256a8:	280a91ba 	slli	r5,r5,6
 40256ac:	11c0004c 	andi	r7,r2,1
 40256b0:	0009883a 	mov	r4,zero
 40256b4:	280cd27a 	srli	r6,r5,9
 40256b8:	003f4606 	br	40253d4 <__flash_rwdata_start+0xfffeee7c>
 40256bc:	00802034 	movhi	r2,128
 40256c0:	89801034 	orhi	r6,r17,64
 40256c4:	10bfffc4 	addi	r2,r2,-1
 40256c8:	b00f883a 	mov	r7,r22
 40256cc:	308c703a 	and	r6,r6,r2
 40256d0:	003f9206 	br	402551c <__flash_rwdata_start+0xfffeefc4>

040256d4 <__eqsf2>:
 40256d4:	f811883a 	mov	r8,ra
 40256d8:	40346e80 	call	40346e8 <_mcount>
 40256dc:	403f883a 	mov	ra,r8
 40256e0:	2006d5fa 	srli	r3,r4,23
 40256e4:	280cd5fa 	srli	r6,r5,23
 40256e8:	01c02034 	movhi	r7,128
 40256ec:	39ffffc4 	addi	r7,r7,-1
 40256f0:	18c03fcc 	andi	r3,r3,255
 40256f4:	02003fc4 	movi	r8,255
 40256f8:	3904703a 	and	r2,r7,r4
 40256fc:	31803fcc 	andi	r6,r6,255
 4025700:	394e703a 	and	r7,r7,r5
 4025704:	2008d7fa 	srli	r4,r4,31
 4025708:	280ad7fa 	srli	r5,r5,31
 402570c:	1a000d26 	beq	r3,r8,4025744 <__eqsf2+0x70>
 4025710:	02003fc4 	movi	r8,255
 4025714:	32000826 	beq	r6,r8,4025738 <__eqsf2+0x64>
 4025718:	19800226 	beq	r3,r6,4025724 <__eqsf2+0x50>
 402571c:	00800044 	movi	r2,1
 4025720:	f800283a 	ret
 4025724:	11fffd1e 	bne	r2,r7,402571c <__flash_rwdata_start+0xfffef1c4>
 4025728:	21400826 	beq	r4,r5,402574c <__eqsf2+0x78>
 402572c:	183ffb1e 	bne	r3,zero,402571c <__flash_rwdata_start+0xfffef1c4>
 4025730:	1004c03a 	cmpne	r2,r2,zero
 4025734:	003ffa06 	br	4025720 <__flash_rwdata_start+0xfffef1c8>
 4025738:	383ff81e 	bne	r7,zero,402571c <__flash_rwdata_start+0xfffef1c4>
 402573c:	19bff71e 	bne	r3,r6,402571c <__flash_rwdata_start+0xfffef1c4>
 4025740:	003ff806 	br	4025724 <__flash_rwdata_start+0xfffef1cc>
 4025744:	103ff51e 	bne	r2,zero,402571c <__flash_rwdata_start+0xfffef1c4>
 4025748:	003ff106 	br	4025710 <__flash_rwdata_start+0xfffef1b8>
 402574c:	0005883a 	mov	r2,zero
 4025750:	003ff306 	br	4025720 <__flash_rwdata_start+0xfffef1c8>

04025754 <__gesf2>:
 4025754:	f811883a 	mov	r8,ra
 4025758:	40346e80 	call	40346e8 <_mcount>
 402575c:	403f883a 	mov	ra,r8
 4025760:	2004d5fa 	srli	r2,r4,23
 4025764:	2806d5fa 	srli	r3,r5,23
 4025768:	01802034 	movhi	r6,128
 402576c:	31bfffc4 	addi	r6,r6,-1
 4025770:	10803fcc 	andi	r2,r2,255
 4025774:	01c03fc4 	movi	r7,255
 4025778:	3110703a 	and	r8,r6,r4
 402577c:	18c03fcc 	andi	r3,r3,255
 4025780:	314c703a 	and	r6,r6,r5
 4025784:	2008d7fa 	srli	r4,r4,31
 4025788:	280ad7fa 	srli	r5,r5,31
 402578c:	11c01e26 	beq	r2,r7,4025808 <__gesf2+0xb4>
 4025790:	01c03fc4 	movi	r7,255
 4025794:	19c01126 	beq	r3,r7,40257dc <__gesf2+0x88>
 4025798:	1000081e 	bne	r2,zero,40257bc <__gesf2+0x68>
 402579c:	400f003a 	cmpeq	r7,r8,zero
 40257a0:	1800091e 	bne	r3,zero,40257c8 <__gesf2+0x74>
 40257a4:	3000081e 	bne	r6,zero,40257c8 <__gesf2+0x74>
 40257a8:	0005883a 	mov	r2,zero
 40257ac:	40000a26 	beq	r8,zero,40257d8 <__gesf2+0x84>
 40257b0:	20000826 	beq	r4,zero,40257d4 <__gesf2+0x80>
 40257b4:	00bfffc4 	movi	r2,-1
 40257b8:	00000706 	br	40257d8 <__gesf2+0x84>
 40257bc:	18000a1e 	bne	r3,zero,40257e8 <__gesf2+0x94>
 40257c0:	303ffb26 	beq	r6,zero,40257b0 <__flash_rwdata_start+0xfffef258>
 40257c4:	000f883a 	mov	r7,zero
 40257c8:	29403fcc 	andi	r5,r5,255
 40257cc:	38000726 	beq	r7,zero,40257ec <__gesf2+0x98>
 40257d0:	283ff826 	beq	r5,zero,40257b4 <__flash_rwdata_start+0xfffef25c>
 40257d4:	00800044 	movi	r2,1
 40257d8:	f800283a 	ret
 40257dc:	303fee26 	beq	r6,zero,4025798 <__flash_rwdata_start+0xfffef240>
 40257e0:	00bfff84 	movi	r2,-2
 40257e4:	003ffc06 	br	40257d8 <__flash_rwdata_start+0xfffef280>
 40257e8:	29403fcc 	andi	r5,r5,255
 40257ec:	217ff01e 	bne	r4,r5,40257b0 <__flash_rwdata_start+0xfffef258>
 40257f0:	18bfef16 	blt	r3,r2,40257b0 <__flash_rwdata_start+0xfffef258>
 40257f4:	10c00216 	blt	r2,r3,4025800 <__gesf2+0xac>
 40257f8:	323fed36 	bltu	r6,r8,40257b0 <__flash_rwdata_start+0xfffef258>
 40257fc:	4180042e 	bgeu	r8,r6,4025810 <__gesf2+0xbc>
 4025800:	203ff41e 	bne	r4,zero,40257d4 <__flash_rwdata_start+0xfffef27c>
 4025804:	003feb06 	br	40257b4 <__flash_rwdata_start+0xfffef25c>
 4025808:	403fe126 	beq	r8,zero,4025790 <__flash_rwdata_start+0xfffef238>
 402580c:	003ff406 	br	40257e0 <__flash_rwdata_start+0xfffef288>
 4025810:	0005883a 	mov	r2,zero
 4025814:	003ff006 	br	40257d8 <__flash_rwdata_start+0xfffef280>

04025818 <__mulsf3>:
 4025818:	f811883a 	mov	r8,ra
 402581c:	40346e80 	call	40346e8 <_mcount>
 4025820:	403f883a 	mov	ra,r8
 4025824:	defff504 	addi	sp,sp,-44
 4025828:	dfc00a15 	stw	ra,40(sp)
 402582c:	df000915 	stw	fp,36(sp)
 4025830:	ddc00815 	stw	r23,32(sp)
 4025834:	dd800715 	stw	r22,28(sp)
 4025838:	dd400615 	stw	r21,24(sp)
 402583c:	dd000515 	stw	r20,20(sp)
 4025840:	dcc00415 	stw	r19,16(sp)
 4025844:	dc800315 	stw	r18,12(sp)
 4025848:	dc400215 	stw	r17,8(sp)
 402584c:	dc000115 	stw	r16,4(sp)
 4025850:	2020d5fa 	srli	r16,r4,23
 4025854:	202ad7fa 	srli	r21,r4,31
 4025858:	04802034 	movhi	r18,128
 402585c:	94bfffc4 	addi	r18,r18,-1
 4025860:	84003fcc 	andi	r16,r16,255
 4025864:	9124703a 	and	r18,r18,r4
 4025868:	a829883a 	mov	r20,r21
 402586c:	af003fcc 	andi	fp,r21,255
 4025870:	80005426 	beq	r16,zero,40259c4 <__mulsf3+0x1ac>
 4025874:	00803fc4 	movi	r2,255
 4025878:	80802f26 	beq	r16,r2,4025938 <__mulsf3+0x120>
 402587c:	91002034 	orhi	r4,r18,128
 4025880:	202490fa 	slli	r18,r4,3
 4025884:	843fe044 	addi	r16,r16,-127
 4025888:	0023883a 	mov	r17,zero
 402588c:	002f883a 	mov	r23,zero
 4025890:	2804d5fa 	srli	r2,r5,23
 4025894:	282cd7fa 	srli	r22,r5,31
 4025898:	01002034 	movhi	r4,128
 402589c:	213fffc4 	addi	r4,r4,-1
 40258a0:	10803fcc 	andi	r2,r2,255
 40258a4:	2166703a 	and	r19,r4,r5
 40258a8:	b1803fcc 	andi	r6,r22,255
 40258ac:	10004c26 	beq	r2,zero,40259e0 <__mulsf3+0x1c8>
 40258b0:	00c03fc4 	movi	r3,255
 40258b4:	10c04726 	beq	r2,r3,40259d4 <__mulsf3+0x1bc>
 40258b8:	99002034 	orhi	r4,r19,128
 40258bc:	202690fa 	slli	r19,r4,3
 40258c0:	10bfe044 	addi	r2,r2,-127
 40258c4:	0007883a 	mov	r3,zero
 40258c8:	80a1883a 	add	r16,r16,r2
 40258cc:	010003c4 	movi	r4,15
 40258d0:	1c44b03a 	or	r2,r3,r17
 40258d4:	b56af03a 	xor	r21,r22,r21
 40258d8:	81c00044 	addi	r7,r16,1
 40258dc:	20806b36 	bltu	r4,r2,4025a8c <__mulsf3+0x274>
 40258e0:	100490ba 	slli	r2,r2,2
 40258e4:	010100b4 	movhi	r4,1026
 40258e8:	21163e04 	addi	r4,r4,22776
 40258ec:	1105883a 	add	r2,r2,r4
 40258f0:	10800017 	ldw	r2,0(r2)
 40258f4:	1000683a 	jmp	r2
 40258f8:	04025a8c 	andi	r16,zero,2410
 40258fc:	0402594c 	andi	r16,zero,2405
 4025900:	0402594c 	andi	r16,zero,2405
 4025904:	04025948 	cmpgei	r16,zero,2405
 4025908:	04025a70 	cmpltui	r16,zero,2409
 402590c:	04025a70 	cmpltui	r16,zero,2409
 4025910:	04025a5c 	xori	r16,zero,2409
 4025914:	04025948 	cmpgei	r16,zero,2405
 4025918:	04025a70 	cmpltui	r16,zero,2409
 402591c:	04025a5c 	xori	r16,zero,2409
 4025920:	04025a70 	cmpltui	r16,zero,2409
 4025924:	04025948 	cmpgei	r16,zero,2405
 4025928:	04025a7c 	xorhi	r16,zero,2409
 402592c:	04025a7c 	xorhi	r16,zero,2409
 4025930:	04025a7c 	xorhi	r16,zero,2409
 4025934:	04025b58 	cmpnei	r16,zero,2413
 4025938:	90003b1e 	bne	r18,zero,4025a28 <__mulsf3+0x210>
 402593c:	04400204 	movi	r17,8
 4025940:	05c00084 	movi	r23,2
 4025944:	003fd206 	br	4025890 <__flash_rwdata_start+0xfffef338>
 4025948:	302b883a 	mov	r21,r6
 402594c:	00800084 	movi	r2,2
 4025950:	18802626 	beq	r3,r2,40259ec <__mulsf3+0x1d4>
 4025954:	008000c4 	movi	r2,3
 4025958:	1880ab26 	beq	r3,r2,4025c08 <__mulsf3+0x3f0>
 402595c:	00800044 	movi	r2,1
 4025960:	1880a21e 	bne	r3,r2,4025bec <__mulsf3+0x3d4>
 4025964:	a829883a 	mov	r20,r21
 4025968:	0007883a 	mov	r3,zero
 402596c:	0009883a 	mov	r4,zero
 4025970:	18803fcc 	andi	r2,r3,255
 4025974:	100695fa 	slli	r3,r2,23
 4025978:	a0803fcc 	andi	r2,r20,255
 402597c:	100a97fa 	slli	r5,r2,31
 4025980:	00802034 	movhi	r2,128
 4025984:	10bfffc4 	addi	r2,r2,-1
 4025988:	2084703a 	and	r2,r4,r2
 402598c:	10c4b03a 	or	r2,r2,r3
 4025990:	1144b03a 	or	r2,r2,r5
 4025994:	dfc00a17 	ldw	ra,40(sp)
 4025998:	df000917 	ldw	fp,36(sp)
 402599c:	ddc00817 	ldw	r23,32(sp)
 40259a0:	dd800717 	ldw	r22,28(sp)
 40259a4:	dd400617 	ldw	r21,24(sp)
 40259a8:	dd000517 	ldw	r20,20(sp)
 40259ac:	dcc00417 	ldw	r19,16(sp)
 40259b0:	dc800317 	ldw	r18,12(sp)
 40259b4:	dc400217 	ldw	r17,8(sp)
 40259b8:	dc000117 	ldw	r16,4(sp)
 40259bc:	dec00b04 	addi	sp,sp,44
 40259c0:	f800283a 	ret
 40259c4:	90000d1e 	bne	r18,zero,40259fc <__mulsf3+0x1e4>
 40259c8:	04400104 	movi	r17,4
 40259cc:	05c00044 	movi	r23,1
 40259d0:	003faf06 	br	4025890 <__flash_rwdata_start+0xfffef338>
 40259d4:	9806c03a 	cmpne	r3,r19,zero
 40259d8:	18c00084 	addi	r3,r3,2
 40259dc:	003fba06 	br	40258c8 <__flash_rwdata_start+0xfffef370>
 40259e0:	9800141e 	bne	r19,zero,4025a34 <__mulsf3+0x21c>
 40259e4:	00c00044 	movi	r3,1
 40259e8:	003fb706 	br	40258c8 <__flash_rwdata_start+0xfffef370>
 40259ec:	a829883a 	mov	r20,r21
 40259f0:	00ffffc4 	movi	r3,-1
 40259f4:	0009883a 	mov	r4,zero
 40259f8:	003fdd06 	br	4025970 <__flash_rwdata_start+0xfffef418>
 40259fc:	9009883a 	mov	r4,r18
 4025a00:	d9400015 	stw	r5,0(sp)
 4025a04:	402768c0 	call	402768c <__clzsi2>
 4025a08:	10fffec4 	addi	r3,r2,-5
 4025a0c:	10801d84 	addi	r2,r2,118
 4025a10:	90e4983a 	sll	r18,r18,r3
 4025a14:	00a1c83a 	sub	r16,zero,r2
 4025a18:	0023883a 	mov	r17,zero
 4025a1c:	002f883a 	mov	r23,zero
 4025a20:	d9400017 	ldw	r5,0(sp)
 4025a24:	003f9a06 	br	4025890 <__flash_rwdata_start+0xfffef338>
 4025a28:	04400304 	movi	r17,12
 4025a2c:	05c000c4 	movi	r23,3
 4025a30:	003f9706 	br	4025890 <__flash_rwdata_start+0xfffef338>
 4025a34:	9809883a 	mov	r4,r19
 4025a38:	d9800015 	stw	r6,0(sp)
 4025a3c:	402768c0 	call	402768c <__clzsi2>
 4025a40:	10fffec4 	addi	r3,r2,-5
 4025a44:	10801d84 	addi	r2,r2,118
 4025a48:	98e6983a 	sll	r19,r19,r3
 4025a4c:	0085c83a 	sub	r2,zero,r2
 4025a50:	0007883a 	mov	r3,zero
 4025a54:	d9800017 	ldw	r6,0(sp)
 4025a58:	003f9b06 	br	40258c8 <__flash_rwdata_start+0xfffef370>
 4025a5c:	01002034 	movhi	r4,128
 4025a60:	0029883a 	mov	r20,zero
 4025a64:	213fffc4 	addi	r4,r4,-1
 4025a68:	00ffffc4 	movi	r3,-1
 4025a6c:	003fc006 	br	4025970 <__flash_rwdata_start+0xfffef418>
 4025a70:	9027883a 	mov	r19,r18
 4025a74:	b807883a 	mov	r3,r23
 4025a78:	003fb406 	br	402594c <__flash_rwdata_start+0xfffef3f4>
 4025a7c:	9027883a 	mov	r19,r18
 4025a80:	e02b883a 	mov	r21,fp
 4025a84:	b807883a 	mov	r3,r23
 4025a88:	003fb006 	br	402594c <__flash_rwdata_start+0xfffef3f4>
 4025a8c:	9004d43a 	srli	r2,r18,16
 4025a90:	9810d43a 	srli	r8,r19,16
 4025a94:	94bfffcc 	andi	r18,r18,65535
 4025a98:	993fffcc 	andi	r4,r19,65535
 4025a9c:	910d383a 	mul	r6,r18,r4
 4025aa0:	20a7383a 	mul	r19,r4,r2
 4025aa4:	9225383a 	mul	r18,r18,r8
 4025aa8:	3006d43a 	srli	r3,r6,16
 4025aac:	1211383a 	mul	r8,r2,r8
 4025ab0:	94e5883a 	add	r18,r18,r19
 4025ab4:	1c87883a 	add	r3,r3,r18
 4025ab8:	1cc0022e 	bgeu	r3,r19,4025ac4 <__mulsf3+0x2ac>
 4025abc:	00800074 	movhi	r2,1
 4025ac0:	4091883a 	add	r8,r8,r2
 4025ac4:	1804943a 	slli	r2,r3,16
 4025ac8:	31bfffcc 	andi	r6,r6,65535
 4025acc:	1806d43a 	srli	r3,r3,16
 4025ad0:	1185883a 	add	r2,r2,r6
 4025ad4:	102691ba 	slli	r19,r2,6
 4025ad8:	1a07883a 	add	r3,r3,r8
 4025adc:	1004d6ba 	srli	r2,r2,26
 4025ae0:	180891ba 	slli	r4,r3,6
 4025ae4:	9826c03a 	cmpne	r19,r19,zero
 4025ae8:	9884b03a 	or	r2,r19,r2
 4025aec:	1126b03a 	or	r19,r2,r4
 4025af0:	9882002c 	andhi	r2,r19,2048
 4025af4:	10000426 	beq	r2,zero,4025b08 <__mulsf3+0x2f0>
 4025af8:	9804d07a 	srli	r2,r19,1
 4025afc:	9900004c 	andi	r4,r19,1
 4025b00:	3821883a 	mov	r16,r7
 4025b04:	1126b03a 	or	r19,r2,r4
 4025b08:	80c01fc4 	addi	r3,r16,127
 4025b0c:	00c0210e 	bge	zero,r3,4025b94 <__mulsf3+0x37c>
 4025b10:	988001cc 	andi	r2,r19,7
 4025b14:	10000426 	beq	r2,zero,4025b28 <__mulsf3+0x310>
 4025b18:	988003cc 	andi	r2,r19,15
 4025b1c:	01000104 	movi	r4,4
 4025b20:	11000126 	beq	r2,r4,4025b28 <__mulsf3+0x310>
 4025b24:	9927883a 	add	r19,r19,r4
 4025b28:	9882002c 	andhi	r2,r19,2048
 4025b2c:	10000426 	beq	r2,zero,4025b40 <__mulsf3+0x328>
 4025b30:	00be0034 	movhi	r2,63488
 4025b34:	10bfffc4 	addi	r2,r2,-1
 4025b38:	80c02004 	addi	r3,r16,128
 4025b3c:	98a6703a 	and	r19,r19,r2
 4025b40:	00803f84 	movi	r2,254
 4025b44:	10ffa916 	blt	r2,r3,40259ec <__flash_rwdata_start+0xfffef494>
 4025b48:	980891ba 	slli	r4,r19,6
 4025b4c:	a829883a 	mov	r20,r21
 4025b50:	2008d27a 	srli	r4,r4,9
 4025b54:	003f8606 	br	4025970 <__flash_rwdata_start+0xfffef418>
 4025b58:	9080102c 	andhi	r2,r18,64
 4025b5c:	10000826 	beq	r2,zero,4025b80 <__mulsf3+0x368>
 4025b60:	9880102c 	andhi	r2,r19,64
 4025b64:	1000061e 	bne	r2,zero,4025b80 <__mulsf3+0x368>
 4025b68:	00802034 	movhi	r2,128
 4025b6c:	99001034 	orhi	r4,r19,64
 4025b70:	10bfffc4 	addi	r2,r2,-1
 4025b74:	b029883a 	mov	r20,r22
 4025b78:	2088703a 	and	r4,r4,r2
 4025b7c:	003fba06 	br	4025a68 <__flash_rwdata_start+0xfffef510>
 4025b80:	00802034 	movhi	r2,128
 4025b84:	91001034 	orhi	r4,r18,64
 4025b88:	10bfffc4 	addi	r2,r2,-1
 4025b8c:	2088703a 	and	r4,r4,r2
 4025b90:	003fb506 	br	4025a68 <__flash_rwdata_start+0xfffef510>
 4025b94:	00800044 	movi	r2,1
 4025b98:	10c7c83a 	sub	r3,r2,r3
 4025b9c:	008006c4 	movi	r2,27
 4025ba0:	10ff7016 	blt	r2,r3,4025964 <__flash_rwdata_start+0xfffef40c>
 4025ba4:	00800804 	movi	r2,32
 4025ba8:	10c5c83a 	sub	r2,r2,r3
 4025bac:	9884983a 	sll	r2,r19,r2
 4025bb0:	98c6d83a 	srl	r3,r19,r3
 4025bb4:	1004c03a 	cmpne	r2,r2,zero
 4025bb8:	1884b03a 	or	r2,r3,r2
 4025bbc:	10c001cc 	andi	r3,r2,7
 4025bc0:	18000426 	beq	r3,zero,4025bd4 <__mulsf3+0x3bc>
 4025bc4:	10c003cc 	andi	r3,r2,15
 4025bc8:	01000104 	movi	r4,4
 4025bcc:	19000126 	beq	r3,r4,4025bd4 <__mulsf3+0x3bc>
 4025bd0:	1105883a 	add	r2,r2,r4
 4025bd4:	10c1002c 	andhi	r3,r2,1024
 4025bd8:	18000626 	beq	r3,zero,4025bf4 <__mulsf3+0x3dc>
 4025bdc:	a829883a 	mov	r20,r21
 4025be0:	00c00044 	movi	r3,1
 4025be4:	0009883a 	mov	r4,zero
 4025be8:	003f6106 	br	4025970 <__flash_rwdata_start+0xfffef418>
 4025bec:	3821883a 	mov	r16,r7
 4025bf0:	003fc506 	br	4025b08 <__flash_rwdata_start+0xfffef5b0>
 4025bf4:	100491ba 	slli	r2,r2,6
 4025bf8:	a829883a 	mov	r20,r21
 4025bfc:	0007883a 	mov	r3,zero
 4025c00:	1008d27a 	srli	r4,r2,9
 4025c04:	003f5a06 	br	4025970 <__flash_rwdata_start+0xfffef418>
 4025c08:	00802034 	movhi	r2,128
 4025c0c:	99001034 	orhi	r4,r19,64
 4025c10:	10bfffc4 	addi	r2,r2,-1
 4025c14:	a829883a 	mov	r20,r21
 4025c18:	2088703a 	and	r4,r4,r2
 4025c1c:	003f9206 	br	4025a68 <__flash_rwdata_start+0xfffef510>

04025c20 <__subsf3>:
 4025c20:	f811883a 	mov	r8,ra
 4025c24:	40346e80 	call	40346e8 <_mcount>
 4025c28:	403f883a 	mov	ra,r8
 4025c2c:	defffc04 	addi	sp,sp,-16
 4025c30:	dfc00315 	stw	ra,12(sp)
 4025c34:	dc800215 	stw	r18,8(sp)
 4025c38:	dc400115 	stw	r17,4(sp)
 4025c3c:	dc000015 	stw	r16,0(sp)
 4025c40:	280cd5fa 	srli	r6,r5,23
 4025c44:	2020d5fa 	srli	r16,r4,23
 4025c48:	01c02034 	movhi	r7,128
 4025c4c:	39ffffc4 	addi	r7,r7,-1
 4025c50:	3906703a 	and	r3,r7,r4
 4025c54:	2022d7fa 	srli	r17,r4,31
 4025c58:	394e703a 	and	r7,r7,r5
 4025c5c:	31803fcc 	andi	r6,r6,255
 4025c60:	01003fc4 	movi	r4,255
 4025c64:	84003fcc 	andi	r16,r16,255
 4025c68:	180690fa 	slli	r3,r3,3
 4025c6c:	2804d7fa 	srli	r2,r5,31
 4025c70:	380e90fa 	slli	r7,r7,3
 4025c74:	31006d26 	beq	r6,r4,4025e2c <__subsf3+0x20c>
 4025c78:	1080005c 	xori	r2,r2,1
 4025c7c:	8189c83a 	sub	r4,r16,r6
 4025c80:	14404f26 	beq	r2,r17,4025dc0 <__subsf3+0x1a0>
 4025c84:	0100770e 	bge	zero,r4,4025e64 <__subsf3+0x244>
 4025c88:	30001e1e 	bne	r6,zero,4025d04 <__subsf3+0xe4>
 4025c8c:	38006a1e 	bne	r7,zero,4025e38 <__subsf3+0x218>
 4025c90:	188001cc 	andi	r2,r3,7
 4025c94:	10000426 	beq	r2,zero,4025ca8 <__subsf3+0x88>
 4025c98:	188003cc 	andi	r2,r3,15
 4025c9c:	01000104 	movi	r4,4
 4025ca0:	11000126 	beq	r2,r4,4025ca8 <__subsf3+0x88>
 4025ca4:	1907883a 	add	r3,r3,r4
 4025ca8:	1881002c 	andhi	r2,r3,1024
 4025cac:	10003926 	beq	r2,zero,4025d94 <__subsf3+0x174>
 4025cb0:	84000044 	addi	r16,r16,1
 4025cb4:	00803fc4 	movi	r2,255
 4025cb8:	80807526 	beq	r16,r2,4025e90 <__subsf3+0x270>
 4025cbc:	180691ba 	slli	r3,r3,6
 4025cc0:	8880004c 	andi	r2,r17,1
 4025cc4:	180ad27a 	srli	r5,r3,9
 4025cc8:	84003fcc 	andi	r16,r16,255
 4025ccc:	800695fa 	slli	r3,r16,23
 4025cd0:	10803fcc 	andi	r2,r2,255
 4025cd4:	01002034 	movhi	r4,128
 4025cd8:	213fffc4 	addi	r4,r4,-1
 4025cdc:	100497fa 	slli	r2,r2,31
 4025ce0:	2920703a 	and	r16,r5,r4
 4025ce4:	80e0b03a 	or	r16,r16,r3
 4025ce8:	8084b03a 	or	r2,r16,r2
 4025cec:	dfc00317 	ldw	ra,12(sp)
 4025cf0:	dc800217 	ldw	r18,8(sp)
 4025cf4:	dc400117 	ldw	r17,4(sp)
 4025cf8:	dc000017 	ldw	r16,0(sp)
 4025cfc:	dec00404 	addi	sp,sp,16
 4025d00:	f800283a 	ret
 4025d04:	00803fc4 	movi	r2,255
 4025d08:	80bfe126 	beq	r16,r2,4025c90 <__flash_rwdata_start+0xfffef738>
 4025d0c:	39c10034 	orhi	r7,r7,1024
 4025d10:	008006c4 	movi	r2,27
 4025d14:	11007416 	blt	r2,r4,4025ee8 <__subsf3+0x2c8>
 4025d18:	00800804 	movi	r2,32
 4025d1c:	1105c83a 	sub	r2,r2,r4
 4025d20:	3884983a 	sll	r2,r7,r2
 4025d24:	390ed83a 	srl	r7,r7,r4
 4025d28:	1008c03a 	cmpne	r4,r2,zero
 4025d2c:	390eb03a 	or	r7,r7,r4
 4025d30:	19c7c83a 	sub	r3,r3,r7
 4025d34:	1881002c 	andhi	r2,r3,1024
 4025d38:	10001426 	beq	r2,zero,4025d8c <__subsf3+0x16c>
 4025d3c:	04810034 	movhi	r18,1024
 4025d40:	94bfffc4 	addi	r18,r18,-1
 4025d44:	1ca4703a 	and	r18,r3,r18
 4025d48:	9009883a 	mov	r4,r18
 4025d4c:	402768c0 	call	402768c <__clzsi2>
 4025d50:	10bffec4 	addi	r2,r2,-5
 4025d54:	90a4983a 	sll	r18,r18,r2
 4025d58:	14005116 	blt	r2,r16,4025ea0 <__subsf3+0x280>
 4025d5c:	1405c83a 	sub	r2,r2,r16
 4025d60:	10c00044 	addi	r3,r2,1
 4025d64:	00800804 	movi	r2,32
 4025d68:	10c5c83a 	sub	r2,r2,r3
 4025d6c:	9084983a 	sll	r2,r18,r2
 4025d70:	90e4d83a 	srl	r18,r18,r3
 4025d74:	0021883a 	mov	r16,zero
 4025d78:	1006c03a 	cmpne	r3,r2,zero
 4025d7c:	90c6b03a 	or	r3,r18,r3
 4025d80:	003fc306 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025d84:	2000e026 	beq	r4,zero,4026108 <__subsf3+0x4e8>
 4025d88:	2007883a 	mov	r3,r4
 4025d8c:	188001cc 	andi	r2,r3,7
 4025d90:	103fc11e 	bne	r2,zero,4025c98 <__flash_rwdata_start+0xfffef740>
 4025d94:	180ad0fa 	srli	r5,r3,3
 4025d98:	00c03fc4 	movi	r3,255
 4025d9c:	8880004c 	andi	r2,r17,1
 4025da0:	80c0031e 	bne	r16,r3,4025db0 <__subsf3+0x190>
 4025da4:	28006d26 	beq	r5,zero,4025f5c <__subsf3+0x33c>
 4025da8:	29401034 	orhi	r5,r5,64
 4025dac:	043fffc4 	movi	r16,-1
 4025db0:	00c02034 	movhi	r3,128
 4025db4:	18ffffc4 	addi	r3,r3,-1
 4025db8:	28ca703a 	and	r5,r5,r3
 4025dbc:	003fc206 	br	4025cc8 <__flash_rwdata_start+0xfffef770>
 4025dc0:	01003c0e 	bge	zero,r4,4025eb4 <__subsf3+0x294>
 4025dc4:	30002126 	beq	r6,zero,4025e4c <__subsf3+0x22c>
 4025dc8:	01403fc4 	movi	r5,255
 4025dcc:	817fb026 	beq	r16,r5,4025c90 <__flash_rwdata_start+0xfffef738>
 4025dd0:	39c10034 	orhi	r7,r7,1024
 4025dd4:	014006c4 	movi	r5,27
 4025dd8:	29007416 	blt	r5,r4,4025fac <__subsf3+0x38c>
 4025ddc:	01400804 	movi	r5,32
 4025de0:	290bc83a 	sub	r5,r5,r4
 4025de4:	394a983a 	sll	r5,r7,r5
 4025de8:	390ed83a 	srl	r7,r7,r4
 4025dec:	2808c03a 	cmpne	r4,r5,zero
 4025df0:	390eb03a 	or	r7,r7,r4
 4025df4:	19c7883a 	add	r3,r3,r7
 4025df8:	1901002c 	andhi	r4,r3,1024
 4025dfc:	20003826 	beq	r4,zero,4025ee0 <__subsf3+0x2c0>
 4025e00:	84000044 	addi	r16,r16,1
 4025e04:	01003fc4 	movi	r4,255
 4025e08:	81005426 	beq	r16,r4,4025f5c <__subsf3+0x33c>
 4025e0c:	1023883a 	mov	r17,r2
 4025e10:	00bf0034 	movhi	r2,64512
 4025e14:	10bfffc4 	addi	r2,r2,-1
 4025e18:	1900004c 	andi	r4,r3,1
 4025e1c:	1886703a 	and	r3,r3,r2
 4025e20:	1806d07a 	srli	r3,r3,1
 4025e24:	1906b03a 	or	r3,r3,r4
 4025e28:	003f9906 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025e2c:	383f9226 	beq	r7,zero,4025c78 <__flash_rwdata_start+0xfffef720>
 4025e30:	10803fcc 	andi	r2,r2,255
 4025e34:	003f9106 	br	4025c7c <__flash_rwdata_start+0xfffef724>
 4025e38:	213fffc4 	addi	r4,r4,-1
 4025e3c:	203fbc26 	beq	r4,zero,4025d30 <__flash_rwdata_start+0xfffef7d8>
 4025e40:	00803fc4 	movi	r2,255
 4025e44:	80bfb21e 	bne	r16,r2,4025d10 <__flash_rwdata_start+0xfffef7b8>
 4025e48:	003f9106 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025e4c:	383f9026 	beq	r7,zero,4025c90 <__flash_rwdata_start+0xfffef738>
 4025e50:	213fffc4 	addi	r4,r4,-1
 4025e54:	203fe726 	beq	r4,zero,4025df4 <__flash_rwdata_start+0xfffef89c>
 4025e58:	01403fc4 	movi	r5,255
 4025e5c:	817fdd1e 	bne	r16,r5,4025dd4 <__flash_rwdata_start+0xfffef87c>
 4025e60:	003f8b06 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025e64:	2000221e 	bne	r4,zero,4025ef0 <__subsf3+0x2d0>
 4025e68:	81000044 	addi	r4,r16,1
 4025e6c:	21003fcc 	andi	r4,r4,255
 4025e70:	01400044 	movi	r5,1
 4025e74:	2900470e 	bge	r5,r4,4025f94 <__subsf3+0x374>
 4025e78:	19e5c83a 	sub	r18,r3,r7
 4025e7c:	9141002c 	andhi	r5,r18,1024
 4025e80:	28002d26 	beq	r5,zero,4025f38 <__subsf3+0x318>
 4025e84:	38e5c83a 	sub	r18,r7,r3
 4025e88:	1023883a 	mov	r17,r2
 4025e8c:	003fae06 	br	4025d48 <__flash_rwdata_start+0xfffef7f0>
 4025e90:	8880004c 	andi	r2,r17,1
 4025e94:	043fffc4 	movi	r16,-1
 4025e98:	000b883a 	mov	r5,zero
 4025e9c:	003f8a06 	br	4025cc8 <__flash_rwdata_start+0xfffef770>
 4025ea0:	00ff0034 	movhi	r3,64512
 4025ea4:	18ffffc4 	addi	r3,r3,-1
 4025ea8:	80a1c83a 	sub	r16,r16,r2
 4025eac:	90c6703a 	and	r3,r18,r3
 4025eb0:	003f7706 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025eb4:	2000431e 	bne	r4,zero,4025fc4 <__subsf3+0x3a4>
 4025eb8:	81000044 	addi	r4,r16,1
 4025ebc:	21803fcc 	andi	r6,r4,255
 4025ec0:	01400044 	movi	r5,1
 4025ec4:	2980280e 	bge	r5,r6,4025f68 <__subsf3+0x348>
 4025ec8:	01403fc4 	movi	r5,255
 4025ecc:	21402326 	beq	r4,r5,4025f5c <__subsf3+0x33c>
 4025ed0:	19c7883a 	add	r3,r3,r7
 4025ed4:	1806d07a 	srli	r3,r3,1
 4025ed8:	2021883a 	mov	r16,r4
 4025edc:	003f6c06 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025ee0:	1023883a 	mov	r17,r2
 4025ee4:	003fa906 	br	4025d8c <__flash_rwdata_start+0xfffef834>
 4025ee8:	01c00044 	movi	r7,1
 4025eec:	003f9006 	br	4025d30 <__flash_rwdata_start+0xfffef7d8>
 4025ef0:	8000151e 	bne	r16,zero,4025f48 <__subsf3+0x328>
 4025ef4:	18002f26 	beq	r3,zero,4025fb4 <__subsf3+0x394>
 4025ef8:	0108303a 	nor	r4,zero,r4
 4025efc:	20000a26 	beq	r4,zero,4025f28 <__subsf3+0x308>
 4025f00:	01403fc4 	movi	r5,255
 4025f04:	31402b26 	beq	r6,r5,4025fb4 <__subsf3+0x394>
 4025f08:	014006c4 	movi	r5,27
 4025f0c:	29006e16 	blt	r5,r4,40260c8 <__subsf3+0x4a8>
 4025f10:	01400804 	movi	r5,32
 4025f14:	290bc83a 	sub	r5,r5,r4
 4025f18:	194a983a 	sll	r5,r3,r5
 4025f1c:	1908d83a 	srl	r4,r3,r4
 4025f20:	2806c03a 	cmpne	r3,r5,zero
 4025f24:	20c6b03a 	or	r3,r4,r3
 4025f28:	38c7c83a 	sub	r3,r7,r3
 4025f2c:	3021883a 	mov	r16,r6
 4025f30:	1023883a 	mov	r17,r2
 4025f34:	003f7f06 	br	4025d34 <__flash_rwdata_start+0xfffef7dc>
 4025f38:	903f831e 	bne	r18,zero,4025d48 <__flash_rwdata_start+0xfffef7f0>
 4025f3c:	0005883a 	mov	r2,zero
 4025f40:	0021883a 	mov	r16,zero
 4025f44:	003f9a06 	br	4025db0 <__flash_rwdata_start+0xfffef858>
 4025f48:	01403fc4 	movi	r5,255
 4025f4c:	31401926 	beq	r6,r5,4025fb4 <__subsf3+0x394>
 4025f50:	0109c83a 	sub	r4,zero,r4
 4025f54:	18c10034 	orhi	r3,r3,1024
 4025f58:	003feb06 	br	4025f08 <__flash_rwdata_start+0xfffef9b0>
 4025f5c:	043fffc4 	movi	r16,-1
 4025f60:	000b883a 	mov	r5,zero
 4025f64:	003f5806 	br	4025cc8 <__flash_rwdata_start+0xfffef770>
 4025f68:	8000481e 	bne	r16,zero,402608c <__subsf3+0x46c>
 4025f6c:	18006226 	beq	r3,zero,40260f8 <__subsf3+0x4d8>
 4025f70:	383f4726 	beq	r7,zero,4025c90 <__flash_rwdata_start+0xfffef738>
 4025f74:	19c7883a 	add	r3,r3,r7
 4025f78:	1881002c 	andhi	r2,r3,1024
 4025f7c:	103f8326 	beq	r2,zero,4025d8c <__flash_rwdata_start+0xfffef834>
 4025f80:	00bf0034 	movhi	r2,64512
 4025f84:	10bfffc4 	addi	r2,r2,-1
 4025f88:	2821883a 	mov	r16,r5
 4025f8c:	1886703a 	and	r3,r3,r2
 4025f90:	003f3f06 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025f94:	80001c1e 	bne	r16,zero,4026008 <__subsf3+0x3e8>
 4025f98:	1800261e 	bne	r3,zero,4026034 <__subsf3+0x414>
 4025f9c:	38004c26 	beq	r7,zero,40260d0 <__subsf3+0x4b0>
 4025fa0:	3807883a 	mov	r3,r7
 4025fa4:	1023883a 	mov	r17,r2
 4025fa8:	003f3906 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025fac:	01c00044 	movi	r7,1
 4025fb0:	003f9006 	br	4025df4 <__flash_rwdata_start+0xfffef89c>
 4025fb4:	3807883a 	mov	r3,r7
 4025fb8:	3021883a 	mov	r16,r6
 4025fbc:	1023883a 	mov	r17,r2
 4025fc0:	003f3306 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4025fc4:	8000161e 	bne	r16,zero,4026020 <__subsf3+0x400>
 4025fc8:	18002d26 	beq	r3,zero,4026080 <__subsf3+0x460>
 4025fcc:	0108303a 	nor	r4,zero,r4
 4025fd0:	20000a26 	beq	r4,zero,4025ffc <__subsf3+0x3dc>
 4025fd4:	01403fc4 	movi	r5,255
 4025fd8:	31402926 	beq	r6,r5,4026080 <__subsf3+0x460>
 4025fdc:	014006c4 	movi	r5,27
 4025fe0:	29004716 	blt	r5,r4,4026100 <__subsf3+0x4e0>
 4025fe4:	01400804 	movi	r5,32
 4025fe8:	290bc83a 	sub	r5,r5,r4
 4025fec:	194a983a 	sll	r5,r3,r5
 4025ff0:	1908d83a 	srl	r4,r3,r4
 4025ff4:	2806c03a 	cmpne	r3,r5,zero
 4025ff8:	20c6b03a 	or	r3,r4,r3
 4025ffc:	19c7883a 	add	r3,r3,r7
 4026000:	3021883a 	mov	r16,r6
 4026004:	003f7c06 	br	4025df8 <__flash_rwdata_start+0xfffef8a0>
 4026008:	1800111e 	bne	r3,zero,4026050 <__subsf3+0x430>
 402600c:	38003326 	beq	r7,zero,40260dc <__subsf3+0x4bc>
 4026010:	3807883a 	mov	r3,r7
 4026014:	1023883a 	mov	r17,r2
 4026018:	04003fc4 	movi	r16,255
 402601c:	003f1c06 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4026020:	01403fc4 	movi	r5,255
 4026024:	31401626 	beq	r6,r5,4026080 <__subsf3+0x460>
 4026028:	0109c83a 	sub	r4,zero,r4
 402602c:	18c10034 	orhi	r3,r3,1024
 4026030:	003fea06 	br	4025fdc <__flash_rwdata_start+0xfffefa84>
 4026034:	383f1626 	beq	r7,zero,4025c90 <__flash_rwdata_start+0xfffef738>
 4026038:	19c9c83a 	sub	r4,r3,r7
 402603c:	2141002c 	andhi	r5,r4,1024
 4026040:	283f5026 	beq	r5,zero,4025d84 <__flash_rwdata_start+0xfffef82c>
 4026044:	38c7c83a 	sub	r3,r7,r3
 4026048:	1023883a 	mov	r17,r2
 402604c:	003f1006 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4026050:	38001b26 	beq	r7,zero,40260c0 <__subsf3+0x4a0>
 4026054:	1806d0fa 	srli	r3,r3,3
 4026058:	1900102c 	andhi	r4,r3,64
 402605c:	20000526 	beq	r4,zero,4026074 <__subsf3+0x454>
 4026060:	380ed0fa 	srli	r7,r7,3
 4026064:	3900102c 	andhi	r4,r7,64
 4026068:	2000021e 	bne	r4,zero,4026074 <__subsf3+0x454>
 402606c:	3807883a 	mov	r3,r7
 4026070:	1023883a 	mov	r17,r2
 4026074:	180690fa 	slli	r3,r3,3
 4026078:	04003fc4 	movi	r16,255
 402607c:	003f0406 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4026080:	3807883a 	mov	r3,r7
 4026084:	3021883a 	mov	r16,r6
 4026088:	003f0106 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 402608c:	18001726 	beq	r3,zero,40260ec <__subsf3+0x4cc>
 4026090:	38000b26 	beq	r7,zero,40260c0 <__subsf3+0x4a0>
 4026094:	1806d0fa 	srli	r3,r3,3
 4026098:	1900102c 	andhi	r4,r3,64
 402609c:	20000426 	beq	r4,zero,40260b0 <__subsf3+0x490>
 40260a0:	380ed0fa 	srli	r7,r7,3
 40260a4:	3900102c 	andhi	r4,r7,64
 40260a8:	2000011e 	bne	r4,zero,40260b0 <__subsf3+0x490>
 40260ac:	3807883a 	mov	r3,r7
 40260b0:	180690fa 	slli	r3,r3,3
 40260b4:	1023883a 	mov	r17,r2
 40260b8:	04003fc4 	movi	r16,255
 40260bc:	003ef406 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 40260c0:	04003fc4 	movi	r16,255
 40260c4:	003ef206 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 40260c8:	00c00044 	movi	r3,1
 40260cc:	003f9606 	br	4025f28 <__flash_rwdata_start+0xfffef9d0>
 40260d0:	000b883a 	mov	r5,zero
 40260d4:	0005883a 	mov	r2,zero
 40260d8:	003f3506 	br	4025db0 <__flash_rwdata_start+0xfffef858>
 40260dc:	01402034 	movhi	r5,128
 40260e0:	297fffc4 	addi	r5,r5,-1
 40260e4:	0005883a 	mov	r2,zero
 40260e8:	003f2f06 	br	4025da8 <__flash_rwdata_start+0xfffef850>
 40260ec:	3807883a 	mov	r3,r7
 40260f0:	04003fc4 	movi	r16,255
 40260f4:	003ee606 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 40260f8:	3807883a 	mov	r3,r7
 40260fc:	003ee406 	br	4025c90 <__flash_rwdata_start+0xfffef738>
 4026100:	00c00044 	movi	r3,1
 4026104:	003fbd06 	br	4025ffc <__flash_rwdata_start+0xfffefaa4>
 4026108:	0005883a 	mov	r2,zero
 402610c:	003f2806 	br	4025db0 <__flash_rwdata_start+0xfffef858>

04026110 <__fixsfsi>:
 4026110:	f811883a 	mov	r8,ra
 4026114:	40346e80 	call	40346e8 <_mcount>
 4026118:	403f883a 	mov	ra,r8
 402611c:	200ad5fa 	srli	r5,r4,23
 4026120:	00c02034 	movhi	r3,128
 4026124:	18ffffc4 	addi	r3,r3,-1
 4026128:	29403fcc 	andi	r5,r5,255
 402612c:	00801f84 	movi	r2,126
 4026130:	1906703a 	and	r3,r3,r4
 4026134:	11400f0e 	bge	r2,r5,4026174 <__fixsfsi+0x64>
 4026138:	00802744 	movi	r2,157
 402613c:	2008d7fa 	srli	r4,r4,31
 4026140:	11400816 	blt	r2,r5,4026164 <__fixsfsi+0x54>
 4026144:	00802544 	movi	r2,149
 4026148:	18c02034 	orhi	r3,r3,128
 402614c:	11400b0e 	bge	r2,r5,402617c <__fixsfsi+0x6c>
 4026150:	28bfda84 	addi	r2,r5,-150
 4026154:	1884983a 	sll	r2,r3,r2
 4026158:	20000526 	beq	r4,zero,4026170 <__fixsfsi+0x60>
 402615c:	0085c83a 	sub	r2,zero,r2
 4026160:	f800283a 	ret
 4026164:	00a00034 	movhi	r2,32768
 4026168:	10bfffc4 	addi	r2,r2,-1
 402616c:	2085883a 	add	r2,r4,r2
 4026170:	f800283a 	ret
 4026174:	0005883a 	mov	r2,zero
 4026178:	f800283a 	ret
 402617c:	00802584 	movi	r2,150
 4026180:	1145c83a 	sub	r2,r2,r5
 4026184:	1884d83a 	srl	r2,r3,r2
 4026188:	003ff306 	br	4026158 <__flash_rwdata_start+0xfffefc00>

0402618c <__floatsisf>:
 402618c:	f811883a 	mov	r8,ra
 4026190:	40346e80 	call	40346e8 <_mcount>
 4026194:	403f883a 	mov	ra,r8
 4026198:	defffd04 	addi	sp,sp,-12
 402619c:	dfc00215 	stw	ra,8(sp)
 40261a0:	dc400115 	stw	r17,4(sp)
 40261a4:	dc000015 	stw	r16,0(sp)
 40261a8:	20003526 	beq	r4,zero,4026280 <__floatsisf+0xf4>
 40261ac:	2021883a 	mov	r16,r4
 40261b0:	2022d7fa 	srli	r17,r4,31
 40261b4:	20003616 	blt	r4,zero,4026290 <__floatsisf+0x104>
 40261b8:	8009883a 	mov	r4,r16
 40261bc:	402768c0 	call	402768c <__clzsi2>
 40261c0:	00c02784 	movi	r3,158
 40261c4:	1887c83a 	sub	r3,r3,r2
 40261c8:	01002584 	movi	r4,150
 40261cc:	20c01416 	blt	r4,r3,4026220 <__floatsisf+0x94>
 40261d0:	20c9c83a 	sub	r4,r4,r3
 40261d4:	8120983a 	sll	r16,r16,r4
 40261d8:	00802034 	movhi	r2,128
 40261dc:	10bfffc4 	addi	r2,r2,-1
 40261e0:	8809883a 	mov	r4,r17
 40261e4:	80a0703a 	and	r16,r16,r2
 40261e8:	18803fcc 	andi	r2,r3,255
 40261ec:	100695fa 	slli	r3,r2,23
 40261f0:	20803fcc 	andi	r2,r4,255
 40261f4:	100897fa 	slli	r4,r2,31
 40261f8:	00802034 	movhi	r2,128
 40261fc:	10bfffc4 	addi	r2,r2,-1
 4026200:	8084703a 	and	r2,r16,r2
 4026204:	10c4b03a 	or	r2,r2,r3
 4026208:	1104b03a 	or	r2,r2,r4
 402620c:	dfc00217 	ldw	ra,8(sp)
 4026210:	dc400117 	ldw	r17,4(sp)
 4026214:	dc000017 	ldw	r16,0(sp)
 4026218:	dec00304 	addi	sp,sp,12
 402621c:	f800283a 	ret
 4026220:	01002644 	movi	r4,153
 4026224:	20c01c16 	blt	r4,r3,4026298 <__floatsisf+0x10c>
 4026228:	20c9c83a 	sub	r4,r4,r3
 402622c:	8120983a 	sll	r16,r16,r4
 4026230:	013f0034 	movhi	r4,64512
 4026234:	213fffc4 	addi	r4,r4,-1
 4026238:	814001cc 	andi	r5,r16,7
 402623c:	8108703a 	and	r4,r16,r4
 4026240:	28000426 	beq	r5,zero,4026254 <__floatsisf+0xc8>
 4026244:	840003cc 	andi	r16,r16,15
 4026248:	01400104 	movi	r5,4
 402624c:	81400126 	beq	r16,r5,4026254 <__floatsisf+0xc8>
 4026250:	2149883a 	add	r4,r4,r5
 4026254:	2141002c 	andhi	r5,r4,1024
 4026258:	28000526 	beq	r5,zero,4026270 <__floatsisf+0xe4>
 402625c:	00c027c4 	movi	r3,159
 4026260:	1887c83a 	sub	r3,r3,r2
 4026264:	00bf0034 	movhi	r2,64512
 4026268:	10bfffc4 	addi	r2,r2,-1
 402626c:	2088703a 	and	r4,r4,r2
 4026270:	202091ba 	slli	r16,r4,6
 4026274:	8809883a 	mov	r4,r17
 4026278:	8020d27a 	srli	r16,r16,9
 402627c:	003fda06 	br	40261e8 <__flash_rwdata_start+0xfffefc90>
 4026280:	0009883a 	mov	r4,zero
 4026284:	0007883a 	mov	r3,zero
 4026288:	0021883a 	mov	r16,zero
 402628c:	003fd606 	br	40261e8 <__flash_rwdata_start+0xfffefc90>
 4026290:	0121c83a 	sub	r16,zero,r4
 4026294:	003fc806 	br	40261b8 <__flash_rwdata_start+0xfffefc60>
 4026298:	01002e44 	movi	r4,185
 402629c:	20c9c83a 	sub	r4,r4,r3
 40262a0:	01400144 	movi	r5,5
 40262a4:	8108983a 	sll	r4,r16,r4
 40262a8:	288bc83a 	sub	r5,r5,r2
 40262ac:	8160d83a 	srl	r16,r16,r5
 40262b0:	2008c03a 	cmpne	r4,r4,zero
 40262b4:	8120b03a 	or	r16,r16,r4
 40262b8:	003fdd06 	br	4026230 <__flash_rwdata_start+0xfffefcd8>

040262bc <__floatunsisf>:
 40262bc:	f811883a 	mov	r8,ra
 40262c0:	40346e80 	call	40346e8 <_mcount>
 40262c4:	403f883a 	mov	ra,r8
 40262c8:	defffe04 	addi	sp,sp,-8
 40262cc:	dfc00115 	stw	ra,4(sp)
 40262d0:	dc000015 	stw	r16,0(sp)
 40262d4:	20002c26 	beq	r4,zero,4026388 <__floatunsisf+0xcc>
 40262d8:	2021883a 	mov	r16,r4
 40262dc:	402768c0 	call	402768c <__clzsi2>
 40262e0:	00c02784 	movi	r3,158
 40262e4:	1887c83a 	sub	r3,r3,r2
 40262e8:	01002584 	movi	r4,150
 40262ec:	20c00f16 	blt	r4,r3,402632c <__floatunsisf+0x70>
 40262f0:	20c9c83a 	sub	r4,r4,r3
 40262f4:	8108983a 	sll	r4,r16,r4
 40262f8:	00802034 	movhi	r2,128
 40262fc:	10bfffc4 	addi	r2,r2,-1
 4026300:	2088703a 	and	r4,r4,r2
 4026304:	18803fcc 	andi	r2,r3,255
 4026308:	100695fa 	slli	r3,r2,23
 402630c:	00802034 	movhi	r2,128
 4026310:	10bfffc4 	addi	r2,r2,-1
 4026314:	2084703a 	and	r2,r4,r2
 4026318:	10c4b03a 	or	r2,r2,r3
 402631c:	dfc00117 	ldw	ra,4(sp)
 4026320:	dc000017 	ldw	r16,0(sp)
 4026324:	dec00204 	addi	sp,sp,8
 4026328:	f800283a 	ret
 402632c:	01002644 	movi	r4,153
 4026330:	20c01816 	blt	r4,r3,4026394 <__floatunsisf+0xd8>
 4026334:	20c9c83a 	sub	r4,r4,r3
 4026338:	8108983a 	sll	r4,r16,r4
 402633c:	017f0034 	movhi	r5,64512
 4026340:	297fffc4 	addi	r5,r5,-1
 4026344:	218001cc 	andi	r6,r4,7
 4026348:	214a703a 	and	r5,r4,r5
 402634c:	30000426 	beq	r6,zero,4026360 <__floatunsisf+0xa4>
 4026350:	210003cc 	andi	r4,r4,15
 4026354:	01800104 	movi	r6,4
 4026358:	21800126 	beq	r4,r6,4026360 <__floatunsisf+0xa4>
 402635c:	298b883a 	add	r5,r5,r6
 4026360:	2901002c 	andhi	r4,r5,1024
 4026364:	20000526 	beq	r4,zero,402637c <__floatunsisf+0xc0>
 4026368:	00c027c4 	movi	r3,159
 402636c:	1887c83a 	sub	r3,r3,r2
 4026370:	00bf0034 	movhi	r2,64512
 4026374:	10bfffc4 	addi	r2,r2,-1
 4026378:	288a703a 	and	r5,r5,r2
 402637c:	280891ba 	slli	r4,r5,6
 4026380:	2008d27a 	srli	r4,r4,9
 4026384:	003fdf06 	br	4026304 <__flash_rwdata_start+0xfffefdac>
 4026388:	0007883a 	mov	r3,zero
 402638c:	0009883a 	mov	r4,zero
 4026390:	003fdc06 	br	4026304 <__flash_rwdata_start+0xfffefdac>
 4026394:	01402e44 	movi	r5,185
 4026398:	28cbc83a 	sub	r5,r5,r3
 402639c:	01000144 	movi	r4,5
 40263a0:	2089c83a 	sub	r4,r4,r2
 40263a4:	814a983a 	sll	r5,r16,r5
 40263a8:	8108d83a 	srl	r4,r16,r4
 40263ac:	2820c03a 	cmpne	r16,r5,zero
 40263b0:	2408b03a 	or	r4,r4,r16
 40263b4:	003fe106 	br	402633c <__flash_rwdata_start+0xfffefde4>

040263b8 <__divdf3>:
 40263b8:	f811883a 	mov	r8,ra
 40263bc:	40346e80 	call	40346e8 <_mcount>
 40263c0:	403f883a 	mov	ra,r8
 40263c4:	defff204 	addi	sp,sp,-56
 40263c8:	dfc00d15 	stw	ra,52(sp)
 40263cc:	df000c15 	stw	fp,48(sp)
 40263d0:	ddc00b15 	stw	r23,44(sp)
 40263d4:	dd800a15 	stw	r22,40(sp)
 40263d8:	dd400915 	stw	r21,36(sp)
 40263dc:	dd000815 	stw	r20,32(sp)
 40263e0:	dcc00715 	stw	r19,28(sp)
 40263e4:	dc800615 	stw	r18,24(sp)
 40263e8:	dc400515 	stw	r17,20(sp)
 40263ec:	dc000415 	stw	r16,16(sp)
 40263f0:	282ad53a 	srli	r21,r5,20
 40263f4:	2828d7fa 	srli	r20,r5,31
 40263f8:	04000434 	movhi	r16,16
 40263fc:	843fffc4 	addi	r16,r16,-1
 4026400:	ad41ffcc 	andi	r21,r21,2047
 4026404:	2c20703a 	and	r16,r5,r16
 4026408:	a7003fcc 	andi	fp,r20,255
 402640c:	a8006126 	beq	r21,zero,4026594 <__divdf3+0x1dc>
 4026410:	0081ffc4 	movi	r2,2047
 4026414:	2025883a 	mov	r18,r4
 4026418:	a8803726 	beq	r21,r2,40264f8 <__divdf3+0x140>
 402641c:	80800434 	orhi	r2,r16,16
 4026420:	100490fa 	slli	r2,r2,3
 4026424:	2020d77a 	srli	r16,r4,29
 4026428:	202490fa 	slli	r18,r4,3
 402642c:	ad7f0044 	addi	r21,r21,-1023
 4026430:	80a0b03a 	or	r16,r16,r2
 4026434:	0027883a 	mov	r19,zero
 4026438:	0013883a 	mov	r9,zero
 402643c:	3804d53a 	srli	r2,r7,20
 4026440:	382cd7fa 	srli	r22,r7,31
 4026444:	04400434 	movhi	r17,16
 4026448:	8c7fffc4 	addi	r17,r17,-1
 402644c:	1081ffcc 	andi	r2,r2,2047
 4026450:	3011883a 	mov	r8,r6
 4026454:	3c62703a 	and	r17,r7,r17
 4026458:	b5c03fcc 	andi	r23,r22,255
 402645c:	10006c26 	beq	r2,zero,4026610 <__divdf3+0x258>
 4026460:	00c1ffc4 	movi	r3,2047
 4026464:	10c06426 	beq	r2,r3,40265f8 <__divdf3+0x240>
 4026468:	88c00434 	orhi	r3,r17,16
 402646c:	180690fa 	slli	r3,r3,3
 4026470:	3022d77a 	srli	r17,r6,29
 4026474:	301090fa 	slli	r8,r6,3
 4026478:	10bf0044 	addi	r2,r2,-1023
 402647c:	88e2b03a 	or	r17,r17,r3
 4026480:	000f883a 	mov	r7,zero
 4026484:	a58cf03a 	xor	r6,r20,r22
 4026488:	3cc8b03a 	or	r4,r7,r19
 402648c:	a8abc83a 	sub	r21,r21,r2
 4026490:	008003c4 	movi	r2,15
 4026494:	3007883a 	mov	r3,r6
 4026498:	34c03fcc 	andi	r19,r6,255
 402649c:	11009036 	bltu	r2,r4,40266e0 <__divdf3+0x328>
 40264a0:	200890ba 	slli	r4,r4,2
 40264a4:	008100b4 	movhi	r2,1026
 40264a8:	10992e04 	addi	r2,r2,25784
 40264ac:	2089883a 	add	r4,r4,r2
 40264b0:	20800017 	ldw	r2,0(r4)
 40264b4:	1000683a 	jmp	r2
 40264b8:	040266e0 	cmpeqi	r16,zero,2459
 40264bc:	04026530 	cmpltui	r16,zero,2452
 40264c0:	040266d0 	cmplti	r16,zero,2459
 40264c4:	04026524 	muli	r16,zero,2452
 40264c8:	040266d0 	cmplti	r16,zero,2459
 40264cc:	040266a4 	muli	r16,zero,2458
 40264d0:	040266d0 	cmplti	r16,zero,2459
 40264d4:	04026524 	muli	r16,zero,2452
 40264d8:	04026530 	cmpltui	r16,zero,2452
 40264dc:	04026530 	cmpltui	r16,zero,2452
 40264e0:	040266a4 	muli	r16,zero,2458
 40264e4:	04026524 	muli	r16,zero,2452
 40264e8:	04026514 	movui	r16,2452
 40264ec:	04026514 	movui	r16,2452
 40264f0:	04026514 	movui	r16,2452
 40264f4:	040269c4 	movi	r16,2471
 40264f8:	2404b03a 	or	r2,r4,r16
 40264fc:	1000661e 	bne	r2,zero,4026698 <__divdf3+0x2e0>
 4026500:	04c00204 	movi	r19,8
 4026504:	0021883a 	mov	r16,zero
 4026508:	0025883a 	mov	r18,zero
 402650c:	02400084 	movi	r9,2
 4026510:	003fca06 	br	402643c <__flash_rwdata_start+0xfffefee4>
 4026514:	8023883a 	mov	r17,r16
 4026518:	9011883a 	mov	r8,r18
 402651c:	e02f883a 	mov	r23,fp
 4026520:	480f883a 	mov	r7,r9
 4026524:	00800084 	movi	r2,2
 4026528:	3881311e 	bne	r7,r2,40269f0 <__divdf3+0x638>
 402652c:	b827883a 	mov	r19,r23
 4026530:	98c0004c 	andi	r3,r19,1
 4026534:	0081ffc4 	movi	r2,2047
 4026538:	000b883a 	mov	r5,zero
 402653c:	0025883a 	mov	r18,zero
 4026540:	1004953a 	slli	r2,r2,20
 4026544:	18c03fcc 	andi	r3,r3,255
 4026548:	04400434 	movhi	r17,16
 402654c:	8c7fffc4 	addi	r17,r17,-1
 4026550:	180697fa 	slli	r3,r3,31
 4026554:	2c4a703a 	and	r5,r5,r17
 4026558:	288ab03a 	or	r5,r5,r2
 402655c:	28c6b03a 	or	r3,r5,r3
 4026560:	9005883a 	mov	r2,r18
 4026564:	dfc00d17 	ldw	ra,52(sp)
 4026568:	df000c17 	ldw	fp,48(sp)
 402656c:	ddc00b17 	ldw	r23,44(sp)
 4026570:	dd800a17 	ldw	r22,40(sp)
 4026574:	dd400917 	ldw	r21,36(sp)
 4026578:	dd000817 	ldw	r20,32(sp)
 402657c:	dcc00717 	ldw	r19,28(sp)
 4026580:	dc800617 	ldw	r18,24(sp)
 4026584:	dc400517 	ldw	r17,20(sp)
 4026588:	dc000417 	ldw	r16,16(sp)
 402658c:	dec00e04 	addi	sp,sp,56
 4026590:	f800283a 	ret
 4026594:	2404b03a 	or	r2,r4,r16
 4026598:	2027883a 	mov	r19,r4
 402659c:	10003926 	beq	r2,zero,4026684 <__divdf3+0x2cc>
 40265a0:	80012e26 	beq	r16,zero,4026a5c <__divdf3+0x6a4>
 40265a4:	8009883a 	mov	r4,r16
 40265a8:	d9800315 	stw	r6,12(sp)
 40265ac:	d9c00215 	stw	r7,8(sp)
 40265b0:	402768c0 	call	402768c <__clzsi2>
 40265b4:	d9800317 	ldw	r6,12(sp)
 40265b8:	d9c00217 	ldw	r7,8(sp)
 40265bc:	113ffd44 	addi	r4,r2,-11
 40265c0:	00c00704 	movi	r3,28
 40265c4:	19012116 	blt	r3,r4,4026a4c <__divdf3+0x694>
 40265c8:	00c00744 	movi	r3,29
 40265cc:	147ffe04 	addi	r17,r2,-8
 40265d0:	1907c83a 	sub	r3,r3,r4
 40265d4:	8460983a 	sll	r16,r16,r17
 40265d8:	98c6d83a 	srl	r3,r19,r3
 40265dc:	9c64983a 	sll	r18,r19,r17
 40265e0:	1c20b03a 	or	r16,r3,r16
 40265e4:	1080fcc4 	addi	r2,r2,1011
 40265e8:	00abc83a 	sub	r21,zero,r2
 40265ec:	0027883a 	mov	r19,zero
 40265f0:	0013883a 	mov	r9,zero
 40265f4:	003f9106 	br	402643c <__flash_rwdata_start+0xfffefee4>
 40265f8:	3446b03a 	or	r3,r6,r17
 40265fc:	18001f1e 	bne	r3,zero,402667c <__divdf3+0x2c4>
 4026600:	0023883a 	mov	r17,zero
 4026604:	0011883a 	mov	r8,zero
 4026608:	01c00084 	movi	r7,2
 402660c:	003f9d06 	br	4026484 <__flash_rwdata_start+0xfffeff2c>
 4026610:	3446b03a 	or	r3,r6,r17
 4026614:	18001526 	beq	r3,zero,402666c <__divdf3+0x2b4>
 4026618:	88011b26 	beq	r17,zero,4026a88 <__divdf3+0x6d0>
 402661c:	8809883a 	mov	r4,r17
 4026620:	d9800315 	stw	r6,12(sp)
 4026624:	da400115 	stw	r9,4(sp)
 4026628:	402768c0 	call	402768c <__clzsi2>
 402662c:	d9800317 	ldw	r6,12(sp)
 4026630:	da400117 	ldw	r9,4(sp)
 4026634:	113ffd44 	addi	r4,r2,-11
 4026638:	00c00704 	movi	r3,28
 402663c:	19010e16 	blt	r3,r4,4026a78 <__divdf3+0x6c0>
 4026640:	00c00744 	movi	r3,29
 4026644:	123ffe04 	addi	r8,r2,-8
 4026648:	1907c83a 	sub	r3,r3,r4
 402664c:	8a22983a 	sll	r17,r17,r8
 4026650:	30c6d83a 	srl	r3,r6,r3
 4026654:	3210983a 	sll	r8,r6,r8
 4026658:	1c62b03a 	or	r17,r3,r17
 402665c:	1080fcc4 	addi	r2,r2,1011
 4026660:	0085c83a 	sub	r2,zero,r2
 4026664:	000f883a 	mov	r7,zero
 4026668:	003f8606 	br	4026484 <__flash_rwdata_start+0xfffeff2c>
 402666c:	0023883a 	mov	r17,zero
 4026670:	0011883a 	mov	r8,zero
 4026674:	01c00044 	movi	r7,1
 4026678:	003f8206 	br	4026484 <__flash_rwdata_start+0xfffeff2c>
 402667c:	01c000c4 	movi	r7,3
 4026680:	003f8006 	br	4026484 <__flash_rwdata_start+0xfffeff2c>
 4026684:	04c00104 	movi	r19,4
 4026688:	0021883a 	mov	r16,zero
 402668c:	0025883a 	mov	r18,zero
 4026690:	02400044 	movi	r9,1
 4026694:	003f6906 	br	402643c <__flash_rwdata_start+0xfffefee4>
 4026698:	04c00304 	movi	r19,12
 402669c:	024000c4 	movi	r9,3
 40266a0:	003f6606 	br	402643c <__flash_rwdata_start+0xfffefee4>
 40266a4:	01400434 	movhi	r5,16
 40266a8:	0007883a 	mov	r3,zero
 40266ac:	297fffc4 	addi	r5,r5,-1
 40266b0:	04bfffc4 	movi	r18,-1
 40266b4:	0081ffc4 	movi	r2,2047
 40266b8:	003fa106 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 40266bc:	00c00044 	movi	r3,1
 40266c0:	1887c83a 	sub	r3,r3,r2
 40266c4:	01000e04 	movi	r4,56
 40266c8:	20c1210e 	bge	r4,r3,4026b50 <__divdf3+0x798>
 40266cc:	98c0004c 	andi	r3,r19,1
 40266d0:	0005883a 	mov	r2,zero
 40266d4:	000b883a 	mov	r5,zero
 40266d8:	0025883a 	mov	r18,zero
 40266dc:	003f9806 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 40266e0:	8c00fd36 	bltu	r17,r16,4026ad8 <__divdf3+0x720>
 40266e4:	8440fb26 	beq	r16,r17,4026ad4 <__divdf3+0x71c>
 40266e8:	8007883a 	mov	r3,r16
 40266ec:	ad7fffc4 	addi	r21,r21,-1
 40266f0:	0021883a 	mov	r16,zero
 40266f4:	4004d63a 	srli	r2,r8,24
 40266f8:	8822923a 	slli	r17,r17,8
 40266fc:	1809883a 	mov	r4,r3
 4026700:	402c923a 	slli	r22,r8,8
 4026704:	88b8b03a 	or	fp,r17,r2
 4026708:	e028d43a 	srli	r20,fp,16
 402670c:	d8c00015 	stw	r3,0(sp)
 4026710:	e5ffffcc 	andi	r23,fp,65535
 4026714:	a00b883a 	mov	r5,r20
 4026718:	4024ce40 	call	4024ce4 <__udivsi3>
 402671c:	d8c00017 	ldw	r3,0(sp)
 4026720:	a00b883a 	mov	r5,r20
 4026724:	d8800315 	stw	r2,12(sp)
 4026728:	1809883a 	mov	r4,r3
 402672c:	4024d540 	call	4024d54 <__umodsi3>
 4026730:	d9800317 	ldw	r6,12(sp)
 4026734:	1006943a 	slli	r3,r2,16
 4026738:	9004d43a 	srli	r2,r18,16
 402673c:	b9a3383a 	mul	r17,r23,r6
 4026740:	10c4b03a 	or	r2,r2,r3
 4026744:	1440062e 	bgeu	r2,r17,4026760 <__divdf3+0x3a8>
 4026748:	1705883a 	add	r2,r2,fp
 402674c:	30ffffc4 	addi	r3,r6,-1
 4026750:	1700ee36 	bltu	r2,fp,4026b0c <__divdf3+0x754>
 4026754:	1440ed2e 	bgeu	r2,r17,4026b0c <__divdf3+0x754>
 4026758:	31bfff84 	addi	r6,r6,-2
 402675c:	1705883a 	add	r2,r2,fp
 4026760:	1463c83a 	sub	r17,r2,r17
 4026764:	a00b883a 	mov	r5,r20
 4026768:	8809883a 	mov	r4,r17
 402676c:	d9800315 	stw	r6,12(sp)
 4026770:	4024ce40 	call	4024ce4 <__udivsi3>
 4026774:	a00b883a 	mov	r5,r20
 4026778:	8809883a 	mov	r4,r17
 402677c:	d8800215 	stw	r2,8(sp)
 4026780:	4024d540 	call	4024d54 <__umodsi3>
 4026784:	d9c00217 	ldw	r7,8(sp)
 4026788:	1004943a 	slli	r2,r2,16
 402678c:	94bfffcc 	andi	r18,r18,65535
 4026790:	b9d1383a 	mul	r8,r23,r7
 4026794:	90a4b03a 	or	r18,r18,r2
 4026798:	d9800317 	ldw	r6,12(sp)
 402679c:	9200062e 	bgeu	r18,r8,40267b8 <__divdf3+0x400>
 40267a0:	9725883a 	add	r18,r18,fp
 40267a4:	38bfffc4 	addi	r2,r7,-1
 40267a8:	9700d636 	bltu	r18,fp,4026b04 <__divdf3+0x74c>
 40267ac:	9200d52e 	bgeu	r18,r8,4026b04 <__divdf3+0x74c>
 40267b0:	39ffff84 	addi	r7,r7,-2
 40267b4:	9725883a 	add	r18,r18,fp
 40267b8:	3004943a 	slli	r2,r6,16
 40267bc:	b012d43a 	srli	r9,r22,16
 40267c0:	b1bfffcc 	andi	r6,r22,65535
 40267c4:	11e2b03a 	or	r17,r2,r7
 40267c8:	8806d43a 	srli	r3,r17,16
 40267cc:	893fffcc 	andi	r4,r17,65535
 40267d0:	218b383a 	mul	r5,r4,r6
 40267d4:	30c5383a 	mul	r2,r6,r3
 40267d8:	2249383a 	mul	r4,r4,r9
 40267dc:	280ed43a 	srli	r7,r5,16
 40267e0:	9225c83a 	sub	r18,r18,r8
 40267e4:	2089883a 	add	r4,r4,r2
 40267e8:	3909883a 	add	r4,r7,r4
 40267ec:	1a47383a 	mul	r3,r3,r9
 40267f0:	2080022e 	bgeu	r4,r2,40267fc <__divdf3+0x444>
 40267f4:	00800074 	movhi	r2,1
 40267f8:	1887883a 	add	r3,r3,r2
 40267fc:	2004d43a 	srli	r2,r4,16
 4026800:	2008943a 	slli	r4,r4,16
 4026804:	297fffcc 	andi	r5,r5,65535
 4026808:	10c7883a 	add	r3,r2,r3
 402680c:	2149883a 	add	r4,r4,r5
 4026810:	90c0a536 	bltu	r18,r3,4026aa8 <__divdf3+0x6f0>
 4026814:	90c0bf26 	beq	r18,r3,4026b14 <__divdf3+0x75c>
 4026818:	90c7c83a 	sub	r3,r18,r3
 402681c:	810fc83a 	sub	r7,r16,r4
 4026820:	81e5803a 	cmpltu	r18,r16,r7
 4026824:	1ca5c83a 	sub	r18,r3,r18
 4026828:	e480c126 	beq	fp,r18,4026b30 <__divdf3+0x778>
 402682c:	a00b883a 	mov	r5,r20
 4026830:	9009883a 	mov	r4,r18
 4026834:	d9800315 	stw	r6,12(sp)
 4026838:	d9c00215 	stw	r7,8(sp)
 402683c:	da400115 	stw	r9,4(sp)
 4026840:	4024ce40 	call	4024ce4 <__udivsi3>
 4026844:	a00b883a 	mov	r5,r20
 4026848:	9009883a 	mov	r4,r18
 402684c:	d8800015 	stw	r2,0(sp)
 4026850:	4024d540 	call	4024d54 <__umodsi3>
 4026854:	d9c00217 	ldw	r7,8(sp)
 4026858:	da000017 	ldw	r8,0(sp)
 402685c:	1006943a 	slli	r3,r2,16
 4026860:	3804d43a 	srli	r2,r7,16
 4026864:	ba21383a 	mul	r16,r23,r8
 4026868:	d9800317 	ldw	r6,12(sp)
 402686c:	10c4b03a 	or	r2,r2,r3
 4026870:	da400117 	ldw	r9,4(sp)
 4026874:	1400062e 	bgeu	r2,r16,4026890 <__divdf3+0x4d8>
 4026878:	1705883a 	add	r2,r2,fp
 402687c:	40ffffc4 	addi	r3,r8,-1
 4026880:	1700ad36 	bltu	r2,fp,4026b38 <__divdf3+0x780>
 4026884:	1400ac2e 	bgeu	r2,r16,4026b38 <__divdf3+0x780>
 4026888:	423fff84 	addi	r8,r8,-2
 402688c:	1705883a 	add	r2,r2,fp
 4026890:	1421c83a 	sub	r16,r2,r16
 4026894:	a00b883a 	mov	r5,r20
 4026898:	8009883a 	mov	r4,r16
 402689c:	d9800315 	stw	r6,12(sp)
 40268a0:	d9c00215 	stw	r7,8(sp)
 40268a4:	da000015 	stw	r8,0(sp)
 40268a8:	da400115 	stw	r9,4(sp)
 40268ac:	4024ce40 	call	4024ce4 <__udivsi3>
 40268b0:	8009883a 	mov	r4,r16
 40268b4:	a00b883a 	mov	r5,r20
 40268b8:	1025883a 	mov	r18,r2
 40268bc:	4024d540 	call	4024d54 <__umodsi3>
 40268c0:	d9c00217 	ldw	r7,8(sp)
 40268c4:	1004943a 	slli	r2,r2,16
 40268c8:	bcaf383a 	mul	r23,r23,r18
 40268cc:	393fffcc 	andi	r4,r7,65535
 40268d0:	2088b03a 	or	r4,r4,r2
 40268d4:	d9800317 	ldw	r6,12(sp)
 40268d8:	da000017 	ldw	r8,0(sp)
 40268dc:	da400117 	ldw	r9,4(sp)
 40268e0:	25c0062e 	bgeu	r4,r23,40268fc <__divdf3+0x544>
 40268e4:	2709883a 	add	r4,r4,fp
 40268e8:	90bfffc4 	addi	r2,r18,-1
 40268ec:	27009436 	bltu	r4,fp,4026b40 <__divdf3+0x788>
 40268f0:	25c0932e 	bgeu	r4,r23,4026b40 <__divdf3+0x788>
 40268f4:	94bfff84 	addi	r18,r18,-2
 40268f8:	2709883a 	add	r4,r4,fp
 40268fc:	4004943a 	slli	r2,r8,16
 4026900:	25efc83a 	sub	r23,r4,r23
 4026904:	1490b03a 	or	r8,r2,r18
 4026908:	4008d43a 	srli	r4,r8,16
 402690c:	40ffffcc 	andi	r3,r8,65535
 4026910:	30c5383a 	mul	r2,r6,r3
 4026914:	1a47383a 	mul	r3,r3,r9
 4026918:	310d383a 	mul	r6,r6,r4
 402691c:	100ad43a 	srli	r5,r2,16
 4026920:	4913383a 	mul	r9,r9,r4
 4026924:	1987883a 	add	r3,r3,r6
 4026928:	28c7883a 	add	r3,r5,r3
 402692c:	1980022e 	bgeu	r3,r6,4026938 <__divdf3+0x580>
 4026930:	01000074 	movhi	r4,1
 4026934:	4913883a 	add	r9,r9,r4
 4026938:	1808d43a 	srli	r4,r3,16
 402693c:	1806943a 	slli	r3,r3,16
 4026940:	10bfffcc 	andi	r2,r2,65535
 4026944:	2253883a 	add	r9,r4,r9
 4026948:	1887883a 	add	r3,r3,r2
 402694c:	ba403836 	bltu	r23,r9,4026a30 <__divdf3+0x678>
 4026950:	ba403626 	beq	r23,r9,4026a2c <__divdf3+0x674>
 4026954:	42000054 	ori	r8,r8,1
 4026958:	a880ffc4 	addi	r2,r21,1023
 402695c:	00bf570e 	bge	zero,r2,40266bc <__flash_rwdata_start+0xffff0164>
 4026960:	40c001cc 	andi	r3,r8,7
 4026964:	18000726 	beq	r3,zero,4026984 <__divdf3+0x5cc>
 4026968:	40c003cc 	andi	r3,r8,15
 402696c:	01000104 	movi	r4,4
 4026970:	19000426 	beq	r3,r4,4026984 <__divdf3+0x5cc>
 4026974:	4107883a 	add	r3,r8,r4
 4026978:	1a11803a 	cmpltu	r8,r3,r8
 402697c:	8a23883a 	add	r17,r17,r8
 4026980:	1811883a 	mov	r8,r3
 4026984:	88c0402c 	andhi	r3,r17,256
 4026988:	18000426 	beq	r3,zero,402699c <__divdf3+0x5e4>
 402698c:	00ffc034 	movhi	r3,65280
 4026990:	18ffffc4 	addi	r3,r3,-1
 4026994:	a8810004 	addi	r2,r21,1024
 4026998:	88e2703a 	and	r17,r17,r3
 402699c:	00c1ff84 	movi	r3,2046
 40269a0:	18bee316 	blt	r3,r2,4026530 <__flash_rwdata_start+0xfffeffd8>
 40269a4:	8824977a 	slli	r18,r17,29
 40269a8:	4010d0fa 	srli	r8,r8,3
 40269ac:	8822927a 	slli	r17,r17,9
 40269b0:	1081ffcc 	andi	r2,r2,2047
 40269b4:	9224b03a 	or	r18,r18,r8
 40269b8:	880ad33a 	srli	r5,r17,12
 40269bc:	98c0004c 	andi	r3,r19,1
 40269c0:	003edf06 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 40269c4:	8080022c 	andhi	r2,r16,8
 40269c8:	10001226 	beq	r2,zero,4026a14 <__divdf3+0x65c>
 40269cc:	8880022c 	andhi	r2,r17,8
 40269d0:	1000101e 	bne	r2,zero,4026a14 <__divdf3+0x65c>
 40269d4:	00800434 	movhi	r2,16
 40269d8:	89400234 	orhi	r5,r17,8
 40269dc:	10bfffc4 	addi	r2,r2,-1
 40269e0:	b007883a 	mov	r3,r22
 40269e4:	288a703a 	and	r5,r5,r2
 40269e8:	4025883a 	mov	r18,r8
 40269ec:	003f3106 	br	40266b4 <__flash_rwdata_start+0xffff015c>
 40269f0:	008000c4 	movi	r2,3
 40269f4:	3880a626 	beq	r7,r2,4026c90 <__divdf3+0x8d8>
 40269f8:	00800044 	movi	r2,1
 40269fc:	3880521e 	bne	r7,r2,4026b48 <__divdf3+0x790>
 4026a00:	b807883a 	mov	r3,r23
 4026a04:	0005883a 	mov	r2,zero
 4026a08:	000b883a 	mov	r5,zero
 4026a0c:	0025883a 	mov	r18,zero
 4026a10:	003ecb06 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 4026a14:	00800434 	movhi	r2,16
 4026a18:	81400234 	orhi	r5,r16,8
 4026a1c:	10bfffc4 	addi	r2,r2,-1
 4026a20:	a007883a 	mov	r3,r20
 4026a24:	288a703a 	and	r5,r5,r2
 4026a28:	003f2206 	br	40266b4 <__flash_rwdata_start+0xffff015c>
 4026a2c:	183fca26 	beq	r3,zero,4026958 <__flash_rwdata_start+0xffff0400>
 4026a30:	e5ef883a 	add	r23,fp,r23
 4026a34:	40bfffc4 	addi	r2,r8,-1
 4026a38:	bf00392e 	bgeu	r23,fp,4026b20 <__divdf3+0x768>
 4026a3c:	1011883a 	mov	r8,r2
 4026a40:	ba7fc41e 	bne	r23,r9,4026954 <__flash_rwdata_start+0xffff03fc>
 4026a44:	b0ffc31e 	bne	r22,r3,4026954 <__flash_rwdata_start+0xffff03fc>
 4026a48:	003fc306 	br	4026958 <__flash_rwdata_start+0xffff0400>
 4026a4c:	143ff604 	addi	r16,r2,-40
 4026a50:	9c20983a 	sll	r16,r19,r16
 4026a54:	0025883a 	mov	r18,zero
 4026a58:	003ee206 	br	40265e4 <__flash_rwdata_start+0xffff008c>
 4026a5c:	d9800315 	stw	r6,12(sp)
 4026a60:	d9c00215 	stw	r7,8(sp)
 4026a64:	402768c0 	call	402768c <__clzsi2>
 4026a68:	10800804 	addi	r2,r2,32
 4026a6c:	d9c00217 	ldw	r7,8(sp)
 4026a70:	d9800317 	ldw	r6,12(sp)
 4026a74:	003ed106 	br	40265bc <__flash_rwdata_start+0xffff0064>
 4026a78:	147ff604 	addi	r17,r2,-40
 4026a7c:	3462983a 	sll	r17,r6,r17
 4026a80:	0011883a 	mov	r8,zero
 4026a84:	003ef506 	br	402665c <__flash_rwdata_start+0xffff0104>
 4026a88:	3009883a 	mov	r4,r6
 4026a8c:	d9800315 	stw	r6,12(sp)
 4026a90:	da400115 	stw	r9,4(sp)
 4026a94:	402768c0 	call	402768c <__clzsi2>
 4026a98:	10800804 	addi	r2,r2,32
 4026a9c:	da400117 	ldw	r9,4(sp)
 4026aa0:	d9800317 	ldw	r6,12(sp)
 4026aa4:	003ee306 	br	4026634 <__flash_rwdata_start+0xffff00dc>
 4026aa8:	85a1883a 	add	r16,r16,r22
 4026aac:	8585803a 	cmpltu	r2,r16,r22
 4026ab0:	1705883a 	add	r2,r2,fp
 4026ab4:	14a5883a 	add	r18,r2,r18
 4026ab8:	88bfffc4 	addi	r2,r17,-1
 4026abc:	e4800c2e 	bgeu	fp,r18,4026af0 <__divdf3+0x738>
 4026ac0:	90c03e36 	bltu	r18,r3,4026bbc <__divdf3+0x804>
 4026ac4:	1c806926 	beq	r3,r18,4026c6c <__divdf3+0x8b4>
 4026ac8:	90c7c83a 	sub	r3,r18,r3
 4026acc:	1023883a 	mov	r17,r2
 4026ad0:	003f5206 	br	402681c <__flash_rwdata_start+0xffff02c4>
 4026ad4:	923f0436 	bltu	r18,r8,40266e8 <__flash_rwdata_start+0xffff0190>
 4026ad8:	800897fa 	slli	r4,r16,31
 4026adc:	9004d07a 	srli	r2,r18,1
 4026ae0:	8006d07a 	srli	r3,r16,1
 4026ae4:	902097fa 	slli	r16,r18,31
 4026ae8:	20a4b03a 	or	r18,r4,r2
 4026aec:	003f0106 	br	40266f4 <__flash_rwdata_start+0xffff019c>
 4026af0:	e4bff51e 	bne	fp,r18,4026ac8 <__flash_rwdata_start+0xffff0570>
 4026af4:	85bff22e 	bgeu	r16,r22,4026ac0 <__flash_rwdata_start+0xffff0568>
 4026af8:	e0c7c83a 	sub	r3,fp,r3
 4026afc:	1023883a 	mov	r17,r2
 4026b00:	003f4606 	br	402681c <__flash_rwdata_start+0xffff02c4>
 4026b04:	100f883a 	mov	r7,r2
 4026b08:	003f2b06 	br	40267b8 <__flash_rwdata_start+0xffff0260>
 4026b0c:	180d883a 	mov	r6,r3
 4026b10:	003f1306 	br	4026760 <__flash_rwdata_start+0xffff0208>
 4026b14:	813fe436 	bltu	r16,r4,4026aa8 <__flash_rwdata_start+0xffff0550>
 4026b18:	0007883a 	mov	r3,zero
 4026b1c:	003f3f06 	br	402681c <__flash_rwdata_start+0xffff02c4>
 4026b20:	ba402c36 	bltu	r23,r9,4026bd4 <__divdf3+0x81c>
 4026b24:	4dc05426 	beq	r9,r23,4026c78 <__divdf3+0x8c0>
 4026b28:	1011883a 	mov	r8,r2
 4026b2c:	003f8906 	br	4026954 <__flash_rwdata_start+0xffff03fc>
 4026b30:	023fffc4 	movi	r8,-1
 4026b34:	003f8806 	br	4026958 <__flash_rwdata_start+0xffff0400>
 4026b38:	1811883a 	mov	r8,r3
 4026b3c:	003f5406 	br	4026890 <__flash_rwdata_start+0xffff0338>
 4026b40:	1025883a 	mov	r18,r2
 4026b44:	003f6d06 	br	40268fc <__flash_rwdata_start+0xffff03a4>
 4026b48:	b827883a 	mov	r19,r23
 4026b4c:	003f8206 	br	4026958 <__flash_rwdata_start+0xffff0400>
 4026b50:	010007c4 	movi	r4,31
 4026b54:	20c02616 	blt	r4,r3,4026bf0 <__divdf3+0x838>
 4026b58:	00800804 	movi	r2,32
 4026b5c:	10c5c83a 	sub	r2,r2,r3
 4026b60:	888a983a 	sll	r5,r17,r2
 4026b64:	40c8d83a 	srl	r4,r8,r3
 4026b68:	4084983a 	sll	r2,r8,r2
 4026b6c:	88e2d83a 	srl	r17,r17,r3
 4026b70:	2906b03a 	or	r3,r5,r4
 4026b74:	1004c03a 	cmpne	r2,r2,zero
 4026b78:	1886b03a 	or	r3,r3,r2
 4026b7c:	188001cc 	andi	r2,r3,7
 4026b80:	10000726 	beq	r2,zero,4026ba0 <__divdf3+0x7e8>
 4026b84:	188003cc 	andi	r2,r3,15
 4026b88:	01000104 	movi	r4,4
 4026b8c:	11000426 	beq	r2,r4,4026ba0 <__divdf3+0x7e8>
 4026b90:	1805883a 	mov	r2,r3
 4026b94:	10c00104 	addi	r3,r2,4
 4026b98:	1885803a 	cmpltu	r2,r3,r2
 4026b9c:	88a3883a 	add	r17,r17,r2
 4026ba0:	8880202c 	andhi	r2,r17,128
 4026ba4:	10002726 	beq	r2,zero,4026c44 <__divdf3+0x88c>
 4026ba8:	98c0004c 	andi	r3,r19,1
 4026bac:	00800044 	movi	r2,1
 4026bb0:	000b883a 	mov	r5,zero
 4026bb4:	0025883a 	mov	r18,zero
 4026bb8:	003e6106 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 4026bbc:	85a1883a 	add	r16,r16,r22
 4026bc0:	8585803a 	cmpltu	r2,r16,r22
 4026bc4:	1705883a 	add	r2,r2,fp
 4026bc8:	14a5883a 	add	r18,r2,r18
 4026bcc:	8c7fff84 	addi	r17,r17,-2
 4026bd0:	003f1106 	br	4026818 <__flash_rwdata_start+0xffff02c0>
 4026bd4:	b589883a 	add	r4,r22,r22
 4026bd8:	25ad803a 	cmpltu	r22,r4,r22
 4026bdc:	b739883a 	add	fp,r22,fp
 4026be0:	40bfff84 	addi	r2,r8,-2
 4026be4:	bf2f883a 	add	r23,r23,fp
 4026be8:	202d883a 	mov	r22,r4
 4026bec:	003f9306 	br	4026a3c <__flash_rwdata_start+0xffff04e4>
 4026bf0:	013ff844 	movi	r4,-31
 4026bf4:	2085c83a 	sub	r2,r4,r2
 4026bf8:	8888d83a 	srl	r4,r17,r2
 4026bfc:	00800804 	movi	r2,32
 4026c00:	18802126 	beq	r3,r2,4026c88 <__divdf3+0x8d0>
 4026c04:	00801004 	movi	r2,64
 4026c08:	10c5c83a 	sub	r2,r2,r3
 4026c0c:	8884983a 	sll	r2,r17,r2
 4026c10:	1204b03a 	or	r2,r2,r8
 4026c14:	1004c03a 	cmpne	r2,r2,zero
 4026c18:	2084b03a 	or	r2,r4,r2
 4026c1c:	144001cc 	andi	r17,r2,7
 4026c20:	88000d1e 	bne	r17,zero,4026c58 <__divdf3+0x8a0>
 4026c24:	000b883a 	mov	r5,zero
 4026c28:	1024d0fa 	srli	r18,r2,3
 4026c2c:	98c0004c 	andi	r3,r19,1
 4026c30:	0005883a 	mov	r2,zero
 4026c34:	9464b03a 	or	r18,r18,r17
 4026c38:	003e4106 	br	4026540 <__flash_rwdata_start+0xfffeffe8>
 4026c3c:	1007883a 	mov	r3,r2
 4026c40:	0023883a 	mov	r17,zero
 4026c44:	880a927a 	slli	r5,r17,9
 4026c48:	1805883a 	mov	r2,r3
 4026c4c:	8822977a 	slli	r17,r17,29
 4026c50:	280ad33a 	srli	r5,r5,12
 4026c54:	003ff406 	br	4026c28 <__flash_rwdata_start+0xffff06d0>
 4026c58:	10c003cc 	andi	r3,r2,15
 4026c5c:	01000104 	movi	r4,4
 4026c60:	193ff626 	beq	r3,r4,4026c3c <__flash_rwdata_start+0xffff06e4>
 4026c64:	0023883a 	mov	r17,zero
 4026c68:	003fca06 	br	4026b94 <__flash_rwdata_start+0xffff063c>
 4026c6c:	813fd336 	bltu	r16,r4,4026bbc <__flash_rwdata_start+0xffff0664>
 4026c70:	1023883a 	mov	r17,r2
 4026c74:	003fa806 	br	4026b18 <__flash_rwdata_start+0xffff05c0>
 4026c78:	b0ffd636 	bltu	r22,r3,4026bd4 <__flash_rwdata_start+0xffff067c>
 4026c7c:	1011883a 	mov	r8,r2
 4026c80:	b0ff341e 	bne	r22,r3,4026954 <__flash_rwdata_start+0xffff03fc>
 4026c84:	003f3406 	br	4026958 <__flash_rwdata_start+0xffff0400>
 4026c88:	0005883a 	mov	r2,zero
 4026c8c:	003fe006 	br	4026c10 <__flash_rwdata_start+0xffff06b8>
 4026c90:	00800434 	movhi	r2,16
 4026c94:	89400234 	orhi	r5,r17,8
 4026c98:	10bfffc4 	addi	r2,r2,-1
 4026c9c:	b807883a 	mov	r3,r23
 4026ca0:	288a703a 	and	r5,r5,r2
 4026ca4:	4025883a 	mov	r18,r8
 4026ca8:	003e8206 	br	40266b4 <__flash_rwdata_start+0xffff015c>

04026cac <__floatsidf>:
 4026cac:	f811883a 	mov	r8,ra
 4026cb0:	40346e80 	call	40346e8 <_mcount>
 4026cb4:	403f883a 	mov	ra,r8
 4026cb8:	defffd04 	addi	sp,sp,-12
 4026cbc:	dfc00215 	stw	ra,8(sp)
 4026cc0:	dc400115 	stw	r17,4(sp)
 4026cc4:	dc000015 	stw	r16,0(sp)
 4026cc8:	20002b26 	beq	r4,zero,4026d78 <__floatsidf+0xcc>
 4026ccc:	2023883a 	mov	r17,r4
 4026cd0:	2020d7fa 	srli	r16,r4,31
 4026cd4:	20002d16 	blt	r4,zero,4026d8c <__floatsidf+0xe0>
 4026cd8:	8809883a 	mov	r4,r17
 4026cdc:	402768c0 	call	402768c <__clzsi2>
 4026ce0:	01410784 	movi	r5,1054
 4026ce4:	288bc83a 	sub	r5,r5,r2
 4026ce8:	01010cc4 	movi	r4,1075
 4026cec:	2149c83a 	sub	r4,r4,r5
 4026cf0:	00c007c4 	movi	r3,31
 4026cf4:	1900160e 	bge	r3,r4,4026d50 <__floatsidf+0xa4>
 4026cf8:	00c104c4 	movi	r3,1043
 4026cfc:	1947c83a 	sub	r3,r3,r5
 4026d00:	88c6983a 	sll	r3,r17,r3
 4026d04:	00800434 	movhi	r2,16
 4026d08:	10bfffc4 	addi	r2,r2,-1
 4026d0c:	1886703a 	and	r3,r3,r2
 4026d10:	2941ffcc 	andi	r5,r5,2047
 4026d14:	800d883a 	mov	r6,r16
 4026d18:	0005883a 	mov	r2,zero
 4026d1c:	280a953a 	slli	r5,r5,20
 4026d20:	31803fcc 	andi	r6,r6,255
 4026d24:	01000434 	movhi	r4,16
 4026d28:	300c97fa 	slli	r6,r6,31
 4026d2c:	213fffc4 	addi	r4,r4,-1
 4026d30:	1906703a 	and	r3,r3,r4
 4026d34:	1946b03a 	or	r3,r3,r5
 4026d38:	1986b03a 	or	r3,r3,r6
 4026d3c:	dfc00217 	ldw	ra,8(sp)
 4026d40:	dc400117 	ldw	r17,4(sp)
 4026d44:	dc000017 	ldw	r16,0(sp)
 4026d48:	dec00304 	addi	sp,sp,12
 4026d4c:	f800283a 	ret
 4026d50:	00c002c4 	movi	r3,11
 4026d54:	1887c83a 	sub	r3,r3,r2
 4026d58:	88c6d83a 	srl	r3,r17,r3
 4026d5c:	8904983a 	sll	r2,r17,r4
 4026d60:	01000434 	movhi	r4,16
 4026d64:	213fffc4 	addi	r4,r4,-1
 4026d68:	2941ffcc 	andi	r5,r5,2047
 4026d6c:	1906703a 	and	r3,r3,r4
 4026d70:	800d883a 	mov	r6,r16
 4026d74:	003fe906 	br	4026d1c <__flash_rwdata_start+0xffff07c4>
 4026d78:	000d883a 	mov	r6,zero
 4026d7c:	000b883a 	mov	r5,zero
 4026d80:	0007883a 	mov	r3,zero
 4026d84:	0005883a 	mov	r2,zero
 4026d88:	003fe406 	br	4026d1c <__flash_rwdata_start+0xffff07c4>
 4026d8c:	0123c83a 	sub	r17,zero,r4
 4026d90:	003fd106 	br	4026cd8 <__flash_rwdata_start+0xffff0780>

04026d94 <__extendsfdf2>:
 4026d94:	f811883a 	mov	r8,ra
 4026d98:	40346e80 	call	40346e8 <_mcount>
 4026d9c:	403f883a 	mov	ra,r8
 4026da0:	defffd04 	addi	sp,sp,-12
 4026da4:	dfc00215 	stw	ra,8(sp)
 4026da8:	dc400115 	stw	r17,4(sp)
 4026dac:	dc000015 	stw	r16,0(sp)
 4026db0:	200ad5fa 	srli	r5,r4,23
 4026db4:	04402034 	movhi	r17,128
 4026db8:	8c7fffc4 	addi	r17,r17,-1
 4026dbc:	29403fcc 	andi	r5,r5,255
 4026dc0:	29800044 	addi	r6,r5,1
 4026dc4:	31803fcc 	andi	r6,r6,255
 4026dc8:	00800044 	movi	r2,1
 4026dcc:	8922703a 	and	r17,r17,r4
 4026dd0:	2020d7fa 	srli	r16,r4,31
 4026dd4:	1180110e 	bge	r2,r6,4026e1c <__extendsfdf2+0x88>
 4026dd8:	880cd0fa 	srli	r6,r17,3
 4026ddc:	8822977a 	slli	r17,r17,29
 4026de0:	2940e004 	addi	r5,r5,896
 4026de4:	2941ffcc 	andi	r5,r5,2047
 4026de8:	2804953a 	slli	r2,r5,20
 4026dec:	01400434 	movhi	r5,16
 4026df0:	800697fa 	slli	r3,r16,31
 4026df4:	297fffc4 	addi	r5,r5,-1
 4026df8:	314a703a 	and	r5,r6,r5
 4026dfc:	288ab03a 	or	r5,r5,r2
 4026e00:	28c6b03a 	or	r3,r5,r3
 4026e04:	8805883a 	mov	r2,r17
 4026e08:	dfc00217 	ldw	ra,8(sp)
 4026e0c:	dc400117 	ldw	r17,4(sp)
 4026e10:	dc000017 	ldw	r16,0(sp)
 4026e14:	dec00304 	addi	sp,sp,12
 4026e18:	f800283a 	ret
 4026e1c:	2800111e 	bne	r5,zero,4026e64 <__extendsfdf2+0xd0>
 4026e20:	88001c26 	beq	r17,zero,4026e94 <__extendsfdf2+0x100>
 4026e24:	8809883a 	mov	r4,r17
 4026e28:	402768c0 	call	402768c <__clzsi2>
 4026e2c:	00c00284 	movi	r3,10
 4026e30:	18801b16 	blt	r3,r2,4026ea0 <__extendsfdf2+0x10c>
 4026e34:	018002c4 	movi	r6,11
 4026e38:	308dc83a 	sub	r6,r6,r2
 4026e3c:	11000544 	addi	r4,r2,21
 4026e40:	8986d83a 	srl	r3,r17,r6
 4026e44:	8922983a 	sll	r17,r17,r4
 4026e48:	0180e244 	movi	r6,905
 4026e4c:	01400434 	movhi	r5,16
 4026e50:	3085c83a 	sub	r2,r6,r2
 4026e54:	297fffc4 	addi	r5,r5,-1
 4026e58:	194c703a 	and	r6,r3,r5
 4026e5c:	1141ffcc 	andi	r5,r2,2047
 4026e60:	003fe006 	br	4026de4 <__flash_rwdata_start+0xffff088c>
 4026e64:	88000826 	beq	r17,zero,4026e88 <__extendsfdf2+0xf4>
 4026e68:	880cd0fa 	srli	r6,r17,3
 4026e6c:	00800434 	movhi	r2,16
 4026e70:	10bfffc4 	addi	r2,r2,-1
 4026e74:	31800234 	orhi	r6,r6,8
 4026e78:	8822977a 	slli	r17,r17,29
 4026e7c:	308c703a 	and	r6,r6,r2
 4026e80:	0141ffc4 	movi	r5,2047
 4026e84:	003fd706 	br	4026de4 <__flash_rwdata_start+0xffff088c>
 4026e88:	0141ffc4 	movi	r5,2047
 4026e8c:	000d883a 	mov	r6,zero
 4026e90:	003fd406 	br	4026de4 <__flash_rwdata_start+0xffff088c>
 4026e94:	000b883a 	mov	r5,zero
 4026e98:	000d883a 	mov	r6,zero
 4026e9c:	003fd106 	br	4026de4 <__flash_rwdata_start+0xffff088c>
 4026ea0:	11bffd44 	addi	r6,r2,-11
 4026ea4:	8986983a 	sll	r3,r17,r6
 4026ea8:	0023883a 	mov	r17,zero
 4026eac:	003fe606 	br	4026e48 <__flash_rwdata_start+0xffff08f0>

04026eb0 <__truncdfsf2>:
 4026eb0:	f811883a 	mov	r8,ra
 4026eb4:	40346e80 	call	40346e8 <_mcount>
 4026eb8:	403f883a 	mov	ra,r8
 4026ebc:	01c00434 	movhi	r7,16
 4026ec0:	2810d53a 	srli	r8,r5,20
 4026ec4:	39ffffc4 	addi	r7,r7,-1
 4026ec8:	29ce703a 	and	r7,r5,r7
 4026ecc:	4201ffcc 	andi	r8,r8,2047
 4026ed0:	380e90fa 	slli	r7,r7,3
 4026ed4:	200cd77a 	srli	r6,r4,29
 4026ed8:	42400044 	addi	r9,r8,1
 4026edc:	4a41ffcc 	andi	r9,r9,2047
 4026ee0:	00c00044 	movi	r3,1
 4026ee4:	280ad7fa 	srli	r5,r5,31
 4026ee8:	31ceb03a 	or	r7,r6,r7
 4026eec:	200490fa 	slli	r2,r4,3
 4026ef0:	1a40230e 	bge	r3,r9,4026f80 <__truncdfsf2+0xd0>
 4026ef4:	40ff2004 	addi	r3,r8,-896
 4026ef8:	01803f84 	movi	r6,254
 4026efc:	30c01516 	blt	r6,r3,4026f54 <__truncdfsf2+0xa4>
 4026f00:	00c0380e 	bge	zero,r3,4026fe4 <__truncdfsf2+0x134>
 4026f04:	200c91ba 	slli	r6,r4,6
 4026f08:	380e90fa 	slli	r7,r7,3
 4026f0c:	1004d77a 	srli	r2,r2,29
 4026f10:	300cc03a 	cmpne	r6,r6,zero
 4026f14:	31ccb03a 	or	r6,r6,r7
 4026f18:	308cb03a 	or	r6,r6,r2
 4026f1c:	308001cc 	andi	r2,r6,7
 4026f20:	10000426 	beq	r2,zero,4026f34 <__truncdfsf2+0x84>
 4026f24:	308003cc 	andi	r2,r6,15
 4026f28:	01000104 	movi	r4,4
 4026f2c:	11000126 	beq	r2,r4,4026f34 <__truncdfsf2+0x84>
 4026f30:	31800104 	addi	r6,r6,4
 4026f34:	3081002c 	andhi	r2,r6,1024
 4026f38:	10001626 	beq	r2,zero,4026f94 <__truncdfsf2+0xe4>
 4026f3c:	18c00044 	addi	r3,r3,1
 4026f40:	00803fc4 	movi	r2,255
 4026f44:	18800326 	beq	r3,r2,4026f54 <__truncdfsf2+0xa4>
 4026f48:	300c91ba 	slli	r6,r6,6
 4026f4c:	300cd27a 	srli	r6,r6,9
 4026f50:	00000206 	br	4026f5c <__truncdfsf2+0xac>
 4026f54:	00ffffc4 	movi	r3,-1
 4026f58:	000d883a 	mov	r6,zero
 4026f5c:	18c03fcc 	andi	r3,r3,255
 4026f60:	180895fa 	slli	r4,r3,23
 4026f64:	00c02034 	movhi	r3,128
 4026f68:	280a97fa 	slli	r5,r5,31
 4026f6c:	18ffffc4 	addi	r3,r3,-1
 4026f70:	30c6703a 	and	r3,r6,r3
 4026f74:	1906b03a 	or	r3,r3,r4
 4026f78:	1944b03a 	or	r2,r3,r5
 4026f7c:	f800283a 	ret
 4026f80:	40000b1e 	bne	r8,zero,4026fb0 <__truncdfsf2+0x100>
 4026f84:	388cb03a 	or	r6,r7,r2
 4026f88:	0007883a 	mov	r3,zero
 4026f8c:	30000426 	beq	r6,zero,4026fa0 <__truncdfsf2+0xf0>
 4026f90:	01800144 	movi	r6,5
 4026f94:	00803fc4 	movi	r2,255
 4026f98:	300cd0fa 	srli	r6,r6,3
 4026f9c:	18800a26 	beq	r3,r2,4026fc8 <__truncdfsf2+0x118>
 4026fa0:	00802034 	movhi	r2,128
 4026fa4:	10bfffc4 	addi	r2,r2,-1
 4026fa8:	308c703a 	and	r6,r6,r2
 4026fac:	003feb06 	br	4026f5c <__flash_rwdata_start+0xffff0a04>
 4026fb0:	3888b03a 	or	r4,r7,r2
 4026fb4:	203fe726 	beq	r4,zero,4026f54 <__flash_rwdata_start+0xffff09fc>
 4026fb8:	380c90fa 	slli	r6,r7,3
 4026fbc:	00c03fc4 	movi	r3,255
 4026fc0:	31808034 	orhi	r6,r6,512
 4026fc4:	003fd506 	br	4026f1c <__flash_rwdata_start+0xffff09c4>
 4026fc8:	303fe226 	beq	r6,zero,4026f54 <__flash_rwdata_start+0xffff09fc>
 4026fcc:	00802034 	movhi	r2,128
 4026fd0:	31801034 	orhi	r6,r6,64
 4026fd4:	10bfffc4 	addi	r2,r2,-1
 4026fd8:	00ffffc4 	movi	r3,-1
 4026fdc:	308c703a 	and	r6,r6,r2
 4026fe0:	003fde06 	br	4026f5c <__flash_rwdata_start+0xffff0a04>
 4026fe4:	013ffa44 	movi	r4,-23
 4026fe8:	19000e16 	blt	r3,r4,4027024 <__truncdfsf2+0x174>
 4026fec:	01000784 	movi	r4,30
 4026ff0:	20c9c83a 	sub	r4,r4,r3
 4026ff4:	018007c4 	movi	r6,31
 4026ff8:	39c02034 	orhi	r7,r7,128
 4026ffc:	31000b16 	blt	r6,r4,402702c <__truncdfsf2+0x17c>
 4027000:	423f2084 	addi	r8,r8,-894
 4027004:	120c983a 	sll	r6,r2,r8
 4027008:	3a0e983a 	sll	r7,r7,r8
 402700c:	1104d83a 	srl	r2,r2,r4
 4027010:	300cc03a 	cmpne	r6,r6,zero
 4027014:	31ceb03a 	or	r7,r6,r7
 4027018:	388cb03a 	or	r6,r7,r2
 402701c:	0007883a 	mov	r3,zero
 4027020:	003fbe06 	br	4026f1c <__flash_rwdata_start+0xffff09c4>
 4027024:	0007883a 	mov	r3,zero
 4027028:	003fd906 	br	4026f90 <__flash_rwdata_start+0xffff0a38>
 402702c:	01bfff84 	movi	r6,-2
 4027030:	30cdc83a 	sub	r6,r6,r3
 4027034:	00c00804 	movi	r3,32
 4027038:	398cd83a 	srl	r6,r7,r6
 402703c:	20c00726 	beq	r4,r3,402705c <__truncdfsf2+0x1ac>
 4027040:	423f2884 	addi	r8,r8,-862
 4027044:	3a0e983a 	sll	r7,r7,r8
 4027048:	3884b03a 	or	r2,r7,r2
 402704c:	1004c03a 	cmpne	r2,r2,zero
 4027050:	118cb03a 	or	r6,r2,r6
 4027054:	0007883a 	mov	r3,zero
 4027058:	003fb006 	br	4026f1c <__flash_rwdata_start+0xffff09c4>
 402705c:	000f883a 	mov	r7,zero
 4027060:	003ff906 	br	4027048 <__flash_rwdata_start+0xffff0af0>

04027064 <_Unwind_ForcedUnwind_Phase2>:
 4027064:	f811883a 	mov	r8,ra
 4027068:	40346e80 	call	40346e8 <_mcount>
 402706c:	403f883a 	mov	ra,r8
 4027070:	defff404 	addi	sp,sp,-48
 4027074:	dfc00b15 	stw	ra,44(sp)
 4027078:	ddc00a15 	stw	r23,40(sp)
 402707c:	dd800915 	stw	r22,36(sp)
 4027080:	dd400815 	stw	r21,32(sp)
 4027084:	dd000715 	stw	r20,28(sp)
 4027088:	dcc00615 	stw	r19,24(sp)
 402708c:	dc800515 	stw	r18,20(sp)
 4027090:	dc400415 	stw	r17,16(sp)
 4027094:	dc000315 	stw	r16,12(sp)
 4027098:	05800034 	movhi	r22,0
 402709c:	2021883a 	mov	r16,r4
 40270a0:	2823883a 	mov	r17,r5
 40270a4:	24c00317 	ldw	r19,12(r4)
 40270a8:	25000417 	ldw	r20,16(r4)
 40270ac:	28c00017 	ldw	r3,0(r5)
 40270b0:	b5887c04 	addi	r22,r22,8688
 40270b4:	054001c4 	movi	r21,7
 40270b8:	05c00204 	movi	r23,8
 40270bc:	00001606 	br	4027118 <_Unwind_ForcedUnwind_Phase2+0xb4>
 40270c0:	81800017 	ldw	r6,0(r16)
 40270c4:	81c00117 	ldw	r7,4(r16)
 40270c8:	1c800617 	ldw	r18,24(r3)
 40270cc:	dd000215 	stw	r20,8(sp)
 40270d0:	dc400115 	stw	r17,4(sp)
 40270d4:	dc000015 	stw	r16,0(sp)
 40270d8:	983ee83a 	callr	r19
 40270dc:	01400284 	movi	r5,10
 40270e0:	01000044 	movi	r4,1
 40270e4:	1000241e 	bne	r2,zero,4027178 <_Unwind_ForcedUnwind_Phase2+0x114>
 40270e8:	90000726 	beq	r18,zero,4027108 <_Unwind_ForcedUnwind_Phase2+0xa4>
 40270ec:	81800017 	ldw	r6,0(r16)
 40270f0:	81c00117 	ldw	r7,4(r16)
 40270f4:	dc400115 	stw	r17,4(sp)
 40270f8:	dc000015 	stw	r16,0(sp)
 40270fc:	903ee83a 	callr	r18
 4027100:	15401f26 	beq	r2,r21,4027180 <_Unwind_ForcedUnwind_Phase2+0x11c>
 4027104:	15c01c1e 	bne	r2,r23,4027178 <_Unwind_ForcedUnwind_Phase2+0x114>
 4027108:	88800017 	ldw	r2,0(r17)
 402710c:	10c00017 	ldw	r3,0(r2)
 4027110:	b0c00015 	stw	r3,0(r22)
 4027114:	88c00015 	stw	r3,0(r17)
 4027118:	01400284 	movi	r5,10
 402711c:	01000044 	movi	r4,1
 4027120:	183fe71e 	bne	r3,zero,40270c0 <__flash_rwdata_start+0xffff0b68>
 4027124:	81800017 	ldw	r6,0(r16)
 4027128:	81c00117 	ldw	r7,4(r16)
 402712c:	01400684 	movi	r5,26
 4027130:	dd000215 	stw	r20,8(sp)
 4027134:	dc400115 	stw	r17,4(sp)
 4027138:	dc000015 	stw	r16,0(sp)
 402713c:	01000044 	movi	r4,1
 4027140:	983ee83a 	callr	r19
 4027144:	10000c1e 	bne	r2,zero,4027178 <_Unwind_ForcedUnwind_Phase2+0x114>
 4027148:	00800144 	movi	r2,5
 402714c:	dfc00b17 	ldw	ra,44(sp)
 4027150:	ddc00a17 	ldw	r23,40(sp)
 4027154:	dd800917 	ldw	r22,36(sp)
 4027158:	dd400817 	ldw	r21,32(sp)
 402715c:	dd000717 	ldw	r20,28(sp)
 4027160:	dcc00617 	ldw	r19,24(sp)
 4027164:	dc800517 	ldw	r18,20(sp)
 4027168:	dc400417 	ldw	r17,16(sp)
 402716c:	dc000317 	ldw	r16,12(sp)
 4027170:	dec00c04 	addi	sp,sp,48
 4027174:	f800283a 	ret
 4027178:	00800084 	movi	r2,2
 402717c:	003ff306 	br	402714c <__flash_rwdata_start+0xffff0bf4>
 4027180:	a805883a 	mov	r2,r21
 4027184:	003ff106 	br	402714c <__flash_rwdata_start+0xffff0bf4>

04027188 <_Unwind_RaiseException_Phase2>:
 4027188:	f811883a 	mov	r8,ra
 402718c:	40346e80 	call	40346e8 <_mcount>
 4027190:	403f883a 	mov	ra,r8
 4027194:	defff804 	addi	sp,sp,-32
 4027198:	dfc00715 	stw	ra,28(sp)
 402719c:	dd000615 	stw	r20,24(sp)
 40271a0:	dcc00515 	stw	r19,20(sp)
 40271a4:	dc800415 	stw	r18,16(sp)
 40271a8:	dc400315 	stw	r17,12(sp)
 40271ac:	dc000215 	stw	r16,8(sp)
 40271b0:	28c00017 	ldw	r3,0(r5)
 40271b4:	2823883a 	mov	r17,r5
 40271b8:	2021883a 	mov	r16,r4
 40271bc:	048001c4 	movi	r18,7
 40271c0:	04c00204 	movi	r19,8
 40271c4:	18001326 	beq	r3,zero,4027214 <_Unwind_RaiseException_Phase2+0x8c>
 40271c8:	81000417 	ldw	r4,16(r16)
 40271cc:	1a000617 	ldw	r8,24(r3)
 40271d0:	19001926 	beq	r3,r4,4027238 <_Unwind_RaiseException_Phase2+0xb0>
 40271d4:	40000c26 	beq	r8,zero,4027208 <_Unwind_RaiseException_Phase2+0x80>
 40271d8:	01400084 	movi	r5,2
 40271dc:	0029883a 	mov	r20,zero
 40271e0:	81800017 	ldw	r6,0(r16)
 40271e4:	81c00117 	ldw	r7,4(r16)
 40271e8:	01000044 	movi	r4,1
 40271ec:	dc400115 	stw	r17,4(sp)
 40271f0:	dc000015 	stw	r16,0(sp)
 40271f4:	403ee83a 	callr	r8
 40271f8:	14801326 	beq	r2,r18,4027248 <_Unwind_RaiseException_Phase2+0xc0>
 40271fc:	14c0051e 	bne	r2,r19,4027214 <_Unwind_RaiseException_Phase2+0x8c>
 4027200:	a000131e 	bne	r20,zero,4027250 <_Unwind_RaiseException_Phase2+0xc8>
 4027204:	88c00017 	ldw	r3,0(r17)
 4027208:	18c00017 	ldw	r3,0(r3)
 402720c:	88c00015 	stw	r3,0(r17)
 4027210:	183fed1e 	bne	r3,zero,40271c8 <__flash_rwdata_start+0xffff0c70>
 4027214:	00800084 	movi	r2,2
 4027218:	dfc00717 	ldw	ra,28(sp)
 402721c:	dd000617 	ldw	r20,24(sp)
 4027220:	dcc00517 	ldw	r19,20(sp)
 4027224:	dc800417 	ldw	r18,16(sp)
 4027228:	dc400317 	ldw	r17,12(sp)
 402722c:	dc000217 	ldw	r16,8(sp)
 4027230:	dec00804 	addi	sp,sp,32
 4027234:	f800283a 	ret
 4027238:	40000526 	beq	r8,zero,4027250 <_Unwind_RaiseException_Phase2+0xc8>
 402723c:	01400184 	movi	r5,6
 4027240:	05000104 	movi	r20,4
 4027244:	003fe606 	br	40271e0 <__flash_rwdata_start+0xffff0c88>
 4027248:	9005883a 	mov	r2,r18
 402724c:	003ff206 	br	4027218 <__flash_rwdata_start+0xffff0cc0>
 4027250:	40276fc0 	call	40276fc <abort>

04027254 <uw_install_context.isra.1>:
 4027254:	f811883a 	mov	r8,ra
 4027258:	40346e80 	call	40346e8 <_mcount>
 402725c:	403f883a 	mov	ra,r8
 4027260:	deffff04 	addi	sp,sp,-4
 4027264:	df000015 	stw	fp,0(sp)
 4027268:	d839883a 	mov	fp,sp
 402726c:	20c00017 	ldw	r3,0(r4)
 4027270:	01400034 	movhi	r5,0
 4027274:	29487c04 	addi	r5,r5,8688
 4027278:	19000917 	ldw	r4,36(r3)
 402727c:	18800804 	addi	r2,r3,32
 4027280:	28c00015 	stw	r3,0(r5)
 4027284:	17000017 	ldw	fp,0(r2)
 4027288:	1ec00a17 	ldw	sp,40(r3)
 402728c:	2000683a 	jmp	r4

04027290 <_Unwind_SjLj_Register>:
 4027290:	f811883a 	mov	r8,ra
 4027294:	40346e80 	call	40346e8 <_mcount>
 4027298:	403f883a 	mov	ra,r8
 402729c:	00800034 	movhi	r2,0
 40272a0:	10887c04 	addi	r2,r2,8688
 40272a4:	10c00017 	ldw	r3,0(r2)
 40272a8:	11000015 	stw	r4,0(r2)
 40272ac:	20c00015 	stw	r3,0(r4)
 40272b0:	f800283a 	ret

040272b4 <_Unwind_SjLj_Unregister>:
 40272b4:	f811883a 	mov	r8,ra
 40272b8:	40346e80 	call	40346e8 <_mcount>
 40272bc:	403f883a 	mov	ra,r8
 40272c0:	20c00017 	ldw	r3,0(r4)
 40272c4:	00800034 	movhi	r2,0
 40272c8:	10887c04 	addi	r2,r2,8688
 40272cc:	10c00015 	stw	r3,0(r2)
 40272d0:	f800283a 	ret

040272d4 <_Unwind_GetGR>:
 40272d4:	f811883a 	mov	r8,ra
 40272d8:	40346e80 	call	40346e8 <_mcount>
 40272dc:	403f883a 	mov	ra,r8
 40272e0:	20800017 	ldw	r2,0(r4)
 40272e4:	29400084 	addi	r5,r5,2
 40272e8:	294b883a 	add	r5,r5,r5
 40272ec:	294b883a 	add	r5,r5,r5
 40272f0:	114b883a 	add	r5,r2,r5
 40272f4:	28800017 	ldw	r2,0(r5)
 40272f8:	f800283a 	ret

040272fc <_Unwind_GetCFA>:
 40272fc:	f811883a 	mov	r8,ra
 4027300:	40346e80 	call	40346e8 <_mcount>
 4027304:	403f883a 	mov	ra,r8
 4027308:	20800017 	ldw	r2,0(r4)
 402730c:	10000226 	beq	r2,zero,4027318 <_Unwind_GetCFA+0x1c>
 4027310:	10800a17 	ldw	r2,40(r2)
 4027314:	f800283a 	ret
 4027318:	0005883a 	mov	r2,zero
 402731c:	f800283a 	ret

04027320 <_Unwind_SetGR>:
 4027320:	f811883a 	mov	r8,ra
 4027324:	40346e80 	call	40346e8 <_mcount>
 4027328:	403f883a 	mov	ra,r8
 402732c:	20800017 	ldw	r2,0(r4)
 4027330:	29400084 	addi	r5,r5,2
 4027334:	294b883a 	add	r5,r5,r5
 4027338:	294b883a 	add	r5,r5,r5
 402733c:	114b883a 	add	r5,r2,r5
 4027340:	29800015 	stw	r6,0(r5)
 4027344:	f800283a 	ret

04027348 <_Unwind_GetIP>:
 4027348:	f811883a 	mov	r8,ra
 402734c:	40346e80 	call	40346e8 <_mcount>
 4027350:	403f883a 	mov	ra,r8
 4027354:	20800017 	ldw	r2,0(r4)
 4027358:	10800117 	ldw	r2,4(r2)
 402735c:	10800044 	addi	r2,r2,1
 4027360:	f800283a 	ret

04027364 <_Unwind_GetIPInfo>:
 4027364:	f811883a 	mov	r8,ra
 4027368:	40346e80 	call	40346e8 <_mcount>
 402736c:	403f883a 	mov	ra,r8
 4027370:	20800017 	ldw	r2,0(r4)
 4027374:	28000015 	stw	zero,0(r5)
 4027378:	10000326 	beq	r2,zero,4027388 <_Unwind_GetIPInfo+0x24>
 402737c:	10800117 	ldw	r2,4(r2)
 4027380:	10800044 	addi	r2,r2,1
 4027384:	f800283a 	ret
 4027388:	0005883a 	mov	r2,zero
 402738c:	f800283a 	ret

04027390 <_Unwind_SetIP>:
 4027390:	f811883a 	mov	r8,ra
 4027394:	40346e80 	call	40346e8 <_mcount>
 4027398:	403f883a 	mov	ra,r8
 402739c:	20800017 	ldw	r2,0(r4)
 40273a0:	297fffc4 	addi	r5,r5,-1
 40273a4:	11400115 	stw	r5,4(r2)
 40273a8:	f800283a 	ret

040273ac <_Unwind_GetLanguageSpecificData>:
 40273ac:	f811883a 	mov	r8,ra
 40273b0:	40346e80 	call	40346e8 <_mcount>
 40273b4:	403f883a 	mov	ra,r8
 40273b8:	20800017 	ldw	r2,0(r4)
 40273bc:	10800717 	ldw	r2,28(r2)
 40273c0:	f800283a 	ret

040273c4 <_Unwind_GetRegionStart>:
 40273c4:	f811883a 	mov	r8,ra
 40273c8:	40346e80 	call	40346e8 <_mcount>
 40273cc:	403f883a 	mov	ra,r8
 40273d0:	0005883a 	mov	r2,zero
 40273d4:	f800283a 	ret

040273d8 <_Unwind_FindEnclosingFunction>:
 40273d8:	f811883a 	mov	r8,ra
 40273dc:	40346e80 	call	40346e8 <_mcount>
 40273e0:	403f883a 	mov	ra,r8
 40273e4:	0005883a 	mov	r2,zero
 40273e8:	f800283a 	ret

040273ec <_Unwind_GetDataRelBase>:
 40273ec:	f811883a 	mov	r8,ra
 40273f0:	40346e80 	call	40346e8 <_mcount>
 40273f4:	403f883a 	mov	ra,r8
 40273f8:	0005883a 	mov	r2,zero
 40273fc:	f800283a 	ret

04027400 <_Unwind_GetTextRelBase>:
 4027400:	f811883a 	mov	r8,ra
 4027404:	40346e80 	call	40346e8 <_mcount>
 4027408:	403f883a 	mov	ra,r8
 402740c:	0005883a 	mov	r2,zero
 4027410:	f800283a 	ret

04027414 <_Unwind_SjLj_RaiseException>:
 4027414:	f811883a 	mov	r8,ra
 4027418:	40346e80 	call	40346e8 <_mcount>
 402741c:	403f883a 	mov	ra,r8
 4027420:	defff804 	addi	sp,sp,-32
 4027424:	dfc00715 	stw	ra,28(sp)
 4027428:	dcc00615 	stw	r19,24(sp)
 402742c:	dc800515 	stw	r18,20(sp)
 4027430:	dc400415 	stw	r17,16(sp)
 4027434:	dc000315 	stw	r16,12(sp)
 4027438:	00800034 	movhi	r2,0
 402743c:	10887c04 	addi	r2,r2,8688
 4027440:	14800017 	ldw	r18,0(r2)
 4027444:	dc800215 	stw	r18,8(sp)
 4027448:	90001426 	beq	r18,zero,402749c <_Unwind_SjLj_RaiseException+0x88>
 402744c:	2021883a 	mov	r16,r4
 4027450:	9005883a 	mov	r2,r18
 4027454:	04400184 	movi	r17,6
 4027458:	04c00204 	movi	r19,8
 402745c:	10800617 	ldw	r2,24(r2)
 4027460:	10000a26 	beq	r2,zero,402748c <_Unwind_SjLj_RaiseException+0x78>
 4027464:	81800017 	ldw	r6,0(r16)
 4027468:	81c00117 	ldw	r7,4(r16)
 402746c:	01400044 	movi	r5,1
 4027470:	d8c00204 	addi	r3,sp,8
 4027474:	d8c00115 	stw	r3,4(sp)
 4027478:	dc000015 	stw	r16,0(sp)
 402747c:	2809883a 	mov	r4,r5
 4027480:	103ee83a 	callr	r2
 4027484:	14400d26 	beq	r2,r17,40274bc <_Unwind_SjLj_RaiseException+0xa8>
 4027488:	14c0171e 	bne	r2,r19,40274e8 <_Unwind_SjLj_RaiseException+0xd4>
 402748c:	d8800217 	ldw	r2,8(sp)
 4027490:	10800017 	ldw	r2,0(r2)
 4027494:	d8800215 	stw	r2,8(sp)
 4027498:	103ff01e 	bne	r2,zero,402745c <__flash_rwdata_start+0xffff0f04>
 402749c:	00800144 	movi	r2,5
 40274a0:	dfc00717 	ldw	ra,28(sp)
 40274a4:	dcc00617 	ldw	r19,24(sp)
 40274a8:	dc800517 	ldw	r18,20(sp)
 40274ac:	dc400417 	ldw	r17,16(sp)
 40274b0:	dc000317 	ldw	r16,12(sp)
 40274b4:	dec00804 	addi	sp,sp,32
 40274b8:	f800283a 	ret
 40274bc:	d8800217 	ldw	r2,8(sp)
 40274c0:	80000315 	stw	zero,12(r16)
 40274c4:	d9400204 	addi	r5,sp,8
 40274c8:	80800415 	stw	r2,16(r16)
 40274cc:	8009883a 	mov	r4,r16
 40274d0:	dc800215 	stw	r18,8(sp)
 40274d4:	40271880 	call	4027188 <_Unwind_RaiseException_Phase2>
 40274d8:	00c001c4 	movi	r3,7
 40274dc:	10fff01e 	bne	r2,r3,40274a0 <__flash_rwdata_start+0xffff0f48>
 40274e0:	d9000204 	addi	r4,sp,8
 40274e4:	40272540 	call	4027254 <uw_install_context.isra.1>
 40274e8:	008000c4 	movi	r2,3
 40274ec:	003fec06 	br	40274a0 <__flash_rwdata_start+0xffff0f48>

040274f0 <_Unwind_SjLj_ForcedUnwind>:
 40274f0:	f811883a 	mov	r8,ra
 40274f4:	40346e80 	call	40346e8 <_mcount>
 40274f8:	403f883a 	mov	ra,r8
 40274fc:	defffe04 	addi	sp,sp,-8
 4027500:	dfc00115 	stw	ra,4(sp)
 4027504:	00c00034 	movhi	r3,0
 4027508:	18c87c04 	addi	r3,r3,8688
 402750c:	18c00017 	ldw	r3,0(r3)
 4027510:	21400315 	stw	r5,12(r4)
 4027514:	21800415 	stw	r6,16(r4)
 4027518:	d80b883a 	mov	r5,sp
 402751c:	d8c00015 	stw	r3,0(sp)
 4027520:	40270640 	call	4027064 <_Unwind_ForcedUnwind_Phase2>
 4027524:	00c001c4 	movi	r3,7
 4027528:	10c00326 	beq	r2,r3,4027538 <_Unwind_SjLj_ForcedUnwind+0x48>
 402752c:	dfc00117 	ldw	ra,4(sp)
 4027530:	dec00204 	addi	sp,sp,8
 4027534:	f800283a 	ret
 4027538:	d809883a 	mov	r4,sp
 402753c:	40272540 	call	4027254 <uw_install_context.isra.1>

04027540 <_Unwind_SjLj_Resume>:
 4027540:	f811883a 	mov	r8,ra
 4027544:	40346e80 	call	40346e8 <_mcount>
 4027548:	403f883a 	mov	ra,r8
 402754c:	defffe04 	addi	sp,sp,-8
 4027550:	dfc00115 	stw	ra,4(sp)
 4027554:	00c00034 	movhi	r3,0
 4027558:	18c87c04 	addi	r3,r3,8688
 402755c:	18c00017 	ldw	r3,0(r3)
 4027560:	20800317 	ldw	r2,12(r4)
 4027564:	d80b883a 	mov	r5,sp
 4027568:	d8c00015 	stw	r3,0(sp)
 402756c:	1000041e 	bne	r2,zero,4027580 <_Unwind_SjLj_Resume+0x40>
 4027570:	40271880 	call	4027188 <_Unwind_RaiseException_Phase2>
 4027574:	00c001c4 	movi	r3,7
 4027578:	10c00326 	beq	r2,r3,4027588 <_Unwind_SjLj_Resume+0x48>
 402757c:	40276fc0 	call	40276fc <abort>
 4027580:	40270640 	call	4027064 <_Unwind_ForcedUnwind_Phase2>
 4027584:	003ffb06 	br	4027574 <__flash_rwdata_start+0xffff101c>
 4027588:	d809883a 	mov	r4,sp
 402758c:	40272540 	call	4027254 <uw_install_context.isra.1>

04027590 <_Unwind_SjLj_Resume_or_Rethrow>:
 4027590:	f811883a 	mov	r8,ra
 4027594:	40346e80 	call	40346e8 <_mcount>
 4027598:	403f883a 	mov	ra,r8
 402759c:	defffe04 	addi	sp,sp,-8
 40275a0:	dfc00115 	stw	ra,4(sp)
 40275a4:	20800317 	ldw	r2,12(r4)
 40275a8:	1000041e 	bne	r2,zero,40275bc <_Unwind_SjLj_Resume_or_Rethrow+0x2c>
 40275ac:	40274140 	call	4027414 <_Unwind_SjLj_RaiseException>
 40275b0:	dfc00117 	ldw	ra,4(sp)
 40275b4:	dec00204 	addi	sp,sp,8
 40275b8:	f800283a 	ret
 40275bc:	00800034 	movhi	r2,0
 40275c0:	10887c04 	addi	r2,r2,8688
 40275c4:	10800017 	ldw	r2,0(r2)
 40275c8:	d80b883a 	mov	r5,sp
 40275cc:	d8800015 	stw	r2,0(sp)
 40275d0:	40270640 	call	4027064 <_Unwind_ForcedUnwind_Phase2>
 40275d4:	00c001c4 	movi	r3,7
 40275d8:	10c00126 	beq	r2,r3,40275e0 <_Unwind_SjLj_Resume_or_Rethrow+0x50>
 40275dc:	40276fc0 	call	40276fc <abort>
 40275e0:	d809883a 	mov	r4,sp
 40275e4:	40272540 	call	4027254 <uw_install_context.isra.1>

040275e8 <_Unwind_DeleteException>:
 40275e8:	f811883a 	mov	r8,ra
 40275ec:	40346e80 	call	40346e8 <_mcount>
 40275f0:	403f883a 	mov	ra,r8
 40275f4:	20800217 	ldw	r2,8(r4)
 40275f8:	10000326 	beq	r2,zero,4027608 <_Unwind_DeleteException+0x20>
 40275fc:	200b883a 	mov	r5,r4
 4027600:	01000044 	movi	r4,1
 4027604:	1000683a 	jmp	r2
 4027608:	f800283a 	ret

0402760c <_Unwind_Backtrace>:
 402760c:	f811883a 	mov	r8,ra
 4027610:	40346e80 	call	40346e8 <_mcount>
 4027614:	403f883a 	mov	ra,r8
 4027618:	defffc04 	addi	sp,sp,-16
 402761c:	dfc00315 	stw	ra,12(sp)
 4027620:	dc400215 	stw	r17,8(sp)
 4027624:	dc000115 	stw	r16,4(sp)
 4027628:	00800034 	movhi	r2,0
 402762c:	10887c04 	addi	r2,r2,8688
 4027630:	10800017 	ldw	r2,0(r2)
 4027634:	2023883a 	mov	r17,r4
 4027638:	2821883a 	mov	r16,r5
 402763c:	d8800015 	stw	r2,0(sp)
 4027640:	00000506 	br	4027658 <_Unwind_Backtrace+0x4c>
 4027644:	883ee83a 	callr	r17
 4027648:	10000e1e 	bne	r2,zero,4027684 <_Unwind_Backtrace+0x78>
 402764c:	d8800017 	ldw	r2,0(sp)
 4027650:	10800017 	ldw	r2,0(r2)
 4027654:	d8800015 	stw	r2,0(sp)
 4027658:	800b883a 	mov	r5,r16
 402765c:	d809883a 	mov	r4,sp
 4027660:	103ff81e 	bne	r2,zero,4027644 <__flash_rwdata_start+0xffff10ec>
 4027664:	883ee83a 	callr	r17
 4027668:	1000061e 	bne	r2,zero,4027684 <_Unwind_Backtrace+0x78>
 402766c:	00800144 	movi	r2,5
 4027670:	dfc00317 	ldw	ra,12(sp)
 4027674:	dc400217 	ldw	r17,8(sp)
 4027678:	dc000117 	ldw	r16,4(sp)
 402767c:	dec00404 	addi	sp,sp,16
 4027680:	f800283a 	ret
 4027684:	008000c4 	movi	r2,3
 4027688:	003ff906 	br	4027670 <__flash_rwdata_start+0xffff1118>

0402768c <__clzsi2>:
 402768c:	f811883a 	mov	r8,ra
 4027690:	40346e80 	call	40346e8 <_mcount>
 4027694:	403f883a 	mov	ra,r8
 4027698:	00bfffd4 	movui	r2,65535
 402769c:	11000536 	bltu	r2,r4,40276b4 <__clzsi2+0x28>
 40276a0:	00803fc4 	movi	r2,255
 40276a4:	11000f36 	bltu	r2,r4,40276e4 <__clzsi2+0x58>
 40276a8:	00800804 	movi	r2,32
 40276ac:	0007883a 	mov	r3,zero
 40276b0:	00000506 	br	40276c8 <__clzsi2+0x3c>
 40276b4:	00804034 	movhi	r2,256
 40276b8:	10bfffc4 	addi	r2,r2,-1
 40276bc:	11000c2e 	bgeu	r2,r4,40276f0 <__clzsi2+0x64>
 40276c0:	00800204 	movi	r2,8
 40276c4:	00c00604 	movi	r3,24
 40276c8:	20c8d83a 	srl	r4,r4,r3
 40276cc:	00c00034 	movhi	r3,0
 40276d0:	18c0e7c4 	addi	r3,r3,927
 40276d4:	1909883a 	add	r4,r3,r4
 40276d8:	20c00003 	ldbu	r3,0(r4)
 40276dc:	10c5c83a 	sub	r2,r2,r3
 40276e0:	f800283a 	ret
 40276e4:	00800604 	movi	r2,24
 40276e8:	00c00204 	movi	r3,8
 40276ec:	003ff606 	br	40276c8 <__flash_rwdata_start+0xffff1170>
 40276f0:	00800404 	movi	r2,16
 40276f4:	1007883a 	mov	r3,r2
 40276f8:	003ff306 	br	40276c8 <__flash_rwdata_start+0xffff1170>

040276fc <abort>:
 40276fc:	f811883a 	mov	r8,ra
 4027700:	40346e80 	call	40346e8 <_mcount>
 4027704:	403f883a 	mov	ra,r8
 4027708:	deffff04 	addi	sp,sp,-4
 402770c:	dfc00015 	stw	ra,0(sp)
 4027710:	01000184 	movi	r4,6
 4027714:	40285c80 	call	40285c8 <raise>
 4027718:	01000044 	movi	r4,1
 402771c:	403409c0 	call	403409c <_exit>

04027720 <malloc>:
 4027720:	f811883a 	mov	r8,ra
 4027724:	40346e80 	call	40346e8 <_mcount>
 4027728:	403f883a 	mov	ra,r8
 402772c:	00800034 	movhi	r2,0
 4027730:	10886904 	addi	r2,r2,8612
 4027734:	200b883a 	mov	r5,r4
 4027738:	11000017 	ldw	r4,0(r2)
 402773c:	40277601 	jmpi	4027760 <_malloc_r>

04027740 <free>:
 4027740:	f811883a 	mov	r8,ra
 4027744:	40346e80 	call	40346e8 <_mcount>
 4027748:	403f883a 	mov	ra,r8
 402774c:	00800034 	movhi	r2,0
 4027750:	10886904 	addi	r2,r2,8612
 4027754:	200b883a 	mov	r5,r4
 4027758:	11000017 	ldw	r4,0(r2)
 402775c:	402cd7c1 	jmpi	402cd7c <_free_r>

04027760 <_malloc_r>:
 4027760:	f811883a 	mov	r8,ra
 4027764:	40346e80 	call	40346e8 <_mcount>
 4027768:	403f883a 	mov	ra,r8
 402776c:	defff504 	addi	sp,sp,-44
 4027770:	dfc00a15 	stw	ra,40(sp)
 4027774:	df000915 	stw	fp,36(sp)
 4027778:	ddc00815 	stw	r23,32(sp)
 402777c:	dd800715 	stw	r22,28(sp)
 4027780:	dd400615 	stw	r21,24(sp)
 4027784:	dd000515 	stw	r20,20(sp)
 4027788:	dcc00415 	stw	r19,16(sp)
 402778c:	dc800315 	stw	r18,12(sp)
 4027790:	dc400215 	stw	r17,8(sp)
 4027794:	dc000115 	stw	r16,4(sp)
 4027798:	00c00584 	movi	r3,22
 402779c:	288002c4 	addi	r2,r5,11
 40277a0:	2025883a 	mov	r18,r4
 40277a4:	18807f2e 	bgeu	r3,r2,40279a4 <_malloc_r+0x244>
 40277a8:	047ffe04 	movi	r17,-8
 40277ac:	1462703a 	and	r17,r2,r17
 40277b0:	8800a316 	blt	r17,zero,4027a40 <_malloc_r+0x2e0>
 40277b4:	8940a236 	bltu	r17,r5,4027a40 <_malloc_r+0x2e0>
 40277b8:	40346c80 	call	40346c8 <__malloc_lock>
 40277bc:	00807dc4 	movi	r2,503
 40277c0:	1441e92e 	bgeu	r2,r17,4027f68 <_malloc_r+0x808>
 40277c4:	8804d27a 	srli	r2,r17,9
 40277c8:	1000a126 	beq	r2,zero,4027a50 <_malloc_r+0x2f0>
 40277cc:	00c00104 	movi	r3,4
 40277d0:	18811e36 	bltu	r3,r2,4027c4c <_malloc_r+0x4ec>
 40277d4:	8804d1ba 	srli	r2,r17,6
 40277d8:	12000e44 	addi	r8,r2,57
 40277dc:	11c00e04 	addi	r7,r2,56
 40277e0:	4209883a 	add	r4,r8,r8
 40277e4:	04c00034 	movhi	r19,0
 40277e8:	2109883a 	add	r4,r4,r4
 40277ec:	9cc1a204 	addi	r19,r19,1672
 40277f0:	2109883a 	add	r4,r4,r4
 40277f4:	9909883a 	add	r4,r19,r4
 40277f8:	24000117 	ldw	r16,4(r4)
 40277fc:	213ffe04 	addi	r4,r4,-8
 4027800:	24009726 	beq	r4,r16,4027a60 <_malloc_r+0x300>
 4027804:	80800117 	ldw	r2,4(r16)
 4027808:	01bfff04 	movi	r6,-4
 402780c:	014003c4 	movi	r5,15
 4027810:	1184703a 	and	r2,r2,r6
 4027814:	1447c83a 	sub	r3,r2,r17
 4027818:	28c00716 	blt	r5,r3,4027838 <_malloc_r+0xd8>
 402781c:	1800920e 	bge	r3,zero,4027a68 <_malloc_r+0x308>
 4027820:	84000317 	ldw	r16,12(r16)
 4027824:	24008e26 	beq	r4,r16,4027a60 <_malloc_r+0x300>
 4027828:	80800117 	ldw	r2,4(r16)
 402782c:	1184703a 	and	r2,r2,r6
 4027830:	1447c83a 	sub	r3,r2,r17
 4027834:	28fff90e 	bge	r5,r3,402781c <__flash_rwdata_start+0xffff12c4>
 4027838:	3809883a 	mov	r4,r7
 402783c:	01800034 	movhi	r6,0
 4027840:	9c000417 	ldw	r16,16(r19)
 4027844:	3181a204 	addi	r6,r6,1672
 4027848:	32000204 	addi	r8,r6,8
 402784c:	82013426 	beq	r16,r8,4027d20 <_malloc_r+0x5c0>
 4027850:	80c00117 	ldw	r3,4(r16)
 4027854:	00bfff04 	movi	r2,-4
 4027858:	188e703a 	and	r7,r3,r2
 402785c:	3c45c83a 	sub	r2,r7,r17
 4027860:	00c003c4 	movi	r3,15
 4027864:	18811f16 	blt	r3,r2,4027ce4 <_malloc_r+0x584>
 4027868:	32000515 	stw	r8,20(r6)
 402786c:	32000415 	stw	r8,16(r6)
 4027870:	10007f0e 	bge	r2,zero,4027a70 <_malloc_r+0x310>
 4027874:	00807fc4 	movi	r2,511
 4027878:	11c0fd36 	bltu	r2,r7,4027c70 <_malloc_r+0x510>
 402787c:	3806d0fa 	srli	r3,r7,3
 4027880:	01c00044 	movi	r7,1
 4027884:	30800117 	ldw	r2,4(r6)
 4027888:	19400044 	addi	r5,r3,1
 402788c:	294b883a 	add	r5,r5,r5
 4027890:	1807d0ba 	srai	r3,r3,2
 4027894:	294b883a 	add	r5,r5,r5
 4027898:	294b883a 	add	r5,r5,r5
 402789c:	298b883a 	add	r5,r5,r6
 40278a0:	38c6983a 	sll	r3,r7,r3
 40278a4:	29c00017 	ldw	r7,0(r5)
 40278a8:	2a7ffe04 	addi	r9,r5,-8
 40278ac:	1886b03a 	or	r3,r3,r2
 40278b0:	82400315 	stw	r9,12(r16)
 40278b4:	81c00215 	stw	r7,8(r16)
 40278b8:	30c00115 	stw	r3,4(r6)
 40278bc:	2c000015 	stw	r16,0(r5)
 40278c0:	3c000315 	stw	r16,12(r7)
 40278c4:	2005d0ba 	srai	r2,r4,2
 40278c8:	01400044 	movi	r5,1
 40278cc:	288a983a 	sll	r5,r5,r2
 40278d0:	19406f36 	bltu	r3,r5,4027a90 <_malloc_r+0x330>
 40278d4:	28c4703a 	and	r2,r5,r3
 40278d8:	10000a1e 	bne	r2,zero,4027904 <_malloc_r+0x1a4>
 40278dc:	00bfff04 	movi	r2,-4
 40278e0:	294b883a 	add	r5,r5,r5
 40278e4:	2088703a 	and	r4,r4,r2
 40278e8:	28c4703a 	and	r2,r5,r3
 40278ec:	21000104 	addi	r4,r4,4
 40278f0:	1000041e 	bne	r2,zero,4027904 <_malloc_r+0x1a4>
 40278f4:	294b883a 	add	r5,r5,r5
 40278f8:	28c4703a 	and	r2,r5,r3
 40278fc:	21000104 	addi	r4,r4,4
 4027900:	103ffc26 	beq	r2,zero,40278f4 <__flash_rwdata_start+0xffff139c>
 4027904:	02bfff04 	movi	r10,-4
 4027908:	024003c4 	movi	r9,15
 402790c:	21800044 	addi	r6,r4,1
 4027910:	318d883a 	add	r6,r6,r6
 4027914:	318d883a 	add	r6,r6,r6
 4027918:	318d883a 	add	r6,r6,r6
 402791c:	998d883a 	add	r6,r19,r6
 4027920:	333ffe04 	addi	r12,r6,-8
 4027924:	2017883a 	mov	r11,r4
 4027928:	31800104 	addi	r6,r6,4
 402792c:	34000017 	ldw	r16,0(r6)
 4027930:	31fffd04 	addi	r7,r6,-12
 4027934:	81c0041e 	bne	r16,r7,4027948 <_malloc_r+0x1e8>
 4027938:	0000fb06 	br	4027d28 <_malloc_r+0x5c8>
 402793c:	1801030e 	bge	r3,zero,4027d4c <_malloc_r+0x5ec>
 4027940:	84000317 	ldw	r16,12(r16)
 4027944:	81c0f826 	beq	r16,r7,4027d28 <_malloc_r+0x5c8>
 4027948:	80800117 	ldw	r2,4(r16)
 402794c:	1284703a 	and	r2,r2,r10
 4027950:	1447c83a 	sub	r3,r2,r17
 4027954:	48fff90e 	bge	r9,r3,402793c <__flash_rwdata_start+0xffff13e4>
 4027958:	80800317 	ldw	r2,12(r16)
 402795c:	81000217 	ldw	r4,8(r16)
 4027960:	89400054 	ori	r5,r17,1
 4027964:	81400115 	stw	r5,4(r16)
 4027968:	20800315 	stw	r2,12(r4)
 402796c:	11000215 	stw	r4,8(r2)
 4027970:	8463883a 	add	r17,r16,r17
 4027974:	9c400515 	stw	r17,20(r19)
 4027978:	9c400415 	stw	r17,16(r19)
 402797c:	18800054 	ori	r2,r3,1
 4027980:	88800115 	stw	r2,4(r17)
 4027984:	8a000315 	stw	r8,12(r17)
 4027988:	8a000215 	stw	r8,8(r17)
 402798c:	88e3883a 	add	r17,r17,r3
 4027990:	88c00015 	stw	r3,0(r17)
 4027994:	9009883a 	mov	r4,r18
 4027998:	40346d80 	call	40346d8 <__malloc_unlock>
 402799c:	80800204 	addi	r2,r16,8
 40279a0:	00001b06 	br	4027a10 <_malloc_r+0x2b0>
 40279a4:	04400404 	movi	r17,16
 40279a8:	89402536 	bltu	r17,r5,4027a40 <_malloc_r+0x2e0>
 40279ac:	40346c80 	call	40346c8 <__malloc_lock>
 40279b0:	00800184 	movi	r2,6
 40279b4:	01000084 	movi	r4,2
 40279b8:	04c00034 	movhi	r19,0
 40279bc:	1085883a 	add	r2,r2,r2
 40279c0:	9cc1a204 	addi	r19,r19,1672
 40279c4:	1085883a 	add	r2,r2,r2
 40279c8:	9885883a 	add	r2,r19,r2
 40279cc:	14000117 	ldw	r16,4(r2)
 40279d0:	10fffe04 	addi	r3,r2,-8
 40279d4:	80c0d926 	beq	r16,r3,4027d3c <_malloc_r+0x5dc>
 40279d8:	80c00117 	ldw	r3,4(r16)
 40279dc:	81000317 	ldw	r4,12(r16)
 40279e0:	00bfff04 	movi	r2,-4
 40279e4:	1884703a 	and	r2,r3,r2
 40279e8:	81400217 	ldw	r5,8(r16)
 40279ec:	8085883a 	add	r2,r16,r2
 40279f0:	10c00117 	ldw	r3,4(r2)
 40279f4:	29000315 	stw	r4,12(r5)
 40279f8:	21400215 	stw	r5,8(r4)
 40279fc:	18c00054 	ori	r3,r3,1
 4027a00:	10c00115 	stw	r3,4(r2)
 4027a04:	9009883a 	mov	r4,r18
 4027a08:	40346d80 	call	40346d8 <__malloc_unlock>
 4027a0c:	80800204 	addi	r2,r16,8
 4027a10:	dfc00a17 	ldw	ra,40(sp)
 4027a14:	df000917 	ldw	fp,36(sp)
 4027a18:	ddc00817 	ldw	r23,32(sp)
 4027a1c:	dd800717 	ldw	r22,28(sp)
 4027a20:	dd400617 	ldw	r21,24(sp)
 4027a24:	dd000517 	ldw	r20,20(sp)
 4027a28:	dcc00417 	ldw	r19,16(sp)
 4027a2c:	dc800317 	ldw	r18,12(sp)
 4027a30:	dc400217 	ldw	r17,8(sp)
 4027a34:	dc000117 	ldw	r16,4(sp)
 4027a38:	dec00b04 	addi	sp,sp,44
 4027a3c:	f800283a 	ret
 4027a40:	00800304 	movi	r2,12
 4027a44:	90800015 	stw	r2,0(r18)
 4027a48:	0005883a 	mov	r2,zero
 4027a4c:	003ff006 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027a50:	01002004 	movi	r4,128
 4027a54:	02001004 	movi	r8,64
 4027a58:	01c00fc4 	movi	r7,63
 4027a5c:	003f6106 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027a60:	4009883a 	mov	r4,r8
 4027a64:	003f7506 	br	402783c <__flash_rwdata_start+0xffff12e4>
 4027a68:	81000317 	ldw	r4,12(r16)
 4027a6c:	003fde06 	br	40279e8 <__flash_rwdata_start+0xffff1490>
 4027a70:	81c5883a 	add	r2,r16,r7
 4027a74:	11400117 	ldw	r5,4(r2)
 4027a78:	9009883a 	mov	r4,r18
 4027a7c:	29400054 	ori	r5,r5,1
 4027a80:	11400115 	stw	r5,4(r2)
 4027a84:	40346d80 	call	40346d8 <__malloc_unlock>
 4027a88:	80800204 	addi	r2,r16,8
 4027a8c:	003fe006 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027a90:	9c000217 	ldw	r16,8(r19)
 4027a94:	00bfff04 	movi	r2,-4
 4027a98:	85800117 	ldw	r22,4(r16)
 4027a9c:	b0ac703a 	and	r22,r22,r2
 4027aa0:	b4400336 	bltu	r22,r17,4027ab0 <_malloc_r+0x350>
 4027aa4:	b445c83a 	sub	r2,r22,r17
 4027aa8:	00c003c4 	movi	r3,15
 4027aac:	18805d16 	blt	r3,r2,4027c24 <_malloc_r+0x4c4>
 4027ab0:	05c00034 	movhi	r23,0
 4027ab4:	00800034 	movhi	r2,0
 4027ab8:	10887f04 	addi	r2,r2,8700
 4027abc:	bdc86604 	addi	r23,r23,8600
 4027ac0:	15400017 	ldw	r21,0(r2)
 4027ac4:	b8c00017 	ldw	r3,0(r23)
 4027ac8:	00bfffc4 	movi	r2,-1
 4027acc:	858d883a 	add	r6,r16,r22
 4027ad0:	8d6b883a 	add	r21,r17,r21
 4027ad4:	1880ea26 	beq	r3,r2,4027e80 <_malloc_r+0x720>
 4027ad8:	ad4403c4 	addi	r21,r21,4111
 4027adc:	00bc0004 	movi	r2,-4096
 4027ae0:	a8aa703a 	and	r21,r21,r2
 4027ae4:	a80b883a 	mov	r5,r21
 4027ae8:	9009883a 	mov	r4,r18
 4027aec:	d9800015 	stw	r6,0(sp)
 4027af0:	40282e40 	call	40282e4 <_sbrk_r>
 4027af4:	1029883a 	mov	r20,r2
 4027af8:	00bfffc4 	movi	r2,-1
 4027afc:	d9800017 	ldw	r6,0(sp)
 4027b00:	a080e826 	beq	r20,r2,4027ea4 <_malloc_r+0x744>
 4027b04:	a180a636 	bltu	r20,r6,4027da0 <_malloc_r+0x640>
 4027b08:	07000174 	movhi	fp,5
 4027b0c:	e7349404 	addi	fp,fp,-11696
 4027b10:	e0800017 	ldw	r2,0(fp)
 4027b14:	a887883a 	add	r3,r21,r2
 4027b18:	e0c00015 	stw	r3,0(fp)
 4027b1c:	3500e626 	beq	r6,r20,4027eb8 <_malloc_r+0x758>
 4027b20:	b9000017 	ldw	r4,0(r23)
 4027b24:	00bfffc4 	movi	r2,-1
 4027b28:	2080ee26 	beq	r4,r2,4027ee4 <_malloc_r+0x784>
 4027b2c:	a185c83a 	sub	r2,r20,r6
 4027b30:	10c5883a 	add	r2,r2,r3
 4027b34:	e0800015 	stw	r2,0(fp)
 4027b38:	a0c001cc 	andi	r3,r20,7
 4027b3c:	1800bc26 	beq	r3,zero,4027e30 <_malloc_r+0x6d0>
 4027b40:	a0e9c83a 	sub	r20,r20,r3
 4027b44:	00840204 	movi	r2,4104
 4027b48:	a5000204 	addi	r20,r20,8
 4027b4c:	10c7c83a 	sub	r3,r2,r3
 4027b50:	a545883a 	add	r2,r20,r21
 4027b54:	1083ffcc 	andi	r2,r2,4095
 4027b58:	18abc83a 	sub	r21,r3,r2
 4027b5c:	a80b883a 	mov	r5,r21
 4027b60:	9009883a 	mov	r4,r18
 4027b64:	40282e40 	call	40282e4 <_sbrk_r>
 4027b68:	00ffffc4 	movi	r3,-1
 4027b6c:	10c0e126 	beq	r2,r3,4027ef4 <_malloc_r+0x794>
 4027b70:	1505c83a 	sub	r2,r2,r20
 4027b74:	1545883a 	add	r2,r2,r21
 4027b78:	10800054 	ori	r2,r2,1
 4027b7c:	e0c00017 	ldw	r3,0(fp)
 4027b80:	9d000215 	stw	r20,8(r19)
 4027b84:	a0800115 	stw	r2,4(r20)
 4027b88:	a8c7883a 	add	r3,r21,r3
 4027b8c:	e0c00015 	stw	r3,0(fp)
 4027b90:	84c00e26 	beq	r16,r19,4027bcc <_malloc_r+0x46c>
 4027b94:	018003c4 	movi	r6,15
 4027b98:	3580a72e 	bgeu	r6,r22,4027e38 <_malloc_r+0x6d8>
 4027b9c:	81400117 	ldw	r5,4(r16)
 4027ba0:	013ffe04 	movi	r4,-8
 4027ba4:	b0bffd04 	addi	r2,r22,-12
 4027ba8:	1104703a 	and	r2,r2,r4
 4027bac:	2900004c 	andi	r4,r5,1
 4027bb0:	2088b03a 	or	r4,r4,r2
 4027bb4:	81000115 	stw	r4,4(r16)
 4027bb8:	01400144 	movi	r5,5
 4027bbc:	8089883a 	add	r4,r16,r2
 4027bc0:	21400115 	stw	r5,4(r4)
 4027bc4:	21400215 	stw	r5,8(r4)
 4027bc8:	3080cd36 	bltu	r6,r2,4027f00 <_malloc_r+0x7a0>
 4027bcc:	00800034 	movhi	r2,0
 4027bd0:	10887e04 	addi	r2,r2,8696
 4027bd4:	11000017 	ldw	r4,0(r2)
 4027bd8:	20c0012e 	bgeu	r4,r3,4027be0 <_malloc_r+0x480>
 4027bdc:	10c00015 	stw	r3,0(r2)
 4027be0:	00800034 	movhi	r2,0
 4027be4:	10887d04 	addi	r2,r2,8692
 4027be8:	11000017 	ldw	r4,0(r2)
 4027bec:	9c000217 	ldw	r16,8(r19)
 4027bf0:	20c0012e 	bgeu	r4,r3,4027bf8 <_malloc_r+0x498>
 4027bf4:	10c00015 	stw	r3,0(r2)
 4027bf8:	80c00117 	ldw	r3,4(r16)
 4027bfc:	00bfff04 	movi	r2,-4
 4027c00:	1886703a 	and	r3,r3,r2
 4027c04:	1c45c83a 	sub	r2,r3,r17
 4027c08:	1c400236 	bltu	r3,r17,4027c14 <_malloc_r+0x4b4>
 4027c0c:	00c003c4 	movi	r3,15
 4027c10:	18800416 	blt	r3,r2,4027c24 <_malloc_r+0x4c4>
 4027c14:	9009883a 	mov	r4,r18
 4027c18:	40346d80 	call	40346d8 <__malloc_unlock>
 4027c1c:	0005883a 	mov	r2,zero
 4027c20:	003f7b06 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027c24:	88c00054 	ori	r3,r17,1
 4027c28:	80c00115 	stw	r3,4(r16)
 4027c2c:	8463883a 	add	r17,r16,r17
 4027c30:	10800054 	ori	r2,r2,1
 4027c34:	9c400215 	stw	r17,8(r19)
 4027c38:	88800115 	stw	r2,4(r17)
 4027c3c:	9009883a 	mov	r4,r18
 4027c40:	40346d80 	call	40346d8 <__malloc_unlock>
 4027c44:	80800204 	addi	r2,r16,8
 4027c48:	003f7106 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027c4c:	00c00504 	movi	r3,20
 4027c50:	18804a2e 	bgeu	r3,r2,4027d7c <_malloc_r+0x61c>
 4027c54:	00c01504 	movi	r3,84
 4027c58:	18806e36 	bltu	r3,r2,4027e14 <_malloc_r+0x6b4>
 4027c5c:	8804d33a 	srli	r2,r17,12
 4027c60:	12001bc4 	addi	r8,r2,111
 4027c64:	11c01b84 	addi	r7,r2,110
 4027c68:	4209883a 	add	r4,r8,r8
 4027c6c:	003edd06 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027c70:	3804d27a 	srli	r2,r7,9
 4027c74:	00c00104 	movi	r3,4
 4027c78:	1880442e 	bgeu	r3,r2,4027d8c <_malloc_r+0x62c>
 4027c7c:	00c00504 	movi	r3,20
 4027c80:	18808136 	bltu	r3,r2,4027e88 <_malloc_r+0x728>
 4027c84:	11401704 	addi	r5,r2,92
 4027c88:	10c016c4 	addi	r3,r2,91
 4027c8c:	294b883a 	add	r5,r5,r5
 4027c90:	294b883a 	add	r5,r5,r5
 4027c94:	294b883a 	add	r5,r5,r5
 4027c98:	994b883a 	add	r5,r19,r5
 4027c9c:	28800017 	ldw	r2,0(r5)
 4027ca0:	01800034 	movhi	r6,0
 4027ca4:	297ffe04 	addi	r5,r5,-8
 4027ca8:	3181a204 	addi	r6,r6,1672
 4027cac:	28806526 	beq	r5,r2,4027e44 <_malloc_r+0x6e4>
 4027cb0:	01bfff04 	movi	r6,-4
 4027cb4:	10c00117 	ldw	r3,4(r2)
 4027cb8:	1986703a 	and	r3,r3,r6
 4027cbc:	38c0022e 	bgeu	r7,r3,4027cc8 <_malloc_r+0x568>
 4027cc0:	10800217 	ldw	r2,8(r2)
 4027cc4:	28bffb1e 	bne	r5,r2,4027cb4 <__flash_rwdata_start+0xffff175c>
 4027cc8:	11400317 	ldw	r5,12(r2)
 4027ccc:	98c00117 	ldw	r3,4(r19)
 4027cd0:	81400315 	stw	r5,12(r16)
 4027cd4:	80800215 	stw	r2,8(r16)
 4027cd8:	2c000215 	stw	r16,8(r5)
 4027cdc:	14000315 	stw	r16,12(r2)
 4027ce0:	003ef806 	br	40278c4 <__flash_rwdata_start+0xffff136c>
 4027ce4:	88c00054 	ori	r3,r17,1
 4027ce8:	80c00115 	stw	r3,4(r16)
 4027cec:	8463883a 	add	r17,r16,r17
 4027cf0:	34400515 	stw	r17,20(r6)
 4027cf4:	34400415 	stw	r17,16(r6)
 4027cf8:	10c00054 	ori	r3,r2,1
 4027cfc:	8a000315 	stw	r8,12(r17)
 4027d00:	8a000215 	stw	r8,8(r17)
 4027d04:	88c00115 	stw	r3,4(r17)
 4027d08:	88a3883a 	add	r17,r17,r2
 4027d0c:	88800015 	stw	r2,0(r17)
 4027d10:	9009883a 	mov	r4,r18
 4027d14:	40346d80 	call	40346d8 <__malloc_unlock>
 4027d18:	80800204 	addi	r2,r16,8
 4027d1c:	003f3c06 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027d20:	30c00117 	ldw	r3,4(r6)
 4027d24:	003ee706 	br	40278c4 <__flash_rwdata_start+0xffff136c>
 4027d28:	5ac00044 	addi	r11,r11,1
 4027d2c:	588000cc 	andi	r2,r11,3
 4027d30:	31800204 	addi	r6,r6,8
 4027d34:	103efd1e 	bne	r2,zero,402792c <__flash_rwdata_start+0xffff13d4>
 4027d38:	00002406 	br	4027dcc <_malloc_r+0x66c>
 4027d3c:	14000317 	ldw	r16,12(r2)
 4027d40:	143f251e 	bne	r2,r16,40279d8 <__flash_rwdata_start+0xffff1480>
 4027d44:	21000084 	addi	r4,r4,2
 4027d48:	003ebc06 	br	402783c <__flash_rwdata_start+0xffff12e4>
 4027d4c:	8085883a 	add	r2,r16,r2
 4027d50:	10c00117 	ldw	r3,4(r2)
 4027d54:	81000317 	ldw	r4,12(r16)
 4027d58:	81400217 	ldw	r5,8(r16)
 4027d5c:	18c00054 	ori	r3,r3,1
 4027d60:	10c00115 	stw	r3,4(r2)
 4027d64:	29000315 	stw	r4,12(r5)
 4027d68:	21400215 	stw	r5,8(r4)
 4027d6c:	9009883a 	mov	r4,r18
 4027d70:	40346d80 	call	40346d8 <__malloc_unlock>
 4027d74:	80800204 	addi	r2,r16,8
 4027d78:	003f2506 	br	4027a10 <__flash_rwdata_start+0xffff14b8>
 4027d7c:	12001704 	addi	r8,r2,92
 4027d80:	11c016c4 	addi	r7,r2,91
 4027d84:	4209883a 	add	r4,r8,r8
 4027d88:	003e9606 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027d8c:	3804d1ba 	srli	r2,r7,6
 4027d90:	11400e44 	addi	r5,r2,57
 4027d94:	10c00e04 	addi	r3,r2,56
 4027d98:	294b883a 	add	r5,r5,r5
 4027d9c:	003fbc06 	br	4027c90 <__flash_rwdata_start+0xffff1738>
 4027da0:	84ff5926 	beq	r16,r19,4027b08 <__flash_rwdata_start+0xffff15b0>
 4027da4:	00800034 	movhi	r2,0
 4027da8:	1081a204 	addi	r2,r2,1672
 4027dac:	14000217 	ldw	r16,8(r2)
 4027db0:	00bfff04 	movi	r2,-4
 4027db4:	80c00117 	ldw	r3,4(r16)
 4027db8:	1886703a 	and	r3,r3,r2
 4027dbc:	003f9106 	br	4027c04 <__flash_rwdata_start+0xffff16ac>
 4027dc0:	60800217 	ldw	r2,8(r12)
 4027dc4:	213fffc4 	addi	r4,r4,-1
 4027dc8:	1300651e 	bne	r2,r12,4027f60 <_malloc_r+0x800>
 4027dcc:	208000cc 	andi	r2,r4,3
 4027dd0:	633ffe04 	addi	r12,r12,-8
 4027dd4:	103ffa1e 	bne	r2,zero,4027dc0 <__flash_rwdata_start+0xffff1868>
 4027dd8:	98800117 	ldw	r2,4(r19)
 4027ddc:	0146303a 	nor	r3,zero,r5
 4027de0:	1884703a 	and	r2,r3,r2
 4027de4:	98800115 	stw	r2,4(r19)
 4027de8:	294b883a 	add	r5,r5,r5
 4027dec:	117f2836 	bltu	r2,r5,4027a90 <__flash_rwdata_start+0xffff1538>
 4027df0:	283f2726 	beq	r5,zero,4027a90 <__flash_rwdata_start+0xffff1538>
 4027df4:	2886703a 	and	r3,r5,r2
 4027df8:	5809883a 	mov	r4,r11
 4027dfc:	183ec31e 	bne	r3,zero,402790c <__flash_rwdata_start+0xffff13b4>
 4027e00:	294b883a 	add	r5,r5,r5
 4027e04:	2886703a 	and	r3,r5,r2
 4027e08:	21000104 	addi	r4,r4,4
 4027e0c:	183ffc26 	beq	r3,zero,4027e00 <__flash_rwdata_start+0xffff18a8>
 4027e10:	003ebe06 	br	402790c <__flash_rwdata_start+0xffff13b4>
 4027e14:	00c05504 	movi	r3,340
 4027e18:	18801236 	bltu	r3,r2,4027e64 <_malloc_r+0x704>
 4027e1c:	8804d3fa 	srli	r2,r17,15
 4027e20:	12001e04 	addi	r8,r2,120
 4027e24:	11c01dc4 	addi	r7,r2,119
 4027e28:	4209883a 	add	r4,r8,r8
 4027e2c:	003e6d06 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027e30:	00c40004 	movi	r3,4096
 4027e34:	003f4606 	br	4027b50 <__flash_rwdata_start+0xffff15f8>
 4027e38:	00800044 	movi	r2,1
 4027e3c:	a0800115 	stw	r2,4(r20)
 4027e40:	003f7406 	br	4027c14 <__flash_rwdata_start+0xffff16bc>
 4027e44:	1805d0ba 	srai	r2,r3,2
 4027e48:	01c00044 	movi	r7,1
 4027e4c:	30c00117 	ldw	r3,4(r6)
 4027e50:	388e983a 	sll	r7,r7,r2
 4027e54:	2805883a 	mov	r2,r5
 4027e58:	38c6b03a 	or	r3,r7,r3
 4027e5c:	30c00115 	stw	r3,4(r6)
 4027e60:	003f9b06 	br	4027cd0 <__flash_rwdata_start+0xffff1778>
 4027e64:	00c15504 	movi	r3,1364
 4027e68:	18801a36 	bltu	r3,r2,4027ed4 <_malloc_r+0x774>
 4027e6c:	8804d4ba 	srli	r2,r17,18
 4027e70:	12001f44 	addi	r8,r2,125
 4027e74:	11c01f04 	addi	r7,r2,124
 4027e78:	4209883a 	add	r4,r8,r8
 4027e7c:	003e5906 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027e80:	ad400404 	addi	r21,r21,16
 4027e84:	003f1706 	br	4027ae4 <__flash_rwdata_start+0xffff158c>
 4027e88:	00c01504 	movi	r3,84
 4027e8c:	18802336 	bltu	r3,r2,4027f1c <_malloc_r+0x7bc>
 4027e90:	3804d33a 	srli	r2,r7,12
 4027e94:	11401bc4 	addi	r5,r2,111
 4027e98:	10c01b84 	addi	r3,r2,110
 4027e9c:	294b883a 	add	r5,r5,r5
 4027ea0:	003f7b06 	br	4027c90 <__flash_rwdata_start+0xffff1738>
 4027ea4:	9c000217 	ldw	r16,8(r19)
 4027ea8:	00bfff04 	movi	r2,-4
 4027eac:	80c00117 	ldw	r3,4(r16)
 4027eb0:	1886703a 	and	r3,r3,r2
 4027eb4:	003f5306 	br	4027c04 <__flash_rwdata_start+0xffff16ac>
 4027eb8:	3083ffcc 	andi	r2,r6,4095
 4027ebc:	103f181e 	bne	r2,zero,4027b20 <__flash_rwdata_start+0xffff15c8>
 4027ec0:	99000217 	ldw	r4,8(r19)
 4027ec4:	b545883a 	add	r2,r22,r21
 4027ec8:	10800054 	ori	r2,r2,1
 4027ecc:	20800115 	stw	r2,4(r4)
 4027ed0:	003f3e06 	br	4027bcc <__flash_rwdata_start+0xffff1674>
 4027ed4:	01003f84 	movi	r4,254
 4027ed8:	02001fc4 	movi	r8,127
 4027edc:	01c01f84 	movi	r7,126
 4027ee0:	003e4006 	br	40277e4 <__flash_rwdata_start+0xffff128c>
 4027ee4:	00800034 	movhi	r2,0
 4027ee8:	10886604 	addi	r2,r2,8600
 4027eec:	15000015 	stw	r20,0(r2)
 4027ef0:	003f1106 	br	4027b38 <__flash_rwdata_start+0xffff15e0>
 4027ef4:	00800044 	movi	r2,1
 4027ef8:	002b883a 	mov	r21,zero
 4027efc:	003f1f06 	br	4027b7c <__flash_rwdata_start+0xffff1624>
 4027f00:	81400204 	addi	r5,r16,8
 4027f04:	9009883a 	mov	r4,r18
 4027f08:	402cd7c0 	call	402cd7c <_free_r>
 4027f0c:	00800174 	movhi	r2,5
 4027f10:	10b49404 	addi	r2,r2,-11696
 4027f14:	10c00017 	ldw	r3,0(r2)
 4027f18:	003f2c06 	br	4027bcc <__flash_rwdata_start+0xffff1674>
 4027f1c:	00c05504 	movi	r3,340
 4027f20:	18800536 	bltu	r3,r2,4027f38 <_malloc_r+0x7d8>
 4027f24:	3804d3fa 	srli	r2,r7,15
 4027f28:	11401e04 	addi	r5,r2,120
 4027f2c:	10c01dc4 	addi	r3,r2,119
 4027f30:	294b883a 	add	r5,r5,r5
 4027f34:	003f5606 	br	4027c90 <__flash_rwdata_start+0xffff1738>
 4027f38:	00c15504 	movi	r3,1364
 4027f3c:	18800536 	bltu	r3,r2,4027f54 <_malloc_r+0x7f4>
 4027f40:	3804d4ba 	srli	r2,r7,18
 4027f44:	11401f44 	addi	r5,r2,125
 4027f48:	10c01f04 	addi	r3,r2,124
 4027f4c:	294b883a 	add	r5,r5,r5
 4027f50:	003f4f06 	br	4027c90 <__flash_rwdata_start+0xffff1738>
 4027f54:	01403f84 	movi	r5,254
 4027f58:	00c01f84 	movi	r3,126
 4027f5c:	003f4c06 	br	4027c90 <__flash_rwdata_start+0xffff1738>
 4027f60:	98800117 	ldw	r2,4(r19)
 4027f64:	003fa006 	br	4027de8 <__flash_rwdata_start+0xffff1890>
 4027f68:	8808d0fa 	srli	r4,r17,3
 4027f6c:	20800044 	addi	r2,r4,1
 4027f70:	1085883a 	add	r2,r2,r2
 4027f74:	003e9006 	br	40279b8 <__flash_rwdata_start+0xffff1460>

04027f78 <memset>:
 4027f78:	f811883a 	mov	r8,ra
 4027f7c:	40346e80 	call	40346e8 <_mcount>
 4027f80:	403f883a 	mov	ra,r8
 4027f84:	20c000cc 	andi	r3,r4,3
 4027f88:	2005883a 	mov	r2,r4
 4027f8c:	18004326 	beq	r3,zero,402809c <memset+0x124>
 4027f90:	31ffffc4 	addi	r7,r6,-1
 4027f94:	30004026 	beq	r6,zero,4028098 <memset+0x120>
 4027f98:	2813883a 	mov	r9,r5
 4027f9c:	200d883a 	mov	r6,r4
 4027fa0:	2007883a 	mov	r3,r4
 4027fa4:	00000406 	br	4027fb8 <memset+0x40>
 4027fa8:	3a3fffc4 	addi	r8,r7,-1
 4027fac:	31800044 	addi	r6,r6,1
 4027fb0:	38003926 	beq	r7,zero,4028098 <memset+0x120>
 4027fb4:	400f883a 	mov	r7,r8
 4027fb8:	18c00044 	addi	r3,r3,1
 4027fbc:	32400005 	stb	r9,0(r6)
 4027fc0:	1a0000cc 	andi	r8,r3,3
 4027fc4:	403ff81e 	bne	r8,zero,4027fa8 <__flash_rwdata_start+0xffff1a50>
 4027fc8:	010000c4 	movi	r4,3
 4027fcc:	21c02d2e 	bgeu	r4,r7,4028084 <memset+0x10c>
 4027fd0:	29003fcc 	andi	r4,r5,255
 4027fd4:	200c923a 	slli	r6,r4,8
 4027fd8:	3108b03a 	or	r4,r6,r4
 4027fdc:	200c943a 	slli	r6,r4,16
 4027fe0:	218cb03a 	or	r6,r4,r6
 4027fe4:	010003c4 	movi	r4,15
 4027fe8:	21c0182e 	bgeu	r4,r7,402804c <memset+0xd4>
 4027fec:	3b3ffc04 	addi	r12,r7,-16
 4027ff0:	6018d13a 	srli	r12,r12,4
 4027ff4:	1a000104 	addi	r8,r3,4
 4027ff8:	1ac00204 	addi	r11,r3,8
 4027ffc:	6008913a 	slli	r4,r12,4
 4028000:	1a800304 	addi	r10,r3,12
 4028004:	1813883a 	mov	r9,r3
 4028008:	21000504 	addi	r4,r4,20
 402800c:	1909883a 	add	r4,r3,r4
 4028010:	49800015 	stw	r6,0(r9)
 4028014:	41800015 	stw	r6,0(r8)
 4028018:	59800015 	stw	r6,0(r11)
 402801c:	51800015 	stw	r6,0(r10)
 4028020:	42000404 	addi	r8,r8,16
 4028024:	4a400404 	addi	r9,r9,16
 4028028:	5ac00404 	addi	r11,r11,16
 402802c:	52800404 	addi	r10,r10,16
 4028030:	413ff71e 	bne	r8,r4,4028010 <__flash_rwdata_start+0xffff1ab8>
 4028034:	63000044 	addi	r12,r12,1
 4028038:	6018913a 	slli	r12,r12,4
 402803c:	39c003cc 	andi	r7,r7,15
 4028040:	010000c4 	movi	r4,3
 4028044:	1b07883a 	add	r3,r3,r12
 4028048:	21c00e2e 	bgeu	r4,r7,4028084 <memset+0x10c>
 402804c:	1813883a 	mov	r9,r3
 4028050:	3811883a 	mov	r8,r7
 4028054:	010000c4 	movi	r4,3
 4028058:	49800015 	stw	r6,0(r9)
 402805c:	423fff04 	addi	r8,r8,-4
 4028060:	4a400104 	addi	r9,r9,4
 4028064:	223ffc36 	bltu	r4,r8,4028058 <__flash_rwdata_start+0xffff1b00>
 4028068:	393fff04 	addi	r4,r7,-4
 402806c:	2008d0ba 	srli	r4,r4,2
 4028070:	39c000cc 	andi	r7,r7,3
 4028074:	21000044 	addi	r4,r4,1
 4028078:	2109883a 	add	r4,r4,r4
 402807c:	2109883a 	add	r4,r4,r4
 4028080:	1907883a 	add	r3,r3,r4
 4028084:	38000426 	beq	r7,zero,4028098 <memset+0x120>
 4028088:	19cf883a 	add	r7,r3,r7
 402808c:	19400005 	stb	r5,0(r3)
 4028090:	18c00044 	addi	r3,r3,1
 4028094:	38fffd1e 	bne	r7,r3,402808c <__flash_rwdata_start+0xffff1b34>
 4028098:	f800283a 	ret
 402809c:	2007883a 	mov	r3,r4
 40280a0:	300f883a 	mov	r7,r6
 40280a4:	003fc806 	br	4027fc8 <__flash_rwdata_start+0xffff1a70>

040280a8 <_printf_r>:
 40280a8:	f811883a 	mov	r8,ra
 40280ac:	40346e80 	call	40346e8 <_mcount>
 40280b0:	403f883a 	mov	ra,r8
 40280b4:	defffd04 	addi	sp,sp,-12
 40280b8:	dfc00015 	stw	ra,0(sp)
 40280bc:	2805883a 	mov	r2,r5
 40280c0:	d9800115 	stw	r6,4(sp)
 40280c4:	d9c00215 	stw	r7,8(sp)
 40280c8:	21400217 	ldw	r5,8(r4)
 40280cc:	d9c00104 	addi	r7,sp,4
 40280d0:	100d883a 	mov	r6,r2
 40280d4:	40288440 	call	4028844 <___vfprintf_internal_r>
 40280d8:	dfc00017 	ldw	ra,0(sp)
 40280dc:	dec00304 	addi	sp,sp,12
 40280e0:	f800283a 	ret

040280e4 <printf>:
 40280e4:	f811883a 	mov	r8,ra
 40280e8:	40346e80 	call	40346e8 <_mcount>
 40280ec:	403f883a 	mov	ra,r8
 40280f0:	defffc04 	addi	sp,sp,-16
 40280f4:	dfc00015 	stw	ra,0(sp)
 40280f8:	d9400115 	stw	r5,4(sp)
 40280fc:	d9800215 	stw	r6,8(sp)
 4028100:	d9c00315 	stw	r7,12(sp)
 4028104:	00800034 	movhi	r2,0
 4028108:	10886904 	addi	r2,r2,8612
 402810c:	10800017 	ldw	r2,0(r2)
 4028110:	200b883a 	mov	r5,r4
 4028114:	d9800104 	addi	r6,sp,4
 4028118:	11000217 	ldw	r4,8(r2)
 402811c:	402aa480 	call	402aa48 <__vfprintf_internal>
 4028120:	dfc00017 	ldw	ra,0(sp)
 4028124:	dec00404 	addi	sp,sp,16
 4028128:	f800283a 	ret

0402812c <_putchar_r>:
 402812c:	f811883a 	mov	r8,ra
 4028130:	40346e80 	call	40346e8 <_mcount>
 4028134:	403f883a 	mov	ra,r8
 4028138:	21800217 	ldw	r6,8(r4)
 402813c:	402ee841 	jmpi	402ee84 <_putc_r>

04028140 <putchar>:
 4028140:	f811883a 	mov	r8,ra
 4028144:	40346e80 	call	40346e8 <_mcount>
 4028148:	403f883a 	mov	ra,r8
 402814c:	00800034 	movhi	r2,0
 4028150:	10886904 	addi	r2,r2,8612
 4028154:	200b883a 	mov	r5,r4
 4028158:	11000017 	ldw	r4,0(r2)
 402815c:	21800217 	ldw	r6,8(r4)
 4028160:	402ee841 	jmpi	402ee84 <_putc_r>

04028164 <_puts_r>:
 4028164:	f811883a 	mov	r8,ra
 4028168:	40346e80 	call	40346e8 <_mcount>
 402816c:	403f883a 	mov	ra,r8
 4028170:	defff604 	addi	sp,sp,-40
 4028174:	dfc00915 	stw	ra,36(sp)
 4028178:	dc400815 	stw	r17,32(sp)
 402817c:	dc000715 	stw	r16,28(sp)
 4028180:	2021883a 	mov	r16,r4
 4028184:	2809883a 	mov	r4,r5
 4028188:	2823883a 	mov	r17,r5
 402818c:	40287a00 	call	40287a0 <strlen>
 4028190:	10c00044 	addi	r3,r2,1
 4028194:	d8800115 	stw	r2,4(sp)
 4028198:	00800034 	movhi	r2,0
 402819c:	10812804 	addi	r2,r2,1184
 40281a0:	d8800215 	stw	r2,8(sp)
 40281a4:	00800044 	movi	r2,1
 40281a8:	d8800315 	stw	r2,12(sp)
 40281ac:	00800084 	movi	r2,2
 40281b0:	dc400015 	stw	r17,0(sp)
 40281b4:	d8c00615 	stw	r3,24(sp)
 40281b8:	dec00415 	stw	sp,16(sp)
 40281bc:	d8800515 	stw	r2,20(sp)
 40281c0:	80000226 	beq	r16,zero,40281cc <_puts_r+0x68>
 40281c4:	80800e17 	ldw	r2,56(r16)
 40281c8:	10001426 	beq	r2,zero,402821c <_puts_r+0xb8>
 40281cc:	81400217 	ldw	r5,8(r16)
 40281d0:	2880030b 	ldhu	r2,12(r5)
 40281d4:	10c8000c 	andi	r3,r2,8192
 40281d8:	1800061e 	bne	r3,zero,40281f4 <_puts_r+0x90>
 40281dc:	29001917 	ldw	r4,100(r5)
 40281e0:	00f7ffc4 	movi	r3,-8193
 40281e4:	10880014 	ori	r2,r2,8192
 40281e8:	20c6703a 	and	r3,r4,r3
 40281ec:	2880030d 	sth	r2,12(r5)
 40281f0:	28c01915 	stw	r3,100(r5)
 40281f4:	d9800404 	addi	r6,sp,16
 40281f8:	8009883a 	mov	r4,r16
 40281fc:	402d0980 	call	402d098 <__sfvwrite_r>
 4028200:	1000091e 	bne	r2,zero,4028228 <_puts_r+0xc4>
 4028204:	00800284 	movi	r2,10
 4028208:	dfc00917 	ldw	ra,36(sp)
 402820c:	dc400817 	ldw	r17,32(sp)
 4028210:	dc000717 	ldw	r16,28(sp)
 4028214:	dec00a04 	addi	sp,sp,40
 4028218:	f800283a 	ret
 402821c:	8009883a 	mov	r4,r16
 4028220:	402cba80 	call	402cba8 <__sinit>
 4028224:	003fe906 	br	40281cc <__flash_rwdata_start+0xffff1c74>
 4028228:	00bfffc4 	movi	r2,-1
 402822c:	003ff606 	br	4028208 <__flash_rwdata_start+0xffff1cb0>

04028230 <puts>:
 4028230:	f811883a 	mov	r8,ra
 4028234:	40346e80 	call	40346e8 <_mcount>
 4028238:	403f883a 	mov	ra,r8
 402823c:	00800034 	movhi	r2,0
 4028240:	10886904 	addi	r2,r2,8612
 4028244:	200b883a 	mov	r5,r4
 4028248:	11000017 	ldw	r4,0(r2)
 402824c:	40281641 	jmpi	4028164 <_puts_r>

04028250 <srand>:
 4028250:	f811883a 	mov	r8,ra
 4028254:	40346e80 	call	40346e8 <_mcount>
 4028258:	403f883a 	mov	ra,r8
 402825c:	00800034 	movhi	r2,0
 4028260:	10886904 	addi	r2,r2,8612
 4028264:	10800017 	ldw	r2,0(r2)
 4028268:	11002915 	stw	r4,164(r2)
 402826c:	10002a15 	stw	zero,168(r2)
 4028270:	f800283a 	ret

04028274 <rand>:
 4028274:	f811883a 	mov	r8,ra
 4028278:	40346e80 	call	40346e8 <_mcount>
 402827c:	403f883a 	mov	ra,r8
 4028280:	defffe04 	addi	sp,sp,-8
 4028284:	dfc00115 	stw	ra,4(sp)
 4028288:	dc000015 	stw	r16,0(sp)
 402828c:	00800034 	movhi	r2,0
 4028290:	10886904 	addi	r2,r2,8612
 4028294:	14000017 	ldw	r16,0(r2)
 4028298:	01932574 	movhi	r6,19605
 402829c:	01d614b4 	movhi	r7,22610
 40282a0:	81002917 	ldw	r4,164(r16)
 40282a4:	81402a17 	ldw	r5,168(r16)
 40282a8:	319fcb44 	addi	r6,r6,32557
 40282ac:	39fd0b44 	addi	r7,r7,-3027
 40282b0:	40317fc0 	call	40317fc <__muldi3>
 40282b4:	11000044 	addi	r4,r2,1
 40282b8:	2085803a 	cmpltu	r2,r4,r2
 40282bc:	10c7883a 	add	r3,r2,r3
 40282c0:	00a00034 	movhi	r2,32768
 40282c4:	10bfffc4 	addi	r2,r2,-1
 40282c8:	1884703a 	and	r2,r3,r2
 40282cc:	81002915 	stw	r4,164(r16)
 40282d0:	80c02a15 	stw	r3,168(r16)
 40282d4:	dfc00117 	ldw	ra,4(sp)
 40282d8:	dc000017 	ldw	r16,0(sp)
 40282dc:	dec00204 	addi	sp,sp,8
 40282e0:	f800283a 	ret

040282e4 <_sbrk_r>:
 40282e4:	f811883a 	mov	r8,ra
 40282e8:	40346e80 	call	40346e8 <_mcount>
 40282ec:	403f883a 	mov	ra,r8
 40282f0:	defffd04 	addi	sp,sp,-12
 40282f4:	dfc00215 	stw	ra,8(sp)
 40282f8:	dc400115 	stw	r17,4(sp)
 40282fc:	dc000015 	stw	r16,0(sp)
 4028300:	04000034 	movhi	r16,0
 4028304:	84088004 	addi	r16,r16,8704
 4028308:	2023883a 	mov	r17,r4
 402830c:	2809883a 	mov	r4,r5
 4028310:	80000015 	stw	zero,0(r16)
 4028314:	40348880 	call	4034888 <sbrk>
 4028318:	00ffffc4 	movi	r3,-1
 402831c:	10c00526 	beq	r2,r3,4028334 <_sbrk_r+0x50>
 4028320:	dfc00217 	ldw	ra,8(sp)
 4028324:	dc400117 	ldw	r17,4(sp)
 4028328:	dc000017 	ldw	r16,0(sp)
 402832c:	dec00304 	addi	sp,sp,12
 4028330:	f800283a 	ret
 4028334:	80c00017 	ldw	r3,0(r16)
 4028338:	183ff926 	beq	r3,zero,4028320 <__flash_rwdata_start+0xffff1dc8>
 402833c:	88c00015 	stw	r3,0(r17)
 4028340:	003ff706 	br	4028320 <__flash_rwdata_start+0xffff1dc8>

04028344 <_init_signal_r>:
 4028344:	f811883a 	mov	r8,ra
 4028348:	40346e80 	call	40346e8 <_mcount>
 402834c:	403f883a 	mov	ra,r8
 4028350:	2080b717 	ldw	r2,732(r4)
 4028354:	10000226 	beq	r2,zero,4028360 <_init_signal_r+0x1c>
 4028358:	0005883a 	mov	r2,zero
 402835c:	f800283a 	ret
 4028360:	defffe04 	addi	sp,sp,-8
 4028364:	dfc00115 	stw	ra,4(sp)
 4028368:	dc000015 	stw	r16,0(sp)
 402836c:	01402004 	movi	r5,128
 4028370:	2021883a 	mov	r16,r4
 4028374:	40277600 	call	4027760 <_malloc_r>
 4028378:	8080b715 	stw	r2,732(r16)
 402837c:	10000d26 	beq	r2,zero,40283b4 <_init_signal_r+0x70>
 4028380:	0007883a 	mov	r3,zero
 4028384:	01002004 	movi	r4,128
 4028388:	00000106 	br	4028390 <_init_signal_r+0x4c>
 402838c:	8080b717 	ldw	r2,732(r16)
 4028390:	10c5883a 	add	r2,r2,r3
 4028394:	10000015 	stw	zero,0(r2)
 4028398:	18c00104 	addi	r3,r3,4
 402839c:	193ffb1e 	bne	r3,r4,402838c <__flash_rwdata_start+0xffff1e34>
 40283a0:	0005883a 	mov	r2,zero
 40283a4:	dfc00117 	ldw	ra,4(sp)
 40283a8:	dc000017 	ldw	r16,0(sp)
 40283ac:	dec00204 	addi	sp,sp,8
 40283b0:	f800283a 	ret
 40283b4:	00bfffc4 	movi	r2,-1
 40283b8:	003ffa06 	br	40283a4 <__flash_rwdata_start+0xffff1e4c>

040283bc <_signal_r>:
 40283bc:	f811883a 	mov	r8,ra
 40283c0:	40346e80 	call	40346e8 <_mcount>
 40283c4:	403f883a 	mov	ra,r8
 40283c8:	00c007c4 	movi	r3,31
 40283cc:	19401536 	bltu	r3,r5,4028424 <_signal_r+0x68>
 40283d0:	defffc04 	addi	sp,sp,-16
 40283d4:	dfc00315 	stw	ra,12(sp)
 40283d8:	dc800215 	stw	r18,8(sp)
 40283dc:	dc400115 	stw	r17,4(sp)
 40283e0:	dc000015 	stw	r16,0(sp)
 40283e4:	2080b717 	ldw	r2,732(r4)
 40283e8:	3023883a 	mov	r17,r6
 40283ec:	2021883a 	mov	r16,r4
 40283f0:	2825883a 	mov	r18,r5
 40283f4:	10000f26 	beq	r2,zero,4028434 <_signal_r+0x78>
 40283f8:	948b883a 	add	r5,r18,r18
 40283fc:	294b883a 	add	r5,r5,r5
 4028400:	114b883a 	add	r5,r2,r5
 4028404:	28800017 	ldw	r2,0(r5)
 4028408:	2c400015 	stw	r17,0(r5)
 402840c:	dfc00317 	ldw	ra,12(sp)
 4028410:	dc800217 	ldw	r18,8(sp)
 4028414:	dc400117 	ldw	r17,4(sp)
 4028418:	dc000017 	ldw	r16,0(sp)
 402841c:	dec00404 	addi	sp,sp,16
 4028420:	f800283a 	ret
 4028424:	00c00584 	movi	r3,22
 4028428:	20c00015 	stw	r3,0(r4)
 402842c:	00bfffc4 	movi	r2,-1
 4028430:	f800283a 	ret
 4028434:	40283440 	call	4028344 <_init_signal_r>
 4028438:	1000021e 	bne	r2,zero,4028444 <_signal_r+0x88>
 402843c:	8080b717 	ldw	r2,732(r16)
 4028440:	003fed06 	br	40283f8 <__flash_rwdata_start+0xffff1ea0>
 4028444:	00bfffc4 	movi	r2,-1
 4028448:	003ff006 	br	402840c <__flash_rwdata_start+0xffff1eb4>

0402844c <_raise_r>:
 402844c:	f811883a 	mov	r8,ra
 4028450:	40346e80 	call	40346e8 <_mcount>
 4028454:	403f883a 	mov	ra,r8
 4028458:	008007c4 	movi	r2,31
 402845c:	11402936 	bltu	r2,r5,4028504 <_raise_r+0xb8>
 4028460:	defffd04 	addi	sp,sp,-12
 4028464:	dfc00215 	stw	ra,8(sp)
 4028468:	dc400115 	stw	r17,4(sp)
 402846c:	dc000015 	stw	r16,0(sp)
 4028470:	20c0b717 	ldw	r3,732(r4)
 4028474:	2021883a 	mov	r16,r4
 4028478:	2823883a 	mov	r17,r5
 402847c:	18001726 	beq	r3,zero,40284dc <_raise_r+0x90>
 4028480:	2945883a 	add	r2,r5,r5
 4028484:	1085883a 	add	r2,r2,r2
 4028488:	1887883a 	add	r3,r3,r2
 402848c:	19800017 	ldw	r6,0(r3)
 4028490:	30001226 	beq	r6,zero,40284dc <_raise_r+0x90>
 4028494:	00800044 	movi	r2,1
 4028498:	30800e26 	beq	r6,r2,40284d4 <_raise_r+0x88>
 402849c:	013fffc4 	movi	r4,-1
 40284a0:	31000926 	beq	r6,r4,40284c8 <_raise_r+0x7c>
 40284a4:	18000015 	stw	zero,0(r3)
 40284a8:	2809883a 	mov	r4,r5
 40284ac:	303ee83a 	callr	r6
 40284b0:	0005883a 	mov	r2,zero
 40284b4:	dfc00217 	ldw	ra,8(sp)
 40284b8:	dc400117 	ldw	r17,4(sp)
 40284bc:	dc000017 	ldw	r16,0(sp)
 40284c0:	dec00304 	addi	sp,sp,12
 40284c4:	f800283a 	ret
 40284c8:	00c00584 	movi	r3,22
 40284cc:	80c00015 	stw	r3,0(r16)
 40284d0:	003ff806 	br	40284b4 <__flash_rwdata_start+0xffff1f5c>
 40284d4:	0005883a 	mov	r2,zero
 40284d8:	003ff606 	br	40284b4 <__flash_rwdata_start+0xffff1f5c>
 40284dc:	8009883a 	mov	r4,r16
 40284e0:	40286b00 	call	40286b0 <_getpid_r>
 40284e4:	880d883a 	mov	r6,r17
 40284e8:	100b883a 	mov	r5,r2
 40284ec:	8009883a 	mov	r4,r16
 40284f0:	dfc00217 	ldw	ra,8(sp)
 40284f4:	dc400117 	ldw	r17,4(sp)
 40284f8:	dc000017 	ldw	r16,0(sp)
 40284fc:	dec00304 	addi	sp,sp,12
 4028500:	40286481 	jmpi	4028648 <_kill_r>
 4028504:	00800584 	movi	r2,22
 4028508:	20800015 	stw	r2,0(r4)
 402850c:	00bfffc4 	movi	r2,-1
 4028510:	f800283a 	ret

04028514 <__sigtramp_r>:
 4028514:	f811883a 	mov	r8,ra
 4028518:	40346e80 	call	40346e8 <_mcount>
 402851c:	403f883a 	mov	ra,r8
 4028520:	008007c4 	movi	r2,31
 4028524:	11402436 	bltu	r2,r5,40285b8 <__sigtramp_r+0xa4>
 4028528:	defffd04 	addi	sp,sp,-12
 402852c:	dfc00215 	stw	ra,8(sp)
 4028530:	dc400115 	stw	r17,4(sp)
 4028534:	dc000015 	stw	r16,0(sp)
 4028538:	20c0b717 	ldw	r3,732(r4)
 402853c:	2021883a 	mov	r16,r4
 4028540:	2823883a 	mov	r17,r5
 4028544:	18001826 	beq	r3,zero,40285a8 <__sigtramp_r+0x94>
 4028548:	8c45883a 	add	r2,r17,r17
 402854c:	1085883a 	add	r2,r2,r2
 4028550:	1885883a 	add	r2,r3,r2
 4028554:	10c00017 	ldw	r3,0(r2)
 4028558:	18001126 	beq	r3,zero,40285a0 <__sigtramp_r+0x8c>
 402855c:	013fffc4 	movi	r4,-1
 4028560:	19000d26 	beq	r3,r4,4028598 <__sigtramp_r+0x84>
 4028564:	01000044 	movi	r4,1
 4028568:	19000926 	beq	r3,r4,4028590 <__sigtramp_r+0x7c>
 402856c:	10000015 	stw	zero,0(r2)
 4028570:	8809883a 	mov	r4,r17
 4028574:	183ee83a 	callr	r3
 4028578:	0005883a 	mov	r2,zero
 402857c:	dfc00217 	ldw	ra,8(sp)
 4028580:	dc400117 	ldw	r17,4(sp)
 4028584:	dc000017 	ldw	r16,0(sp)
 4028588:	dec00304 	addi	sp,sp,12
 402858c:	f800283a 	ret
 4028590:	008000c4 	movi	r2,3
 4028594:	003ff906 	br	402857c <__flash_rwdata_start+0xffff2024>
 4028598:	00800084 	movi	r2,2
 402859c:	003ff706 	br	402857c <__flash_rwdata_start+0xffff2024>
 40285a0:	00800044 	movi	r2,1
 40285a4:	003ff506 	br	402857c <__flash_rwdata_start+0xffff2024>
 40285a8:	40283440 	call	4028344 <_init_signal_r>
 40285ac:	1000041e 	bne	r2,zero,40285c0 <__sigtramp_r+0xac>
 40285b0:	80c0b717 	ldw	r3,732(r16)
 40285b4:	003fe406 	br	4028548 <__flash_rwdata_start+0xffff1ff0>
 40285b8:	00bfffc4 	movi	r2,-1
 40285bc:	f800283a 	ret
 40285c0:	00bfffc4 	movi	r2,-1
 40285c4:	003fed06 	br	402857c <__flash_rwdata_start+0xffff2024>

040285c8 <raise>:
 40285c8:	f811883a 	mov	r8,ra
 40285cc:	40346e80 	call	40346e8 <_mcount>
 40285d0:	403f883a 	mov	ra,r8
 40285d4:	00800034 	movhi	r2,0
 40285d8:	10886904 	addi	r2,r2,8612
 40285dc:	200b883a 	mov	r5,r4
 40285e0:	11000017 	ldw	r4,0(r2)
 40285e4:	402844c1 	jmpi	402844c <_raise_r>

040285e8 <signal>:
 40285e8:	f811883a 	mov	r8,ra
 40285ec:	40346e80 	call	40346e8 <_mcount>
 40285f0:	403f883a 	mov	ra,r8
 40285f4:	00800034 	movhi	r2,0
 40285f8:	10886904 	addi	r2,r2,8612
 40285fc:	280d883a 	mov	r6,r5
 4028600:	200b883a 	mov	r5,r4
 4028604:	11000017 	ldw	r4,0(r2)
 4028608:	40283bc1 	jmpi	40283bc <_signal_r>

0402860c <_init_signal>:
 402860c:	f811883a 	mov	r8,ra
 4028610:	40346e80 	call	40346e8 <_mcount>
 4028614:	403f883a 	mov	ra,r8
 4028618:	00800034 	movhi	r2,0
 402861c:	10886904 	addi	r2,r2,8612
 4028620:	11000017 	ldw	r4,0(r2)
 4028624:	40283441 	jmpi	4028344 <_init_signal_r>

04028628 <__sigtramp>:
 4028628:	f811883a 	mov	r8,ra
 402862c:	40346e80 	call	40346e8 <_mcount>
 4028630:	403f883a 	mov	ra,r8
 4028634:	00800034 	movhi	r2,0
 4028638:	10886904 	addi	r2,r2,8612
 402863c:	200b883a 	mov	r5,r4
 4028640:	11000017 	ldw	r4,0(r2)
 4028644:	40285141 	jmpi	4028514 <__sigtramp_r>

04028648 <_kill_r>:
 4028648:	f811883a 	mov	r8,ra
 402864c:	40346e80 	call	40346e8 <_mcount>
 4028650:	403f883a 	mov	ra,r8
 4028654:	defffd04 	addi	sp,sp,-12
 4028658:	dfc00215 	stw	ra,8(sp)
 402865c:	dc400115 	stw	r17,4(sp)
 4028660:	dc000015 	stw	r16,0(sp)
 4028664:	04000034 	movhi	r16,0
 4028668:	2805883a 	mov	r2,r5
 402866c:	84088004 	addi	r16,r16,8704
 4028670:	2023883a 	mov	r17,r4
 4028674:	300b883a 	mov	r5,r6
 4028678:	1009883a 	mov	r4,r2
 402867c:	80000015 	stw	zero,0(r16)
 4028680:	40343f80 	call	40343f8 <kill>
 4028684:	00ffffc4 	movi	r3,-1
 4028688:	10c00526 	beq	r2,r3,40286a0 <_kill_r+0x58>
 402868c:	dfc00217 	ldw	ra,8(sp)
 4028690:	dc400117 	ldw	r17,4(sp)
 4028694:	dc000017 	ldw	r16,0(sp)
 4028698:	dec00304 	addi	sp,sp,12
 402869c:	f800283a 	ret
 40286a0:	80c00017 	ldw	r3,0(r16)
 40286a4:	183ff926 	beq	r3,zero,402868c <__flash_rwdata_start+0xffff2134>
 40286a8:	88c00015 	stw	r3,0(r17)
 40286ac:	003ff706 	br	402868c <__flash_rwdata_start+0xffff2134>

040286b0 <_getpid_r>:
 40286b0:	f811883a 	mov	r8,ra
 40286b4:	40346e80 	call	40346e8 <_mcount>
 40286b8:	403f883a 	mov	ra,r8
 40286bc:	40341641 	jmpi	4034164 <getpid>

040286c0 <strcmp>:
 40286c0:	f811883a 	mov	r8,ra
 40286c4:	40346e80 	call	40346e8 <_mcount>
 40286c8:	403f883a 	mov	ra,r8
 40286cc:	2144b03a 	or	r2,r4,r5
 40286d0:	108000cc 	andi	r2,r2,3
 40286d4:	1000171e 	bne	r2,zero,4028734 <strcmp+0x74>
 40286d8:	20800017 	ldw	r2,0(r4)
 40286dc:	28c00017 	ldw	r3,0(r5)
 40286e0:	10c0141e 	bne	r2,r3,4028734 <strcmp+0x74>
 40286e4:	027fbff4 	movhi	r9,65279
 40286e8:	4a7fbfc4 	addi	r9,r9,-257
 40286ec:	0086303a 	nor	r3,zero,r2
 40286f0:	02202074 	movhi	r8,32897
 40286f4:	1245883a 	add	r2,r2,r9
 40286f8:	42202004 	addi	r8,r8,-32640
 40286fc:	10c4703a 	and	r2,r2,r3
 4028700:	1204703a 	and	r2,r2,r8
 4028704:	10000226 	beq	r2,zero,4028710 <strcmp+0x50>
 4028708:	00002106 	br	4028790 <strcmp+0xd0>
 402870c:	1000201e 	bne	r2,zero,4028790 <strcmp+0xd0>
 4028710:	21000104 	addi	r4,r4,4
 4028714:	20c00017 	ldw	r3,0(r4)
 4028718:	29400104 	addi	r5,r5,4
 402871c:	29800017 	ldw	r6,0(r5)
 4028720:	1a4f883a 	add	r7,r3,r9
 4028724:	00c4303a 	nor	r2,zero,r3
 4028728:	3884703a 	and	r2,r7,r2
 402872c:	1204703a 	and	r2,r2,r8
 4028730:	19bff626 	beq	r3,r6,402870c <__flash_rwdata_start+0xffff21b4>
 4028734:	20800003 	ldbu	r2,0(r4)
 4028738:	10c03fcc 	andi	r3,r2,255
 402873c:	18c0201c 	xori	r3,r3,128
 4028740:	18ffe004 	addi	r3,r3,-128
 4028744:	18000c26 	beq	r3,zero,4028778 <strcmp+0xb8>
 4028748:	29800007 	ldb	r6,0(r5)
 402874c:	19800326 	beq	r3,r6,402875c <strcmp+0x9c>
 4028750:	00001106 	br	4028798 <strcmp+0xd8>
 4028754:	29800007 	ldb	r6,0(r5)
 4028758:	11800b1e 	bne	r2,r6,4028788 <strcmp+0xc8>
 402875c:	21000044 	addi	r4,r4,1
 4028760:	20c00003 	ldbu	r3,0(r4)
 4028764:	29400044 	addi	r5,r5,1
 4028768:	18803fcc 	andi	r2,r3,255
 402876c:	1080201c 	xori	r2,r2,128
 4028770:	10bfe004 	addi	r2,r2,-128
 4028774:	103ff71e 	bne	r2,zero,4028754 <__flash_rwdata_start+0xffff21fc>
 4028778:	0007883a 	mov	r3,zero
 402877c:	28800003 	ldbu	r2,0(r5)
 4028780:	1885c83a 	sub	r2,r3,r2
 4028784:	f800283a 	ret
 4028788:	18c03fcc 	andi	r3,r3,255
 402878c:	003ffb06 	br	402877c <__flash_rwdata_start+0xffff2224>
 4028790:	0005883a 	mov	r2,zero
 4028794:	f800283a 	ret
 4028798:	10c03fcc 	andi	r3,r2,255
 402879c:	003ff706 	br	402877c <__flash_rwdata_start+0xffff2224>

040287a0 <strlen>:
 40287a0:	f811883a 	mov	r8,ra
 40287a4:	40346e80 	call	40346e8 <_mcount>
 40287a8:	403f883a 	mov	ra,r8
 40287ac:	208000cc 	andi	r2,r4,3
 40287b0:	10002026 	beq	r2,zero,4028834 <strlen+0x94>
 40287b4:	20800007 	ldb	r2,0(r4)
 40287b8:	10002026 	beq	r2,zero,402883c <strlen+0x9c>
 40287bc:	2005883a 	mov	r2,r4
 40287c0:	00000206 	br	40287cc <strlen+0x2c>
 40287c4:	10c00007 	ldb	r3,0(r2)
 40287c8:	18001826 	beq	r3,zero,402882c <strlen+0x8c>
 40287cc:	10800044 	addi	r2,r2,1
 40287d0:	10c000cc 	andi	r3,r2,3
 40287d4:	183ffb1e 	bne	r3,zero,40287c4 <__flash_rwdata_start+0xffff226c>
 40287d8:	10c00017 	ldw	r3,0(r2)
 40287dc:	01ffbff4 	movhi	r7,65279
 40287e0:	39ffbfc4 	addi	r7,r7,-257
 40287e4:	00ca303a 	nor	r5,zero,r3
 40287e8:	01a02074 	movhi	r6,32897
 40287ec:	19c7883a 	add	r3,r3,r7
 40287f0:	31a02004 	addi	r6,r6,-32640
 40287f4:	1946703a 	and	r3,r3,r5
 40287f8:	1986703a 	and	r3,r3,r6
 40287fc:	1800091e 	bne	r3,zero,4028824 <strlen+0x84>
 4028800:	10800104 	addi	r2,r2,4
 4028804:	10c00017 	ldw	r3,0(r2)
 4028808:	19cb883a 	add	r5,r3,r7
 402880c:	00c6303a 	nor	r3,zero,r3
 4028810:	28c6703a 	and	r3,r5,r3
 4028814:	1986703a 	and	r3,r3,r6
 4028818:	183ff926 	beq	r3,zero,4028800 <__flash_rwdata_start+0xffff22a8>
 402881c:	00000106 	br	4028824 <strlen+0x84>
 4028820:	10800044 	addi	r2,r2,1
 4028824:	10c00007 	ldb	r3,0(r2)
 4028828:	183ffd1e 	bne	r3,zero,4028820 <__flash_rwdata_start+0xffff22c8>
 402882c:	1105c83a 	sub	r2,r2,r4
 4028830:	f800283a 	ret
 4028834:	2005883a 	mov	r2,r4
 4028838:	003fe706 	br	40287d8 <__flash_rwdata_start+0xffff2280>
 402883c:	0005883a 	mov	r2,zero
 4028840:	003ffb06 	br	4028830 <__flash_rwdata_start+0xffff22d8>

04028844 <___vfprintf_internal_r>:
 4028844:	f811883a 	mov	r8,ra
 4028848:	40346e80 	call	40346e8 <_mcount>
 402884c:	403f883a 	mov	ra,r8
 4028850:	deffb804 	addi	sp,sp,-288
 4028854:	dfc04715 	stw	ra,284(sp)
 4028858:	df004615 	stw	fp,280(sp)
 402885c:	ddc04515 	stw	r23,276(sp)
 4028860:	dd804415 	stw	r22,272(sp)
 4028864:	dd404315 	stw	r21,268(sp)
 4028868:	dd004215 	stw	r20,264(sp)
 402886c:	dcc04115 	stw	r19,260(sp)
 4028870:	dc804015 	stw	r18,256(sp)
 4028874:	dc403f15 	stw	r17,252(sp)
 4028878:	dc003e15 	stw	r16,248(sp)
 402887c:	d9002c15 	stw	r4,176(sp)
 4028880:	282f883a 	mov	r23,r5
 4028884:	302b883a 	mov	r21,r6
 4028888:	d9c02d15 	stw	r7,180(sp)
 402888c:	402d7e80 	call	402d7e8 <_localeconv_r>
 4028890:	10800017 	ldw	r2,0(r2)
 4028894:	1009883a 	mov	r4,r2
 4028898:	d8803415 	stw	r2,208(sp)
 402889c:	40287a00 	call	40287a0 <strlen>
 40288a0:	d8803715 	stw	r2,220(sp)
 40288a4:	d8802c17 	ldw	r2,176(sp)
 40288a8:	10000226 	beq	r2,zero,40288b4 <___vfprintf_internal_r+0x70>
 40288ac:	10800e17 	ldw	r2,56(r2)
 40288b0:	1000f926 	beq	r2,zero,4028c98 <___vfprintf_internal_r+0x454>
 40288b4:	b880030b 	ldhu	r2,12(r23)
 40288b8:	10c8000c 	andi	r3,r2,8192
 40288bc:	1800061e 	bne	r3,zero,40288d8 <___vfprintf_internal_r+0x94>
 40288c0:	b9001917 	ldw	r4,100(r23)
 40288c4:	00f7ffc4 	movi	r3,-8193
 40288c8:	10880014 	ori	r2,r2,8192
 40288cc:	20c6703a 	and	r3,r4,r3
 40288d0:	b880030d 	sth	r2,12(r23)
 40288d4:	b8c01915 	stw	r3,100(r23)
 40288d8:	10c0020c 	andi	r3,r2,8
 40288dc:	1800c126 	beq	r3,zero,4028be4 <___vfprintf_internal_r+0x3a0>
 40288e0:	b8c00417 	ldw	r3,16(r23)
 40288e4:	1800bf26 	beq	r3,zero,4028be4 <___vfprintf_internal_r+0x3a0>
 40288e8:	1080068c 	andi	r2,r2,26
 40288ec:	00c00284 	movi	r3,10
 40288f0:	10c0c426 	beq	r2,r3,4028c04 <___vfprintf_internal_r+0x3c0>
 40288f4:	d8c00404 	addi	r3,sp,16
 40288f8:	05000034 	movhi	r20,0
 40288fc:	d9001e04 	addi	r4,sp,120
 4028900:	a5013984 	addi	r20,r20,1254
 4028904:	d8c01e15 	stw	r3,120(sp)
 4028908:	d8002015 	stw	zero,128(sp)
 402890c:	d8001f15 	stw	zero,124(sp)
 4028910:	d8003315 	stw	zero,204(sp)
 4028914:	d8003615 	stw	zero,216(sp)
 4028918:	d8003815 	stw	zero,224(sp)
 402891c:	1811883a 	mov	r8,r3
 4028920:	d8003915 	stw	zero,228(sp)
 4028924:	d8003a15 	stw	zero,232(sp)
 4028928:	d8002f15 	stw	zero,188(sp)
 402892c:	d9002815 	stw	r4,160(sp)
 4028930:	a8800007 	ldb	r2,0(r21)
 4028934:	10027b26 	beq	r2,zero,4029324 <___vfprintf_internal_r+0xae0>
 4028938:	00c00944 	movi	r3,37
 402893c:	a821883a 	mov	r16,r21
 4028940:	10c0021e 	bne	r2,r3,402894c <___vfprintf_internal_r+0x108>
 4028944:	00001406 	br	4028998 <___vfprintf_internal_r+0x154>
 4028948:	10c00326 	beq	r2,r3,4028958 <___vfprintf_internal_r+0x114>
 402894c:	84000044 	addi	r16,r16,1
 4028950:	80800007 	ldb	r2,0(r16)
 4028954:	103ffc1e 	bne	r2,zero,4028948 <__flash_rwdata_start+0xffff23f0>
 4028958:	8563c83a 	sub	r17,r16,r21
 402895c:	88000e26 	beq	r17,zero,4028998 <___vfprintf_internal_r+0x154>
 4028960:	d8c02017 	ldw	r3,128(sp)
 4028964:	d8801f17 	ldw	r2,124(sp)
 4028968:	45400015 	stw	r21,0(r8)
 402896c:	1c47883a 	add	r3,r3,r17
 4028970:	10800044 	addi	r2,r2,1
 4028974:	d8c02015 	stw	r3,128(sp)
 4028978:	44400115 	stw	r17,4(r8)
 402897c:	d8801f15 	stw	r2,124(sp)
 4028980:	00c001c4 	movi	r3,7
 4028984:	1880a716 	blt	r3,r2,4028c24 <___vfprintf_internal_r+0x3e0>
 4028988:	42000204 	addi	r8,r8,8
 402898c:	d9402f17 	ldw	r5,188(sp)
 4028990:	2c4b883a 	add	r5,r5,r17
 4028994:	d9402f15 	stw	r5,188(sp)
 4028998:	80800007 	ldb	r2,0(r16)
 402899c:	1000a826 	beq	r2,zero,4028c40 <___vfprintf_internal_r+0x3fc>
 40289a0:	84400047 	ldb	r17,1(r16)
 40289a4:	00bfffc4 	movi	r2,-1
 40289a8:	85400044 	addi	r21,r16,1
 40289ac:	d8002785 	stb	zero,158(sp)
 40289b0:	0007883a 	mov	r3,zero
 40289b4:	000f883a 	mov	r7,zero
 40289b8:	d8802915 	stw	r2,164(sp)
 40289bc:	d8003115 	stw	zero,196(sp)
 40289c0:	0025883a 	mov	r18,zero
 40289c4:	01401604 	movi	r5,88
 40289c8:	01800244 	movi	r6,9
 40289cc:	02800a84 	movi	r10,42
 40289d0:	02401b04 	movi	r9,108
 40289d4:	ad400044 	addi	r21,r21,1
 40289d8:	88bff804 	addi	r2,r17,-32
 40289dc:	28830436 	bltu	r5,r2,40295f0 <___vfprintf_internal_r+0xdac>
 40289e0:	100490ba 	slli	r2,r2,2
 40289e4:	010100f4 	movhi	r4,1027
 40289e8:	21227e04 	addi	r4,r4,-30216
 40289ec:	1105883a 	add	r2,r2,r4
 40289f0:	10800017 	ldw	r2,0(r2)
 40289f4:	1000683a 	jmp	r2
 40289f8:	04029510 	cmplti	r16,zero,2644
 40289fc:	040295f0 	cmpltui	r16,zero,2647
 4028a00:	040295f0 	cmpltui	r16,zero,2647
 4028a04:	04029530 	cmpltui	r16,zero,2644
 4028a08:	040295f0 	cmpltui	r16,zero,2647
 4028a0c:	040295f0 	cmpltui	r16,zero,2647
 4028a10:	040295f0 	cmpltui	r16,zero,2647
 4028a14:	040295f0 	cmpltui	r16,zero,2647
 4028a18:	040295f0 	cmpltui	r16,zero,2647
 4028a1c:	040295f0 	cmpltui	r16,zero,2647
 4028a20:	04028ca4 	muli	r16,zero,2610
 4028a24:	0402944c 	andi	r16,zero,2641
 4028a28:	040295f0 	cmpltui	r16,zero,2647
 4028a2c:	04028b6c 	andhi	r16,zero,2605
 4028a30:	04028ccc 	andi	r16,zero,2611
 4028a34:	040295f0 	cmpltui	r16,zero,2647
 4028a38:	04028d0c 	andi	r16,zero,2612
 4028a3c:	04028d18 	cmpnei	r16,zero,2612
 4028a40:	04028d18 	cmpnei	r16,zero,2612
 4028a44:	04028d18 	cmpnei	r16,zero,2612
 4028a48:	04028d18 	cmpnei	r16,zero,2612
 4028a4c:	04028d18 	cmpnei	r16,zero,2612
 4028a50:	04028d18 	cmpnei	r16,zero,2612
 4028a54:	04028d18 	cmpnei	r16,zero,2612
 4028a58:	04028d18 	cmpnei	r16,zero,2612
 4028a5c:	04028d18 	cmpnei	r16,zero,2612
 4028a60:	040295f0 	cmpltui	r16,zero,2647
 4028a64:	040295f0 	cmpltui	r16,zero,2647
 4028a68:	040295f0 	cmpltui	r16,zero,2647
 4028a6c:	040295f0 	cmpltui	r16,zero,2647
 4028a70:	040295f0 	cmpltui	r16,zero,2647
 4028a74:	040295f0 	cmpltui	r16,zero,2647
 4028a78:	040295f0 	cmpltui	r16,zero,2647
 4028a7c:	040295f0 	cmpltui	r16,zero,2647
 4028a80:	040295f0 	cmpltui	r16,zero,2647
 4028a84:	040295f0 	cmpltui	r16,zero,2647
 4028a88:	04028d4c 	andi	r16,zero,2613
 4028a8c:	04028e08 	cmpgei	r16,zero,2616
 4028a90:	040295f0 	cmpltui	r16,zero,2647
 4028a94:	04028e08 	cmpgei	r16,zero,2616
 4028a98:	040295f0 	cmpltui	r16,zero,2647
 4028a9c:	040295f0 	cmpltui	r16,zero,2647
 4028aa0:	040295f0 	cmpltui	r16,zero,2647
 4028aa4:	040295f0 	cmpltui	r16,zero,2647
 4028aa8:	04028ea8 	cmpgeui	r16,zero,2618
 4028aac:	040295f0 	cmpltui	r16,zero,2647
 4028ab0:	040295f0 	cmpltui	r16,zero,2647
 4028ab4:	04028eb4 	movhi	r16,2618
 4028ab8:	040295f0 	cmpltui	r16,zero,2647
 4028abc:	040295f0 	cmpltui	r16,zero,2647
 4028ac0:	040295f0 	cmpltui	r16,zero,2647
 4028ac4:	040295f0 	cmpltui	r16,zero,2647
 4028ac8:	040295f0 	cmpltui	r16,zero,2647
 4028acc:	0402932c 	andhi	r16,zero,2636
 4028ad0:	040295f0 	cmpltui	r16,zero,2647
 4028ad4:	040295f0 	cmpltui	r16,zero,2647
 4028ad8:	0402938c 	andi	r16,zero,2638
 4028adc:	040295f0 	cmpltui	r16,zero,2647
 4028ae0:	040295f0 	cmpltui	r16,zero,2647
 4028ae4:	040295f0 	cmpltui	r16,zero,2647
 4028ae8:	040295f0 	cmpltui	r16,zero,2647
 4028aec:	040295f0 	cmpltui	r16,zero,2647
 4028af0:	040295f0 	cmpltui	r16,zero,2647
 4028af4:	040295f0 	cmpltui	r16,zero,2647
 4028af8:	040295f0 	cmpltui	r16,zero,2647
 4028afc:	040295f0 	cmpltui	r16,zero,2647
 4028b00:	040295f0 	cmpltui	r16,zero,2647
 4028b04:	0402959c 	xori	r16,zero,2646
 4028b08:	0402953c 	xorhi	r16,zero,2644
 4028b0c:	04028e08 	cmpgei	r16,zero,2616
 4028b10:	04028e08 	cmpgei	r16,zero,2616
 4028b14:	04028e08 	cmpgei	r16,zero,2616
 4028b18:	0402954c 	andi	r16,zero,2645
 4028b1c:	0402953c 	xorhi	r16,zero,2644
 4028b20:	040295f0 	cmpltui	r16,zero,2647
 4028b24:	040295f0 	cmpltui	r16,zero,2647
 4028b28:	04029558 	cmpnei	r16,zero,2645
 4028b2c:	040295f0 	cmpltui	r16,zero,2647
 4028b30:	04029568 	cmpgeui	r16,zero,2645
 4028b34:	0402943c 	xorhi	r16,zero,2640
 4028b38:	04028b78 	rdprs	r16,zero,2605
 4028b3c:	0402945c 	xori	r16,zero,2641
 4028b40:	040295f0 	cmpltui	r16,zero,2647
 4028b44:	04029468 	cmpgeui	r16,zero,2641
 4028b48:	040295f0 	cmpltui	r16,zero,2647
 4028b4c:	040294c4 	movi	r16,2643
 4028b50:	040295f0 	cmpltui	r16,zero,2647
 4028b54:	040295f0 	cmpltui	r16,zero,2647
 4028b58:	040294d4 	movui	r16,2643
 4028b5c:	d9003117 	ldw	r4,196(sp)
 4028b60:	d8802d15 	stw	r2,180(sp)
 4028b64:	0109c83a 	sub	r4,zero,r4
 4028b68:	d9003115 	stw	r4,196(sp)
 4028b6c:	94800114 	ori	r18,r18,4
 4028b70:	ac400007 	ldb	r17,0(r21)
 4028b74:	003f9706 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4028b78:	00800c04 	movi	r2,48
 4028b7c:	d9002d17 	ldw	r4,180(sp)
 4028b80:	d9402917 	ldw	r5,164(sp)
 4028b84:	d8802705 	stb	r2,156(sp)
 4028b88:	00801e04 	movi	r2,120
 4028b8c:	d8802745 	stb	r2,157(sp)
 4028b90:	d8002785 	stb	zero,158(sp)
 4028b94:	20c00104 	addi	r3,r4,4
 4028b98:	24c00017 	ldw	r19,0(r4)
 4028b9c:	002d883a 	mov	r22,zero
 4028ba0:	90800094 	ori	r2,r18,2
 4028ba4:	28029a16 	blt	r5,zero,4029610 <___vfprintf_internal_r+0xdcc>
 4028ba8:	00bfdfc4 	movi	r2,-129
 4028bac:	90a4703a 	and	r18,r18,r2
 4028bb0:	d8c02d15 	stw	r3,180(sp)
 4028bb4:	94800094 	ori	r18,r18,2
 4028bb8:	9802871e 	bne	r19,zero,40295d8 <___vfprintf_internal_r+0xd94>
 4028bbc:	00800034 	movhi	r2,0
 4028bc0:	10813204 	addi	r2,r2,1224
 4028bc4:	d8803915 	stw	r2,228(sp)
 4028bc8:	04401e04 	movi	r17,120
 4028bcc:	d8802917 	ldw	r2,164(sp)
 4028bd0:	0039883a 	mov	fp,zero
 4028bd4:	1001e926 	beq	r2,zero,402937c <___vfprintf_internal_r+0xb38>
 4028bd8:	0027883a 	mov	r19,zero
 4028bdc:	002d883a 	mov	r22,zero
 4028be0:	00020506 	br	40293f8 <___vfprintf_internal_r+0xbb4>
 4028be4:	d9002c17 	ldw	r4,176(sp)
 4028be8:	b80b883a 	mov	r5,r23
 4028bec:	402ab380 	call	402ab38 <__swsetup_r>
 4028bf0:	1005ac1e 	bne	r2,zero,402a2a4 <___vfprintf_internal_r+0x1a60>
 4028bf4:	b880030b 	ldhu	r2,12(r23)
 4028bf8:	00c00284 	movi	r3,10
 4028bfc:	1080068c 	andi	r2,r2,26
 4028c00:	10ff3c1e 	bne	r2,r3,40288f4 <__flash_rwdata_start+0xffff239c>
 4028c04:	b880038f 	ldh	r2,14(r23)
 4028c08:	103f3a16 	blt	r2,zero,40288f4 <__flash_rwdata_start+0xffff239c>
 4028c0c:	d9c02d17 	ldw	r7,180(sp)
 4028c10:	d9002c17 	ldw	r4,176(sp)
 4028c14:	a80d883a 	mov	r6,r21
 4028c18:	b80b883a 	mov	r5,r23
 4028c1c:	402aa700 	call	402aa70 <__sbprintf>
 4028c20:	00001106 	br	4028c68 <___vfprintf_internal_r+0x424>
 4028c24:	d9002c17 	ldw	r4,176(sp)
 4028c28:	d9801e04 	addi	r6,sp,120
 4028c2c:	b80b883a 	mov	r5,r23
 4028c30:	402f8740 	call	402f874 <__sprint_r>
 4028c34:	1000081e 	bne	r2,zero,4028c58 <___vfprintf_internal_r+0x414>
 4028c38:	da000404 	addi	r8,sp,16
 4028c3c:	003f5306 	br	402898c <__flash_rwdata_start+0xffff2434>
 4028c40:	d8802017 	ldw	r2,128(sp)
 4028c44:	10000426 	beq	r2,zero,4028c58 <___vfprintf_internal_r+0x414>
 4028c48:	d9002c17 	ldw	r4,176(sp)
 4028c4c:	d9801e04 	addi	r6,sp,120
 4028c50:	b80b883a 	mov	r5,r23
 4028c54:	402f8740 	call	402f874 <__sprint_r>
 4028c58:	b880030b 	ldhu	r2,12(r23)
 4028c5c:	1080100c 	andi	r2,r2,64
 4028c60:	1005901e 	bne	r2,zero,402a2a4 <___vfprintf_internal_r+0x1a60>
 4028c64:	d8802f17 	ldw	r2,188(sp)
 4028c68:	dfc04717 	ldw	ra,284(sp)
 4028c6c:	df004617 	ldw	fp,280(sp)
 4028c70:	ddc04517 	ldw	r23,276(sp)
 4028c74:	dd804417 	ldw	r22,272(sp)
 4028c78:	dd404317 	ldw	r21,268(sp)
 4028c7c:	dd004217 	ldw	r20,264(sp)
 4028c80:	dcc04117 	ldw	r19,260(sp)
 4028c84:	dc804017 	ldw	r18,256(sp)
 4028c88:	dc403f17 	ldw	r17,252(sp)
 4028c8c:	dc003e17 	ldw	r16,248(sp)
 4028c90:	dec04804 	addi	sp,sp,288
 4028c94:	f800283a 	ret
 4028c98:	d9002c17 	ldw	r4,176(sp)
 4028c9c:	402cba80 	call	402cba8 <__sinit>
 4028ca0:	003f0406 	br	40288b4 <__flash_rwdata_start+0xffff235c>
 4028ca4:	d8802d17 	ldw	r2,180(sp)
 4028ca8:	d9002d17 	ldw	r4,180(sp)
 4028cac:	10800017 	ldw	r2,0(r2)
 4028cb0:	d8803115 	stw	r2,196(sp)
 4028cb4:	20800104 	addi	r2,r4,4
 4028cb8:	d9003117 	ldw	r4,196(sp)
 4028cbc:	203fa716 	blt	r4,zero,4028b5c <__flash_rwdata_start+0xffff2604>
 4028cc0:	d8802d15 	stw	r2,180(sp)
 4028cc4:	ac400007 	ldb	r17,0(r21)
 4028cc8:	003f4206 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4028ccc:	ac400007 	ldb	r17,0(r21)
 4028cd0:	aac00044 	addi	r11,r21,1
 4028cd4:	8a872826 	beq	r17,r10,402a978 <___vfprintf_internal_r+0x2134>
 4028cd8:	88bff404 	addi	r2,r17,-48
 4028cdc:	0009883a 	mov	r4,zero
 4028ce0:	30867d36 	bltu	r6,r2,402a6d8 <___vfprintf_internal_r+0x1e94>
 4028ce4:	5c400007 	ldb	r17,0(r11)
 4028ce8:	210002a4 	muli	r4,r4,10
 4028cec:	5d400044 	addi	r21,r11,1
 4028cf0:	a817883a 	mov	r11,r21
 4028cf4:	2089883a 	add	r4,r4,r2
 4028cf8:	88bff404 	addi	r2,r17,-48
 4028cfc:	30bff92e 	bgeu	r6,r2,4028ce4 <__flash_rwdata_start+0xffff278c>
 4028d00:	2005c916 	blt	r4,zero,402a428 <___vfprintf_internal_r+0x1be4>
 4028d04:	d9002915 	stw	r4,164(sp)
 4028d08:	003f3306 	br	40289d8 <__flash_rwdata_start+0xffff2480>
 4028d0c:	94802014 	ori	r18,r18,128
 4028d10:	ac400007 	ldb	r17,0(r21)
 4028d14:	003f2f06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4028d18:	a809883a 	mov	r4,r21
 4028d1c:	d8003115 	stw	zero,196(sp)
 4028d20:	88bff404 	addi	r2,r17,-48
 4028d24:	0017883a 	mov	r11,zero
 4028d28:	24400007 	ldb	r17,0(r4)
 4028d2c:	5ac002a4 	muli	r11,r11,10
 4028d30:	ad400044 	addi	r21,r21,1
 4028d34:	a809883a 	mov	r4,r21
 4028d38:	12d7883a 	add	r11,r2,r11
 4028d3c:	88bff404 	addi	r2,r17,-48
 4028d40:	30bff92e 	bgeu	r6,r2,4028d28 <__flash_rwdata_start+0xffff27d0>
 4028d44:	dac03115 	stw	r11,196(sp)
 4028d48:	003f2306 	br	40289d8 <__flash_rwdata_start+0xffff2480>
 4028d4c:	18c03fcc 	andi	r3,r3,255
 4028d50:	18072b1e 	bne	r3,zero,402aa00 <___vfprintf_internal_r+0x21bc>
 4028d54:	94800414 	ori	r18,r18,16
 4028d58:	9080080c 	andi	r2,r18,32
 4028d5c:	10037b26 	beq	r2,zero,4029b4c <___vfprintf_internal_r+0x1308>
 4028d60:	d9402d17 	ldw	r5,180(sp)
 4028d64:	28800117 	ldw	r2,4(r5)
 4028d68:	2cc00017 	ldw	r19,0(r5)
 4028d6c:	29400204 	addi	r5,r5,8
 4028d70:	d9402d15 	stw	r5,180(sp)
 4028d74:	102d883a 	mov	r22,r2
 4028d78:	10044b16 	blt	r2,zero,4029ea8 <___vfprintf_internal_r+0x1664>
 4028d7c:	d9402917 	ldw	r5,164(sp)
 4028d80:	df002783 	ldbu	fp,158(sp)
 4028d84:	2803bc16 	blt	r5,zero,4029c78 <___vfprintf_internal_r+0x1434>
 4028d88:	00ffdfc4 	movi	r3,-129
 4028d8c:	9d84b03a 	or	r2,r19,r22
 4028d90:	90e4703a 	and	r18,r18,r3
 4028d94:	10017726 	beq	r2,zero,4029374 <___vfprintf_internal_r+0xb30>
 4028d98:	b0038326 	beq	r22,zero,4029ba8 <___vfprintf_internal_r+0x1364>
 4028d9c:	dc402a15 	stw	r17,168(sp)
 4028da0:	dc001e04 	addi	r16,sp,120
 4028da4:	b023883a 	mov	r17,r22
 4028da8:	402d883a 	mov	r22,r8
 4028dac:	9809883a 	mov	r4,r19
 4028db0:	880b883a 	mov	r5,r17
 4028db4:	01800284 	movi	r6,10
 4028db8:	000f883a 	mov	r7,zero
 4028dbc:	4031dec0 	call	4031dec <__umoddi3>
 4028dc0:	10800c04 	addi	r2,r2,48
 4028dc4:	843fffc4 	addi	r16,r16,-1
 4028dc8:	9809883a 	mov	r4,r19
 4028dcc:	880b883a 	mov	r5,r17
 4028dd0:	80800005 	stb	r2,0(r16)
 4028dd4:	01800284 	movi	r6,10
 4028dd8:	000f883a 	mov	r7,zero
 4028ddc:	40318680 	call	4031868 <__udivdi3>
 4028de0:	1027883a 	mov	r19,r2
 4028de4:	10c4b03a 	or	r2,r2,r3
 4028de8:	1823883a 	mov	r17,r3
 4028dec:	103fef1e 	bne	r2,zero,4028dac <__flash_rwdata_start+0xffff2854>
 4028df0:	d8c02817 	ldw	r3,160(sp)
 4028df4:	dc402a17 	ldw	r17,168(sp)
 4028df8:	b011883a 	mov	r8,r22
 4028dfc:	1c07c83a 	sub	r3,r3,r16
 4028e00:	d8c02e15 	stw	r3,184(sp)
 4028e04:	00005906 	br	4028f6c <___vfprintf_internal_r+0x728>
 4028e08:	18c03fcc 	andi	r3,r3,255
 4028e0c:	1806fa1e 	bne	r3,zero,402a9f8 <___vfprintf_internal_r+0x21b4>
 4028e10:	9080020c 	andi	r2,r18,8
 4028e14:	10048a26 	beq	r2,zero,402a040 <___vfprintf_internal_r+0x17fc>
 4028e18:	d8c02d17 	ldw	r3,180(sp)
 4028e1c:	d9002d17 	ldw	r4,180(sp)
 4028e20:	d9402d17 	ldw	r5,180(sp)
 4028e24:	18c00017 	ldw	r3,0(r3)
 4028e28:	21000117 	ldw	r4,4(r4)
 4028e2c:	29400204 	addi	r5,r5,8
 4028e30:	d8c03615 	stw	r3,216(sp)
 4028e34:	d9003815 	stw	r4,224(sp)
 4028e38:	d9402d15 	stw	r5,180(sp)
 4028e3c:	d9003617 	ldw	r4,216(sp)
 4028e40:	d9403817 	ldw	r5,224(sp)
 4028e44:	da003d15 	stw	r8,244(sp)
 4028e48:	04000044 	movi	r16,1
 4028e4c:	402f5740 	call	402f574 <__fpclassifyd>
 4028e50:	da003d17 	ldw	r8,244(sp)
 4028e54:	14041f1e 	bne	r2,r16,4029ed4 <___vfprintf_internal_r+0x1690>
 4028e58:	d9003617 	ldw	r4,216(sp)
 4028e5c:	d9403817 	ldw	r5,224(sp)
 4028e60:	000d883a 	mov	r6,zero
 4028e64:	000f883a 	mov	r7,zero
 4028e68:	4032d5c0 	call	4032d5c <__ledf2>
 4028e6c:	da003d17 	ldw	r8,244(sp)
 4028e70:	1005be16 	blt	r2,zero,402a56c <___vfprintf_internal_r+0x1d28>
 4028e74:	df002783 	ldbu	fp,158(sp)
 4028e78:	008011c4 	movi	r2,71
 4028e7c:	1445330e 	bge	r2,r17,402a34c <___vfprintf_internal_r+0x1b08>
 4028e80:	04000034 	movhi	r16,0
 4028e84:	84012a04 	addi	r16,r16,1192
 4028e88:	00c000c4 	movi	r3,3
 4028e8c:	00bfdfc4 	movi	r2,-129
 4028e90:	d8c02a15 	stw	r3,168(sp)
 4028e94:	90a4703a 	and	r18,r18,r2
 4028e98:	d8c02e15 	stw	r3,184(sp)
 4028e9c:	d8002915 	stw	zero,164(sp)
 4028ea0:	d8003215 	stw	zero,200(sp)
 4028ea4:	00003706 	br	4028f84 <___vfprintf_internal_r+0x740>
 4028ea8:	94800214 	ori	r18,r18,8
 4028eac:	ac400007 	ldb	r17,0(r21)
 4028eb0:	003ec806 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4028eb4:	18c03fcc 	andi	r3,r3,255
 4028eb8:	1806db1e 	bne	r3,zero,402aa28 <___vfprintf_internal_r+0x21e4>
 4028ebc:	94800414 	ori	r18,r18,16
 4028ec0:	9080080c 	andi	r2,r18,32
 4028ec4:	1002d826 	beq	r2,zero,4029a28 <___vfprintf_internal_r+0x11e4>
 4028ec8:	d9402d17 	ldw	r5,180(sp)
 4028ecc:	d8c02917 	ldw	r3,164(sp)
 4028ed0:	d8002785 	stb	zero,158(sp)
 4028ed4:	28800204 	addi	r2,r5,8
 4028ed8:	2cc00017 	ldw	r19,0(r5)
 4028edc:	2d800117 	ldw	r22,4(r5)
 4028ee0:	18048f16 	blt	r3,zero,402a120 <___vfprintf_internal_r+0x18dc>
 4028ee4:	013fdfc4 	movi	r4,-129
 4028ee8:	9d86b03a 	or	r3,r19,r22
 4028eec:	d8802d15 	stw	r2,180(sp)
 4028ef0:	9124703a 	and	r18,r18,r4
 4028ef4:	1802d91e 	bne	r3,zero,4029a5c <___vfprintf_internal_r+0x1218>
 4028ef8:	d8c02917 	ldw	r3,164(sp)
 4028efc:	0039883a 	mov	fp,zero
 4028f00:	1805c326 	beq	r3,zero,402a610 <___vfprintf_internal_r+0x1dcc>
 4028f04:	0027883a 	mov	r19,zero
 4028f08:	002d883a 	mov	r22,zero
 4028f0c:	dc001e04 	addi	r16,sp,120
 4028f10:	9806d0fa 	srli	r3,r19,3
 4028f14:	b008977a 	slli	r4,r22,29
 4028f18:	b02cd0fa 	srli	r22,r22,3
 4028f1c:	9cc001cc 	andi	r19,r19,7
 4028f20:	98800c04 	addi	r2,r19,48
 4028f24:	843fffc4 	addi	r16,r16,-1
 4028f28:	20e6b03a 	or	r19,r4,r3
 4028f2c:	80800005 	stb	r2,0(r16)
 4028f30:	9d86b03a 	or	r3,r19,r22
 4028f34:	183ff61e 	bne	r3,zero,4028f10 <__flash_rwdata_start+0xffff29b8>
 4028f38:	90c0004c 	andi	r3,r18,1
 4028f3c:	18013b26 	beq	r3,zero,402942c <___vfprintf_internal_r+0xbe8>
 4028f40:	10803fcc 	andi	r2,r2,255
 4028f44:	1080201c 	xori	r2,r2,128
 4028f48:	10bfe004 	addi	r2,r2,-128
 4028f4c:	00c00c04 	movi	r3,48
 4028f50:	10c13626 	beq	r2,r3,402942c <___vfprintf_internal_r+0xbe8>
 4028f54:	80ffffc5 	stb	r3,-1(r16)
 4028f58:	d8c02817 	ldw	r3,160(sp)
 4028f5c:	80bfffc4 	addi	r2,r16,-1
 4028f60:	1021883a 	mov	r16,r2
 4028f64:	1887c83a 	sub	r3,r3,r2
 4028f68:	d8c02e15 	stw	r3,184(sp)
 4028f6c:	d8802e17 	ldw	r2,184(sp)
 4028f70:	d9002917 	ldw	r4,164(sp)
 4028f74:	1100010e 	bge	r2,r4,4028f7c <___vfprintf_internal_r+0x738>
 4028f78:	2005883a 	mov	r2,r4
 4028f7c:	d8802a15 	stw	r2,168(sp)
 4028f80:	d8003215 	stw	zero,200(sp)
 4028f84:	e7003fcc 	andi	fp,fp,255
 4028f88:	e700201c 	xori	fp,fp,128
 4028f8c:	e73fe004 	addi	fp,fp,-128
 4028f90:	e0000326 	beq	fp,zero,4028fa0 <___vfprintf_internal_r+0x75c>
 4028f94:	d8c02a17 	ldw	r3,168(sp)
 4028f98:	18c00044 	addi	r3,r3,1
 4028f9c:	d8c02a15 	stw	r3,168(sp)
 4028fa0:	90c0008c 	andi	r3,r18,2
 4028fa4:	d8c02b15 	stw	r3,172(sp)
 4028fa8:	18000326 	beq	r3,zero,4028fb8 <___vfprintf_internal_r+0x774>
 4028fac:	d8c02a17 	ldw	r3,168(sp)
 4028fb0:	18c00084 	addi	r3,r3,2
 4028fb4:	d8c02a15 	stw	r3,168(sp)
 4028fb8:	90c0210c 	andi	r3,r18,132
 4028fbc:	d8c03015 	stw	r3,192(sp)
 4028fc0:	1801a31e 	bne	r3,zero,4029650 <___vfprintf_internal_r+0xe0c>
 4028fc4:	d9003117 	ldw	r4,196(sp)
 4028fc8:	d8c02a17 	ldw	r3,168(sp)
 4028fcc:	20e7c83a 	sub	r19,r4,r3
 4028fd0:	04c19f0e 	bge	zero,r19,4029650 <___vfprintf_internal_r+0xe0c>
 4028fd4:	02400404 	movi	r9,16
 4028fd8:	d8c02017 	ldw	r3,128(sp)
 4028fdc:	d8801f17 	ldw	r2,124(sp)
 4028fe0:	4cc50d0e 	bge	r9,r19,402a418 <___vfprintf_internal_r+0x1bd4>
 4028fe4:	01400034 	movhi	r5,0
 4028fe8:	29413d84 	addi	r5,r5,1270
 4028fec:	dc403b15 	stw	r17,236(sp)
 4028ff0:	d9403515 	stw	r5,212(sp)
 4028ff4:	9823883a 	mov	r17,r19
 4028ff8:	482d883a 	mov	r22,r9
 4028ffc:	9027883a 	mov	r19,r18
 4029000:	070001c4 	movi	fp,7
 4029004:	8025883a 	mov	r18,r16
 4029008:	dc002c17 	ldw	r16,176(sp)
 402900c:	00000306 	br	402901c <___vfprintf_internal_r+0x7d8>
 4029010:	8c7ffc04 	addi	r17,r17,-16
 4029014:	42000204 	addi	r8,r8,8
 4029018:	b440130e 	bge	r22,r17,4029068 <___vfprintf_internal_r+0x824>
 402901c:	01000034 	movhi	r4,0
 4029020:	18c00404 	addi	r3,r3,16
 4029024:	10800044 	addi	r2,r2,1
 4029028:	21013d84 	addi	r4,r4,1270
 402902c:	41000015 	stw	r4,0(r8)
 4029030:	45800115 	stw	r22,4(r8)
 4029034:	d8c02015 	stw	r3,128(sp)
 4029038:	d8801f15 	stw	r2,124(sp)
 402903c:	e0bff40e 	bge	fp,r2,4029010 <__flash_rwdata_start+0xffff2ab8>
 4029040:	d9801e04 	addi	r6,sp,120
 4029044:	b80b883a 	mov	r5,r23
 4029048:	8009883a 	mov	r4,r16
 402904c:	402f8740 	call	402f874 <__sprint_r>
 4029050:	103f011e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029054:	8c7ffc04 	addi	r17,r17,-16
 4029058:	d8c02017 	ldw	r3,128(sp)
 402905c:	d8801f17 	ldw	r2,124(sp)
 4029060:	da000404 	addi	r8,sp,16
 4029064:	b47fed16 	blt	r22,r17,402901c <__flash_rwdata_start+0xffff2ac4>
 4029068:	9021883a 	mov	r16,r18
 402906c:	9825883a 	mov	r18,r19
 4029070:	8827883a 	mov	r19,r17
 4029074:	dc403b17 	ldw	r17,236(sp)
 4029078:	d9403517 	ldw	r5,212(sp)
 402907c:	98c7883a 	add	r3,r19,r3
 4029080:	10800044 	addi	r2,r2,1
 4029084:	41400015 	stw	r5,0(r8)
 4029088:	44c00115 	stw	r19,4(r8)
 402908c:	d8c02015 	stw	r3,128(sp)
 4029090:	d8801f15 	stw	r2,124(sp)
 4029094:	010001c4 	movi	r4,7
 4029098:	2082a316 	blt	r4,r2,4029b28 <___vfprintf_internal_r+0x12e4>
 402909c:	df002787 	ldb	fp,158(sp)
 40290a0:	42000204 	addi	r8,r8,8
 40290a4:	e0000c26 	beq	fp,zero,40290d8 <___vfprintf_internal_r+0x894>
 40290a8:	d8801f17 	ldw	r2,124(sp)
 40290ac:	d9002784 	addi	r4,sp,158
 40290b0:	18c00044 	addi	r3,r3,1
 40290b4:	10800044 	addi	r2,r2,1
 40290b8:	41000015 	stw	r4,0(r8)
 40290bc:	01000044 	movi	r4,1
 40290c0:	41000115 	stw	r4,4(r8)
 40290c4:	d8c02015 	stw	r3,128(sp)
 40290c8:	d8801f15 	stw	r2,124(sp)
 40290cc:	010001c4 	movi	r4,7
 40290d0:	20823c16 	blt	r4,r2,40299c4 <___vfprintf_internal_r+0x1180>
 40290d4:	42000204 	addi	r8,r8,8
 40290d8:	d8802b17 	ldw	r2,172(sp)
 40290dc:	10000c26 	beq	r2,zero,4029110 <___vfprintf_internal_r+0x8cc>
 40290e0:	d8801f17 	ldw	r2,124(sp)
 40290e4:	d9002704 	addi	r4,sp,156
 40290e8:	18c00084 	addi	r3,r3,2
 40290ec:	10800044 	addi	r2,r2,1
 40290f0:	41000015 	stw	r4,0(r8)
 40290f4:	01000084 	movi	r4,2
 40290f8:	41000115 	stw	r4,4(r8)
 40290fc:	d8c02015 	stw	r3,128(sp)
 4029100:	d8801f15 	stw	r2,124(sp)
 4029104:	010001c4 	movi	r4,7
 4029108:	20823616 	blt	r4,r2,40299e4 <___vfprintf_internal_r+0x11a0>
 402910c:	42000204 	addi	r8,r8,8
 4029110:	d9003017 	ldw	r4,192(sp)
 4029114:	00802004 	movi	r2,128
 4029118:	20819926 	beq	r4,r2,4029780 <___vfprintf_internal_r+0xf3c>
 402911c:	d9402917 	ldw	r5,164(sp)
 4029120:	d8802e17 	ldw	r2,184(sp)
 4029124:	28adc83a 	sub	r22,r5,r2
 4029128:	0580310e 	bge	zero,r22,40291f0 <___vfprintf_internal_r+0x9ac>
 402912c:	07000404 	movi	fp,16
 4029130:	d8801f17 	ldw	r2,124(sp)
 4029134:	e584140e 	bge	fp,r22,402a188 <___vfprintf_internal_r+0x1944>
 4029138:	01400034 	movhi	r5,0
 402913c:	29413984 	addi	r5,r5,1254
 4029140:	dc402915 	stw	r17,164(sp)
 4029144:	d9402b15 	stw	r5,172(sp)
 4029148:	b023883a 	mov	r17,r22
 402914c:	04c001c4 	movi	r19,7
 4029150:	a82d883a 	mov	r22,r21
 4029154:	902b883a 	mov	r21,r18
 4029158:	8025883a 	mov	r18,r16
 402915c:	dc002c17 	ldw	r16,176(sp)
 4029160:	00000306 	br	4029170 <___vfprintf_internal_r+0x92c>
 4029164:	8c7ffc04 	addi	r17,r17,-16
 4029168:	42000204 	addi	r8,r8,8
 402916c:	e440110e 	bge	fp,r17,40291b4 <___vfprintf_internal_r+0x970>
 4029170:	18c00404 	addi	r3,r3,16
 4029174:	10800044 	addi	r2,r2,1
 4029178:	45000015 	stw	r20,0(r8)
 402917c:	47000115 	stw	fp,4(r8)
 4029180:	d8c02015 	stw	r3,128(sp)
 4029184:	d8801f15 	stw	r2,124(sp)
 4029188:	98bff60e 	bge	r19,r2,4029164 <__flash_rwdata_start+0xffff2c0c>
 402918c:	d9801e04 	addi	r6,sp,120
 4029190:	b80b883a 	mov	r5,r23
 4029194:	8009883a 	mov	r4,r16
 4029198:	402f8740 	call	402f874 <__sprint_r>
 402919c:	103eae1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40291a0:	8c7ffc04 	addi	r17,r17,-16
 40291a4:	d8c02017 	ldw	r3,128(sp)
 40291a8:	d8801f17 	ldw	r2,124(sp)
 40291ac:	da000404 	addi	r8,sp,16
 40291b0:	e47fef16 	blt	fp,r17,4029170 <__flash_rwdata_start+0xffff2c18>
 40291b4:	9021883a 	mov	r16,r18
 40291b8:	a825883a 	mov	r18,r21
 40291bc:	b02b883a 	mov	r21,r22
 40291c0:	882d883a 	mov	r22,r17
 40291c4:	dc402917 	ldw	r17,164(sp)
 40291c8:	d9002b17 	ldw	r4,172(sp)
 40291cc:	1d87883a 	add	r3,r3,r22
 40291d0:	10800044 	addi	r2,r2,1
 40291d4:	41000015 	stw	r4,0(r8)
 40291d8:	45800115 	stw	r22,4(r8)
 40291dc:	d8c02015 	stw	r3,128(sp)
 40291e0:	d8801f15 	stw	r2,124(sp)
 40291e4:	010001c4 	movi	r4,7
 40291e8:	2081ee16 	blt	r4,r2,40299a4 <___vfprintf_internal_r+0x1160>
 40291ec:	42000204 	addi	r8,r8,8
 40291f0:	9080400c 	andi	r2,r18,256
 40291f4:	1001181e 	bne	r2,zero,4029658 <___vfprintf_internal_r+0xe14>
 40291f8:	d9402e17 	ldw	r5,184(sp)
 40291fc:	d8801f17 	ldw	r2,124(sp)
 4029200:	44000015 	stw	r16,0(r8)
 4029204:	1947883a 	add	r3,r3,r5
 4029208:	10800044 	addi	r2,r2,1
 402920c:	41400115 	stw	r5,4(r8)
 4029210:	d8c02015 	stw	r3,128(sp)
 4029214:	d8801f15 	stw	r2,124(sp)
 4029218:	010001c4 	movi	r4,7
 402921c:	2081d316 	blt	r4,r2,402996c <___vfprintf_internal_r+0x1128>
 4029220:	42000204 	addi	r8,r8,8
 4029224:	9480010c 	andi	r18,r18,4
 4029228:	90003226 	beq	r18,zero,40292f4 <___vfprintf_internal_r+0xab0>
 402922c:	d9403117 	ldw	r5,196(sp)
 4029230:	d8802a17 	ldw	r2,168(sp)
 4029234:	28a1c83a 	sub	r16,r5,r2
 4029238:	04002e0e 	bge	zero,r16,40292f4 <___vfprintf_internal_r+0xab0>
 402923c:	04400404 	movi	r17,16
 4029240:	d8801f17 	ldw	r2,124(sp)
 4029244:	8c04a20e 	bge	r17,r16,402a4d0 <___vfprintf_internal_r+0x1c8c>
 4029248:	01400034 	movhi	r5,0
 402924c:	29413d84 	addi	r5,r5,1270
 4029250:	d9403515 	stw	r5,212(sp)
 4029254:	048001c4 	movi	r18,7
 4029258:	dcc02c17 	ldw	r19,176(sp)
 402925c:	00000306 	br	402926c <___vfprintf_internal_r+0xa28>
 4029260:	843ffc04 	addi	r16,r16,-16
 4029264:	42000204 	addi	r8,r8,8
 4029268:	8c00130e 	bge	r17,r16,40292b8 <___vfprintf_internal_r+0xa74>
 402926c:	01000034 	movhi	r4,0
 4029270:	18c00404 	addi	r3,r3,16
 4029274:	10800044 	addi	r2,r2,1
 4029278:	21013d84 	addi	r4,r4,1270
 402927c:	41000015 	stw	r4,0(r8)
 4029280:	44400115 	stw	r17,4(r8)
 4029284:	d8c02015 	stw	r3,128(sp)
 4029288:	d8801f15 	stw	r2,124(sp)
 402928c:	90bff40e 	bge	r18,r2,4029260 <__flash_rwdata_start+0xffff2d08>
 4029290:	d9801e04 	addi	r6,sp,120
 4029294:	b80b883a 	mov	r5,r23
 4029298:	9809883a 	mov	r4,r19
 402929c:	402f8740 	call	402f874 <__sprint_r>
 40292a0:	103e6d1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40292a4:	843ffc04 	addi	r16,r16,-16
 40292a8:	d8c02017 	ldw	r3,128(sp)
 40292ac:	d8801f17 	ldw	r2,124(sp)
 40292b0:	da000404 	addi	r8,sp,16
 40292b4:	8c3fed16 	blt	r17,r16,402926c <__flash_rwdata_start+0xffff2d14>
 40292b8:	d9403517 	ldw	r5,212(sp)
 40292bc:	1c07883a 	add	r3,r3,r16
 40292c0:	10800044 	addi	r2,r2,1
 40292c4:	41400015 	stw	r5,0(r8)
 40292c8:	44000115 	stw	r16,4(r8)
 40292cc:	d8c02015 	stw	r3,128(sp)
 40292d0:	d8801f15 	stw	r2,124(sp)
 40292d4:	010001c4 	movi	r4,7
 40292d8:	2080060e 	bge	r4,r2,40292f4 <___vfprintf_internal_r+0xab0>
 40292dc:	d9002c17 	ldw	r4,176(sp)
 40292e0:	d9801e04 	addi	r6,sp,120
 40292e4:	b80b883a 	mov	r5,r23
 40292e8:	402f8740 	call	402f874 <__sprint_r>
 40292ec:	103e5a1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40292f0:	d8c02017 	ldw	r3,128(sp)
 40292f4:	d8803117 	ldw	r2,196(sp)
 40292f8:	d9002a17 	ldw	r4,168(sp)
 40292fc:	1100010e 	bge	r2,r4,4029304 <___vfprintf_internal_r+0xac0>
 4029300:	2005883a 	mov	r2,r4
 4029304:	d9402f17 	ldw	r5,188(sp)
 4029308:	288b883a 	add	r5,r5,r2
 402930c:	d9402f15 	stw	r5,188(sp)
 4029310:	18019e1e 	bne	r3,zero,402998c <___vfprintf_internal_r+0x1148>
 4029314:	a8800007 	ldb	r2,0(r21)
 4029318:	d8001f15 	stw	zero,124(sp)
 402931c:	da000404 	addi	r8,sp,16
 4029320:	103d851e 	bne	r2,zero,4028938 <__flash_rwdata_start+0xffff23e0>
 4029324:	a821883a 	mov	r16,r21
 4029328:	003d9b06 	br	4028998 <__flash_rwdata_start+0xffff2440>
 402932c:	18c03fcc 	andi	r3,r3,255
 4029330:	1805c11e 	bne	r3,zero,402aa38 <___vfprintf_internal_r+0x21f4>
 4029334:	94800414 	ori	r18,r18,16
 4029338:	9080080c 	andi	r2,r18,32
 402933c:	10020c26 	beq	r2,zero,4029b70 <___vfprintf_internal_r+0x132c>
 4029340:	d8802d17 	ldw	r2,180(sp)
 4029344:	d9002917 	ldw	r4,164(sp)
 4029348:	d8002785 	stb	zero,158(sp)
 402934c:	10c00204 	addi	r3,r2,8
 4029350:	14c00017 	ldw	r19,0(r2)
 4029354:	15800117 	ldw	r22,4(r2)
 4029358:	20040f16 	blt	r4,zero,402a398 <___vfprintf_internal_r+0x1b54>
 402935c:	013fdfc4 	movi	r4,-129
 4029360:	9d84b03a 	or	r2,r19,r22
 4029364:	d8c02d15 	stw	r3,180(sp)
 4029368:	9124703a 	and	r18,r18,r4
 402936c:	0039883a 	mov	fp,zero
 4029370:	103e891e 	bne	r2,zero,4028d98 <__flash_rwdata_start+0xffff2840>
 4029374:	d9002917 	ldw	r4,164(sp)
 4029378:	2002c11e 	bne	r4,zero,4029e80 <___vfprintf_internal_r+0x163c>
 402937c:	d8002915 	stw	zero,164(sp)
 4029380:	d8002e15 	stw	zero,184(sp)
 4029384:	dc001e04 	addi	r16,sp,120
 4029388:	003ef806 	br	4028f6c <__flash_rwdata_start+0xffff2a14>
 402938c:	18c03fcc 	andi	r3,r3,255
 4029390:	18059d1e 	bne	r3,zero,402aa08 <___vfprintf_internal_r+0x21c4>
 4029394:	01400034 	movhi	r5,0
 4029398:	29412d04 	addi	r5,r5,1204
 402939c:	d9403915 	stw	r5,228(sp)
 40293a0:	9080080c 	andi	r2,r18,32
 40293a4:	10005226 	beq	r2,zero,40294f0 <___vfprintf_internal_r+0xcac>
 40293a8:	d8802d17 	ldw	r2,180(sp)
 40293ac:	14c00017 	ldw	r19,0(r2)
 40293b0:	15800117 	ldw	r22,4(r2)
 40293b4:	10800204 	addi	r2,r2,8
 40293b8:	d8802d15 	stw	r2,180(sp)
 40293bc:	9080004c 	andi	r2,r18,1
 40293c0:	10019026 	beq	r2,zero,4029a04 <___vfprintf_internal_r+0x11c0>
 40293c4:	9d84b03a 	or	r2,r19,r22
 40293c8:	10036926 	beq	r2,zero,402a170 <___vfprintf_internal_r+0x192c>
 40293cc:	d8c02917 	ldw	r3,164(sp)
 40293d0:	00800c04 	movi	r2,48
 40293d4:	d8802705 	stb	r2,156(sp)
 40293d8:	dc402745 	stb	r17,157(sp)
 40293dc:	d8002785 	stb	zero,158(sp)
 40293e0:	90800094 	ori	r2,r18,2
 40293e4:	18045d16 	blt	r3,zero,402a55c <___vfprintf_internal_r+0x1d18>
 40293e8:	00bfdfc4 	movi	r2,-129
 40293ec:	90a4703a 	and	r18,r18,r2
 40293f0:	94800094 	ori	r18,r18,2
 40293f4:	0039883a 	mov	fp,zero
 40293f8:	d9003917 	ldw	r4,228(sp)
 40293fc:	dc001e04 	addi	r16,sp,120
 4029400:	988003cc 	andi	r2,r19,15
 4029404:	b006973a 	slli	r3,r22,28
 4029408:	2085883a 	add	r2,r4,r2
 402940c:	9826d13a 	srli	r19,r19,4
 4029410:	10800003 	ldbu	r2,0(r2)
 4029414:	b02cd13a 	srli	r22,r22,4
 4029418:	843fffc4 	addi	r16,r16,-1
 402941c:	1ce6b03a 	or	r19,r3,r19
 4029420:	80800005 	stb	r2,0(r16)
 4029424:	9d84b03a 	or	r2,r19,r22
 4029428:	103ff51e 	bne	r2,zero,4029400 <__flash_rwdata_start+0xffff2ea8>
 402942c:	d8c02817 	ldw	r3,160(sp)
 4029430:	1c07c83a 	sub	r3,r3,r16
 4029434:	d8c02e15 	stw	r3,184(sp)
 4029438:	003ecc06 	br	4028f6c <__flash_rwdata_start+0xffff2a14>
 402943c:	18c03fcc 	andi	r3,r3,255
 4029440:	183e9f26 	beq	r3,zero,4028ec0 <__flash_rwdata_start+0xffff2968>
 4029444:	d9c02785 	stb	r7,158(sp)
 4029448:	003e9d06 	br	4028ec0 <__flash_rwdata_start+0xffff2968>
 402944c:	00c00044 	movi	r3,1
 4029450:	01c00ac4 	movi	r7,43
 4029454:	ac400007 	ldb	r17,0(r21)
 4029458:	003d5e06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 402945c:	94800814 	ori	r18,r18,32
 4029460:	ac400007 	ldb	r17,0(r21)
 4029464:	003d5b06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4029468:	d8c02d17 	ldw	r3,180(sp)
 402946c:	d8002785 	stb	zero,158(sp)
 4029470:	1c000017 	ldw	r16,0(r3)
 4029474:	1cc00104 	addi	r19,r3,4
 4029478:	80041926 	beq	r16,zero,402a4e0 <___vfprintf_internal_r+0x1c9c>
 402947c:	d9002917 	ldw	r4,164(sp)
 4029480:	2003d016 	blt	r4,zero,402a3c4 <___vfprintf_internal_r+0x1b80>
 4029484:	200d883a 	mov	r6,r4
 4029488:	000b883a 	mov	r5,zero
 402948c:	8009883a 	mov	r4,r16
 4029490:	da003d15 	stw	r8,244(sp)
 4029494:	402da040 	call	402da04 <memchr>
 4029498:	da003d17 	ldw	r8,244(sp)
 402949c:	10045426 	beq	r2,zero,402a5f0 <___vfprintf_internal_r+0x1dac>
 40294a0:	1405c83a 	sub	r2,r2,r16
 40294a4:	d8802e15 	stw	r2,184(sp)
 40294a8:	1003cc16 	blt	r2,zero,402a3dc <___vfprintf_internal_r+0x1b98>
 40294ac:	df002783 	ldbu	fp,158(sp)
 40294b0:	d8802a15 	stw	r2,168(sp)
 40294b4:	dcc02d15 	stw	r19,180(sp)
 40294b8:	d8002915 	stw	zero,164(sp)
 40294bc:	d8003215 	stw	zero,200(sp)
 40294c0:	003eb006 	br	4028f84 <__flash_rwdata_start+0xffff2a2c>
 40294c4:	18c03fcc 	andi	r3,r3,255
 40294c8:	183f9b26 	beq	r3,zero,4029338 <__flash_rwdata_start+0xffff2de0>
 40294cc:	d9c02785 	stb	r7,158(sp)
 40294d0:	003f9906 	br	4029338 <__flash_rwdata_start+0xffff2de0>
 40294d4:	18c03fcc 	andi	r3,r3,255
 40294d8:	1805551e 	bne	r3,zero,402aa30 <___vfprintf_internal_r+0x21ec>
 40294dc:	01400034 	movhi	r5,0
 40294e0:	29413204 	addi	r5,r5,1224
 40294e4:	d9403915 	stw	r5,228(sp)
 40294e8:	9080080c 	andi	r2,r18,32
 40294ec:	103fae1e 	bne	r2,zero,40293a8 <__flash_rwdata_start+0xffff2e50>
 40294f0:	9080040c 	andi	r2,r18,16
 40294f4:	1002de26 	beq	r2,zero,402a070 <___vfprintf_internal_r+0x182c>
 40294f8:	d8c02d17 	ldw	r3,180(sp)
 40294fc:	002d883a 	mov	r22,zero
 4029500:	1cc00017 	ldw	r19,0(r3)
 4029504:	18c00104 	addi	r3,r3,4
 4029508:	d8c02d15 	stw	r3,180(sp)
 402950c:	003fab06 	br	40293bc <__flash_rwdata_start+0xffff2e64>
 4029510:	38803fcc 	andi	r2,r7,255
 4029514:	1080201c 	xori	r2,r2,128
 4029518:	10bfe004 	addi	r2,r2,-128
 402951c:	1002d21e 	bne	r2,zero,402a068 <___vfprintf_internal_r+0x1824>
 4029520:	00c00044 	movi	r3,1
 4029524:	01c00804 	movi	r7,32
 4029528:	ac400007 	ldb	r17,0(r21)
 402952c:	003d2906 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4029530:	94800054 	ori	r18,r18,1
 4029534:	ac400007 	ldb	r17,0(r21)
 4029538:	003d2606 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 402953c:	18c03fcc 	andi	r3,r3,255
 4029540:	183e0526 	beq	r3,zero,4028d58 <__flash_rwdata_start+0xffff2800>
 4029544:	d9c02785 	stb	r7,158(sp)
 4029548:	003e0306 	br	4028d58 <__flash_rwdata_start+0xffff2800>
 402954c:	94801014 	ori	r18,r18,64
 4029550:	ac400007 	ldb	r17,0(r21)
 4029554:	003d1f06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4029558:	ac400007 	ldb	r17,0(r21)
 402955c:	8a438726 	beq	r17,r9,402a37c <___vfprintf_internal_r+0x1b38>
 4029560:	94800414 	ori	r18,r18,16
 4029564:	003d1b06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 4029568:	18c03fcc 	andi	r3,r3,255
 402956c:	1805341e 	bne	r3,zero,402aa40 <___vfprintf_internal_r+0x21fc>
 4029570:	9080080c 	andi	r2,r18,32
 4029574:	1002cd26 	beq	r2,zero,402a0ac <___vfprintf_internal_r+0x1868>
 4029578:	d9402d17 	ldw	r5,180(sp)
 402957c:	d9002f17 	ldw	r4,188(sp)
 4029580:	28800017 	ldw	r2,0(r5)
 4029584:	2007d7fa 	srai	r3,r4,31
 4029588:	29400104 	addi	r5,r5,4
 402958c:	d9402d15 	stw	r5,180(sp)
 4029590:	11000015 	stw	r4,0(r2)
 4029594:	10c00115 	stw	r3,4(r2)
 4029598:	003ce506 	br	4028930 <__flash_rwdata_start+0xffff23d8>
 402959c:	d8c02d17 	ldw	r3,180(sp)
 40295a0:	d9002d17 	ldw	r4,180(sp)
 40295a4:	d8002785 	stb	zero,158(sp)
 40295a8:	18800017 	ldw	r2,0(r3)
 40295ac:	21000104 	addi	r4,r4,4
 40295b0:	00c00044 	movi	r3,1
 40295b4:	d8c02a15 	stw	r3,168(sp)
 40295b8:	d8801405 	stb	r2,80(sp)
 40295bc:	d9002d15 	stw	r4,180(sp)
 40295c0:	d8c02e15 	stw	r3,184(sp)
 40295c4:	d8002915 	stw	zero,164(sp)
 40295c8:	d8003215 	stw	zero,200(sp)
 40295cc:	dc001404 	addi	r16,sp,80
 40295d0:	0039883a 	mov	fp,zero
 40295d4:	003e7206 	br	4028fa0 <__flash_rwdata_start+0xffff2a48>
 40295d8:	01000034 	movhi	r4,0
 40295dc:	21013204 	addi	r4,r4,1224
 40295e0:	0039883a 	mov	fp,zero
 40295e4:	d9003915 	stw	r4,228(sp)
 40295e8:	04401e04 	movi	r17,120
 40295ec:	003f8206 	br	40293f8 <__flash_rwdata_start+0xffff2ea0>
 40295f0:	18c03fcc 	andi	r3,r3,255
 40295f4:	1805061e 	bne	r3,zero,402aa10 <___vfprintf_internal_r+0x21cc>
 40295f8:	883d9126 	beq	r17,zero,4028c40 <__flash_rwdata_start+0xffff26e8>
 40295fc:	00c00044 	movi	r3,1
 4029600:	d8c02a15 	stw	r3,168(sp)
 4029604:	dc401405 	stb	r17,80(sp)
 4029608:	d8002785 	stb	zero,158(sp)
 402960c:	003fec06 	br	40295c0 <__flash_rwdata_start+0xffff3068>
 4029610:	01400034 	movhi	r5,0
 4029614:	29413204 	addi	r5,r5,1224
 4029618:	d9403915 	stw	r5,228(sp)
 402961c:	d8c02d15 	stw	r3,180(sp)
 4029620:	1025883a 	mov	r18,r2
 4029624:	04401e04 	movi	r17,120
 4029628:	9d84b03a 	or	r2,r19,r22
 402962c:	1000fc1e 	bne	r2,zero,4029a20 <___vfprintf_internal_r+0x11dc>
 4029630:	0039883a 	mov	fp,zero
 4029634:	00800084 	movi	r2,2
 4029638:	10803fcc 	andi	r2,r2,255
 402963c:	00c00044 	movi	r3,1
 4029640:	10c20f26 	beq	r2,r3,4029e80 <___vfprintf_internal_r+0x163c>
 4029644:	00c00084 	movi	r3,2
 4029648:	10fd6326 	beq	r2,r3,4028bd8 <__flash_rwdata_start+0xffff2680>
 402964c:	003e2d06 	br	4028f04 <__flash_rwdata_start+0xffff29ac>
 4029650:	d8c02017 	ldw	r3,128(sp)
 4029654:	003e9306 	br	40290a4 <__flash_rwdata_start+0xffff2b4c>
 4029658:	00801944 	movi	r2,101
 402965c:	14407e0e 	bge	r2,r17,4029858 <___vfprintf_internal_r+0x1014>
 4029660:	d9003617 	ldw	r4,216(sp)
 4029664:	d9403817 	ldw	r5,224(sp)
 4029668:	000d883a 	mov	r6,zero
 402966c:	000f883a 	mov	r7,zero
 4029670:	d8c03c15 	stw	r3,240(sp)
 4029674:	da003d15 	stw	r8,244(sp)
 4029678:	4032be80 	call	4032be8 <__eqdf2>
 402967c:	d8c03c17 	ldw	r3,240(sp)
 4029680:	da003d17 	ldw	r8,244(sp)
 4029684:	1000f71e 	bne	r2,zero,4029a64 <___vfprintf_internal_r+0x1220>
 4029688:	d8801f17 	ldw	r2,124(sp)
 402968c:	01000034 	movhi	r4,0
 4029690:	21013904 	addi	r4,r4,1252
 4029694:	18c00044 	addi	r3,r3,1
 4029698:	10800044 	addi	r2,r2,1
 402969c:	41000015 	stw	r4,0(r8)
 40296a0:	01000044 	movi	r4,1
 40296a4:	41000115 	stw	r4,4(r8)
 40296a8:	d8c02015 	stw	r3,128(sp)
 40296ac:	d8801f15 	stw	r2,124(sp)
 40296b0:	010001c4 	movi	r4,7
 40296b4:	2082b816 	blt	r4,r2,402a198 <___vfprintf_internal_r+0x1954>
 40296b8:	42000204 	addi	r8,r8,8
 40296bc:	d8802617 	ldw	r2,152(sp)
 40296c0:	d9403317 	ldw	r5,204(sp)
 40296c4:	11400216 	blt	r2,r5,40296d0 <___vfprintf_internal_r+0xe8c>
 40296c8:	9080004c 	andi	r2,r18,1
 40296cc:	103ed526 	beq	r2,zero,4029224 <__flash_rwdata_start+0xffff2ccc>
 40296d0:	d8803717 	ldw	r2,220(sp)
 40296d4:	d9003417 	ldw	r4,208(sp)
 40296d8:	d9403717 	ldw	r5,220(sp)
 40296dc:	1887883a 	add	r3,r3,r2
 40296e0:	d8801f17 	ldw	r2,124(sp)
 40296e4:	41000015 	stw	r4,0(r8)
 40296e8:	41400115 	stw	r5,4(r8)
 40296ec:	10800044 	addi	r2,r2,1
 40296f0:	d8c02015 	stw	r3,128(sp)
 40296f4:	d8801f15 	stw	r2,124(sp)
 40296f8:	010001c4 	movi	r4,7
 40296fc:	20832916 	blt	r4,r2,402a3a4 <___vfprintf_internal_r+0x1b60>
 4029700:	42000204 	addi	r8,r8,8
 4029704:	d8803317 	ldw	r2,204(sp)
 4029708:	143fffc4 	addi	r16,r2,-1
 402970c:	043ec50e 	bge	zero,r16,4029224 <__flash_rwdata_start+0xffff2ccc>
 4029710:	04400404 	movi	r17,16
 4029714:	d8801f17 	ldw	r2,124(sp)
 4029718:	8c00880e 	bge	r17,r16,402993c <___vfprintf_internal_r+0x10f8>
 402971c:	01400034 	movhi	r5,0
 4029720:	29413984 	addi	r5,r5,1254
 4029724:	d9402b15 	stw	r5,172(sp)
 4029728:	058001c4 	movi	r22,7
 402972c:	dcc02c17 	ldw	r19,176(sp)
 4029730:	00000306 	br	4029740 <___vfprintf_internal_r+0xefc>
 4029734:	42000204 	addi	r8,r8,8
 4029738:	843ffc04 	addi	r16,r16,-16
 402973c:	8c00820e 	bge	r17,r16,4029948 <___vfprintf_internal_r+0x1104>
 4029740:	18c00404 	addi	r3,r3,16
 4029744:	10800044 	addi	r2,r2,1
 4029748:	45000015 	stw	r20,0(r8)
 402974c:	44400115 	stw	r17,4(r8)
 4029750:	d8c02015 	stw	r3,128(sp)
 4029754:	d8801f15 	stw	r2,124(sp)
 4029758:	b0bff60e 	bge	r22,r2,4029734 <__flash_rwdata_start+0xffff31dc>
 402975c:	d9801e04 	addi	r6,sp,120
 4029760:	b80b883a 	mov	r5,r23
 4029764:	9809883a 	mov	r4,r19
 4029768:	402f8740 	call	402f874 <__sprint_r>
 402976c:	103d3a1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029770:	d8c02017 	ldw	r3,128(sp)
 4029774:	d8801f17 	ldw	r2,124(sp)
 4029778:	da000404 	addi	r8,sp,16
 402977c:	003fee06 	br	4029738 <__flash_rwdata_start+0xffff31e0>
 4029780:	d9403117 	ldw	r5,196(sp)
 4029784:	d8802a17 	ldw	r2,168(sp)
 4029788:	28adc83a 	sub	r22,r5,r2
 402978c:	05be630e 	bge	zero,r22,402911c <__flash_rwdata_start+0xffff2bc4>
 4029790:	07000404 	movi	fp,16
 4029794:	d8801f17 	ldw	r2,124(sp)
 4029798:	e5838f0e 	bge	fp,r22,402a5d8 <___vfprintf_internal_r+0x1d94>
 402979c:	01400034 	movhi	r5,0
 40297a0:	29413984 	addi	r5,r5,1254
 40297a4:	dc403015 	stw	r17,192(sp)
 40297a8:	d9402b15 	stw	r5,172(sp)
 40297ac:	b023883a 	mov	r17,r22
 40297b0:	04c001c4 	movi	r19,7
 40297b4:	a82d883a 	mov	r22,r21
 40297b8:	902b883a 	mov	r21,r18
 40297bc:	8025883a 	mov	r18,r16
 40297c0:	dc002c17 	ldw	r16,176(sp)
 40297c4:	00000306 	br	40297d4 <___vfprintf_internal_r+0xf90>
 40297c8:	8c7ffc04 	addi	r17,r17,-16
 40297cc:	42000204 	addi	r8,r8,8
 40297d0:	e440110e 	bge	fp,r17,4029818 <___vfprintf_internal_r+0xfd4>
 40297d4:	18c00404 	addi	r3,r3,16
 40297d8:	10800044 	addi	r2,r2,1
 40297dc:	45000015 	stw	r20,0(r8)
 40297e0:	47000115 	stw	fp,4(r8)
 40297e4:	d8c02015 	stw	r3,128(sp)
 40297e8:	d8801f15 	stw	r2,124(sp)
 40297ec:	98bff60e 	bge	r19,r2,40297c8 <__flash_rwdata_start+0xffff3270>
 40297f0:	d9801e04 	addi	r6,sp,120
 40297f4:	b80b883a 	mov	r5,r23
 40297f8:	8009883a 	mov	r4,r16
 40297fc:	402f8740 	call	402f874 <__sprint_r>
 4029800:	103d151e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029804:	8c7ffc04 	addi	r17,r17,-16
 4029808:	d8c02017 	ldw	r3,128(sp)
 402980c:	d8801f17 	ldw	r2,124(sp)
 4029810:	da000404 	addi	r8,sp,16
 4029814:	e47fef16 	blt	fp,r17,40297d4 <__flash_rwdata_start+0xffff327c>
 4029818:	9021883a 	mov	r16,r18
 402981c:	a825883a 	mov	r18,r21
 4029820:	b02b883a 	mov	r21,r22
 4029824:	882d883a 	mov	r22,r17
 4029828:	dc403017 	ldw	r17,192(sp)
 402982c:	d9002b17 	ldw	r4,172(sp)
 4029830:	1d87883a 	add	r3,r3,r22
 4029834:	10800044 	addi	r2,r2,1
 4029838:	41000015 	stw	r4,0(r8)
 402983c:	45800115 	stw	r22,4(r8)
 4029840:	d8c02015 	stw	r3,128(sp)
 4029844:	d8801f15 	stw	r2,124(sp)
 4029848:	010001c4 	movi	r4,7
 402984c:	20818e16 	blt	r4,r2,4029e88 <___vfprintf_internal_r+0x1644>
 4029850:	42000204 	addi	r8,r8,8
 4029854:	003e3106 	br	402911c <__flash_rwdata_start+0xffff2bc4>
 4029858:	d9403317 	ldw	r5,204(sp)
 402985c:	00800044 	movi	r2,1
 4029860:	18c00044 	addi	r3,r3,1
 4029864:	1141530e 	bge	r2,r5,4029db4 <___vfprintf_internal_r+0x1570>
 4029868:	dc401f17 	ldw	r17,124(sp)
 402986c:	00800044 	movi	r2,1
 4029870:	40800115 	stw	r2,4(r8)
 4029874:	8c400044 	addi	r17,r17,1
 4029878:	44000015 	stw	r16,0(r8)
 402987c:	d8c02015 	stw	r3,128(sp)
 4029880:	dc401f15 	stw	r17,124(sp)
 4029884:	008001c4 	movi	r2,7
 4029888:	14416b16 	blt	r2,r17,4029e38 <___vfprintf_internal_r+0x15f4>
 402988c:	42000204 	addi	r8,r8,8
 4029890:	d8803717 	ldw	r2,220(sp)
 4029894:	d9003417 	ldw	r4,208(sp)
 4029898:	8c400044 	addi	r17,r17,1
 402989c:	10c7883a 	add	r3,r2,r3
 40298a0:	40800115 	stw	r2,4(r8)
 40298a4:	41000015 	stw	r4,0(r8)
 40298a8:	d8c02015 	stw	r3,128(sp)
 40298ac:	dc401f15 	stw	r17,124(sp)
 40298b0:	008001c4 	movi	r2,7
 40298b4:	14416916 	blt	r2,r17,4029e5c <___vfprintf_internal_r+0x1618>
 40298b8:	45800204 	addi	r22,r8,8
 40298bc:	d9003617 	ldw	r4,216(sp)
 40298c0:	d9403817 	ldw	r5,224(sp)
 40298c4:	000d883a 	mov	r6,zero
 40298c8:	000f883a 	mov	r7,zero
 40298cc:	d8c03c15 	stw	r3,240(sp)
 40298d0:	4032be80 	call	4032be8 <__eqdf2>
 40298d4:	d8c03c17 	ldw	r3,240(sp)
 40298d8:	1000bc26 	beq	r2,zero,4029bcc <___vfprintf_internal_r+0x1388>
 40298dc:	d9403317 	ldw	r5,204(sp)
 40298e0:	84000044 	addi	r16,r16,1
 40298e4:	8c400044 	addi	r17,r17,1
 40298e8:	28bfffc4 	addi	r2,r5,-1
 40298ec:	1887883a 	add	r3,r3,r2
 40298f0:	b0800115 	stw	r2,4(r22)
 40298f4:	b4000015 	stw	r16,0(r22)
 40298f8:	d8c02015 	stw	r3,128(sp)
 40298fc:	dc401f15 	stw	r17,124(sp)
 4029900:	008001c4 	movi	r2,7
 4029904:	14414316 	blt	r2,r17,4029e14 <___vfprintf_internal_r+0x15d0>
 4029908:	b5800204 	addi	r22,r22,8
 402990c:	d9003a17 	ldw	r4,232(sp)
 4029910:	df0022c4 	addi	fp,sp,139
 4029914:	8c400044 	addi	r17,r17,1
 4029918:	20c7883a 	add	r3,r4,r3
 402991c:	b7000015 	stw	fp,0(r22)
 4029920:	b1000115 	stw	r4,4(r22)
 4029924:	d8c02015 	stw	r3,128(sp)
 4029928:	dc401f15 	stw	r17,124(sp)
 402992c:	008001c4 	movi	r2,7
 4029930:	14400e16 	blt	r2,r17,402996c <___vfprintf_internal_r+0x1128>
 4029934:	b2000204 	addi	r8,r22,8
 4029938:	003e3a06 	br	4029224 <__flash_rwdata_start+0xffff2ccc>
 402993c:	01000034 	movhi	r4,0
 4029940:	21013984 	addi	r4,r4,1254
 4029944:	d9002b15 	stw	r4,172(sp)
 4029948:	d9002b17 	ldw	r4,172(sp)
 402994c:	1c07883a 	add	r3,r3,r16
 4029950:	44000115 	stw	r16,4(r8)
 4029954:	41000015 	stw	r4,0(r8)
 4029958:	10800044 	addi	r2,r2,1
 402995c:	d8c02015 	stw	r3,128(sp)
 4029960:	d8801f15 	stw	r2,124(sp)
 4029964:	010001c4 	movi	r4,7
 4029968:	20be2d0e 	bge	r4,r2,4029220 <__flash_rwdata_start+0xffff2cc8>
 402996c:	d9002c17 	ldw	r4,176(sp)
 4029970:	d9801e04 	addi	r6,sp,120
 4029974:	b80b883a 	mov	r5,r23
 4029978:	402f8740 	call	402f874 <__sprint_r>
 402997c:	103cb61e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029980:	d8c02017 	ldw	r3,128(sp)
 4029984:	da000404 	addi	r8,sp,16
 4029988:	003e2606 	br	4029224 <__flash_rwdata_start+0xffff2ccc>
 402998c:	d9002c17 	ldw	r4,176(sp)
 4029990:	d9801e04 	addi	r6,sp,120
 4029994:	b80b883a 	mov	r5,r23
 4029998:	402f8740 	call	402f874 <__sprint_r>
 402999c:	103e5d26 	beq	r2,zero,4029314 <__flash_rwdata_start+0xffff2dbc>
 40299a0:	003cad06 	br	4028c58 <__flash_rwdata_start+0xffff2700>
 40299a4:	d9002c17 	ldw	r4,176(sp)
 40299a8:	d9801e04 	addi	r6,sp,120
 40299ac:	b80b883a 	mov	r5,r23
 40299b0:	402f8740 	call	402f874 <__sprint_r>
 40299b4:	103ca81e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40299b8:	d8c02017 	ldw	r3,128(sp)
 40299bc:	da000404 	addi	r8,sp,16
 40299c0:	003e0b06 	br	40291f0 <__flash_rwdata_start+0xffff2c98>
 40299c4:	d9002c17 	ldw	r4,176(sp)
 40299c8:	d9801e04 	addi	r6,sp,120
 40299cc:	b80b883a 	mov	r5,r23
 40299d0:	402f8740 	call	402f874 <__sprint_r>
 40299d4:	103ca01e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40299d8:	d8c02017 	ldw	r3,128(sp)
 40299dc:	da000404 	addi	r8,sp,16
 40299e0:	003dbd06 	br	40290d8 <__flash_rwdata_start+0xffff2b80>
 40299e4:	d9002c17 	ldw	r4,176(sp)
 40299e8:	d9801e04 	addi	r6,sp,120
 40299ec:	b80b883a 	mov	r5,r23
 40299f0:	402f8740 	call	402f874 <__sprint_r>
 40299f4:	103c981e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 40299f8:	d8c02017 	ldw	r3,128(sp)
 40299fc:	da000404 	addi	r8,sp,16
 4029a00:	003dc306 	br	4029110 <__flash_rwdata_start+0xffff2bb8>
 4029a04:	d8802917 	ldw	r2,164(sp)
 4029a08:	d8002785 	stb	zero,158(sp)
 4029a0c:	103f0616 	blt	r2,zero,4029628 <__flash_rwdata_start+0xffff30d0>
 4029a10:	00ffdfc4 	movi	r3,-129
 4029a14:	9d84b03a 	or	r2,r19,r22
 4029a18:	90e4703a 	and	r18,r18,r3
 4029a1c:	103c6b26 	beq	r2,zero,4028bcc <__flash_rwdata_start+0xffff2674>
 4029a20:	0039883a 	mov	fp,zero
 4029a24:	003e7406 	br	40293f8 <__flash_rwdata_start+0xffff2ea0>
 4029a28:	9080040c 	andi	r2,r18,16
 4029a2c:	1001b326 	beq	r2,zero,402a0fc <___vfprintf_internal_r+0x18b8>
 4029a30:	d9002d17 	ldw	r4,180(sp)
 4029a34:	d9402917 	ldw	r5,164(sp)
 4029a38:	d8002785 	stb	zero,158(sp)
 4029a3c:	20800104 	addi	r2,r4,4
 4029a40:	24c00017 	ldw	r19,0(r4)
 4029a44:	002d883a 	mov	r22,zero
 4029a48:	2801b516 	blt	r5,zero,402a120 <___vfprintf_internal_r+0x18dc>
 4029a4c:	00ffdfc4 	movi	r3,-129
 4029a50:	d8802d15 	stw	r2,180(sp)
 4029a54:	90e4703a 	and	r18,r18,r3
 4029a58:	983d2726 	beq	r19,zero,4028ef8 <__flash_rwdata_start+0xffff29a0>
 4029a5c:	0039883a 	mov	fp,zero
 4029a60:	003d2a06 	br	4028f0c <__flash_rwdata_start+0xffff29b4>
 4029a64:	dc402617 	ldw	r17,152(sp)
 4029a68:	0441d30e 	bge	zero,r17,402a1b8 <___vfprintf_internal_r+0x1974>
 4029a6c:	dc403217 	ldw	r17,200(sp)
 4029a70:	d8803317 	ldw	r2,204(sp)
 4029a74:	1440010e 	bge	r2,r17,4029a7c <___vfprintf_internal_r+0x1238>
 4029a78:	1023883a 	mov	r17,r2
 4029a7c:	04400a0e 	bge	zero,r17,4029aa8 <___vfprintf_internal_r+0x1264>
 4029a80:	d8801f17 	ldw	r2,124(sp)
 4029a84:	1c47883a 	add	r3,r3,r17
 4029a88:	44000015 	stw	r16,0(r8)
 4029a8c:	10800044 	addi	r2,r2,1
 4029a90:	44400115 	stw	r17,4(r8)
 4029a94:	d8c02015 	stw	r3,128(sp)
 4029a98:	d8801f15 	stw	r2,124(sp)
 4029a9c:	010001c4 	movi	r4,7
 4029aa0:	20826516 	blt	r4,r2,402a438 <___vfprintf_internal_r+0x1bf4>
 4029aa4:	42000204 	addi	r8,r8,8
 4029aa8:	88026116 	blt	r17,zero,402a430 <___vfprintf_internal_r+0x1bec>
 4029aac:	d9003217 	ldw	r4,200(sp)
 4029ab0:	2463c83a 	sub	r17,r4,r17
 4029ab4:	04407b0e 	bge	zero,r17,4029ca4 <___vfprintf_internal_r+0x1460>
 4029ab8:	05800404 	movi	r22,16
 4029abc:	d8801f17 	ldw	r2,124(sp)
 4029ac0:	b4419d0e 	bge	r22,r17,402a138 <___vfprintf_internal_r+0x18f4>
 4029ac4:	01000034 	movhi	r4,0
 4029ac8:	21013984 	addi	r4,r4,1254
 4029acc:	d9002b15 	stw	r4,172(sp)
 4029ad0:	070001c4 	movi	fp,7
 4029ad4:	dcc02c17 	ldw	r19,176(sp)
 4029ad8:	00000306 	br	4029ae8 <___vfprintf_internal_r+0x12a4>
 4029adc:	42000204 	addi	r8,r8,8
 4029ae0:	8c7ffc04 	addi	r17,r17,-16
 4029ae4:	b441970e 	bge	r22,r17,402a144 <___vfprintf_internal_r+0x1900>
 4029ae8:	18c00404 	addi	r3,r3,16
 4029aec:	10800044 	addi	r2,r2,1
 4029af0:	45000015 	stw	r20,0(r8)
 4029af4:	45800115 	stw	r22,4(r8)
 4029af8:	d8c02015 	stw	r3,128(sp)
 4029afc:	d8801f15 	stw	r2,124(sp)
 4029b00:	e0bff60e 	bge	fp,r2,4029adc <__flash_rwdata_start+0xffff3584>
 4029b04:	d9801e04 	addi	r6,sp,120
 4029b08:	b80b883a 	mov	r5,r23
 4029b0c:	9809883a 	mov	r4,r19
 4029b10:	402f8740 	call	402f874 <__sprint_r>
 4029b14:	103c501e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029b18:	d8c02017 	ldw	r3,128(sp)
 4029b1c:	d8801f17 	ldw	r2,124(sp)
 4029b20:	da000404 	addi	r8,sp,16
 4029b24:	003fee06 	br	4029ae0 <__flash_rwdata_start+0xffff3588>
 4029b28:	d9002c17 	ldw	r4,176(sp)
 4029b2c:	d9801e04 	addi	r6,sp,120
 4029b30:	b80b883a 	mov	r5,r23
 4029b34:	402f8740 	call	402f874 <__sprint_r>
 4029b38:	103c471e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029b3c:	d8c02017 	ldw	r3,128(sp)
 4029b40:	df002787 	ldb	fp,158(sp)
 4029b44:	da000404 	addi	r8,sp,16
 4029b48:	003d5606 	br	40290a4 <__flash_rwdata_start+0xffff2b4c>
 4029b4c:	9080040c 	andi	r2,r18,16
 4029b50:	10016126 	beq	r2,zero,402a0d8 <___vfprintf_internal_r+0x1894>
 4029b54:	d8802d17 	ldw	r2,180(sp)
 4029b58:	14c00017 	ldw	r19,0(r2)
 4029b5c:	10800104 	addi	r2,r2,4
 4029b60:	d8802d15 	stw	r2,180(sp)
 4029b64:	982dd7fa 	srai	r22,r19,31
 4029b68:	b005883a 	mov	r2,r22
 4029b6c:	003c8206 	br	4028d78 <__flash_rwdata_start+0xffff2820>
 4029b70:	9080040c 	andi	r2,r18,16
 4029b74:	10003526 	beq	r2,zero,4029c4c <___vfprintf_internal_r+0x1408>
 4029b78:	d9402d17 	ldw	r5,180(sp)
 4029b7c:	d8c02917 	ldw	r3,164(sp)
 4029b80:	d8002785 	stb	zero,158(sp)
 4029b84:	28800104 	addi	r2,r5,4
 4029b88:	2cc00017 	ldw	r19,0(r5)
 4029b8c:	002d883a 	mov	r22,zero
 4029b90:	18003716 	blt	r3,zero,4029c70 <___vfprintf_internal_r+0x142c>
 4029b94:	00ffdfc4 	movi	r3,-129
 4029b98:	d8802d15 	stw	r2,180(sp)
 4029b9c:	90e4703a 	and	r18,r18,r3
 4029ba0:	0039883a 	mov	fp,zero
 4029ba4:	983df326 	beq	r19,zero,4029374 <__flash_rwdata_start+0xffff2e1c>
 4029ba8:	00800244 	movi	r2,9
 4029bac:	14fc7b36 	bltu	r2,r19,4028d9c <__flash_rwdata_start+0xffff2844>
 4029bb0:	d8c02817 	ldw	r3,160(sp)
 4029bb4:	dc001dc4 	addi	r16,sp,119
 4029bb8:	9cc00c04 	addi	r19,r19,48
 4029bbc:	1c07c83a 	sub	r3,r3,r16
 4029bc0:	dcc01dc5 	stb	r19,119(sp)
 4029bc4:	d8c02e15 	stw	r3,184(sp)
 4029bc8:	003ce806 	br	4028f6c <__flash_rwdata_start+0xffff2a14>
 4029bcc:	d8803317 	ldw	r2,204(sp)
 4029bd0:	143fffc4 	addi	r16,r2,-1
 4029bd4:	043f4d0e 	bge	zero,r16,402990c <__flash_rwdata_start+0xffff33b4>
 4029bd8:	07000404 	movi	fp,16
 4029bdc:	e400810e 	bge	fp,r16,4029de4 <___vfprintf_internal_r+0x15a0>
 4029be0:	01400034 	movhi	r5,0
 4029be4:	29413984 	addi	r5,r5,1254
 4029be8:	d9402b15 	stw	r5,172(sp)
 4029bec:	01c001c4 	movi	r7,7
 4029bf0:	dcc02c17 	ldw	r19,176(sp)
 4029bf4:	00000306 	br	4029c04 <___vfprintf_internal_r+0x13c0>
 4029bf8:	b5800204 	addi	r22,r22,8
 4029bfc:	843ffc04 	addi	r16,r16,-16
 4029c00:	e4007b0e 	bge	fp,r16,4029df0 <___vfprintf_internal_r+0x15ac>
 4029c04:	18c00404 	addi	r3,r3,16
 4029c08:	8c400044 	addi	r17,r17,1
 4029c0c:	b5000015 	stw	r20,0(r22)
 4029c10:	b7000115 	stw	fp,4(r22)
 4029c14:	d8c02015 	stw	r3,128(sp)
 4029c18:	dc401f15 	stw	r17,124(sp)
 4029c1c:	3c7ff60e 	bge	r7,r17,4029bf8 <__flash_rwdata_start+0xffff36a0>
 4029c20:	d9801e04 	addi	r6,sp,120
 4029c24:	b80b883a 	mov	r5,r23
 4029c28:	9809883a 	mov	r4,r19
 4029c2c:	d9c03c15 	stw	r7,240(sp)
 4029c30:	402f8740 	call	402f874 <__sprint_r>
 4029c34:	d9c03c17 	ldw	r7,240(sp)
 4029c38:	103c071e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029c3c:	d8c02017 	ldw	r3,128(sp)
 4029c40:	dc401f17 	ldw	r17,124(sp)
 4029c44:	dd800404 	addi	r22,sp,16
 4029c48:	003fec06 	br	4029bfc <__flash_rwdata_start+0xffff36a4>
 4029c4c:	9080100c 	andi	r2,r18,64
 4029c50:	d8002785 	stb	zero,158(sp)
 4029c54:	10010e26 	beq	r2,zero,402a090 <___vfprintf_internal_r+0x184c>
 4029c58:	d9002d17 	ldw	r4,180(sp)
 4029c5c:	d9402917 	ldw	r5,164(sp)
 4029c60:	002d883a 	mov	r22,zero
 4029c64:	20800104 	addi	r2,r4,4
 4029c68:	24c0000b 	ldhu	r19,0(r4)
 4029c6c:	283fc90e 	bge	r5,zero,4029b94 <__flash_rwdata_start+0xffff363c>
 4029c70:	d8802d15 	stw	r2,180(sp)
 4029c74:	0039883a 	mov	fp,zero
 4029c78:	9d84b03a 	or	r2,r19,r22
 4029c7c:	103c461e 	bne	r2,zero,4028d98 <__flash_rwdata_start+0xffff2840>
 4029c80:	00800044 	movi	r2,1
 4029c84:	003e6c06 	br	4029638 <__flash_rwdata_start+0xffff30e0>
 4029c88:	d9002c17 	ldw	r4,176(sp)
 4029c8c:	d9801e04 	addi	r6,sp,120
 4029c90:	b80b883a 	mov	r5,r23
 4029c94:	402f8740 	call	402f874 <__sprint_r>
 4029c98:	103bef1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029c9c:	d8c02017 	ldw	r3,128(sp)
 4029ca0:	da000404 	addi	r8,sp,16
 4029ca4:	d9003217 	ldw	r4,200(sp)
 4029ca8:	d8802617 	ldw	r2,152(sp)
 4029cac:	d9403317 	ldw	r5,204(sp)
 4029cb0:	8123883a 	add	r17,r16,r4
 4029cb4:	11400216 	blt	r2,r5,4029cc0 <___vfprintf_internal_r+0x147c>
 4029cb8:	9100004c 	andi	r4,r18,1
 4029cbc:	20000d26 	beq	r4,zero,4029cf4 <___vfprintf_internal_r+0x14b0>
 4029cc0:	d9003717 	ldw	r4,220(sp)
 4029cc4:	d9403417 	ldw	r5,208(sp)
 4029cc8:	1907883a 	add	r3,r3,r4
 4029ccc:	d9001f17 	ldw	r4,124(sp)
 4029cd0:	41400015 	stw	r5,0(r8)
 4029cd4:	d9403717 	ldw	r5,220(sp)
 4029cd8:	21000044 	addi	r4,r4,1
 4029cdc:	d8c02015 	stw	r3,128(sp)
 4029ce0:	41400115 	stw	r5,4(r8)
 4029ce4:	d9001f15 	stw	r4,124(sp)
 4029ce8:	014001c4 	movi	r5,7
 4029cec:	2901e816 	blt	r5,r4,402a490 <___vfprintf_internal_r+0x1c4c>
 4029cf0:	42000204 	addi	r8,r8,8
 4029cf4:	d9003317 	ldw	r4,204(sp)
 4029cf8:	8121883a 	add	r16,r16,r4
 4029cfc:	2085c83a 	sub	r2,r4,r2
 4029d00:	8461c83a 	sub	r16,r16,r17
 4029d04:	1400010e 	bge	r2,r16,4029d0c <___vfprintf_internal_r+0x14c8>
 4029d08:	1021883a 	mov	r16,r2
 4029d0c:	04000a0e 	bge	zero,r16,4029d38 <___vfprintf_internal_r+0x14f4>
 4029d10:	d9001f17 	ldw	r4,124(sp)
 4029d14:	1c07883a 	add	r3,r3,r16
 4029d18:	44400015 	stw	r17,0(r8)
 4029d1c:	21000044 	addi	r4,r4,1
 4029d20:	44000115 	stw	r16,4(r8)
 4029d24:	d8c02015 	stw	r3,128(sp)
 4029d28:	d9001f15 	stw	r4,124(sp)
 4029d2c:	014001c4 	movi	r5,7
 4029d30:	2901fb16 	blt	r5,r4,402a520 <___vfprintf_internal_r+0x1cdc>
 4029d34:	42000204 	addi	r8,r8,8
 4029d38:	8001f716 	blt	r16,zero,402a518 <___vfprintf_internal_r+0x1cd4>
 4029d3c:	1421c83a 	sub	r16,r2,r16
 4029d40:	043d380e 	bge	zero,r16,4029224 <__flash_rwdata_start+0xffff2ccc>
 4029d44:	04400404 	movi	r17,16
 4029d48:	d8801f17 	ldw	r2,124(sp)
 4029d4c:	8c3efb0e 	bge	r17,r16,402993c <__flash_rwdata_start+0xffff33e4>
 4029d50:	01400034 	movhi	r5,0
 4029d54:	29413984 	addi	r5,r5,1254
 4029d58:	d9402b15 	stw	r5,172(sp)
 4029d5c:	058001c4 	movi	r22,7
 4029d60:	dcc02c17 	ldw	r19,176(sp)
 4029d64:	00000306 	br	4029d74 <___vfprintf_internal_r+0x1530>
 4029d68:	42000204 	addi	r8,r8,8
 4029d6c:	843ffc04 	addi	r16,r16,-16
 4029d70:	8c3ef50e 	bge	r17,r16,4029948 <__flash_rwdata_start+0xffff33f0>
 4029d74:	18c00404 	addi	r3,r3,16
 4029d78:	10800044 	addi	r2,r2,1
 4029d7c:	45000015 	stw	r20,0(r8)
 4029d80:	44400115 	stw	r17,4(r8)
 4029d84:	d8c02015 	stw	r3,128(sp)
 4029d88:	d8801f15 	stw	r2,124(sp)
 4029d8c:	b0bff60e 	bge	r22,r2,4029d68 <__flash_rwdata_start+0xffff3810>
 4029d90:	d9801e04 	addi	r6,sp,120
 4029d94:	b80b883a 	mov	r5,r23
 4029d98:	9809883a 	mov	r4,r19
 4029d9c:	402f8740 	call	402f874 <__sprint_r>
 4029da0:	103bad1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029da4:	d8c02017 	ldw	r3,128(sp)
 4029da8:	d8801f17 	ldw	r2,124(sp)
 4029dac:	da000404 	addi	r8,sp,16
 4029db0:	003fee06 	br	4029d6c <__flash_rwdata_start+0xffff3814>
 4029db4:	9088703a 	and	r4,r18,r2
 4029db8:	203eab1e 	bne	r4,zero,4029868 <__flash_rwdata_start+0xffff3310>
 4029dbc:	dc401f17 	ldw	r17,124(sp)
 4029dc0:	40800115 	stw	r2,4(r8)
 4029dc4:	44000015 	stw	r16,0(r8)
 4029dc8:	8c400044 	addi	r17,r17,1
 4029dcc:	d8c02015 	stw	r3,128(sp)
 4029dd0:	dc401f15 	stw	r17,124(sp)
 4029dd4:	008001c4 	movi	r2,7
 4029dd8:	14400e16 	blt	r2,r17,4029e14 <___vfprintf_internal_r+0x15d0>
 4029ddc:	45800204 	addi	r22,r8,8
 4029de0:	003eca06 	br	402990c <__flash_rwdata_start+0xffff33b4>
 4029de4:	01000034 	movhi	r4,0
 4029de8:	21013984 	addi	r4,r4,1254
 4029dec:	d9002b15 	stw	r4,172(sp)
 4029df0:	d8802b17 	ldw	r2,172(sp)
 4029df4:	1c07883a 	add	r3,r3,r16
 4029df8:	8c400044 	addi	r17,r17,1
 4029dfc:	b0800015 	stw	r2,0(r22)
 4029e00:	b4000115 	stw	r16,4(r22)
 4029e04:	d8c02015 	stw	r3,128(sp)
 4029e08:	dc401f15 	stw	r17,124(sp)
 4029e0c:	008001c4 	movi	r2,7
 4029e10:	147ebd0e 	bge	r2,r17,4029908 <__flash_rwdata_start+0xffff33b0>
 4029e14:	d9002c17 	ldw	r4,176(sp)
 4029e18:	d9801e04 	addi	r6,sp,120
 4029e1c:	b80b883a 	mov	r5,r23
 4029e20:	402f8740 	call	402f874 <__sprint_r>
 4029e24:	103b8c1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029e28:	d8c02017 	ldw	r3,128(sp)
 4029e2c:	dc401f17 	ldw	r17,124(sp)
 4029e30:	dd800404 	addi	r22,sp,16
 4029e34:	003eb506 	br	402990c <__flash_rwdata_start+0xffff33b4>
 4029e38:	d9002c17 	ldw	r4,176(sp)
 4029e3c:	d9801e04 	addi	r6,sp,120
 4029e40:	b80b883a 	mov	r5,r23
 4029e44:	402f8740 	call	402f874 <__sprint_r>
 4029e48:	103b831e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029e4c:	d8c02017 	ldw	r3,128(sp)
 4029e50:	dc401f17 	ldw	r17,124(sp)
 4029e54:	da000404 	addi	r8,sp,16
 4029e58:	003e8d06 	br	4029890 <__flash_rwdata_start+0xffff3338>
 4029e5c:	d9002c17 	ldw	r4,176(sp)
 4029e60:	d9801e04 	addi	r6,sp,120
 4029e64:	b80b883a 	mov	r5,r23
 4029e68:	402f8740 	call	402f874 <__sprint_r>
 4029e6c:	103b7a1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029e70:	d8c02017 	ldw	r3,128(sp)
 4029e74:	dc401f17 	ldw	r17,124(sp)
 4029e78:	dd800404 	addi	r22,sp,16
 4029e7c:	003e8f06 	br	40298bc <__flash_rwdata_start+0xffff3364>
 4029e80:	0027883a 	mov	r19,zero
 4029e84:	003f4a06 	br	4029bb0 <__flash_rwdata_start+0xffff3658>
 4029e88:	d9002c17 	ldw	r4,176(sp)
 4029e8c:	d9801e04 	addi	r6,sp,120
 4029e90:	b80b883a 	mov	r5,r23
 4029e94:	402f8740 	call	402f874 <__sprint_r>
 4029e98:	103b6f1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 4029e9c:	d8c02017 	ldw	r3,128(sp)
 4029ea0:	da000404 	addi	r8,sp,16
 4029ea4:	003c9d06 	br	402911c <__flash_rwdata_start+0xffff2bc4>
 4029ea8:	04e7c83a 	sub	r19,zero,r19
 4029eac:	9804c03a 	cmpne	r2,r19,zero
 4029eb0:	05adc83a 	sub	r22,zero,r22
 4029eb4:	b0adc83a 	sub	r22,r22,r2
 4029eb8:	d8802917 	ldw	r2,164(sp)
 4029ebc:	07000b44 	movi	fp,45
 4029ec0:	df002785 	stb	fp,158(sp)
 4029ec4:	10017b16 	blt	r2,zero,402a4b4 <___vfprintf_internal_r+0x1c70>
 4029ec8:	00bfdfc4 	movi	r2,-129
 4029ecc:	90a4703a 	and	r18,r18,r2
 4029ed0:	003bb106 	br	4028d98 <__flash_rwdata_start+0xffff2840>
 4029ed4:	d9003617 	ldw	r4,216(sp)
 4029ed8:	d9403817 	ldw	r5,224(sp)
 4029edc:	da003d15 	stw	r8,244(sp)
 4029ee0:	402f5740 	call	402f574 <__fpclassifyd>
 4029ee4:	da003d17 	ldw	r8,244(sp)
 4029ee8:	1000f026 	beq	r2,zero,402a2ac <___vfprintf_internal_r+0x1a68>
 4029eec:	d9002917 	ldw	r4,164(sp)
 4029ef0:	05bff7c4 	movi	r22,-33
 4029ef4:	00bfffc4 	movi	r2,-1
 4029ef8:	8dac703a 	and	r22,r17,r22
 4029efc:	20820026 	beq	r4,r2,402a700 <___vfprintf_internal_r+0x1ebc>
 4029f00:	008011c4 	movi	r2,71
 4029f04:	b081f726 	beq	r22,r2,402a6e4 <___vfprintf_internal_r+0x1ea0>
 4029f08:	d9003817 	ldw	r4,224(sp)
 4029f0c:	90c04014 	ori	r3,r18,256
 4029f10:	d8c02b15 	stw	r3,172(sp)
 4029f14:	20021516 	blt	r4,zero,402a76c <___vfprintf_internal_r+0x1f28>
 4029f18:	dcc03817 	ldw	r19,224(sp)
 4029f1c:	d8002a05 	stb	zero,168(sp)
 4029f20:	00801984 	movi	r2,102
 4029f24:	8881f926 	beq	r17,r2,402a70c <___vfprintf_internal_r+0x1ec8>
 4029f28:	00801184 	movi	r2,70
 4029f2c:	88821c26 	beq	r17,r2,402a7a0 <___vfprintf_internal_r+0x1f5c>
 4029f30:	00801144 	movi	r2,69
 4029f34:	b081ef26 	beq	r22,r2,402a6f4 <___vfprintf_internal_r+0x1eb0>
 4029f38:	d8c02917 	ldw	r3,164(sp)
 4029f3c:	d8802104 	addi	r2,sp,132
 4029f40:	d8800315 	stw	r2,12(sp)
 4029f44:	d9403617 	ldw	r5,216(sp)
 4029f48:	d8802504 	addi	r2,sp,148
 4029f4c:	d9002c17 	ldw	r4,176(sp)
 4029f50:	d8800215 	stw	r2,8(sp)
 4029f54:	d8802604 	addi	r2,sp,152
 4029f58:	d8c00015 	stw	r3,0(sp)
 4029f5c:	d8800115 	stw	r2,4(sp)
 4029f60:	01c00084 	movi	r7,2
 4029f64:	980d883a 	mov	r6,r19
 4029f68:	d8c03c15 	stw	r3,240(sp)
 4029f6c:	da003d15 	stw	r8,244(sp)
 4029f70:	402aea40 	call	402aea4 <_dtoa_r>
 4029f74:	1021883a 	mov	r16,r2
 4029f78:	008019c4 	movi	r2,103
 4029f7c:	d8c03c17 	ldw	r3,240(sp)
 4029f80:	da003d17 	ldw	r8,244(sp)
 4029f84:	88817126 	beq	r17,r2,402a54c <___vfprintf_internal_r+0x1d08>
 4029f88:	008011c4 	movi	r2,71
 4029f8c:	88829226 	beq	r17,r2,402a9d8 <___vfprintf_internal_r+0x2194>
 4029f90:	80f9883a 	add	fp,r16,r3
 4029f94:	d9003617 	ldw	r4,216(sp)
 4029f98:	000d883a 	mov	r6,zero
 4029f9c:	000f883a 	mov	r7,zero
 4029fa0:	980b883a 	mov	r5,r19
 4029fa4:	da003d15 	stw	r8,244(sp)
 4029fa8:	4032be80 	call	4032be8 <__eqdf2>
 4029fac:	da003d17 	ldw	r8,244(sp)
 4029fb0:	10018d26 	beq	r2,zero,402a5e8 <___vfprintf_internal_r+0x1da4>
 4029fb4:	d8802117 	ldw	r2,132(sp)
 4029fb8:	1700062e 	bgeu	r2,fp,4029fd4 <___vfprintf_internal_r+0x1790>
 4029fbc:	01000c04 	movi	r4,48
 4029fc0:	10c00044 	addi	r3,r2,1
 4029fc4:	d8c02115 	stw	r3,132(sp)
 4029fc8:	11000005 	stb	r4,0(r2)
 4029fcc:	d8802117 	ldw	r2,132(sp)
 4029fd0:	173ffb36 	bltu	r2,fp,4029fc0 <__flash_rwdata_start+0xffff3a68>
 4029fd4:	1405c83a 	sub	r2,r2,r16
 4029fd8:	d8803315 	stw	r2,204(sp)
 4029fdc:	008011c4 	movi	r2,71
 4029fe0:	b0817626 	beq	r22,r2,402a5bc <___vfprintf_internal_r+0x1d78>
 4029fe4:	00801944 	movi	r2,101
 4029fe8:	1442810e 	bge	r2,r17,402a9f0 <___vfprintf_internal_r+0x21ac>
 4029fec:	d8c02617 	ldw	r3,152(sp)
 4029ff0:	00801984 	movi	r2,102
 4029ff4:	d8c03215 	stw	r3,200(sp)
 4029ff8:	8881fe26 	beq	r17,r2,402a7f4 <___vfprintf_internal_r+0x1fb0>
 4029ffc:	d8c03217 	ldw	r3,200(sp)
 402a000:	d9003317 	ldw	r4,204(sp)
 402a004:	1901dd16 	blt	r3,r4,402a77c <___vfprintf_internal_r+0x1f38>
 402a008:	9480004c 	andi	r18,r18,1
 402a00c:	90022b1e 	bne	r18,zero,402a8bc <___vfprintf_internal_r+0x2078>
 402a010:	1805883a 	mov	r2,r3
 402a014:	18028016 	blt	r3,zero,402aa18 <___vfprintf_internal_r+0x21d4>
 402a018:	d8c03217 	ldw	r3,200(sp)
 402a01c:	044019c4 	movi	r17,103
 402a020:	d8c02e15 	stw	r3,184(sp)
 402a024:	df002a07 	ldb	fp,168(sp)
 402a028:	e001531e 	bne	fp,zero,402a578 <___vfprintf_internal_r+0x1d34>
 402a02c:	df002783 	ldbu	fp,158(sp)
 402a030:	d8802a15 	stw	r2,168(sp)
 402a034:	dc802b17 	ldw	r18,172(sp)
 402a038:	d8002915 	stw	zero,164(sp)
 402a03c:	003bd106 	br	4028f84 <__flash_rwdata_start+0xffff2a2c>
 402a040:	d8802d17 	ldw	r2,180(sp)
 402a044:	d8c02d17 	ldw	r3,180(sp)
 402a048:	d9002d17 	ldw	r4,180(sp)
 402a04c:	10800017 	ldw	r2,0(r2)
 402a050:	18c00117 	ldw	r3,4(r3)
 402a054:	21000204 	addi	r4,r4,8
 402a058:	d8803615 	stw	r2,216(sp)
 402a05c:	d8c03815 	stw	r3,224(sp)
 402a060:	d9002d15 	stw	r4,180(sp)
 402a064:	003b7506 	br	4028e3c <__flash_rwdata_start+0xffff28e4>
 402a068:	ac400007 	ldb	r17,0(r21)
 402a06c:	003a5906 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 402a070:	9080100c 	andi	r2,r18,64
 402a074:	1000a826 	beq	r2,zero,402a318 <___vfprintf_internal_r+0x1ad4>
 402a078:	d9002d17 	ldw	r4,180(sp)
 402a07c:	002d883a 	mov	r22,zero
 402a080:	24c0000b 	ldhu	r19,0(r4)
 402a084:	21000104 	addi	r4,r4,4
 402a088:	d9002d15 	stw	r4,180(sp)
 402a08c:	003ccb06 	br	40293bc <__flash_rwdata_start+0xffff2e64>
 402a090:	d8c02d17 	ldw	r3,180(sp)
 402a094:	d9002917 	ldw	r4,164(sp)
 402a098:	002d883a 	mov	r22,zero
 402a09c:	18800104 	addi	r2,r3,4
 402a0a0:	1cc00017 	ldw	r19,0(r3)
 402a0a4:	203ebb0e 	bge	r4,zero,4029b94 <__flash_rwdata_start+0xffff363c>
 402a0a8:	003ef106 	br	4029c70 <__flash_rwdata_start+0xffff3718>
 402a0ac:	9080040c 	andi	r2,r18,16
 402a0b0:	1000921e 	bne	r2,zero,402a2fc <___vfprintf_internal_r+0x1ab8>
 402a0b4:	9480100c 	andi	r18,r18,64
 402a0b8:	90013926 	beq	r18,zero,402a5a0 <___vfprintf_internal_r+0x1d5c>
 402a0bc:	d9002d17 	ldw	r4,180(sp)
 402a0c0:	d9402f17 	ldw	r5,188(sp)
 402a0c4:	20800017 	ldw	r2,0(r4)
 402a0c8:	21000104 	addi	r4,r4,4
 402a0cc:	d9002d15 	stw	r4,180(sp)
 402a0d0:	1140000d 	sth	r5,0(r2)
 402a0d4:	003a1606 	br	4028930 <__flash_rwdata_start+0xffff23d8>
 402a0d8:	9080100c 	andi	r2,r18,64
 402a0dc:	10008026 	beq	r2,zero,402a2e0 <___vfprintf_internal_r+0x1a9c>
 402a0e0:	d8c02d17 	ldw	r3,180(sp)
 402a0e4:	1cc0000f 	ldh	r19,0(r3)
 402a0e8:	18c00104 	addi	r3,r3,4
 402a0ec:	d8c02d15 	stw	r3,180(sp)
 402a0f0:	982dd7fa 	srai	r22,r19,31
 402a0f4:	b005883a 	mov	r2,r22
 402a0f8:	003b1f06 	br	4028d78 <__flash_rwdata_start+0xffff2820>
 402a0fc:	9080100c 	andi	r2,r18,64
 402a100:	d8002785 	stb	zero,158(sp)
 402a104:	10008a1e 	bne	r2,zero,402a330 <___vfprintf_internal_r+0x1aec>
 402a108:	d9402d17 	ldw	r5,180(sp)
 402a10c:	d8c02917 	ldw	r3,164(sp)
 402a110:	002d883a 	mov	r22,zero
 402a114:	28800104 	addi	r2,r5,4
 402a118:	2cc00017 	ldw	r19,0(r5)
 402a11c:	183e4b0e 	bge	r3,zero,4029a4c <__flash_rwdata_start+0xffff34f4>
 402a120:	9d86b03a 	or	r3,r19,r22
 402a124:	d8802d15 	stw	r2,180(sp)
 402a128:	183e4c1e 	bne	r3,zero,4029a5c <__flash_rwdata_start+0xffff3504>
 402a12c:	0039883a 	mov	fp,zero
 402a130:	0005883a 	mov	r2,zero
 402a134:	003d4006 	br	4029638 <__flash_rwdata_start+0xffff30e0>
 402a138:	01400034 	movhi	r5,0
 402a13c:	29413984 	addi	r5,r5,1254
 402a140:	d9402b15 	stw	r5,172(sp)
 402a144:	d9402b17 	ldw	r5,172(sp)
 402a148:	1c47883a 	add	r3,r3,r17
 402a14c:	10800044 	addi	r2,r2,1
 402a150:	41400015 	stw	r5,0(r8)
 402a154:	44400115 	stw	r17,4(r8)
 402a158:	d8c02015 	stw	r3,128(sp)
 402a15c:	d8801f15 	stw	r2,124(sp)
 402a160:	010001c4 	movi	r4,7
 402a164:	20bec816 	blt	r4,r2,4029c88 <__flash_rwdata_start+0xffff3730>
 402a168:	42000204 	addi	r8,r8,8
 402a16c:	003ecd06 	br	4029ca4 <__flash_rwdata_start+0xffff374c>
 402a170:	d9002917 	ldw	r4,164(sp)
 402a174:	d8002785 	stb	zero,158(sp)
 402a178:	203d2d16 	blt	r4,zero,4029630 <__flash_rwdata_start+0xffff30d8>
 402a17c:	00bfdfc4 	movi	r2,-129
 402a180:	90a4703a 	and	r18,r18,r2
 402a184:	003a9106 	br	4028bcc <__flash_rwdata_start+0xffff2674>
 402a188:	01000034 	movhi	r4,0
 402a18c:	21013984 	addi	r4,r4,1254
 402a190:	d9002b15 	stw	r4,172(sp)
 402a194:	003c0c06 	br	40291c8 <__flash_rwdata_start+0xffff2c70>
 402a198:	d9002c17 	ldw	r4,176(sp)
 402a19c:	d9801e04 	addi	r6,sp,120
 402a1a0:	b80b883a 	mov	r5,r23
 402a1a4:	402f8740 	call	402f874 <__sprint_r>
 402a1a8:	103aab1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a1ac:	d8c02017 	ldw	r3,128(sp)
 402a1b0:	da000404 	addi	r8,sp,16
 402a1b4:	003d4106 	br	40296bc <__flash_rwdata_start+0xffff3164>
 402a1b8:	d8801f17 	ldw	r2,124(sp)
 402a1bc:	01400034 	movhi	r5,0
 402a1c0:	01000044 	movi	r4,1
 402a1c4:	18c00044 	addi	r3,r3,1
 402a1c8:	10800044 	addi	r2,r2,1
 402a1cc:	29413904 	addi	r5,r5,1252
 402a1d0:	41000115 	stw	r4,4(r8)
 402a1d4:	41400015 	stw	r5,0(r8)
 402a1d8:	d8c02015 	stw	r3,128(sp)
 402a1dc:	d8801f15 	stw	r2,124(sp)
 402a1e0:	010001c4 	movi	r4,7
 402a1e4:	20805c16 	blt	r4,r2,402a358 <___vfprintf_internal_r+0x1b14>
 402a1e8:	42000204 	addi	r8,r8,8
 402a1ec:	8800041e 	bne	r17,zero,402a200 <___vfprintf_internal_r+0x19bc>
 402a1f0:	d8803317 	ldw	r2,204(sp)
 402a1f4:	1000021e 	bne	r2,zero,402a200 <___vfprintf_internal_r+0x19bc>
 402a1f8:	9080004c 	andi	r2,r18,1
 402a1fc:	103c0926 	beq	r2,zero,4029224 <__flash_rwdata_start+0xffff2ccc>
 402a200:	d9003717 	ldw	r4,220(sp)
 402a204:	d8801f17 	ldw	r2,124(sp)
 402a208:	d9403417 	ldw	r5,208(sp)
 402a20c:	20c7883a 	add	r3,r4,r3
 402a210:	10800044 	addi	r2,r2,1
 402a214:	41000115 	stw	r4,4(r8)
 402a218:	41400015 	stw	r5,0(r8)
 402a21c:	d8c02015 	stw	r3,128(sp)
 402a220:	d8801f15 	stw	r2,124(sp)
 402a224:	010001c4 	movi	r4,7
 402a228:	20812116 	blt	r4,r2,402a6b0 <___vfprintf_internal_r+0x1e6c>
 402a22c:	42000204 	addi	r8,r8,8
 402a230:	0463c83a 	sub	r17,zero,r17
 402a234:	0440730e 	bge	zero,r17,402a404 <___vfprintf_internal_r+0x1bc0>
 402a238:	05800404 	movi	r22,16
 402a23c:	b440860e 	bge	r22,r17,402a458 <___vfprintf_internal_r+0x1c14>
 402a240:	01400034 	movhi	r5,0
 402a244:	29413984 	addi	r5,r5,1254
 402a248:	d9402b15 	stw	r5,172(sp)
 402a24c:	070001c4 	movi	fp,7
 402a250:	dcc02c17 	ldw	r19,176(sp)
 402a254:	00000306 	br	402a264 <___vfprintf_internal_r+0x1a20>
 402a258:	42000204 	addi	r8,r8,8
 402a25c:	8c7ffc04 	addi	r17,r17,-16
 402a260:	b440800e 	bge	r22,r17,402a464 <___vfprintf_internal_r+0x1c20>
 402a264:	18c00404 	addi	r3,r3,16
 402a268:	10800044 	addi	r2,r2,1
 402a26c:	45000015 	stw	r20,0(r8)
 402a270:	45800115 	stw	r22,4(r8)
 402a274:	d8c02015 	stw	r3,128(sp)
 402a278:	d8801f15 	stw	r2,124(sp)
 402a27c:	e0bff60e 	bge	fp,r2,402a258 <__flash_rwdata_start+0xffff3d00>
 402a280:	d9801e04 	addi	r6,sp,120
 402a284:	b80b883a 	mov	r5,r23
 402a288:	9809883a 	mov	r4,r19
 402a28c:	402f8740 	call	402f874 <__sprint_r>
 402a290:	103a711e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a294:	d8c02017 	ldw	r3,128(sp)
 402a298:	d8801f17 	ldw	r2,124(sp)
 402a29c:	da000404 	addi	r8,sp,16
 402a2a0:	003fee06 	br	402a25c <__flash_rwdata_start+0xffff3d04>
 402a2a4:	00bfffc4 	movi	r2,-1
 402a2a8:	003a6f06 	br	4028c68 <__flash_rwdata_start+0xffff2710>
 402a2ac:	008011c4 	movi	r2,71
 402a2b0:	1440b816 	blt	r2,r17,402a594 <___vfprintf_internal_r+0x1d50>
 402a2b4:	04000034 	movhi	r16,0
 402a2b8:	84012b04 	addi	r16,r16,1196
 402a2bc:	00c000c4 	movi	r3,3
 402a2c0:	00bfdfc4 	movi	r2,-129
 402a2c4:	d8c02a15 	stw	r3,168(sp)
 402a2c8:	90a4703a 	and	r18,r18,r2
 402a2cc:	df002783 	ldbu	fp,158(sp)
 402a2d0:	d8c02e15 	stw	r3,184(sp)
 402a2d4:	d8002915 	stw	zero,164(sp)
 402a2d8:	d8003215 	stw	zero,200(sp)
 402a2dc:	003b2906 	br	4028f84 <__flash_rwdata_start+0xffff2a2c>
 402a2e0:	d9002d17 	ldw	r4,180(sp)
 402a2e4:	24c00017 	ldw	r19,0(r4)
 402a2e8:	21000104 	addi	r4,r4,4
 402a2ec:	d9002d15 	stw	r4,180(sp)
 402a2f0:	982dd7fa 	srai	r22,r19,31
 402a2f4:	b005883a 	mov	r2,r22
 402a2f8:	003a9f06 	br	4028d78 <__flash_rwdata_start+0xffff2820>
 402a2fc:	d9402d17 	ldw	r5,180(sp)
 402a300:	d8c02f17 	ldw	r3,188(sp)
 402a304:	28800017 	ldw	r2,0(r5)
 402a308:	29400104 	addi	r5,r5,4
 402a30c:	d9402d15 	stw	r5,180(sp)
 402a310:	10c00015 	stw	r3,0(r2)
 402a314:	00398606 	br	4028930 <__flash_rwdata_start+0xffff23d8>
 402a318:	d9402d17 	ldw	r5,180(sp)
 402a31c:	002d883a 	mov	r22,zero
 402a320:	2cc00017 	ldw	r19,0(r5)
 402a324:	29400104 	addi	r5,r5,4
 402a328:	d9402d15 	stw	r5,180(sp)
 402a32c:	003c2306 	br	40293bc <__flash_rwdata_start+0xffff2e64>
 402a330:	d8c02d17 	ldw	r3,180(sp)
 402a334:	d9002917 	ldw	r4,164(sp)
 402a338:	002d883a 	mov	r22,zero
 402a33c:	18800104 	addi	r2,r3,4
 402a340:	1cc0000b 	ldhu	r19,0(r3)
 402a344:	203dc10e 	bge	r4,zero,4029a4c <__flash_rwdata_start+0xffff34f4>
 402a348:	003f7506 	br	402a120 <__flash_rwdata_start+0xffff3bc8>
 402a34c:	04000034 	movhi	r16,0
 402a350:	84012904 	addi	r16,r16,1188
 402a354:	003acc06 	br	4028e88 <__flash_rwdata_start+0xffff2930>
 402a358:	d9002c17 	ldw	r4,176(sp)
 402a35c:	d9801e04 	addi	r6,sp,120
 402a360:	b80b883a 	mov	r5,r23
 402a364:	402f8740 	call	402f874 <__sprint_r>
 402a368:	103a3b1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a36c:	dc402617 	ldw	r17,152(sp)
 402a370:	d8c02017 	ldw	r3,128(sp)
 402a374:	da000404 	addi	r8,sp,16
 402a378:	003f9c06 	br	402a1ec <__flash_rwdata_start+0xffff3c94>
 402a37c:	ac400043 	ldbu	r17,1(r21)
 402a380:	94800814 	ori	r18,r18,32
 402a384:	ad400044 	addi	r21,r21,1
 402a388:	8c403fcc 	andi	r17,r17,255
 402a38c:	8c40201c 	xori	r17,r17,128
 402a390:	8c7fe004 	addi	r17,r17,-128
 402a394:	00398f06 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 402a398:	d8c02d15 	stw	r3,180(sp)
 402a39c:	0039883a 	mov	fp,zero
 402a3a0:	003e3506 	br	4029c78 <__flash_rwdata_start+0xffff3720>
 402a3a4:	d9002c17 	ldw	r4,176(sp)
 402a3a8:	d9801e04 	addi	r6,sp,120
 402a3ac:	b80b883a 	mov	r5,r23
 402a3b0:	402f8740 	call	402f874 <__sprint_r>
 402a3b4:	103a281e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a3b8:	d8c02017 	ldw	r3,128(sp)
 402a3bc:	da000404 	addi	r8,sp,16
 402a3c0:	003cd006 	br	4029704 <__flash_rwdata_start+0xffff31ac>
 402a3c4:	8009883a 	mov	r4,r16
 402a3c8:	da003d15 	stw	r8,244(sp)
 402a3cc:	40287a00 	call	40287a0 <strlen>
 402a3d0:	d8802e15 	stw	r2,184(sp)
 402a3d4:	da003d17 	ldw	r8,244(sp)
 402a3d8:	103c340e 	bge	r2,zero,40294ac <__flash_rwdata_start+0xffff2f54>
 402a3dc:	0005883a 	mov	r2,zero
 402a3e0:	003c3206 	br	40294ac <__flash_rwdata_start+0xffff2f54>
 402a3e4:	d9002c17 	ldw	r4,176(sp)
 402a3e8:	d9801e04 	addi	r6,sp,120
 402a3ec:	b80b883a 	mov	r5,r23
 402a3f0:	402f8740 	call	402f874 <__sprint_r>
 402a3f4:	103a181e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a3f8:	d8c02017 	ldw	r3,128(sp)
 402a3fc:	d8801f17 	ldw	r2,124(sp)
 402a400:	da000404 	addi	r8,sp,16
 402a404:	d9403317 	ldw	r5,204(sp)
 402a408:	10800044 	addi	r2,r2,1
 402a40c:	44000015 	stw	r16,0(r8)
 402a410:	28c7883a 	add	r3,r5,r3
 402a414:	003b7d06 	br	402920c <__flash_rwdata_start+0xffff2cb4>
 402a418:	01000034 	movhi	r4,0
 402a41c:	21013d84 	addi	r4,r4,1270
 402a420:	d9003515 	stw	r4,212(sp)
 402a424:	003b1406 	br	4029078 <__flash_rwdata_start+0xffff2b20>
 402a428:	013fffc4 	movi	r4,-1
 402a42c:	003a3506 	br	4028d04 <__flash_rwdata_start+0xffff27ac>
 402a430:	0023883a 	mov	r17,zero
 402a434:	003d9d06 	br	4029aac <__flash_rwdata_start+0xffff3554>
 402a438:	d9002c17 	ldw	r4,176(sp)
 402a43c:	d9801e04 	addi	r6,sp,120
 402a440:	b80b883a 	mov	r5,r23
 402a444:	402f8740 	call	402f874 <__sprint_r>
 402a448:	103a031e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a44c:	d8c02017 	ldw	r3,128(sp)
 402a450:	da000404 	addi	r8,sp,16
 402a454:	003d9406 	br	4029aa8 <__flash_rwdata_start+0xffff3550>
 402a458:	01000034 	movhi	r4,0
 402a45c:	21013984 	addi	r4,r4,1254
 402a460:	d9002b15 	stw	r4,172(sp)
 402a464:	d9002b17 	ldw	r4,172(sp)
 402a468:	1c47883a 	add	r3,r3,r17
 402a46c:	10800044 	addi	r2,r2,1
 402a470:	41000015 	stw	r4,0(r8)
 402a474:	44400115 	stw	r17,4(r8)
 402a478:	d8c02015 	stw	r3,128(sp)
 402a47c:	d8801f15 	stw	r2,124(sp)
 402a480:	010001c4 	movi	r4,7
 402a484:	20bfd716 	blt	r4,r2,402a3e4 <__flash_rwdata_start+0xffff3e8c>
 402a488:	42000204 	addi	r8,r8,8
 402a48c:	003fdd06 	br	402a404 <__flash_rwdata_start+0xffff3eac>
 402a490:	d9002c17 	ldw	r4,176(sp)
 402a494:	d9801e04 	addi	r6,sp,120
 402a498:	b80b883a 	mov	r5,r23
 402a49c:	402f8740 	call	402f874 <__sprint_r>
 402a4a0:	1039ed1e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a4a4:	d8802617 	ldw	r2,152(sp)
 402a4a8:	d8c02017 	ldw	r3,128(sp)
 402a4ac:	da000404 	addi	r8,sp,16
 402a4b0:	003e1006 	br	4029cf4 <__flash_rwdata_start+0xffff379c>
 402a4b4:	00800044 	movi	r2,1
 402a4b8:	10803fcc 	andi	r2,r2,255
 402a4bc:	00c00044 	movi	r3,1
 402a4c0:	10fa3526 	beq	r2,r3,4028d98 <__flash_rwdata_start+0xffff2840>
 402a4c4:	00c00084 	movi	r3,2
 402a4c8:	10fbcb26 	beq	r2,r3,40293f8 <__flash_rwdata_start+0xffff2ea0>
 402a4cc:	003a8f06 	br	4028f0c <__flash_rwdata_start+0xffff29b4>
 402a4d0:	01000034 	movhi	r4,0
 402a4d4:	21013d84 	addi	r4,r4,1270
 402a4d8:	d9003515 	stw	r4,212(sp)
 402a4dc:	003b7606 	br	40292b8 <__flash_rwdata_start+0xffff2d60>
 402a4e0:	d8802917 	ldw	r2,164(sp)
 402a4e4:	00c00184 	movi	r3,6
 402a4e8:	1880012e 	bgeu	r3,r2,402a4f0 <___vfprintf_internal_r+0x1cac>
 402a4ec:	1805883a 	mov	r2,r3
 402a4f0:	d8802e15 	stw	r2,184(sp)
 402a4f4:	1000ef16 	blt	r2,zero,402a8b4 <___vfprintf_internal_r+0x2070>
 402a4f8:	04000034 	movhi	r16,0
 402a4fc:	d8802a15 	stw	r2,168(sp)
 402a500:	dcc02d15 	stw	r19,180(sp)
 402a504:	d8002915 	stw	zero,164(sp)
 402a508:	d8003215 	stw	zero,200(sp)
 402a50c:	84013704 	addi	r16,r16,1244
 402a510:	0039883a 	mov	fp,zero
 402a514:	003aa206 	br	4028fa0 <__flash_rwdata_start+0xffff2a48>
 402a518:	0021883a 	mov	r16,zero
 402a51c:	003e0706 	br	4029d3c <__flash_rwdata_start+0xffff37e4>
 402a520:	d9002c17 	ldw	r4,176(sp)
 402a524:	d9801e04 	addi	r6,sp,120
 402a528:	b80b883a 	mov	r5,r23
 402a52c:	402f8740 	call	402f874 <__sprint_r>
 402a530:	1039c91e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a534:	d8802617 	ldw	r2,152(sp)
 402a538:	d9403317 	ldw	r5,204(sp)
 402a53c:	d8c02017 	ldw	r3,128(sp)
 402a540:	da000404 	addi	r8,sp,16
 402a544:	2885c83a 	sub	r2,r5,r2
 402a548:	003dfb06 	br	4029d38 <__flash_rwdata_start+0xffff37e0>
 402a54c:	9080004c 	andi	r2,r18,1
 402a550:	103e8f1e 	bne	r2,zero,4029f90 <__flash_rwdata_start+0xffff3a38>
 402a554:	d8802117 	ldw	r2,132(sp)
 402a558:	003e9e06 	br	4029fd4 <__flash_rwdata_start+0xffff3a7c>
 402a55c:	1025883a 	mov	r18,r2
 402a560:	0039883a 	mov	fp,zero
 402a564:	00800084 	movi	r2,2
 402a568:	003fd306 	br	402a4b8 <__flash_rwdata_start+0xffff3f60>
 402a56c:	07000b44 	movi	fp,45
 402a570:	df002785 	stb	fp,158(sp)
 402a574:	003a4006 	br	4028e78 <__flash_rwdata_start+0xffff2920>
 402a578:	00c00b44 	movi	r3,45
 402a57c:	d8c02785 	stb	r3,158(sp)
 402a580:	d8802a15 	stw	r2,168(sp)
 402a584:	dc802b17 	ldw	r18,172(sp)
 402a588:	d8002915 	stw	zero,164(sp)
 402a58c:	07000b44 	movi	fp,45
 402a590:	003a8006 	br	4028f94 <__flash_rwdata_start+0xffff2a3c>
 402a594:	04000034 	movhi	r16,0
 402a598:	84012c04 	addi	r16,r16,1200
 402a59c:	003f4706 	br	402a2bc <__flash_rwdata_start+0xffff3d64>
 402a5a0:	d8c02d17 	ldw	r3,180(sp)
 402a5a4:	d9002f17 	ldw	r4,188(sp)
 402a5a8:	18800017 	ldw	r2,0(r3)
 402a5ac:	18c00104 	addi	r3,r3,4
 402a5b0:	d8c02d15 	stw	r3,180(sp)
 402a5b4:	11000015 	stw	r4,0(r2)
 402a5b8:	0038dd06 	br	4028930 <__flash_rwdata_start+0xffff23d8>
 402a5bc:	dd802617 	ldw	r22,152(sp)
 402a5c0:	00bfff44 	movi	r2,-3
 402a5c4:	b0801c16 	blt	r22,r2,402a638 <___vfprintf_internal_r+0x1df4>
 402a5c8:	d9402917 	ldw	r5,164(sp)
 402a5cc:	2d801a16 	blt	r5,r22,402a638 <___vfprintf_internal_r+0x1df4>
 402a5d0:	dd803215 	stw	r22,200(sp)
 402a5d4:	003e8906 	br	4029ffc <__flash_rwdata_start+0xffff3aa4>
 402a5d8:	01000034 	movhi	r4,0
 402a5dc:	21013984 	addi	r4,r4,1254
 402a5e0:	d9002b15 	stw	r4,172(sp)
 402a5e4:	003c9106 	br	402982c <__flash_rwdata_start+0xffff32d4>
 402a5e8:	e005883a 	mov	r2,fp
 402a5ec:	003e7906 	br	4029fd4 <__flash_rwdata_start+0xffff3a7c>
 402a5f0:	d9402917 	ldw	r5,164(sp)
 402a5f4:	df002783 	ldbu	fp,158(sp)
 402a5f8:	dcc02d15 	stw	r19,180(sp)
 402a5fc:	d9402a15 	stw	r5,168(sp)
 402a600:	d9402e15 	stw	r5,184(sp)
 402a604:	d8002915 	stw	zero,164(sp)
 402a608:	d8003215 	stw	zero,200(sp)
 402a60c:	003a5d06 	br	4028f84 <__flash_rwdata_start+0xffff2a2c>
 402a610:	9080004c 	andi	r2,r18,1
 402a614:	0039883a 	mov	fp,zero
 402a618:	10000426 	beq	r2,zero,402a62c <___vfprintf_internal_r+0x1de8>
 402a61c:	00800c04 	movi	r2,48
 402a620:	dc001dc4 	addi	r16,sp,119
 402a624:	d8801dc5 	stb	r2,119(sp)
 402a628:	003b8006 	br	402942c <__flash_rwdata_start+0xffff2ed4>
 402a62c:	d8002e15 	stw	zero,184(sp)
 402a630:	dc001e04 	addi	r16,sp,120
 402a634:	003a4d06 	br	4028f6c <__flash_rwdata_start+0xffff2a14>
 402a638:	8c7fff84 	addi	r17,r17,-2
 402a63c:	b5bfffc4 	addi	r22,r22,-1
 402a640:	dd802615 	stw	r22,152(sp)
 402a644:	dc4022c5 	stb	r17,139(sp)
 402a648:	b000bf16 	blt	r22,zero,402a948 <___vfprintf_internal_r+0x2104>
 402a64c:	00800ac4 	movi	r2,43
 402a650:	d8802305 	stb	r2,140(sp)
 402a654:	00800244 	movi	r2,9
 402a658:	15807016 	blt	r2,r22,402a81c <___vfprintf_internal_r+0x1fd8>
 402a65c:	00800c04 	movi	r2,48
 402a660:	b5800c04 	addi	r22,r22,48
 402a664:	d8802345 	stb	r2,141(sp)
 402a668:	dd802385 	stb	r22,142(sp)
 402a66c:	d88023c4 	addi	r2,sp,143
 402a670:	df0022c4 	addi	fp,sp,139
 402a674:	d8c03317 	ldw	r3,204(sp)
 402a678:	1739c83a 	sub	fp,r2,fp
 402a67c:	d9003317 	ldw	r4,204(sp)
 402a680:	e0c7883a 	add	r3,fp,r3
 402a684:	df003a15 	stw	fp,232(sp)
 402a688:	d8c02e15 	stw	r3,184(sp)
 402a68c:	00800044 	movi	r2,1
 402a690:	1100b30e 	bge	r2,r4,402a960 <___vfprintf_internal_r+0x211c>
 402a694:	d8c02e17 	ldw	r3,184(sp)
 402a698:	18c00044 	addi	r3,r3,1
 402a69c:	d8c02e15 	stw	r3,184(sp)
 402a6a0:	1805883a 	mov	r2,r3
 402a6a4:	1800ac16 	blt	r3,zero,402a958 <___vfprintf_internal_r+0x2114>
 402a6a8:	d8003215 	stw	zero,200(sp)
 402a6ac:	003e5d06 	br	402a024 <__flash_rwdata_start+0xffff3acc>
 402a6b0:	d9002c17 	ldw	r4,176(sp)
 402a6b4:	d9801e04 	addi	r6,sp,120
 402a6b8:	b80b883a 	mov	r5,r23
 402a6bc:	402f8740 	call	402f874 <__sprint_r>
 402a6c0:	1039651e 	bne	r2,zero,4028c58 <__flash_rwdata_start+0xffff2700>
 402a6c4:	dc402617 	ldw	r17,152(sp)
 402a6c8:	d8c02017 	ldw	r3,128(sp)
 402a6cc:	d8801f17 	ldw	r2,124(sp)
 402a6d0:	da000404 	addi	r8,sp,16
 402a6d4:	003ed606 	br	402a230 <__flash_rwdata_start+0xffff3cd8>
 402a6d8:	582b883a 	mov	r21,r11
 402a6dc:	d8002915 	stw	zero,164(sp)
 402a6e0:	0038bd06 	br	40289d8 <__flash_rwdata_start+0xffff2480>
 402a6e4:	d8802917 	ldw	r2,164(sp)
 402a6e8:	103e071e 	bne	r2,zero,4029f08 <__flash_rwdata_start+0xffff39b0>
 402a6ec:	dc002915 	stw	r16,164(sp)
 402a6f0:	003e0506 	br	4029f08 <__flash_rwdata_start+0xffff39b0>
 402a6f4:	d9002917 	ldw	r4,164(sp)
 402a6f8:	20c00044 	addi	r3,r4,1
 402a6fc:	003e0f06 	br	4029f3c <__flash_rwdata_start+0xffff39e4>
 402a700:	01400184 	movi	r5,6
 402a704:	d9402915 	stw	r5,164(sp)
 402a708:	003dff06 	br	4029f08 <__flash_rwdata_start+0xffff39b0>
 402a70c:	d8802104 	addi	r2,sp,132
 402a710:	d8800315 	stw	r2,12(sp)
 402a714:	d8802504 	addi	r2,sp,148
 402a718:	d8800215 	stw	r2,8(sp)
 402a71c:	d8802604 	addi	r2,sp,152
 402a720:	d8800115 	stw	r2,4(sp)
 402a724:	d8802917 	ldw	r2,164(sp)
 402a728:	d9403617 	ldw	r5,216(sp)
 402a72c:	d9002c17 	ldw	r4,176(sp)
 402a730:	d8800015 	stw	r2,0(sp)
 402a734:	01c000c4 	movi	r7,3
 402a738:	980d883a 	mov	r6,r19
 402a73c:	da003d15 	stw	r8,244(sp)
 402a740:	402aea40 	call	402aea4 <_dtoa_r>
 402a744:	d8c02917 	ldw	r3,164(sp)
 402a748:	da003d17 	ldw	r8,244(sp)
 402a74c:	1021883a 	mov	r16,r2
 402a750:	10f9883a 	add	fp,r2,r3
 402a754:	81000007 	ldb	r4,0(r16)
 402a758:	00800c04 	movi	r2,48
 402a75c:	20805e26 	beq	r4,r2,402a8d8 <___vfprintf_internal_r+0x2094>
 402a760:	d8c02617 	ldw	r3,152(sp)
 402a764:	e0f9883a 	add	fp,fp,r3
 402a768:	003e0a06 	br	4029f94 <__flash_rwdata_start+0xffff3a3c>
 402a76c:	00c00b44 	movi	r3,45
 402a770:	24e0003c 	xorhi	r19,r4,32768
 402a774:	d8c02a05 	stb	r3,168(sp)
 402a778:	003de906 	br	4029f20 <__flash_rwdata_start+0xffff39c8>
 402a77c:	d8c03217 	ldw	r3,200(sp)
 402a780:	00c07a0e 	bge	zero,r3,402a96c <___vfprintf_internal_r+0x2128>
 402a784:	00800044 	movi	r2,1
 402a788:	d9003317 	ldw	r4,204(sp)
 402a78c:	1105883a 	add	r2,r2,r4
 402a790:	d8802e15 	stw	r2,184(sp)
 402a794:	10004e16 	blt	r2,zero,402a8d0 <___vfprintf_internal_r+0x208c>
 402a798:	044019c4 	movi	r17,103
 402a79c:	003e2106 	br	402a024 <__flash_rwdata_start+0xffff3acc>
 402a7a0:	d9002917 	ldw	r4,164(sp)
 402a7a4:	d8802104 	addi	r2,sp,132
 402a7a8:	d8800315 	stw	r2,12(sp)
 402a7ac:	d9000015 	stw	r4,0(sp)
 402a7b0:	d8802504 	addi	r2,sp,148
 402a7b4:	d9403617 	ldw	r5,216(sp)
 402a7b8:	d9002c17 	ldw	r4,176(sp)
 402a7bc:	d8800215 	stw	r2,8(sp)
 402a7c0:	d8802604 	addi	r2,sp,152
 402a7c4:	d8800115 	stw	r2,4(sp)
 402a7c8:	01c000c4 	movi	r7,3
 402a7cc:	980d883a 	mov	r6,r19
 402a7d0:	da003d15 	stw	r8,244(sp)
 402a7d4:	402aea40 	call	402aea4 <_dtoa_r>
 402a7d8:	d8c02917 	ldw	r3,164(sp)
 402a7dc:	da003d17 	ldw	r8,244(sp)
 402a7e0:	1021883a 	mov	r16,r2
 402a7e4:	00801184 	movi	r2,70
 402a7e8:	80f9883a 	add	fp,r16,r3
 402a7ec:	88bfd926 	beq	r17,r2,402a754 <__flash_rwdata_start+0xffff41fc>
 402a7f0:	003de806 	br	4029f94 <__flash_rwdata_start+0xffff3a3c>
 402a7f4:	d9002917 	ldw	r4,164(sp)
 402a7f8:	00c04d0e 	bge	zero,r3,402a930 <___vfprintf_internal_r+0x20ec>
 402a7fc:	2000441e 	bne	r4,zero,402a910 <___vfprintf_internal_r+0x20cc>
 402a800:	9480004c 	andi	r18,r18,1
 402a804:	9000421e 	bne	r18,zero,402a910 <___vfprintf_internal_r+0x20cc>
 402a808:	1805883a 	mov	r2,r3
 402a80c:	18007016 	blt	r3,zero,402a9d0 <___vfprintf_internal_r+0x218c>
 402a810:	d8c03217 	ldw	r3,200(sp)
 402a814:	d8c02e15 	stw	r3,184(sp)
 402a818:	003e0206 	br	402a024 <__flash_rwdata_start+0xffff3acc>
 402a81c:	df0022c4 	addi	fp,sp,139
 402a820:	dc002915 	stw	r16,164(sp)
 402a824:	4027883a 	mov	r19,r8
 402a828:	e021883a 	mov	r16,fp
 402a82c:	b009883a 	mov	r4,r22
 402a830:	01400284 	movi	r5,10
 402a834:	4024c640 	call	4024c64 <__modsi3>
 402a838:	10800c04 	addi	r2,r2,48
 402a83c:	843fffc4 	addi	r16,r16,-1
 402a840:	b009883a 	mov	r4,r22
 402a844:	01400284 	movi	r5,10
 402a848:	80800005 	stb	r2,0(r16)
 402a84c:	4024bd40 	call	4024bd4 <__divsi3>
 402a850:	102d883a 	mov	r22,r2
 402a854:	00800244 	movi	r2,9
 402a858:	15bff416 	blt	r2,r22,402a82c <__flash_rwdata_start+0xffff42d4>
 402a85c:	9811883a 	mov	r8,r19
 402a860:	b0800c04 	addi	r2,r22,48
 402a864:	8027883a 	mov	r19,r16
 402a868:	997fffc4 	addi	r5,r19,-1
 402a86c:	98bfffc5 	stb	r2,-1(r19)
 402a870:	dc002917 	ldw	r16,164(sp)
 402a874:	2f006a2e 	bgeu	r5,fp,402aa20 <___vfprintf_internal_r+0x21dc>
 402a878:	d9c02384 	addi	r7,sp,142
 402a87c:	3ccfc83a 	sub	r7,r7,r19
 402a880:	d9002344 	addi	r4,sp,141
 402a884:	e1cf883a 	add	r7,fp,r7
 402a888:	00000106 	br	402a890 <___vfprintf_internal_r+0x204c>
 402a88c:	28800003 	ldbu	r2,0(r5)
 402a890:	20800005 	stb	r2,0(r4)
 402a894:	21000044 	addi	r4,r4,1
 402a898:	29400044 	addi	r5,r5,1
 402a89c:	393ffb1e 	bne	r7,r4,402a88c <__flash_rwdata_start+0xffff4334>
 402a8a0:	d8802304 	addi	r2,sp,140
 402a8a4:	14c5c83a 	sub	r2,r2,r19
 402a8a8:	d8c02344 	addi	r3,sp,141
 402a8ac:	1885883a 	add	r2,r3,r2
 402a8b0:	003f7006 	br	402a674 <__flash_rwdata_start+0xffff411c>
 402a8b4:	0005883a 	mov	r2,zero
 402a8b8:	003f0f06 	br	402a4f8 <__flash_rwdata_start+0xffff3fa0>
 402a8bc:	d8c03217 	ldw	r3,200(sp)
 402a8c0:	18c00044 	addi	r3,r3,1
 402a8c4:	d8c02e15 	stw	r3,184(sp)
 402a8c8:	1805883a 	mov	r2,r3
 402a8cc:	183fb20e 	bge	r3,zero,402a798 <__flash_rwdata_start+0xffff4240>
 402a8d0:	0005883a 	mov	r2,zero
 402a8d4:	003fb006 	br	402a798 <__flash_rwdata_start+0xffff4240>
 402a8d8:	d9003617 	ldw	r4,216(sp)
 402a8dc:	000d883a 	mov	r6,zero
 402a8e0:	000f883a 	mov	r7,zero
 402a8e4:	980b883a 	mov	r5,r19
 402a8e8:	d8c03c15 	stw	r3,240(sp)
 402a8ec:	da003d15 	stw	r8,244(sp)
 402a8f0:	4032be80 	call	4032be8 <__eqdf2>
 402a8f4:	d8c03c17 	ldw	r3,240(sp)
 402a8f8:	da003d17 	ldw	r8,244(sp)
 402a8fc:	103f9826 	beq	r2,zero,402a760 <__flash_rwdata_start+0xffff4208>
 402a900:	00800044 	movi	r2,1
 402a904:	10c7c83a 	sub	r3,r2,r3
 402a908:	d8c02615 	stw	r3,152(sp)
 402a90c:	003f9506 	br	402a764 <__flash_rwdata_start+0xffff420c>
 402a910:	d9002917 	ldw	r4,164(sp)
 402a914:	d8c03217 	ldw	r3,200(sp)
 402a918:	20800044 	addi	r2,r4,1
 402a91c:	1885883a 	add	r2,r3,r2
 402a920:	d8802e15 	stw	r2,184(sp)
 402a924:	103dbf0e 	bge	r2,zero,402a024 <__flash_rwdata_start+0xffff3acc>
 402a928:	0005883a 	mov	r2,zero
 402a92c:	003dbd06 	br	402a024 <__flash_rwdata_start+0xffff3acc>
 402a930:	2000211e 	bne	r4,zero,402a9b8 <___vfprintf_internal_r+0x2174>
 402a934:	9480004c 	andi	r18,r18,1
 402a938:	90001f1e 	bne	r18,zero,402a9b8 <___vfprintf_internal_r+0x2174>
 402a93c:	00800044 	movi	r2,1
 402a940:	d8802e15 	stw	r2,184(sp)
 402a944:	003db706 	br	402a024 <__flash_rwdata_start+0xffff3acc>
 402a948:	00800b44 	movi	r2,45
 402a94c:	05adc83a 	sub	r22,zero,r22
 402a950:	d8802305 	stb	r2,140(sp)
 402a954:	003f3f06 	br	402a654 <__flash_rwdata_start+0xffff40fc>
 402a958:	0005883a 	mov	r2,zero
 402a95c:	003f5206 	br	402a6a8 <__flash_rwdata_start+0xffff4150>
 402a960:	90a4703a 	and	r18,r18,r2
 402a964:	903f4e26 	beq	r18,zero,402a6a0 <__flash_rwdata_start+0xffff4148>
 402a968:	003f4a06 	br	402a694 <__flash_rwdata_start+0xffff413c>
 402a96c:	00800084 	movi	r2,2
 402a970:	10c5c83a 	sub	r2,r2,r3
 402a974:	003f8406 	br	402a788 <__flash_rwdata_start+0xffff4230>
 402a978:	d8802d17 	ldw	r2,180(sp)
 402a97c:	d9002d17 	ldw	r4,180(sp)
 402a980:	ac400043 	ldbu	r17,1(r21)
 402a984:	10800017 	ldw	r2,0(r2)
 402a988:	582b883a 	mov	r21,r11
 402a98c:	d8802915 	stw	r2,164(sp)
 402a990:	20800104 	addi	r2,r4,4
 402a994:	d9002917 	ldw	r4,164(sp)
 402a998:	d8802d15 	stw	r2,180(sp)
 402a99c:	203e7a0e 	bge	r4,zero,402a388 <__flash_rwdata_start+0xffff3e30>
 402a9a0:	8c403fcc 	andi	r17,r17,255
 402a9a4:	00bfffc4 	movi	r2,-1
 402a9a8:	8c40201c 	xori	r17,r17,128
 402a9ac:	d8802915 	stw	r2,164(sp)
 402a9b0:	8c7fe004 	addi	r17,r17,-128
 402a9b4:	00380706 	br	40289d4 <__flash_rwdata_start+0xffff247c>
 402a9b8:	d8c02917 	ldw	r3,164(sp)
 402a9bc:	18c00084 	addi	r3,r3,2
 402a9c0:	d8c02e15 	stw	r3,184(sp)
 402a9c4:	1805883a 	mov	r2,r3
 402a9c8:	183d960e 	bge	r3,zero,402a024 <__flash_rwdata_start+0xffff3acc>
 402a9cc:	003fd606 	br	402a928 <__flash_rwdata_start+0xffff43d0>
 402a9d0:	0005883a 	mov	r2,zero
 402a9d4:	003f8e06 	br	402a810 <__flash_rwdata_start+0xffff42b8>
 402a9d8:	9080004c 	andi	r2,r18,1
 402a9dc:	103f811e 	bne	r2,zero,402a7e4 <__flash_rwdata_start+0xffff428c>
 402a9e0:	d8802117 	ldw	r2,132(sp)
 402a9e4:	1405c83a 	sub	r2,r2,r16
 402a9e8:	d8803315 	stw	r2,204(sp)
 402a9ec:	b47ef326 	beq	r22,r17,402a5bc <__flash_rwdata_start+0xffff4064>
 402a9f0:	dd802617 	ldw	r22,152(sp)
 402a9f4:	003f1106 	br	402a63c <__flash_rwdata_start+0xffff40e4>
 402a9f8:	d9c02785 	stb	r7,158(sp)
 402a9fc:	00390406 	br	4028e10 <__flash_rwdata_start+0xffff28b8>
 402aa00:	d9c02785 	stb	r7,158(sp)
 402aa04:	0038d306 	br	4028d54 <__flash_rwdata_start+0xffff27fc>
 402aa08:	d9c02785 	stb	r7,158(sp)
 402aa0c:	003a6106 	br	4029394 <__flash_rwdata_start+0xffff2e3c>
 402aa10:	d9c02785 	stb	r7,158(sp)
 402aa14:	003af806 	br	40295f8 <__flash_rwdata_start+0xffff30a0>
 402aa18:	0005883a 	mov	r2,zero
 402aa1c:	003d7e06 	br	402a018 <__flash_rwdata_start+0xffff3ac0>
 402aa20:	d8802344 	addi	r2,sp,141
 402aa24:	003f1306 	br	402a674 <__flash_rwdata_start+0xffff411c>
 402aa28:	d9c02785 	stb	r7,158(sp)
 402aa2c:	00392306 	br	4028ebc <__flash_rwdata_start+0xffff2964>
 402aa30:	d9c02785 	stb	r7,158(sp)
 402aa34:	003aa906 	br	40294dc <__flash_rwdata_start+0xffff2f84>
 402aa38:	d9c02785 	stb	r7,158(sp)
 402aa3c:	003a3d06 	br	4029334 <__flash_rwdata_start+0xffff2ddc>
 402aa40:	d9c02785 	stb	r7,158(sp)
 402aa44:	003aca06 	br	4029570 <__flash_rwdata_start+0xffff3018>

0402aa48 <__vfprintf_internal>:
 402aa48:	f811883a 	mov	r8,ra
 402aa4c:	40346e80 	call	40346e8 <_mcount>
 402aa50:	403f883a 	mov	ra,r8
 402aa54:	00800034 	movhi	r2,0
 402aa58:	10886904 	addi	r2,r2,8612
 402aa5c:	300f883a 	mov	r7,r6
 402aa60:	280d883a 	mov	r6,r5
 402aa64:	200b883a 	mov	r5,r4
 402aa68:	11000017 	ldw	r4,0(r2)
 402aa6c:	40288441 	jmpi	4028844 <___vfprintf_internal_r>

0402aa70 <__sbprintf>:
 402aa70:	f811883a 	mov	r8,ra
 402aa74:	40346e80 	call	40346e8 <_mcount>
 402aa78:	403f883a 	mov	ra,r8
 402aa7c:	defee204 	addi	sp,sp,-1144
 402aa80:	dfc11d15 	stw	ra,1140(sp)
 402aa84:	dc811c15 	stw	r18,1136(sp)
 402aa88:	dc411b15 	stw	r17,1132(sp)
 402aa8c:	dc011a15 	stw	r16,1128(sp)
 402aa90:	2880030b 	ldhu	r2,12(r5)
 402aa94:	2ac01917 	ldw	r11,100(r5)
 402aa98:	2a80038b 	ldhu	r10,14(r5)
 402aa9c:	2a400717 	ldw	r9,28(r5)
 402aaa0:	2a000917 	ldw	r8,36(r5)
 402aaa4:	00c10004 	movi	r3,1024
 402aaa8:	10bfff4c 	andi	r2,r2,65533
 402aaac:	2821883a 	mov	r16,r5
 402aab0:	d8cb883a 	add	r5,sp,r3
 402aab4:	2025883a 	mov	r18,r4
 402aab8:	d881030d 	sth	r2,1036(sp)
 402aabc:	dac11915 	stw	r11,1124(sp)
 402aac0:	da81038d 	sth	r10,1038(sp)
 402aac4:	da410715 	stw	r9,1052(sp)
 402aac8:	da010915 	stw	r8,1060(sp)
 402aacc:	dec10015 	stw	sp,1024(sp)
 402aad0:	dec10415 	stw	sp,1040(sp)
 402aad4:	d8c10215 	stw	r3,1032(sp)
 402aad8:	d8c10515 	stw	r3,1044(sp)
 402aadc:	d8010615 	stw	zero,1048(sp)
 402aae0:	40288440 	call	4028844 <___vfprintf_internal_r>
 402aae4:	1023883a 	mov	r17,r2
 402aae8:	10000416 	blt	r2,zero,402aafc <__sbprintf+0x8c>
 402aaec:	d9410004 	addi	r5,sp,1024
 402aaf0:	9009883a 	mov	r4,r18
 402aaf4:	402c7600 	call	402c760 <_fflush_r>
 402aaf8:	10000d1e 	bne	r2,zero,402ab30 <__sbprintf+0xc0>
 402aafc:	d881030b 	ldhu	r2,1036(sp)
 402ab00:	1080100c 	andi	r2,r2,64
 402ab04:	10000326 	beq	r2,zero,402ab14 <__sbprintf+0xa4>
 402ab08:	8080030b 	ldhu	r2,12(r16)
 402ab0c:	10801014 	ori	r2,r2,64
 402ab10:	8080030d 	sth	r2,12(r16)
 402ab14:	8805883a 	mov	r2,r17
 402ab18:	dfc11d17 	ldw	ra,1140(sp)
 402ab1c:	dc811c17 	ldw	r18,1136(sp)
 402ab20:	dc411b17 	ldw	r17,1132(sp)
 402ab24:	dc011a17 	ldw	r16,1128(sp)
 402ab28:	dec11e04 	addi	sp,sp,1144
 402ab2c:	f800283a 	ret
 402ab30:	047fffc4 	movi	r17,-1
 402ab34:	003ff106 	br	402aafc <__flash_rwdata_start+0xffff45a4>

0402ab38 <__swsetup_r>:
 402ab38:	f811883a 	mov	r8,ra
 402ab3c:	40346e80 	call	40346e8 <_mcount>
 402ab40:	403f883a 	mov	ra,r8
 402ab44:	defffd04 	addi	sp,sp,-12
 402ab48:	dfc00215 	stw	ra,8(sp)
 402ab4c:	dc400115 	stw	r17,4(sp)
 402ab50:	dc000015 	stw	r16,0(sp)
 402ab54:	00800034 	movhi	r2,0
 402ab58:	10886904 	addi	r2,r2,8612
 402ab5c:	2023883a 	mov	r17,r4
 402ab60:	11000017 	ldw	r4,0(r2)
 402ab64:	2821883a 	mov	r16,r5
 402ab68:	20000226 	beq	r4,zero,402ab74 <__swsetup_r+0x3c>
 402ab6c:	20800e17 	ldw	r2,56(r4)
 402ab70:	10003126 	beq	r2,zero,402ac38 <__swsetup_r+0x100>
 402ab74:	8080030b 	ldhu	r2,12(r16)
 402ab78:	10c0020c 	andi	r3,r2,8
 402ab7c:	1009883a 	mov	r4,r2
 402ab80:	18000f26 	beq	r3,zero,402abc0 <__swsetup_r+0x88>
 402ab84:	80c00417 	ldw	r3,16(r16)
 402ab88:	18001526 	beq	r3,zero,402abe0 <__swsetup_r+0xa8>
 402ab8c:	1100004c 	andi	r4,r2,1
 402ab90:	20001c1e 	bne	r4,zero,402ac04 <__swsetup_r+0xcc>
 402ab94:	1080008c 	andi	r2,r2,2
 402ab98:	1000291e 	bne	r2,zero,402ac40 <__swsetup_r+0x108>
 402ab9c:	80800517 	ldw	r2,20(r16)
 402aba0:	80800215 	stw	r2,8(r16)
 402aba4:	18001c26 	beq	r3,zero,402ac18 <__swsetup_r+0xe0>
 402aba8:	0005883a 	mov	r2,zero
 402abac:	dfc00217 	ldw	ra,8(sp)
 402abb0:	dc400117 	ldw	r17,4(sp)
 402abb4:	dc000017 	ldw	r16,0(sp)
 402abb8:	dec00304 	addi	sp,sp,12
 402abbc:	f800283a 	ret
 402abc0:	2080040c 	andi	r2,r4,16
 402abc4:	10002e26 	beq	r2,zero,402ac80 <__swsetup_r+0x148>
 402abc8:	2080010c 	andi	r2,r4,4
 402abcc:	10001e1e 	bne	r2,zero,402ac48 <__swsetup_r+0x110>
 402abd0:	80c00417 	ldw	r3,16(r16)
 402abd4:	20800214 	ori	r2,r4,8
 402abd8:	8080030d 	sth	r2,12(r16)
 402abdc:	183feb1e 	bne	r3,zero,402ab8c <__flash_rwdata_start+0xffff4634>
 402abe0:	1100a00c 	andi	r4,r2,640
 402abe4:	01408004 	movi	r5,512
 402abe8:	217fe826 	beq	r4,r5,402ab8c <__flash_rwdata_start+0xffff4634>
 402abec:	800b883a 	mov	r5,r16
 402abf0:	8809883a 	mov	r4,r17
 402abf4:	402d83c0 	call	402d83c <__smakebuf_r>
 402abf8:	8080030b 	ldhu	r2,12(r16)
 402abfc:	80c00417 	ldw	r3,16(r16)
 402ac00:	003fe206 	br	402ab8c <__flash_rwdata_start+0xffff4634>
 402ac04:	80800517 	ldw	r2,20(r16)
 402ac08:	80000215 	stw	zero,8(r16)
 402ac0c:	0085c83a 	sub	r2,zero,r2
 402ac10:	80800615 	stw	r2,24(r16)
 402ac14:	183fe41e 	bne	r3,zero,402aba8 <__flash_rwdata_start+0xffff4650>
 402ac18:	80c0030b 	ldhu	r3,12(r16)
 402ac1c:	0005883a 	mov	r2,zero
 402ac20:	1900200c 	andi	r4,r3,128
 402ac24:	203fe126 	beq	r4,zero,402abac <__flash_rwdata_start+0xffff4654>
 402ac28:	18c01014 	ori	r3,r3,64
 402ac2c:	80c0030d 	sth	r3,12(r16)
 402ac30:	00bfffc4 	movi	r2,-1
 402ac34:	003fdd06 	br	402abac <__flash_rwdata_start+0xffff4654>
 402ac38:	402cba80 	call	402cba8 <__sinit>
 402ac3c:	003fcd06 	br	402ab74 <__flash_rwdata_start+0xffff461c>
 402ac40:	0005883a 	mov	r2,zero
 402ac44:	003fd606 	br	402aba0 <__flash_rwdata_start+0xffff4648>
 402ac48:	81400c17 	ldw	r5,48(r16)
 402ac4c:	28000626 	beq	r5,zero,402ac68 <__swsetup_r+0x130>
 402ac50:	80801004 	addi	r2,r16,64
 402ac54:	28800326 	beq	r5,r2,402ac64 <__swsetup_r+0x12c>
 402ac58:	8809883a 	mov	r4,r17
 402ac5c:	402cd7c0 	call	402cd7c <_free_r>
 402ac60:	8100030b 	ldhu	r4,12(r16)
 402ac64:	80000c15 	stw	zero,48(r16)
 402ac68:	80c00417 	ldw	r3,16(r16)
 402ac6c:	00bff6c4 	movi	r2,-37
 402ac70:	1108703a 	and	r4,r2,r4
 402ac74:	80000115 	stw	zero,4(r16)
 402ac78:	80c00015 	stw	r3,0(r16)
 402ac7c:	003fd506 	br	402abd4 <__flash_rwdata_start+0xffff467c>
 402ac80:	00800244 	movi	r2,9
 402ac84:	88800015 	stw	r2,0(r17)
 402ac88:	20801014 	ori	r2,r4,64
 402ac8c:	8080030d 	sth	r2,12(r16)
 402ac90:	00bfffc4 	movi	r2,-1
 402ac94:	003fc506 	br	402abac <__flash_rwdata_start+0xffff4654>

0402ac98 <quorem>:
 402ac98:	f811883a 	mov	r8,ra
 402ac9c:	40346e80 	call	40346e8 <_mcount>
 402aca0:	403f883a 	mov	ra,r8
 402aca4:	defff704 	addi	sp,sp,-36
 402aca8:	dfc00815 	stw	ra,32(sp)
 402acac:	ddc00715 	stw	r23,28(sp)
 402acb0:	dd800615 	stw	r22,24(sp)
 402acb4:	dd400515 	stw	r21,20(sp)
 402acb8:	dd000415 	stw	r20,16(sp)
 402acbc:	dcc00315 	stw	r19,12(sp)
 402acc0:	dc800215 	stw	r18,8(sp)
 402acc4:	dc400115 	stw	r17,4(sp)
 402acc8:	dc000015 	stw	r16,0(sp)
 402accc:	2c800417 	ldw	r18,16(r5)
 402acd0:	20800417 	ldw	r2,16(r4)
 402acd4:	14807116 	blt	r2,r18,402ae9c <quorem+0x204>
 402acd8:	94bfffc4 	addi	r18,r18,-1
 402acdc:	94ad883a 	add	r22,r18,r18
 402ace0:	b5ad883a 	add	r22,r22,r22
 402ace4:	2c400504 	addi	r17,r5,20
 402ace8:	8da9883a 	add	r20,r17,r22
 402acec:	25400504 	addi	r21,r4,20
 402acf0:	282f883a 	mov	r23,r5
 402acf4:	adad883a 	add	r22,r21,r22
 402acf8:	a1400017 	ldw	r5,0(r20)
 402acfc:	2021883a 	mov	r16,r4
 402ad00:	b1000017 	ldw	r4,0(r22)
 402ad04:	29400044 	addi	r5,r5,1
 402ad08:	4024ce40 	call	4024ce4 <__udivsi3>
 402ad0c:	1027883a 	mov	r19,r2
 402ad10:	10002c26 	beq	r2,zero,402adc4 <quorem+0x12c>
 402ad14:	a813883a 	mov	r9,r21
 402ad18:	880b883a 	mov	r5,r17
 402ad1c:	0009883a 	mov	r4,zero
 402ad20:	000d883a 	mov	r6,zero
 402ad24:	2a000017 	ldw	r8,0(r5)
 402ad28:	49c00017 	ldw	r7,0(r9)
 402ad2c:	29400104 	addi	r5,r5,4
 402ad30:	40bfffcc 	andi	r2,r8,65535
 402ad34:	14c5383a 	mul	r2,r2,r19
 402ad38:	4010d43a 	srli	r8,r8,16
 402ad3c:	38ffffcc 	andi	r3,r7,65535
 402ad40:	1105883a 	add	r2,r2,r4
 402ad44:	1008d43a 	srli	r4,r2,16
 402ad48:	44d1383a 	mul	r8,r8,r19
 402ad4c:	198d883a 	add	r6,r3,r6
 402ad50:	10ffffcc 	andi	r3,r2,65535
 402ad54:	30c7c83a 	sub	r3,r6,r3
 402ad58:	380ed43a 	srli	r7,r7,16
 402ad5c:	4105883a 	add	r2,r8,r4
 402ad60:	180dd43a 	srai	r6,r3,16
 402ad64:	113fffcc 	andi	r4,r2,65535
 402ad68:	390fc83a 	sub	r7,r7,r4
 402ad6c:	398d883a 	add	r6,r7,r6
 402ad70:	300e943a 	slli	r7,r6,16
 402ad74:	18ffffcc 	andi	r3,r3,65535
 402ad78:	1008d43a 	srli	r4,r2,16
 402ad7c:	38ceb03a 	or	r7,r7,r3
 402ad80:	49c00015 	stw	r7,0(r9)
 402ad84:	300dd43a 	srai	r6,r6,16
 402ad88:	4a400104 	addi	r9,r9,4
 402ad8c:	a17fe52e 	bgeu	r20,r5,402ad24 <__flash_rwdata_start+0xffff47cc>
 402ad90:	b0800017 	ldw	r2,0(r22)
 402ad94:	10000b1e 	bne	r2,zero,402adc4 <quorem+0x12c>
 402ad98:	b0bfff04 	addi	r2,r22,-4
 402ad9c:	a880082e 	bgeu	r21,r2,402adc0 <quorem+0x128>
 402ada0:	b0ffff17 	ldw	r3,-4(r22)
 402ada4:	18000326 	beq	r3,zero,402adb4 <quorem+0x11c>
 402ada8:	00000506 	br	402adc0 <quorem+0x128>
 402adac:	10c00017 	ldw	r3,0(r2)
 402adb0:	1800031e 	bne	r3,zero,402adc0 <quorem+0x128>
 402adb4:	10bfff04 	addi	r2,r2,-4
 402adb8:	94bfffc4 	addi	r18,r18,-1
 402adbc:	a8bffb36 	bltu	r21,r2,402adac <__flash_rwdata_start+0xffff4854>
 402adc0:	84800415 	stw	r18,16(r16)
 402adc4:	b80b883a 	mov	r5,r23
 402adc8:	8009883a 	mov	r4,r16
 402adcc:	402e6ec0 	call	402e6ec <__mcmp>
 402add0:	10002616 	blt	r2,zero,402ae6c <quorem+0x1d4>
 402add4:	9cc00044 	addi	r19,r19,1
 402add8:	a805883a 	mov	r2,r21
 402addc:	000b883a 	mov	r5,zero
 402ade0:	11000017 	ldw	r4,0(r2)
 402ade4:	89800017 	ldw	r6,0(r17)
 402ade8:	10800104 	addi	r2,r2,4
 402adec:	20ffffcc 	andi	r3,r4,65535
 402adf0:	194b883a 	add	r5,r3,r5
 402adf4:	30ffffcc 	andi	r3,r6,65535
 402adf8:	28c7c83a 	sub	r3,r5,r3
 402adfc:	300cd43a 	srli	r6,r6,16
 402ae00:	2008d43a 	srli	r4,r4,16
 402ae04:	180bd43a 	srai	r5,r3,16
 402ae08:	18ffffcc 	andi	r3,r3,65535
 402ae0c:	2189c83a 	sub	r4,r4,r6
 402ae10:	2149883a 	add	r4,r4,r5
 402ae14:	200c943a 	slli	r6,r4,16
 402ae18:	8c400104 	addi	r17,r17,4
 402ae1c:	200bd43a 	srai	r5,r4,16
 402ae20:	30c6b03a 	or	r3,r6,r3
 402ae24:	10ffff15 	stw	r3,-4(r2)
 402ae28:	a47fed2e 	bgeu	r20,r17,402ade0 <__flash_rwdata_start+0xffff4888>
 402ae2c:	9485883a 	add	r2,r18,r18
 402ae30:	1085883a 	add	r2,r2,r2
 402ae34:	a887883a 	add	r3,r21,r2
 402ae38:	18800017 	ldw	r2,0(r3)
 402ae3c:	10000b1e 	bne	r2,zero,402ae6c <quorem+0x1d4>
 402ae40:	18bfff04 	addi	r2,r3,-4
 402ae44:	a880082e 	bgeu	r21,r2,402ae68 <quorem+0x1d0>
 402ae48:	18ffff17 	ldw	r3,-4(r3)
 402ae4c:	18000326 	beq	r3,zero,402ae5c <quorem+0x1c4>
 402ae50:	00000506 	br	402ae68 <quorem+0x1d0>
 402ae54:	10c00017 	ldw	r3,0(r2)
 402ae58:	1800031e 	bne	r3,zero,402ae68 <quorem+0x1d0>
 402ae5c:	10bfff04 	addi	r2,r2,-4
 402ae60:	94bfffc4 	addi	r18,r18,-1
 402ae64:	a8bffb36 	bltu	r21,r2,402ae54 <__flash_rwdata_start+0xffff48fc>
 402ae68:	84800415 	stw	r18,16(r16)
 402ae6c:	9805883a 	mov	r2,r19
 402ae70:	dfc00817 	ldw	ra,32(sp)
 402ae74:	ddc00717 	ldw	r23,28(sp)
 402ae78:	dd800617 	ldw	r22,24(sp)
 402ae7c:	dd400517 	ldw	r21,20(sp)
 402ae80:	dd000417 	ldw	r20,16(sp)
 402ae84:	dcc00317 	ldw	r19,12(sp)
 402ae88:	dc800217 	ldw	r18,8(sp)
 402ae8c:	dc400117 	ldw	r17,4(sp)
 402ae90:	dc000017 	ldw	r16,0(sp)
 402ae94:	dec00904 	addi	sp,sp,36
 402ae98:	f800283a 	ret
 402ae9c:	0005883a 	mov	r2,zero
 402aea0:	003ff306 	br	402ae70 <__flash_rwdata_start+0xffff4918>

0402aea4 <_dtoa_r>:
 402aea4:	f811883a 	mov	r8,ra
 402aea8:	40346e80 	call	40346e8 <_mcount>
 402aeac:	403f883a 	mov	ra,r8
 402aeb0:	deffde04 	addi	sp,sp,-136
 402aeb4:	dfc02115 	stw	ra,132(sp)
 402aeb8:	df002015 	stw	fp,128(sp)
 402aebc:	ddc01f15 	stw	r23,124(sp)
 402aec0:	dd801e15 	stw	r22,120(sp)
 402aec4:	dd401d15 	stw	r21,116(sp)
 402aec8:	dd001c15 	stw	r20,112(sp)
 402aecc:	dcc01b15 	stw	r19,108(sp)
 402aed0:	dc801a15 	stw	r18,104(sp)
 402aed4:	dc401915 	stw	r17,100(sp)
 402aed8:	dc001815 	stw	r16,96(sp)
 402aedc:	20801017 	ldw	r2,64(r4)
 402aee0:	d9c00315 	stw	r7,12(sp)
 402aee4:	2039883a 	mov	fp,r4
 402aee8:	3023883a 	mov	r17,r6
 402aeec:	2825883a 	mov	r18,r5
 402aef0:	dc002417 	ldw	r16,144(sp)
 402aef4:	3027883a 	mov	r19,r6
 402aef8:	10000826 	beq	r2,zero,402af1c <_dtoa_r+0x78>
 402aefc:	21801117 	ldw	r6,68(r4)
 402af00:	00c00044 	movi	r3,1
 402af04:	100b883a 	mov	r5,r2
 402af08:	1986983a 	sll	r3,r3,r6
 402af0c:	11800115 	stw	r6,4(r2)
 402af10:	10c00215 	stw	r3,8(r2)
 402af14:	402de600 	call	402de60 <_Bfree>
 402af18:	e0001015 	stw	zero,64(fp)
 402af1c:	88002e16 	blt	r17,zero,402afd8 <_dtoa_r+0x134>
 402af20:	80000015 	stw	zero,0(r16)
 402af24:	889ffc2c 	andhi	r2,r17,32752
 402af28:	00dffc34 	movhi	r3,32752
 402af2c:	10c01c26 	beq	r2,r3,402afa0 <_dtoa_r+0xfc>
 402af30:	000d883a 	mov	r6,zero
 402af34:	000f883a 	mov	r7,zero
 402af38:	9009883a 	mov	r4,r18
 402af3c:	980b883a 	mov	r5,r19
 402af40:	4032be80 	call	4032be8 <__eqdf2>
 402af44:	10002b1e 	bne	r2,zero,402aff4 <_dtoa_r+0x150>
 402af48:	d9c02317 	ldw	r7,140(sp)
 402af4c:	00800044 	movi	r2,1
 402af50:	38800015 	stw	r2,0(r7)
 402af54:	d8802517 	ldw	r2,148(sp)
 402af58:	10019e26 	beq	r2,zero,402b5d4 <_dtoa_r+0x730>
 402af5c:	d8c02517 	ldw	r3,148(sp)
 402af60:	00800034 	movhi	r2,0
 402af64:	10813944 	addi	r2,r2,1253
 402af68:	18800015 	stw	r2,0(r3)
 402af6c:	10bfffc4 	addi	r2,r2,-1
 402af70:	dfc02117 	ldw	ra,132(sp)
 402af74:	df002017 	ldw	fp,128(sp)
 402af78:	ddc01f17 	ldw	r23,124(sp)
 402af7c:	dd801e17 	ldw	r22,120(sp)
 402af80:	dd401d17 	ldw	r21,116(sp)
 402af84:	dd001c17 	ldw	r20,112(sp)
 402af88:	dcc01b17 	ldw	r19,108(sp)
 402af8c:	dc801a17 	ldw	r18,104(sp)
 402af90:	dc401917 	ldw	r17,100(sp)
 402af94:	dc001817 	ldw	r16,96(sp)
 402af98:	dec02204 	addi	sp,sp,136
 402af9c:	f800283a 	ret
 402afa0:	d8c02317 	ldw	r3,140(sp)
 402afa4:	0089c3c4 	movi	r2,9999
 402afa8:	18800015 	stw	r2,0(r3)
 402afac:	90017726 	beq	r18,zero,402b58c <_dtoa_r+0x6e8>
 402afb0:	00800034 	movhi	r2,0
 402afb4:	10814504 	addi	r2,r2,1300
 402afb8:	d9002517 	ldw	r4,148(sp)
 402afbc:	203fec26 	beq	r4,zero,402af70 <__flash_rwdata_start+0xffff4a18>
 402afc0:	10c000c7 	ldb	r3,3(r2)
 402afc4:	1801781e 	bne	r3,zero,402b5a8 <_dtoa_r+0x704>
 402afc8:	10c000c4 	addi	r3,r2,3
 402afcc:	d9802517 	ldw	r6,148(sp)
 402afd0:	30c00015 	stw	r3,0(r6)
 402afd4:	003fe606 	br	402af70 <__flash_rwdata_start+0xffff4a18>
 402afd8:	04e00034 	movhi	r19,32768
 402afdc:	9cffffc4 	addi	r19,r19,-1
 402afe0:	00800044 	movi	r2,1
 402afe4:	8ce6703a 	and	r19,r17,r19
 402afe8:	80800015 	stw	r2,0(r16)
 402afec:	9823883a 	mov	r17,r19
 402aff0:	003fcc06 	br	402af24 <__flash_rwdata_start+0xffff49cc>
 402aff4:	d8800204 	addi	r2,sp,8
 402aff8:	d8800015 	stw	r2,0(sp)
 402affc:	d9c00104 	addi	r7,sp,4
 402b000:	900b883a 	mov	r5,r18
 402b004:	980d883a 	mov	r6,r19
 402b008:	e009883a 	mov	r4,fp
 402b00c:	8820d53a 	srli	r16,r17,20
 402b010:	402eae40 	call	402eae4 <__d2b>
 402b014:	d8800915 	stw	r2,36(sp)
 402b018:	8001651e 	bne	r16,zero,402b5b0 <_dtoa_r+0x70c>
 402b01c:	dd800217 	ldw	r22,8(sp)
 402b020:	dc000117 	ldw	r16,4(sp)
 402b024:	00800804 	movi	r2,32
 402b028:	b421883a 	add	r16,r22,r16
 402b02c:	80c10c84 	addi	r3,r16,1074
 402b030:	10c2d10e 	bge	r2,r3,402bb78 <_dtoa_r+0xcd4>
 402b034:	00801004 	movi	r2,64
 402b038:	81010484 	addi	r4,r16,1042
 402b03c:	10c7c83a 	sub	r3,r2,r3
 402b040:	9108d83a 	srl	r4,r18,r4
 402b044:	88e2983a 	sll	r17,r17,r3
 402b048:	2448b03a 	or	r4,r4,r17
 402b04c:	4033f0c0 	call	4033f0c <__floatunsidf>
 402b050:	017f8434 	movhi	r5,65040
 402b054:	01800044 	movi	r6,1
 402b058:	1009883a 	mov	r4,r2
 402b05c:	194b883a 	add	r5,r3,r5
 402b060:	843fffc4 	addi	r16,r16,-1
 402b064:	d9801115 	stw	r6,68(sp)
 402b068:	000d883a 	mov	r6,zero
 402b06c:	01cffe34 	movhi	r7,16376
 402b070:	40335780 	call	4033578 <__subdf3>
 402b074:	0198dbf4 	movhi	r6,25455
 402b078:	01cff4f4 	movhi	r7,16339
 402b07c:	3190d844 	addi	r6,r6,17249
 402b080:	39e1e9c4 	addi	r7,r7,-30809
 402b084:	1009883a 	mov	r4,r2
 402b088:	180b883a 	mov	r5,r3
 402b08c:	4032e540 	call	4032e54 <__muldf3>
 402b090:	01a2d874 	movhi	r6,35681
 402b094:	01cff1f4 	movhi	r7,16327
 402b098:	31b22cc4 	addi	r6,r6,-14157
 402b09c:	39e28a04 	addi	r7,r7,-30168
 402b0a0:	180b883a 	mov	r5,r3
 402b0a4:	1009883a 	mov	r4,r2
 402b0a8:	40323300 	call	4032330 <__adddf3>
 402b0ac:	8009883a 	mov	r4,r16
 402b0b0:	1029883a 	mov	r20,r2
 402b0b4:	1823883a 	mov	r17,r3
 402b0b8:	4026cac0 	call	4026cac <__floatsidf>
 402b0bc:	019427f4 	movhi	r6,20639
 402b0c0:	01cff4f4 	movhi	r7,16339
 402b0c4:	319e7ec4 	addi	r6,r6,31227
 402b0c8:	39d104c4 	addi	r7,r7,17427
 402b0cc:	1009883a 	mov	r4,r2
 402b0d0:	180b883a 	mov	r5,r3
 402b0d4:	4032e540 	call	4032e54 <__muldf3>
 402b0d8:	100d883a 	mov	r6,r2
 402b0dc:	180f883a 	mov	r7,r3
 402b0e0:	a009883a 	mov	r4,r20
 402b0e4:	880b883a 	mov	r5,r17
 402b0e8:	40323300 	call	4032330 <__adddf3>
 402b0ec:	1009883a 	mov	r4,r2
 402b0f0:	180b883a 	mov	r5,r3
 402b0f4:	1029883a 	mov	r20,r2
 402b0f8:	1823883a 	mov	r17,r3
 402b0fc:	4033e800 	call	4033e80 <__fixdfsi>
 402b100:	000d883a 	mov	r6,zero
 402b104:	000f883a 	mov	r7,zero
 402b108:	a009883a 	mov	r4,r20
 402b10c:	880b883a 	mov	r5,r17
 402b110:	d8800515 	stw	r2,20(sp)
 402b114:	4032d5c0 	call	4032d5c <__ledf2>
 402b118:	10028716 	blt	r2,zero,402bb38 <_dtoa_r+0xc94>
 402b11c:	d8c00517 	ldw	r3,20(sp)
 402b120:	00800584 	movi	r2,22
 402b124:	10c27536 	bltu	r2,r3,402bafc <_dtoa_r+0xc58>
 402b128:	180490fa 	slli	r2,r3,3
 402b12c:	00c00034 	movhi	r3,0
 402b130:	18c16104 	addi	r3,r3,1412
 402b134:	1885883a 	add	r2,r3,r2
 402b138:	11000017 	ldw	r4,0(r2)
 402b13c:	11400117 	ldw	r5,4(r2)
 402b140:	900d883a 	mov	r6,r18
 402b144:	980f883a 	mov	r7,r19
 402b148:	4032c780 	call	4032c78 <__gedf2>
 402b14c:	00828d0e 	bge	zero,r2,402bb84 <_dtoa_r+0xce0>
 402b150:	d9000517 	ldw	r4,20(sp)
 402b154:	d8000e15 	stw	zero,56(sp)
 402b158:	213fffc4 	addi	r4,r4,-1
 402b15c:	d9000515 	stw	r4,20(sp)
 402b160:	b42dc83a 	sub	r22,r22,r16
 402b164:	b5bfffc4 	addi	r22,r22,-1
 402b168:	b0026f16 	blt	r22,zero,402bb28 <_dtoa_r+0xc84>
 402b16c:	d8000815 	stw	zero,32(sp)
 402b170:	d9c00517 	ldw	r7,20(sp)
 402b174:	38026416 	blt	r7,zero,402bb08 <_dtoa_r+0xc64>
 402b178:	b1ed883a 	add	r22,r22,r7
 402b17c:	d9c00d15 	stw	r7,52(sp)
 402b180:	d8000a15 	stw	zero,40(sp)
 402b184:	d9800317 	ldw	r6,12(sp)
 402b188:	00800244 	movi	r2,9
 402b18c:	11811436 	bltu	r2,r6,402b5e0 <_dtoa_r+0x73c>
 402b190:	00800144 	movi	r2,5
 402b194:	1184e10e 	bge	r2,r6,402c51c <_dtoa_r+0x1678>
 402b198:	31bfff04 	addi	r6,r6,-4
 402b19c:	d9800315 	stw	r6,12(sp)
 402b1a0:	0023883a 	mov	r17,zero
 402b1a4:	d9800317 	ldw	r6,12(sp)
 402b1a8:	008000c4 	movi	r2,3
 402b1ac:	30836726 	beq	r6,r2,402bf4c <_dtoa_r+0x10a8>
 402b1b0:	1183410e 	bge	r2,r6,402beb8 <_dtoa_r+0x1014>
 402b1b4:	d9c00317 	ldw	r7,12(sp)
 402b1b8:	00800104 	movi	r2,4
 402b1bc:	38827c26 	beq	r7,r2,402bbb0 <_dtoa_r+0xd0c>
 402b1c0:	00800144 	movi	r2,5
 402b1c4:	3884c41e 	bne	r7,r2,402c4d8 <_dtoa_r+0x1634>
 402b1c8:	00800044 	movi	r2,1
 402b1cc:	d8800b15 	stw	r2,44(sp)
 402b1d0:	d8c00517 	ldw	r3,20(sp)
 402b1d4:	d9002217 	ldw	r4,136(sp)
 402b1d8:	1907883a 	add	r3,r3,r4
 402b1dc:	19800044 	addi	r6,r3,1
 402b1e0:	d8c00c15 	stw	r3,48(sp)
 402b1e4:	d9800615 	stw	r6,24(sp)
 402b1e8:	0183a40e 	bge	zero,r6,402c07c <_dtoa_r+0x11d8>
 402b1ec:	d9800617 	ldw	r6,24(sp)
 402b1f0:	3021883a 	mov	r16,r6
 402b1f4:	e0001115 	stw	zero,68(fp)
 402b1f8:	008005c4 	movi	r2,23
 402b1fc:	1184c92e 	bgeu	r2,r6,402c524 <_dtoa_r+0x1680>
 402b200:	00c00044 	movi	r3,1
 402b204:	00800104 	movi	r2,4
 402b208:	1085883a 	add	r2,r2,r2
 402b20c:	11000504 	addi	r4,r2,20
 402b210:	180b883a 	mov	r5,r3
 402b214:	18c00044 	addi	r3,r3,1
 402b218:	313ffb2e 	bgeu	r6,r4,402b208 <__flash_rwdata_start+0xffff4cb0>
 402b21c:	e1401115 	stw	r5,68(fp)
 402b220:	e009883a 	mov	r4,fp
 402b224:	402ddac0 	call	402ddac <_Balloc>
 402b228:	d8800715 	stw	r2,28(sp)
 402b22c:	e0801015 	stw	r2,64(fp)
 402b230:	00800384 	movi	r2,14
 402b234:	1400f736 	bltu	r2,r16,402b614 <_dtoa_r+0x770>
 402b238:	8800f626 	beq	r17,zero,402b614 <_dtoa_r+0x770>
 402b23c:	d9c00517 	ldw	r7,20(sp)
 402b240:	01c39a0e 	bge	zero,r7,402c0ac <_dtoa_r+0x1208>
 402b244:	388003cc 	andi	r2,r7,15
 402b248:	100490fa 	slli	r2,r2,3
 402b24c:	382bd13a 	srai	r21,r7,4
 402b250:	00c00034 	movhi	r3,0
 402b254:	18c16104 	addi	r3,r3,1412
 402b258:	1885883a 	add	r2,r3,r2
 402b25c:	a8c0040c 	andi	r3,r21,16
 402b260:	12400017 	ldw	r9,0(r2)
 402b264:	12000117 	ldw	r8,4(r2)
 402b268:	18037926 	beq	r3,zero,402c050 <_dtoa_r+0x11ac>
 402b26c:	00800034 	movhi	r2,0
 402b270:	10815704 	addi	r2,r2,1372
 402b274:	11800817 	ldw	r6,32(r2)
 402b278:	11c00917 	ldw	r7,36(r2)
 402b27c:	9009883a 	mov	r4,r18
 402b280:	980b883a 	mov	r5,r19
 402b284:	da001715 	stw	r8,92(sp)
 402b288:	da401615 	stw	r9,88(sp)
 402b28c:	40263b80 	call	40263b8 <__divdf3>
 402b290:	da001717 	ldw	r8,92(sp)
 402b294:	da401617 	ldw	r9,88(sp)
 402b298:	ad4003cc 	andi	r21,r21,15
 402b29c:	040000c4 	movi	r16,3
 402b2a0:	1023883a 	mov	r17,r2
 402b2a4:	1829883a 	mov	r20,r3
 402b2a8:	a8001126 	beq	r21,zero,402b2f0 <_dtoa_r+0x44c>
 402b2ac:	05c00034 	movhi	r23,0
 402b2b0:	bdc15704 	addi	r23,r23,1372
 402b2b4:	4805883a 	mov	r2,r9
 402b2b8:	4007883a 	mov	r3,r8
 402b2bc:	a980004c 	andi	r6,r21,1
 402b2c0:	1009883a 	mov	r4,r2
 402b2c4:	a82bd07a 	srai	r21,r21,1
 402b2c8:	180b883a 	mov	r5,r3
 402b2cc:	30000426 	beq	r6,zero,402b2e0 <_dtoa_r+0x43c>
 402b2d0:	b9800017 	ldw	r6,0(r23)
 402b2d4:	b9c00117 	ldw	r7,4(r23)
 402b2d8:	84000044 	addi	r16,r16,1
 402b2dc:	4032e540 	call	4032e54 <__muldf3>
 402b2e0:	bdc00204 	addi	r23,r23,8
 402b2e4:	a83ff51e 	bne	r21,zero,402b2bc <__flash_rwdata_start+0xffff4d64>
 402b2e8:	1013883a 	mov	r9,r2
 402b2ec:	1811883a 	mov	r8,r3
 402b2f0:	480d883a 	mov	r6,r9
 402b2f4:	400f883a 	mov	r7,r8
 402b2f8:	8809883a 	mov	r4,r17
 402b2fc:	a00b883a 	mov	r5,r20
 402b300:	40263b80 	call	40263b8 <__divdf3>
 402b304:	d8800f15 	stw	r2,60(sp)
 402b308:	d8c01015 	stw	r3,64(sp)
 402b30c:	d8c00e17 	ldw	r3,56(sp)
 402b310:	18000626 	beq	r3,zero,402b32c <_dtoa_r+0x488>
 402b314:	d9000f17 	ldw	r4,60(sp)
 402b318:	d9401017 	ldw	r5,64(sp)
 402b31c:	000d883a 	mov	r6,zero
 402b320:	01cffc34 	movhi	r7,16368
 402b324:	4032d5c0 	call	4032d5c <__ledf2>
 402b328:	10040b16 	blt	r2,zero,402c358 <_dtoa_r+0x14b4>
 402b32c:	8009883a 	mov	r4,r16
 402b330:	4026cac0 	call	4026cac <__floatsidf>
 402b334:	d9800f17 	ldw	r6,60(sp)
 402b338:	d9c01017 	ldw	r7,64(sp)
 402b33c:	1009883a 	mov	r4,r2
 402b340:	180b883a 	mov	r5,r3
 402b344:	4032e540 	call	4032e54 <__muldf3>
 402b348:	000d883a 	mov	r6,zero
 402b34c:	01d00734 	movhi	r7,16412
 402b350:	1009883a 	mov	r4,r2
 402b354:	180b883a 	mov	r5,r3
 402b358:	40323300 	call	4032330 <__adddf3>
 402b35c:	1021883a 	mov	r16,r2
 402b360:	d8800617 	ldw	r2,24(sp)
 402b364:	047f3034 	movhi	r17,64704
 402b368:	1c63883a 	add	r17,r3,r17
 402b36c:	10031826 	beq	r2,zero,402bfd0 <_dtoa_r+0x112c>
 402b370:	d8c00517 	ldw	r3,20(sp)
 402b374:	db000617 	ldw	r12,24(sp)
 402b378:	d8c01315 	stw	r3,76(sp)
 402b37c:	d9000b17 	ldw	r4,44(sp)
 402b380:	20038f26 	beq	r4,zero,402c1c0 <_dtoa_r+0x131c>
 402b384:	60bfffc4 	addi	r2,r12,-1
 402b388:	100490fa 	slli	r2,r2,3
 402b38c:	00c00034 	movhi	r3,0
 402b390:	18c16104 	addi	r3,r3,1412
 402b394:	1885883a 	add	r2,r3,r2
 402b398:	11800017 	ldw	r6,0(r2)
 402b39c:	11c00117 	ldw	r7,4(r2)
 402b3a0:	d8800717 	ldw	r2,28(sp)
 402b3a4:	0009883a 	mov	r4,zero
 402b3a8:	014ff834 	movhi	r5,16352
 402b3ac:	db001615 	stw	r12,88(sp)
 402b3b0:	15c00044 	addi	r23,r2,1
 402b3b4:	40263b80 	call	40263b8 <__divdf3>
 402b3b8:	800d883a 	mov	r6,r16
 402b3bc:	880f883a 	mov	r7,r17
 402b3c0:	1009883a 	mov	r4,r2
 402b3c4:	180b883a 	mov	r5,r3
 402b3c8:	40335780 	call	4033578 <__subdf3>
 402b3cc:	d9401017 	ldw	r5,64(sp)
 402b3d0:	d9000f17 	ldw	r4,60(sp)
 402b3d4:	102b883a 	mov	r21,r2
 402b3d8:	d8c01215 	stw	r3,72(sp)
 402b3dc:	4033e800 	call	4033e80 <__fixdfsi>
 402b3e0:	1009883a 	mov	r4,r2
 402b3e4:	1029883a 	mov	r20,r2
 402b3e8:	4026cac0 	call	4026cac <__floatsidf>
 402b3ec:	d9000f17 	ldw	r4,60(sp)
 402b3f0:	d9401017 	ldw	r5,64(sp)
 402b3f4:	100d883a 	mov	r6,r2
 402b3f8:	180f883a 	mov	r7,r3
 402b3fc:	40335780 	call	4033578 <__subdf3>
 402b400:	1823883a 	mov	r17,r3
 402b404:	d8c00717 	ldw	r3,28(sp)
 402b408:	d9401217 	ldw	r5,72(sp)
 402b40c:	a2000c04 	addi	r8,r20,48
 402b410:	1021883a 	mov	r16,r2
 402b414:	1a000005 	stb	r8,0(r3)
 402b418:	800d883a 	mov	r6,r16
 402b41c:	880f883a 	mov	r7,r17
 402b420:	a809883a 	mov	r4,r21
 402b424:	4029883a 	mov	r20,r8
 402b428:	4032c780 	call	4032c78 <__gedf2>
 402b42c:	00841d16 	blt	zero,r2,402c4a4 <_dtoa_r+0x1600>
 402b430:	800d883a 	mov	r6,r16
 402b434:	880f883a 	mov	r7,r17
 402b438:	0009883a 	mov	r4,zero
 402b43c:	014ffc34 	movhi	r5,16368
 402b440:	40335780 	call	4033578 <__subdf3>
 402b444:	d9401217 	ldw	r5,72(sp)
 402b448:	100d883a 	mov	r6,r2
 402b44c:	180f883a 	mov	r7,r3
 402b450:	a809883a 	mov	r4,r21
 402b454:	4032c780 	call	4032c78 <__gedf2>
 402b458:	db001617 	ldw	r12,88(sp)
 402b45c:	00840e16 	blt	zero,r2,402c498 <_dtoa_r+0x15f4>
 402b460:	00800044 	movi	r2,1
 402b464:	13006b0e 	bge	r2,r12,402b614 <_dtoa_r+0x770>
 402b468:	d9000717 	ldw	r4,28(sp)
 402b46c:	dd800f15 	stw	r22,60(sp)
 402b470:	dcc01015 	stw	r19,64(sp)
 402b474:	2319883a 	add	r12,r4,r12
 402b478:	dcc01217 	ldw	r19,72(sp)
 402b47c:	602d883a 	mov	r22,r12
 402b480:	dc801215 	stw	r18,72(sp)
 402b484:	b825883a 	mov	r18,r23
 402b488:	00000906 	br	402b4b0 <_dtoa_r+0x60c>
 402b48c:	40335780 	call	4033578 <__subdf3>
 402b490:	a80d883a 	mov	r6,r21
 402b494:	980f883a 	mov	r7,r19
 402b498:	1009883a 	mov	r4,r2
 402b49c:	180b883a 	mov	r5,r3
 402b4a0:	4032d5c0 	call	4032d5c <__ledf2>
 402b4a4:	1003e816 	blt	r2,zero,402c448 <_dtoa_r+0x15a4>
 402b4a8:	b825883a 	mov	r18,r23
 402b4ac:	bd83e926 	beq	r23,r22,402c454 <_dtoa_r+0x15b0>
 402b4b0:	a809883a 	mov	r4,r21
 402b4b4:	980b883a 	mov	r5,r19
 402b4b8:	000d883a 	mov	r6,zero
 402b4bc:	01d00934 	movhi	r7,16420
 402b4c0:	4032e540 	call	4032e54 <__muldf3>
 402b4c4:	000d883a 	mov	r6,zero
 402b4c8:	01d00934 	movhi	r7,16420
 402b4cc:	8009883a 	mov	r4,r16
 402b4d0:	880b883a 	mov	r5,r17
 402b4d4:	102b883a 	mov	r21,r2
 402b4d8:	1827883a 	mov	r19,r3
 402b4dc:	4032e540 	call	4032e54 <__muldf3>
 402b4e0:	180b883a 	mov	r5,r3
 402b4e4:	1009883a 	mov	r4,r2
 402b4e8:	1821883a 	mov	r16,r3
 402b4ec:	1023883a 	mov	r17,r2
 402b4f0:	4033e800 	call	4033e80 <__fixdfsi>
 402b4f4:	1009883a 	mov	r4,r2
 402b4f8:	1029883a 	mov	r20,r2
 402b4fc:	4026cac0 	call	4026cac <__floatsidf>
 402b500:	8809883a 	mov	r4,r17
 402b504:	800b883a 	mov	r5,r16
 402b508:	100d883a 	mov	r6,r2
 402b50c:	180f883a 	mov	r7,r3
 402b510:	40335780 	call	4033578 <__subdf3>
 402b514:	a5000c04 	addi	r20,r20,48
 402b518:	a80d883a 	mov	r6,r21
 402b51c:	980f883a 	mov	r7,r19
 402b520:	1009883a 	mov	r4,r2
 402b524:	180b883a 	mov	r5,r3
 402b528:	95000005 	stb	r20,0(r18)
 402b52c:	1021883a 	mov	r16,r2
 402b530:	1823883a 	mov	r17,r3
 402b534:	4032d5c0 	call	4032d5c <__ledf2>
 402b538:	bdc00044 	addi	r23,r23,1
 402b53c:	800d883a 	mov	r6,r16
 402b540:	880f883a 	mov	r7,r17
 402b544:	0009883a 	mov	r4,zero
 402b548:	014ffc34 	movhi	r5,16368
 402b54c:	103fcf0e 	bge	r2,zero,402b48c <__flash_rwdata_start+0xffff4f34>
 402b550:	d8c01317 	ldw	r3,76(sp)
 402b554:	d8c00515 	stw	r3,20(sp)
 402b558:	d9400917 	ldw	r5,36(sp)
 402b55c:	e009883a 	mov	r4,fp
 402b560:	402de600 	call	402de60 <_Bfree>
 402b564:	d9000517 	ldw	r4,20(sp)
 402b568:	d9802317 	ldw	r6,140(sp)
 402b56c:	d9c02517 	ldw	r7,148(sp)
 402b570:	b8000005 	stb	zero,0(r23)
 402b574:	20800044 	addi	r2,r4,1
 402b578:	30800015 	stw	r2,0(r6)
 402b57c:	3802aa26 	beq	r7,zero,402c028 <_dtoa_r+0x1184>
 402b580:	3dc00015 	stw	r23,0(r7)
 402b584:	d8800717 	ldw	r2,28(sp)
 402b588:	003e7906 	br	402af70 <__flash_rwdata_start+0xffff4a18>
 402b58c:	00800434 	movhi	r2,16
 402b590:	10bfffc4 	addi	r2,r2,-1
 402b594:	88a2703a 	and	r17,r17,r2
 402b598:	883e851e 	bne	r17,zero,402afb0 <__flash_rwdata_start+0xffff4a58>
 402b59c:	00800034 	movhi	r2,0
 402b5a0:	10814204 	addi	r2,r2,1288
 402b5a4:	003e8406 	br	402afb8 <__flash_rwdata_start+0xffff4a60>
 402b5a8:	10c00204 	addi	r3,r2,8
 402b5ac:	003e8706 	br	402afcc <__flash_rwdata_start+0xffff4a74>
 402b5b0:	01400434 	movhi	r5,16
 402b5b4:	297fffc4 	addi	r5,r5,-1
 402b5b8:	994a703a 	and	r5,r19,r5
 402b5bc:	9009883a 	mov	r4,r18
 402b5c0:	843f0044 	addi	r16,r16,-1023
 402b5c4:	294ffc34 	orhi	r5,r5,16368
 402b5c8:	dd800217 	ldw	r22,8(sp)
 402b5cc:	d8001115 	stw	zero,68(sp)
 402b5d0:	003ea506 	br	402b068 <__flash_rwdata_start+0xffff4b10>
 402b5d4:	00800034 	movhi	r2,0
 402b5d8:	10813904 	addi	r2,r2,1252
 402b5dc:	003e6406 	br	402af70 <__flash_rwdata_start+0xffff4a18>
 402b5e0:	e0001115 	stw	zero,68(fp)
 402b5e4:	000b883a 	mov	r5,zero
 402b5e8:	e009883a 	mov	r4,fp
 402b5ec:	402ddac0 	call	402ddac <_Balloc>
 402b5f0:	01bfffc4 	movi	r6,-1
 402b5f4:	01c00044 	movi	r7,1
 402b5f8:	d8800715 	stw	r2,28(sp)
 402b5fc:	d9800c15 	stw	r6,48(sp)
 402b600:	e0801015 	stw	r2,64(fp)
 402b604:	d8000315 	stw	zero,12(sp)
 402b608:	d9c00b15 	stw	r7,44(sp)
 402b60c:	d9800615 	stw	r6,24(sp)
 402b610:	d8002215 	stw	zero,136(sp)
 402b614:	d8800117 	ldw	r2,4(sp)
 402b618:	10008916 	blt	r2,zero,402b840 <_dtoa_r+0x99c>
 402b61c:	d9000517 	ldw	r4,20(sp)
 402b620:	00c00384 	movi	r3,14
 402b624:	19008616 	blt	r3,r4,402b840 <_dtoa_r+0x99c>
 402b628:	200490fa 	slli	r2,r4,3
 402b62c:	00c00034 	movhi	r3,0
 402b630:	d9802217 	ldw	r6,136(sp)
 402b634:	18c16104 	addi	r3,r3,1412
 402b638:	1885883a 	add	r2,r3,r2
 402b63c:	14000017 	ldw	r16,0(r2)
 402b640:	14400117 	ldw	r17,4(r2)
 402b644:	30016316 	blt	r6,zero,402bbd4 <_dtoa_r+0xd30>
 402b648:	800d883a 	mov	r6,r16
 402b64c:	880f883a 	mov	r7,r17
 402b650:	9009883a 	mov	r4,r18
 402b654:	980b883a 	mov	r5,r19
 402b658:	40263b80 	call	40263b8 <__divdf3>
 402b65c:	180b883a 	mov	r5,r3
 402b660:	1009883a 	mov	r4,r2
 402b664:	4033e800 	call	4033e80 <__fixdfsi>
 402b668:	1009883a 	mov	r4,r2
 402b66c:	102b883a 	mov	r21,r2
 402b670:	4026cac0 	call	4026cac <__floatsidf>
 402b674:	800d883a 	mov	r6,r16
 402b678:	880f883a 	mov	r7,r17
 402b67c:	1009883a 	mov	r4,r2
 402b680:	180b883a 	mov	r5,r3
 402b684:	4032e540 	call	4032e54 <__muldf3>
 402b688:	100d883a 	mov	r6,r2
 402b68c:	180f883a 	mov	r7,r3
 402b690:	9009883a 	mov	r4,r18
 402b694:	980b883a 	mov	r5,r19
 402b698:	40335780 	call	4033578 <__subdf3>
 402b69c:	d9c00717 	ldw	r7,28(sp)
 402b6a0:	1009883a 	mov	r4,r2
 402b6a4:	a8800c04 	addi	r2,r21,48
 402b6a8:	38800005 	stb	r2,0(r7)
 402b6ac:	3dc00044 	addi	r23,r7,1
 402b6b0:	d9c00617 	ldw	r7,24(sp)
 402b6b4:	01800044 	movi	r6,1
 402b6b8:	180b883a 	mov	r5,r3
 402b6bc:	2005883a 	mov	r2,r4
 402b6c0:	39803826 	beq	r7,r6,402b7a4 <_dtoa_r+0x900>
 402b6c4:	000d883a 	mov	r6,zero
 402b6c8:	01d00934 	movhi	r7,16420
 402b6cc:	4032e540 	call	4032e54 <__muldf3>
 402b6d0:	000d883a 	mov	r6,zero
 402b6d4:	000f883a 	mov	r7,zero
 402b6d8:	1009883a 	mov	r4,r2
 402b6dc:	180b883a 	mov	r5,r3
 402b6e0:	1025883a 	mov	r18,r2
 402b6e4:	1827883a 	mov	r19,r3
 402b6e8:	4032be80 	call	4032be8 <__eqdf2>
 402b6ec:	103f9a26 	beq	r2,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402b6f0:	d9c00617 	ldw	r7,24(sp)
 402b6f4:	d8c00717 	ldw	r3,28(sp)
 402b6f8:	b829883a 	mov	r20,r23
 402b6fc:	38bfffc4 	addi	r2,r7,-1
 402b700:	18ad883a 	add	r22,r3,r2
 402b704:	00000a06 	br	402b730 <_dtoa_r+0x88c>
 402b708:	4032e540 	call	4032e54 <__muldf3>
 402b70c:	000d883a 	mov	r6,zero
 402b710:	000f883a 	mov	r7,zero
 402b714:	1009883a 	mov	r4,r2
 402b718:	180b883a 	mov	r5,r3
 402b71c:	1025883a 	mov	r18,r2
 402b720:	1827883a 	mov	r19,r3
 402b724:	b829883a 	mov	r20,r23
 402b728:	4032be80 	call	4032be8 <__eqdf2>
 402b72c:	103f8a26 	beq	r2,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402b730:	800d883a 	mov	r6,r16
 402b734:	880f883a 	mov	r7,r17
 402b738:	9009883a 	mov	r4,r18
 402b73c:	980b883a 	mov	r5,r19
 402b740:	40263b80 	call	40263b8 <__divdf3>
 402b744:	180b883a 	mov	r5,r3
 402b748:	1009883a 	mov	r4,r2
 402b74c:	4033e800 	call	4033e80 <__fixdfsi>
 402b750:	1009883a 	mov	r4,r2
 402b754:	102b883a 	mov	r21,r2
 402b758:	4026cac0 	call	4026cac <__floatsidf>
 402b75c:	800d883a 	mov	r6,r16
 402b760:	880f883a 	mov	r7,r17
 402b764:	1009883a 	mov	r4,r2
 402b768:	180b883a 	mov	r5,r3
 402b76c:	4032e540 	call	4032e54 <__muldf3>
 402b770:	100d883a 	mov	r6,r2
 402b774:	180f883a 	mov	r7,r3
 402b778:	9009883a 	mov	r4,r18
 402b77c:	980b883a 	mov	r5,r19
 402b780:	40335780 	call	4033578 <__subdf3>
 402b784:	aa000c04 	addi	r8,r21,48
 402b788:	a2000005 	stb	r8,0(r20)
 402b78c:	000d883a 	mov	r6,zero
 402b790:	01d00934 	movhi	r7,16420
 402b794:	1009883a 	mov	r4,r2
 402b798:	180b883a 	mov	r5,r3
 402b79c:	a5c00044 	addi	r23,r20,1
 402b7a0:	b53fd91e 	bne	r22,r20,402b708 <__flash_rwdata_start+0xffff51b0>
 402b7a4:	100d883a 	mov	r6,r2
 402b7a8:	180f883a 	mov	r7,r3
 402b7ac:	1009883a 	mov	r4,r2
 402b7b0:	180b883a 	mov	r5,r3
 402b7b4:	40323300 	call	4032330 <__adddf3>
 402b7b8:	100d883a 	mov	r6,r2
 402b7bc:	180f883a 	mov	r7,r3
 402b7c0:	8009883a 	mov	r4,r16
 402b7c4:	880b883a 	mov	r5,r17
 402b7c8:	1027883a 	mov	r19,r2
 402b7cc:	1825883a 	mov	r18,r3
 402b7d0:	4032d5c0 	call	4032d5c <__ledf2>
 402b7d4:	10000816 	blt	r2,zero,402b7f8 <_dtoa_r+0x954>
 402b7d8:	980d883a 	mov	r6,r19
 402b7dc:	900f883a 	mov	r7,r18
 402b7e0:	8009883a 	mov	r4,r16
 402b7e4:	880b883a 	mov	r5,r17
 402b7e8:	4032be80 	call	4032be8 <__eqdf2>
 402b7ec:	103f5a1e 	bne	r2,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402b7f0:	ad40004c 	andi	r21,r21,1
 402b7f4:	a83f5826 	beq	r21,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402b7f8:	bd3fffc3 	ldbu	r20,-1(r23)
 402b7fc:	b8bfffc4 	addi	r2,r23,-1
 402b800:	1007883a 	mov	r3,r2
 402b804:	01400e44 	movi	r5,57
 402b808:	d9800717 	ldw	r6,28(sp)
 402b80c:	00000506 	br	402b824 <_dtoa_r+0x980>
 402b810:	18ffffc4 	addi	r3,r3,-1
 402b814:	11824726 	beq	r2,r6,402c134 <_dtoa_r+0x1290>
 402b818:	1d000003 	ldbu	r20,0(r3)
 402b81c:	102f883a 	mov	r23,r2
 402b820:	10bfffc4 	addi	r2,r2,-1
 402b824:	a1003fcc 	andi	r4,r20,255
 402b828:	2100201c 	xori	r4,r4,128
 402b82c:	213fe004 	addi	r4,r4,-128
 402b830:	217ff726 	beq	r4,r5,402b810 <__flash_rwdata_start+0xffff52b8>
 402b834:	a2000044 	addi	r8,r20,1
 402b838:	12000005 	stb	r8,0(r2)
 402b83c:	003f4606 	br	402b558 <__flash_rwdata_start+0xffff5000>
 402b840:	d9000b17 	ldw	r4,44(sp)
 402b844:	2000c826 	beq	r4,zero,402bb68 <_dtoa_r+0xcc4>
 402b848:	d9800317 	ldw	r6,12(sp)
 402b84c:	00c00044 	movi	r3,1
 402b850:	1980f90e 	bge	r3,r6,402bc38 <_dtoa_r+0xd94>
 402b854:	d8800617 	ldw	r2,24(sp)
 402b858:	d8c00a17 	ldw	r3,40(sp)
 402b85c:	157fffc4 	addi	r21,r2,-1
 402b860:	1d41f316 	blt	r3,r21,402c030 <_dtoa_r+0x118c>
 402b864:	1d6bc83a 	sub	r21,r3,r21
 402b868:	d9c00617 	ldw	r7,24(sp)
 402b86c:	3802aa16 	blt	r7,zero,402c318 <_dtoa_r+0x1474>
 402b870:	dd000817 	ldw	r20,32(sp)
 402b874:	d8800617 	ldw	r2,24(sp)
 402b878:	d8c00817 	ldw	r3,32(sp)
 402b87c:	01400044 	movi	r5,1
 402b880:	e009883a 	mov	r4,fp
 402b884:	1887883a 	add	r3,r3,r2
 402b888:	d8c00815 	stw	r3,32(sp)
 402b88c:	b0ad883a 	add	r22,r22,r2
 402b890:	402e2000 	call	402e200 <__i2b>
 402b894:	1023883a 	mov	r17,r2
 402b898:	a0000826 	beq	r20,zero,402b8bc <_dtoa_r+0xa18>
 402b89c:	0580070e 	bge	zero,r22,402b8bc <_dtoa_r+0xa18>
 402b8a0:	a005883a 	mov	r2,r20
 402b8a4:	b500b916 	blt	r22,r20,402bb8c <_dtoa_r+0xce8>
 402b8a8:	d9000817 	ldw	r4,32(sp)
 402b8ac:	a0a9c83a 	sub	r20,r20,r2
 402b8b0:	b0adc83a 	sub	r22,r22,r2
 402b8b4:	2089c83a 	sub	r4,r4,r2
 402b8b8:	d9000815 	stw	r4,32(sp)
 402b8bc:	d9800a17 	ldw	r6,40(sp)
 402b8c0:	0181810e 	bge	zero,r6,402bec8 <_dtoa_r+0x1024>
 402b8c4:	d9c00b17 	ldw	r7,44(sp)
 402b8c8:	3800b326 	beq	r7,zero,402bb98 <_dtoa_r+0xcf4>
 402b8cc:	a800b226 	beq	r21,zero,402bb98 <_dtoa_r+0xcf4>
 402b8d0:	880b883a 	mov	r5,r17
 402b8d4:	a80d883a 	mov	r6,r21
 402b8d8:	e009883a 	mov	r4,fp
 402b8dc:	402e44c0 	call	402e44c <__pow5mult>
 402b8e0:	d9800917 	ldw	r6,36(sp)
 402b8e4:	100b883a 	mov	r5,r2
 402b8e8:	e009883a 	mov	r4,fp
 402b8ec:	1023883a 	mov	r17,r2
 402b8f0:	402e2480 	call	402e248 <__multiply>
 402b8f4:	1021883a 	mov	r16,r2
 402b8f8:	d8800a17 	ldw	r2,40(sp)
 402b8fc:	d9400917 	ldw	r5,36(sp)
 402b900:	e009883a 	mov	r4,fp
 402b904:	1545c83a 	sub	r2,r2,r21
 402b908:	d8800a15 	stw	r2,40(sp)
 402b90c:	402de600 	call	402de60 <_Bfree>
 402b910:	d8c00a17 	ldw	r3,40(sp)
 402b914:	18009f1e 	bne	r3,zero,402bb94 <_dtoa_r+0xcf0>
 402b918:	05c00044 	movi	r23,1
 402b91c:	e009883a 	mov	r4,fp
 402b920:	b80b883a 	mov	r5,r23
 402b924:	402e2000 	call	402e200 <__i2b>
 402b928:	d9000d17 	ldw	r4,52(sp)
 402b92c:	102b883a 	mov	r21,r2
 402b930:	2000ce26 	beq	r4,zero,402bc6c <_dtoa_r+0xdc8>
 402b934:	200d883a 	mov	r6,r4
 402b938:	100b883a 	mov	r5,r2
 402b93c:	e009883a 	mov	r4,fp
 402b940:	402e44c0 	call	402e44c <__pow5mult>
 402b944:	d9800317 	ldw	r6,12(sp)
 402b948:	102b883a 	mov	r21,r2
 402b94c:	b981810e 	bge	r23,r6,402bf54 <_dtoa_r+0x10b0>
 402b950:	0027883a 	mov	r19,zero
 402b954:	a8800417 	ldw	r2,16(r21)
 402b958:	05c00804 	movi	r23,32
 402b95c:	10800104 	addi	r2,r2,4
 402b960:	1085883a 	add	r2,r2,r2
 402b964:	1085883a 	add	r2,r2,r2
 402b968:	a885883a 	add	r2,r21,r2
 402b96c:	11000017 	ldw	r4,0(r2)
 402b970:	402e0d00 	call	402e0d0 <__hi0bits>
 402b974:	b885c83a 	sub	r2,r23,r2
 402b978:	1585883a 	add	r2,r2,r22
 402b97c:	108007cc 	andi	r2,r2,31
 402b980:	1000b326 	beq	r2,zero,402bc50 <_dtoa_r+0xdac>
 402b984:	00c00804 	movi	r3,32
 402b988:	1887c83a 	sub	r3,r3,r2
 402b98c:	01000104 	movi	r4,4
 402b990:	20c2cd0e 	bge	r4,r3,402c4c8 <_dtoa_r+0x1624>
 402b994:	00c00704 	movi	r3,28
 402b998:	1885c83a 	sub	r2,r3,r2
 402b99c:	d8c00817 	ldw	r3,32(sp)
 402b9a0:	a0a9883a 	add	r20,r20,r2
 402b9a4:	b0ad883a 	add	r22,r22,r2
 402b9a8:	1887883a 	add	r3,r3,r2
 402b9ac:	d8c00815 	stw	r3,32(sp)
 402b9b0:	d9800817 	ldw	r6,32(sp)
 402b9b4:	0180040e 	bge	zero,r6,402b9c8 <_dtoa_r+0xb24>
 402b9b8:	800b883a 	mov	r5,r16
 402b9bc:	e009883a 	mov	r4,fp
 402b9c0:	402e5980 	call	402e598 <__lshift>
 402b9c4:	1021883a 	mov	r16,r2
 402b9c8:	0580050e 	bge	zero,r22,402b9e0 <_dtoa_r+0xb3c>
 402b9cc:	a80b883a 	mov	r5,r21
 402b9d0:	b00d883a 	mov	r6,r22
 402b9d4:	e009883a 	mov	r4,fp
 402b9d8:	402e5980 	call	402e598 <__lshift>
 402b9dc:	102b883a 	mov	r21,r2
 402b9e0:	d9c00e17 	ldw	r7,56(sp)
 402b9e4:	3801211e 	bne	r7,zero,402be6c <_dtoa_r+0xfc8>
 402b9e8:	d9800617 	ldw	r6,24(sp)
 402b9ec:	0181380e 	bge	zero,r6,402bed0 <_dtoa_r+0x102c>
 402b9f0:	d8c00b17 	ldw	r3,44(sp)
 402b9f4:	1800ab1e 	bne	r3,zero,402bca4 <_dtoa_r+0xe00>
 402b9f8:	dc800717 	ldw	r18,28(sp)
 402b9fc:	dcc00617 	ldw	r19,24(sp)
 402ba00:	9029883a 	mov	r20,r18
 402ba04:	00000206 	br	402ba10 <_dtoa_r+0xb6c>
 402ba08:	402de940 	call	402de94 <__multadd>
 402ba0c:	1021883a 	mov	r16,r2
 402ba10:	a80b883a 	mov	r5,r21
 402ba14:	8009883a 	mov	r4,r16
 402ba18:	402ac980 	call	402ac98 <quorem>
 402ba1c:	10800c04 	addi	r2,r2,48
 402ba20:	90800005 	stb	r2,0(r18)
 402ba24:	94800044 	addi	r18,r18,1
 402ba28:	9507c83a 	sub	r3,r18,r20
 402ba2c:	000f883a 	mov	r7,zero
 402ba30:	01800284 	movi	r6,10
 402ba34:	800b883a 	mov	r5,r16
 402ba38:	e009883a 	mov	r4,fp
 402ba3c:	1cfff216 	blt	r3,r19,402ba08 <__flash_rwdata_start+0xffff54b0>
 402ba40:	1011883a 	mov	r8,r2
 402ba44:	d8800617 	ldw	r2,24(sp)
 402ba48:	0082370e 	bge	zero,r2,402c328 <_dtoa_r+0x1484>
 402ba4c:	d9000717 	ldw	r4,28(sp)
 402ba50:	0025883a 	mov	r18,zero
 402ba54:	20af883a 	add	r23,r4,r2
 402ba58:	01800044 	movi	r6,1
 402ba5c:	800b883a 	mov	r5,r16
 402ba60:	e009883a 	mov	r4,fp
 402ba64:	da001715 	stw	r8,92(sp)
 402ba68:	402e5980 	call	402e598 <__lshift>
 402ba6c:	a80b883a 	mov	r5,r21
 402ba70:	1009883a 	mov	r4,r2
 402ba74:	d8800915 	stw	r2,36(sp)
 402ba78:	402e6ec0 	call	402e6ec <__mcmp>
 402ba7c:	da001717 	ldw	r8,92(sp)
 402ba80:	0081800e 	bge	zero,r2,402c084 <_dtoa_r+0x11e0>
 402ba84:	b93fffc3 	ldbu	r4,-1(r23)
 402ba88:	b8bfffc4 	addi	r2,r23,-1
 402ba8c:	1007883a 	mov	r3,r2
 402ba90:	01800e44 	movi	r6,57
 402ba94:	d9c00717 	ldw	r7,28(sp)
 402ba98:	00000506 	br	402bab0 <_dtoa_r+0xc0c>
 402ba9c:	18ffffc4 	addi	r3,r3,-1
 402baa0:	11c12326 	beq	r2,r7,402bf30 <_dtoa_r+0x108c>
 402baa4:	19000003 	ldbu	r4,0(r3)
 402baa8:	102f883a 	mov	r23,r2
 402baac:	10bfffc4 	addi	r2,r2,-1
 402bab0:	21403fcc 	andi	r5,r4,255
 402bab4:	2940201c 	xori	r5,r5,128
 402bab8:	297fe004 	addi	r5,r5,-128
 402babc:	29bff726 	beq	r5,r6,402ba9c <__flash_rwdata_start+0xffff5544>
 402bac0:	21000044 	addi	r4,r4,1
 402bac4:	11000005 	stb	r4,0(r2)
 402bac8:	a80b883a 	mov	r5,r21
 402bacc:	e009883a 	mov	r4,fp
 402bad0:	402de600 	call	402de60 <_Bfree>
 402bad4:	883ea026 	beq	r17,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402bad8:	90000426 	beq	r18,zero,402baec <_dtoa_r+0xc48>
 402badc:	94400326 	beq	r18,r17,402baec <_dtoa_r+0xc48>
 402bae0:	900b883a 	mov	r5,r18
 402bae4:	e009883a 	mov	r4,fp
 402bae8:	402de600 	call	402de60 <_Bfree>
 402baec:	880b883a 	mov	r5,r17
 402baf0:	e009883a 	mov	r4,fp
 402baf4:	402de600 	call	402de60 <_Bfree>
 402baf8:	003e9706 	br	402b558 <__flash_rwdata_start+0xffff5000>
 402bafc:	01800044 	movi	r6,1
 402bb00:	d9800e15 	stw	r6,56(sp)
 402bb04:	003d9606 	br	402b160 <__flash_rwdata_start+0xffff4c08>
 402bb08:	d8800817 	ldw	r2,32(sp)
 402bb0c:	d8c00517 	ldw	r3,20(sp)
 402bb10:	d8000d15 	stw	zero,52(sp)
 402bb14:	10c5c83a 	sub	r2,r2,r3
 402bb18:	00c9c83a 	sub	r4,zero,r3
 402bb1c:	d8800815 	stw	r2,32(sp)
 402bb20:	d9000a15 	stw	r4,40(sp)
 402bb24:	003d9706 	br	402b184 <__flash_rwdata_start+0xffff4c2c>
 402bb28:	05adc83a 	sub	r22,zero,r22
 402bb2c:	dd800815 	stw	r22,32(sp)
 402bb30:	002d883a 	mov	r22,zero
 402bb34:	003d8e06 	br	402b170 <__flash_rwdata_start+0xffff4c18>
 402bb38:	d9000517 	ldw	r4,20(sp)
 402bb3c:	4026cac0 	call	4026cac <__floatsidf>
 402bb40:	100d883a 	mov	r6,r2
 402bb44:	180f883a 	mov	r7,r3
 402bb48:	a009883a 	mov	r4,r20
 402bb4c:	880b883a 	mov	r5,r17
 402bb50:	4032be80 	call	4032be8 <__eqdf2>
 402bb54:	103d7126 	beq	r2,zero,402b11c <__flash_rwdata_start+0xffff4bc4>
 402bb58:	d9c00517 	ldw	r7,20(sp)
 402bb5c:	39ffffc4 	addi	r7,r7,-1
 402bb60:	d9c00515 	stw	r7,20(sp)
 402bb64:	003d6d06 	br	402b11c <__flash_rwdata_start+0xffff4bc4>
 402bb68:	dd400a17 	ldw	r21,40(sp)
 402bb6c:	dd000817 	ldw	r20,32(sp)
 402bb70:	0023883a 	mov	r17,zero
 402bb74:	003f4806 	br	402b898 <__flash_rwdata_start+0xffff5340>
 402bb78:	10e3c83a 	sub	r17,r2,r3
 402bb7c:	9448983a 	sll	r4,r18,r17
 402bb80:	003d3206 	br	402b04c <__flash_rwdata_start+0xffff4af4>
 402bb84:	d8000e15 	stw	zero,56(sp)
 402bb88:	003d7506 	br	402b160 <__flash_rwdata_start+0xffff4c08>
 402bb8c:	b005883a 	mov	r2,r22
 402bb90:	003f4506 	br	402b8a8 <__flash_rwdata_start+0xffff5350>
 402bb94:	dc000915 	stw	r16,36(sp)
 402bb98:	d9800a17 	ldw	r6,40(sp)
 402bb9c:	d9400917 	ldw	r5,36(sp)
 402bba0:	e009883a 	mov	r4,fp
 402bba4:	402e44c0 	call	402e44c <__pow5mult>
 402bba8:	1021883a 	mov	r16,r2
 402bbac:	003f5a06 	br	402b918 <__flash_rwdata_start+0xffff53c0>
 402bbb0:	01c00044 	movi	r7,1
 402bbb4:	d9c00b15 	stw	r7,44(sp)
 402bbb8:	d8802217 	ldw	r2,136(sp)
 402bbbc:	0081280e 	bge	zero,r2,402c060 <_dtoa_r+0x11bc>
 402bbc0:	100d883a 	mov	r6,r2
 402bbc4:	1021883a 	mov	r16,r2
 402bbc8:	d8800c15 	stw	r2,48(sp)
 402bbcc:	d8800615 	stw	r2,24(sp)
 402bbd0:	003d8806 	br	402b1f4 <__flash_rwdata_start+0xffff4c9c>
 402bbd4:	d8800617 	ldw	r2,24(sp)
 402bbd8:	00be9b16 	blt	zero,r2,402b648 <__flash_rwdata_start+0xffff50f0>
 402bbdc:	10010f1e 	bne	r2,zero,402c01c <_dtoa_r+0x1178>
 402bbe0:	880b883a 	mov	r5,r17
 402bbe4:	000d883a 	mov	r6,zero
 402bbe8:	01d00534 	movhi	r7,16404
 402bbec:	8009883a 	mov	r4,r16
 402bbf0:	4032e540 	call	4032e54 <__muldf3>
 402bbf4:	900d883a 	mov	r6,r18
 402bbf8:	980f883a 	mov	r7,r19
 402bbfc:	1009883a 	mov	r4,r2
 402bc00:	180b883a 	mov	r5,r3
 402bc04:	4032c780 	call	4032c78 <__gedf2>
 402bc08:	002b883a 	mov	r21,zero
 402bc0c:	0023883a 	mov	r17,zero
 402bc10:	1000bf16 	blt	r2,zero,402bf10 <_dtoa_r+0x106c>
 402bc14:	d9802217 	ldw	r6,136(sp)
 402bc18:	ddc00717 	ldw	r23,28(sp)
 402bc1c:	018c303a 	nor	r6,zero,r6
 402bc20:	d9800515 	stw	r6,20(sp)
 402bc24:	a80b883a 	mov	r5,r21
 402bc28:	e009883a 	mov	r4,fp
 402bc2c:	402de600 	call	402de60 <_Bfree>
 402bc30:	883e4926 	beq	r17,zero,402b558 <__flash_rwdata_start+0xffff5000>
 402bc34:	003fad06 	br	402baec <__flash_rwdata_start+0xffff5594>
 402bc38:	d9c01117 	ldw	r7,68(sp)
 402bc3c:	3801bc26 	beq	r7,zero,402c330 <_dtoa_r+0x148c>
 402bc40:	10810cc4 	addi	r2,r2,1075
 402bc44:	dd400a17 	ldw	r21,40(sp)
 402bc48:	dd000817 	ldw	r20,32(sp)
 402bc4c:	003f0a06 	br	402b878 <__flash_rwdata_start+0xffff5320>
 402bc50:	00800704 	movi	r2,28
 402bc54:	d9000817 	ldw	r4,32(sp)
 402bc58:	a0a9883a 	add	r20,r20,r2
 402bc5c:	b0ad883a 	add	r22,r22,r2
 402bc60:	2089883a 	add	r4,r4,r2
 402bc64:	d9000815 	stw	r4,32(sp)
 402bc68:	003f5106 	br	402b9b0 <__flash_rwdata_start+0xffff5458>
 402bc6c:	d8c00317 	ldw	r3,12(sp)
 402bc70:	b8c1fc0e 	bge	r23,r3,402c464 <_dtoa_r+0x15c0>
 402bc74:	0027883a 	mov	r19,zero
 402bc78:	b805883a 	mov	r2,r23
 402bc7c:	003f3e06 	br	402b978 <__flash_rwdata_start+0xffff5420>
 402bc80:	880b883a 	mov	r5,r17
 402bc84:	e009883a 	mov	r4,fp
 402bc88:	000f883a 	mov	r7,zero
 402bc8c:	01800284 	movi	r6,10
 402bc90:	402de940 	call	402de94 <__multadd>
 402bc94:	d9000c17 	ldw	r4,48(sp)
 402bc98:	1023883a 	mov	r17,r2
 402bc9c:	0102040e 	bge	zero,r4,402c4b0 <_dtoa_r+0x160c>
 402bca0:	d9000615 	stw	r4,24(sp)
 402bca4:	0500050e 	bge	zero,r20,402bcbc <_dtoa_r+0xe18>
 402bca8:	880b883a 	mov	r5,r17
 402bcac:	a00d883a 	mov	r6,r20
 402bcb0:	e009883a 	mov	r4,fp
 402bcb4:	402e5980 	call	402e598 <__lshift>
 402bcb8:	1023883a 	mov	r17,r2
 402bcbc:	9801241e 	bne	r19,zero,402c150 <_dtoa_r+0x12ac>
 402bcc0:	8829883a 	mov	r20,r17
 402bcc4:	d9000617 	ldw	r4,24(sp)
 402bcc8:	dcc00717 	ldw	r19,28(sp)
 402bccc:	9480004c 	andi	r18,r18,1
 402bcd0:	20bfffc4 	addi	r2,r4,-1
 402bcd4:	9885883a 	add	r2,r19,r2
 402bcd8:	d8800415 	stw	r2,16(sp)
 402bcdc:	dc800615 	stw	r18,24(sp)
 402bce0:	a80b883a 	mov	r5,r21
 402bce4:	8009883a 	mov	r4,r16
 402bce8:	402ac980 	call	402ac98 <quorem>
 402bcec:	880b883a 	mov	r5,r17
 402bcf0:	8009883a 	mov	r4,r16
 402bcf4:	102f883a 	mov	r23,r2
 402bcf8:	402e6ec0 	call	402e6ec <__mcmp>
 402bcfc:	a80b883a 	mov	r5,r21
 402bd00:	a00d883a 	mov	r6,r20
 402bd04:	e009883a 	mov	r4,fp
 402bd08:	102d883a 	mov	r22,r2
 402bd0c:	402e7580 	call	402e758 <__mdiff>
 402bd10:	1007883a 	mov	r3,r2
 402bd14:	10800317 	ldw	r2,12(r2)
 402bd18:	bc800c04 	addi	r18,r23,48
 402bd1c:	180b883a 	mov	r5,r3
 402bd20:	10004e1e 	bne	r2,zero,402be5c <_dtoa_r+0xfb8>
 402bd24:	8009883a 	mov	r4,r16
 402bd28:	d8c01615 	stw	r3,88(sp)
 402bd2c:	402e6ec0 	call	402e6ec <__mcmp>
 402bd30:	d8c01617 	ldw	r3,88(sp)
 402bd34:	e009883a 	mov	r4,fp
 402bd38:	d8801615 	stw	r2,88(sp)
 402bd3c:	180b883a 	mov	r5,r3
 402bd40:	402de600 	call	402de60 <_Bfree>
 402bd44:	d8801617 	ldw	r2,88(sp)
 402bd48:	1000041e 	bne	r2,zero,402bd5c <_dtoa_r+0xeb8>
 402bd4c:	d9800317 	ldw	r6,12(sp)
 402bd50:	3000021e 	bne	r6,zero,402bd5c <_dtoa_r+0xeb8>
 402bd54:	d8c00617 	ldw	r3,24(sp)
 402bd58:	18003726 	beq	r3,zero,402be38 <_dtoa_r+0xf94>
 402bd5c:	b0002016 	blt	r22,zero,402bde0 <_dtoa_r+0xf3c>
 402bd60:	b000041e 	bne	r22,zero,402bd74 <_dtoa_r+0xed0>
 402bd64:	d9000317 	ldw	r4,12(sp)
 402bd68:	2000021e 	bne	r4,zero,402bd74 <_dtoa_r+0xed0>
 402bd6c:	d8c00617 	ldw	r3,24(sp)
 402bd70:	18001b26 	beq	r3,zero,402bde0 <_dtoa_r+0xf3c>
 402bd74:	00810716 	blt	zero,r2,402c194 <_dtoa_r+0x12f0>
 402bd78:	d8c00417 	ldw	r3,16(sp)
 402bd7c:	9d800044 	addi	r22,r19,1
 402bd80:	9c800005 	stb	r18,0(r19)
 402bd84:	b02f883a 	mov	r23,r22
 402bd88:	98c10626 	beq	r19,r3,402c1a4 <_dtoa_r+0x1300>
 402bd8c:	800b883a 	mov	r5,r16
 402bd90:	000f883a 	mov	r7,zero
 402bd94:	01800284 	movi	r6,10
 402bd98:	e009883a 	mov	r4,fp
 402bd9c:	402de940 	call	402de94 <__multadd>
 402bda0:	1021883a 	mov	r16,r2
 402bda4:	000f883a 	mov	r7,zero
 402bda8:	01800284 	movi	r6,10
 402bdac:	880b883a 	mov	r5,r17
 402bdb0:	e009883a 	mov	r4,fp
 402bdb4:	8d002526 	beq	r17,r20,402be4c <_dtoa_r+0xfa8>
 402bdb8:	402de940 	call	402de94 <__multadd>
 402bdbc:	a00b883a 	mov	r5,r20
 402bdc0:	000f883a 	mov	r7,zero
 402bdc4:	01800284 	movi	r6,10
 402bdc8:	e009883a 	mov	r4,fp
 402bdcc:	1023883a 	mov	r17,r2
 402bdd0:	402de940 	call	402de94 <__multadd>
 402bdd4:	1029883a 	mov	r20,r2
 402bdd8:	b027883a 	mov	r19,r22
 402bddc:	003fc006 	br	402bce0 <__flash_rwdata_start+0xffff5788>
 402bde0:	9011883a 	mov	r8,r18
 402bde4:	00800e0e 	bge	zero,r2,402be20 <_dtoa_r+0xf7c>
 402bde8:	800b883a 	mov	r5,r16
 402bdec:	01800044 	movi	r6,1
 402bdf0:	e009883a 	mov	r4,fp
 402bdf4:	da001715 	stw	r8,92(sp)
 402bdf8:	402e5980 	call	402e598 <__lshift>
 402bdfc:	a80b883a 	mov	r5,r21
 402be00:	1009883a 	mov	r4,r2
 402be04:	1021883a 	mov	r16,r2
 402be08:	402e6ec0 	call	402e6ec <__mcmp>
 402be0c:	da001717 	ldw	r8,92(sp)
 402be10:	0081960e 	bge	zero,r2,402c46c <_dtoa_r+0x15c8>
 402be14:	00800e44 	movi	r2,57
 402be18:	40817026 	beq	r8,r2,402c3dc <_dtoa_r+0x1538>
 402be1c:	ba000c44 	addi	r8,r23,49
 402be20:	8825883a 	mov	r18,r17
 402be24:	9dc00044 	addi	r23,r19,1
 402be28:	9a000005 	stb	r8,0(r19)
 402be2c:	a023883a 	mov	r17,r20
 402be30:	dc000915 	stw	r16,36(sp)
 402be34:	003f2406 	br	402bac8 <__flash_rwdata_start+0xffff5570>
 402be38:	00800e44 	movi	r2,57
 402be3c:	9011883a 	mov	r8,r18
 402be40:	90816626 	beq	r18,r2,402c3dc <_dtoa_r+0x1538>
 402be44:	05bff516 	blt	zero,r22,402be1c <__flash_rwdata_start+0xffff58c4>
 402be48:	003ff506 	br	402be20 <__flash_rwdata_start+0xffff58c8>
 402be4c:	402de940 	call	402de94 <__multadd>
 402be50:	1023883a 	mov	r17,r2
 402be54:	1029883a 	mov	r20,r2
 402be58:	003fdf06 	br	402bdd8 <__flash_rwdata_start+0xffff5880>
 402be5c:	e009883a 	mov	r4,fp
 402be60:	402de600 	call	402de60 <_Bfree>
 402be64:	00800044 	movi	r2,1
 402be68:	003fbc06 	br	402bd5c <__flash_rwdata_start+0xffff5804>
 402be6c:	a80b883a 	mov	r5,r21
 402be70:	8009883a 	mov	r4,r16
 402be74:	402e6ec0 	call	402e6ec <__mcmp>
 402be78:	103edb0e 	bge	r2,zero,402b9e8 <__flash_rwdata_start+0xffff5490>
 402be7c:	800b883a 	mov	r5,r16
 402be80:	000f883a 	mov	r7,zero
 402be84:	01800284 	movi	r6,10
 402be88:	e009883a 	mov	r4,fp
 402be8c:	402de940 	call	402de94 <__multadd>
 402be90:	1021883a 	mov	r16,r2
 402be94:	d8800517 	ldw	r2,20(sp)
 402be98:	d8c00b17 	ldw	r3,44(sp)
 402be9c:	10bfffc4 	addi	r2,r2,-1
 402bea0:	d8800515 	stw	r2,20(sp)
 402bea4:	183f761e 	bne	r3,zero,402bc80 <__flash_rwdata_start+0xffff5728>
 402bea8:	d9000c17 	ldw	r4,48(sp)
 402beac:	0101730e 	bge	zero,r4,402c47c <_dtoa_r+0x15d8>
 402beb0:	d9000615 	stw	r4,24(sp)
 402beb4:	003ed006 	br	402b9f8 <__flash_rwdata_start+0xffff54a0>
 402beb8:	00800084 	movi	r2,2
 402bebc:	3081861e 	bne	r6,r2,402c4d8 <_dtoa_r+0x1634>
 402bec0:	d8000b15 	stw	zero,44(sp)
 402bec4:	003f3c06 	br	402bbb8 <__flash_rwdata_start+0xffff5660>
 402bec8:	dc000917 	ldw	r16,36(sp)
 402becc:	003e9206 	br	402b918 <__flash_rwdata_start+0xffff53c0>
 402bed0:	d9c00317 	ldw	r7,12(sp)
 402bed4:	00800084 	movi	r2,2
 402bed8:	11fec50e 	bge	r2,r7,402b9f0 <__flash_rwdata_start+0xffff5498>
 402bedc:	d9000617 	ldw	r4,24(sp)
 402bee0:	20013c1e 	bne	r4,zero,402c3d4 <_dtoa_r+0x1530>
 402bee4:	a80b883a 	mov	r5,r21
 402bee8:	000f883a 	mov	r7,zero
 402beec:	01800144 	movi	r6,5
 402bef0:	e009883a 	mov	r4,fp
 402bef4:	402de940 	call	402de94 <__multadd>
 402bef8:	100b883a 	mov	r5,r2
 402befc:	8009883a 	mov	r4,r16
 402bf00:	102b883a 	mov	r21,r2
 402bf04:	402e6ec0 	call	402e6ec <__mcmp>
 402bf08:	dc000915 	stw	r16,36(sp)
 402bf0c:	00bf410e 	bge	zero,r2,402bc14 <__flash_rwdata_start+0xffff56bc>
 402bf10:	d9c00717 	ldw	r7,28(sp)
 402bf14:	00800c44 	movi	r2,49
 402bf18:	38800005 	stb	r2,0(r7)
 402bf1c:	d8800517 	ldw	r2,20(sp)
 402bf20:	3dc00044 	addi	r23,r7,1
 402bf24:	10800044 	addi	r2,r2,1
 402bf28:	d8800515 	stw	r2,20(sp)
 402bf2c:	003f3d06 	br	402bc24 <__flash_rwdata_start+0xffff56cc>
 402bf30:	d9800517 	ldw	r6,20(sp)
 402bf34:	d9c00717 	ldw	r7,28(sp)
 402bf38:	00800c44 	movi	r2,49
 402bf3c:	31800044 	addi	r6,r6,1
 402bf40:	d9800515 	stw	r6,20(sp)
 402bf44:	38800005 	stb	r2,0(r7)
 402bf48:	003edf06 	br	402bac8 <__flash_rwdata_start+0xffff5570>
 402bf4c:	d8000b15 	stw	zero,44(sp)
 402bf50:	003c9f06 	br	402b1d0 <__flash_rwdata_start+0xffff4c78>
 402bf54:	903e7e1e 	bne	r18,zero,402b950 <__flash_rwdata_start+0xffff53f8>
 402bf58:	00800434 	movhi	r2,16
 402bf5c:	10bfffc4 	addi	r2,r2,-1
 402bf60:	9884703a 	and	r2,r19,r2
 402bf64:	1000ea1e 	bne	r2,zero,402c310 <_dtoa_r+0x146c>
 402bf68:	9cdffc2c 	andhi	r19,r19,32752
 402bf6c:	9800e826 	beq	r19,zero,402c310 <_dtoa_r+0x146c>
 402bf70:	d9c00817 	ldw	r7,32(sp)
 402bf74:	b5800044 	addi	r22,r22,1
 402bf78:	04c00044 	movi	r19,1
 402bf7c:	39c00044 	addi	r7,r7,1
 402bf80:	d9c00815 	stw	r7,32(sp)
 402bf84:	d8800d17 	ldw	r2,52(sp)
 402bf88:	103e721e 	bne	r2,zero,402b954 <__flash_rwdata_start+0xffff53fc>
 402bf8c:	00800044 	movi	r2,1
 402bf90:	003e7906 	br	402b978 <__flash_rwdata_start+0xffff5420>
 402bf94:	8009883a 	mov	r4,r16
 402bf98:	4026cac0 	call	4026cac <__floatsidf>
 402bf9c:	d9800f17 	ldw	r6,60(sp)
 402bfa0:	d9c01017 	ldw	r7,64(sp)
 402bfa4:	1009883a 	mov	r4,r2
 402bfa8:	180b883a 	mov	r5,r3
 402bfac:	4032e540 	call	4032e54 <__muldf3>
 402bfb0:	000d883a 	mov	r6,zero
 402bfb4:	01d00734 	movhi	r7,16412
 402bfb8:	1009883a 	mov	r4,r2
 402bfbc:	180b883a 	mov	r5,r3
 402bfc0:	40323300 	call	4032330 <__adddf3>
 402bfc4:	047f3034 	movhi	r17,64704
 402bfc8:	1021883a 	mov	r16,r2
 402bfcc:	1c63883a 	add	r17,r3,r17
 402bfd0:	d9000f17 	ldw	r4,60(sp)
 402bfd4:	d9401017 	ldw	r5,64(sp)
 402bfd8:	000d883a 	mov	r6,zero
 402bfdc:	01d00534 	movhi	r7,16404
 402bfe0:	40335780 	call	4033578 <__subdf3>
 402bfe4:	800d883a 	mov	r6,r16
 402bfe8:	880f883a 	mov	r7,r17
 402bfec:	1009883a 	mov	r4,r2
 402bff0:	180b883a 	mov	r5,r3
 402bff4:	102b883a 	mov	r21,r2
 402bff8:	1829883a 	mov	r20,r3
 402bffc:	4032c780 	call	4032c78 <__gedf2>
 402c000:	00806c16 	blt	zero,r2,402c1b4 <_dtoa_r+0x1310>
 402c004:	89e0003c 	xorhi	r7,r17,32768
 402c008:	800d883a 	mov	r6,r16
 402c00c:	a809883a 	mov	r4,r21
 402c010:	a00b883a 	mov	r5,r20
 402c014:	4032d5c0 	call	4032d5c <__ledf2>
 402c018:	103d7e0e 	bge	r2,zero,402b614 <__flash_rwdata_start+0xffff50bc>
 402c01c:	002b883a 	mov	r21,zero
 402c020:	0023883a 	mov	r17,zero
 402c024:	003efb06 	br	402bc14 <__flash_rwdata_start+0xffff56bc>
 402c028:	d8800717 	ldw	r2,28(sp)
 402c02c:	003bd006 	br	402af70 <__flash_rwdata_start+0xffff4a18>
 402c030:	d9000a17 	ldw	r4,40(sp)
 402c034:	d9800d17 	ldw	r6,52(sp)
 402c038:	dd400a15 	stw	r21,40(sp)
 402c03c:	a905c83a 	sub	r2,r21,r4
 402c040:	308d883a 	add	r6,r6,r2
 402c044:	d9800d15 	stw	r6,52(sp)
 402c048:	002b883a 	mov	r21,zero
 402c04c:	003e0606 	br	402b868 <__flash_rwdata_start+0xffff5310>
 402c050:	9023883a 	mov	r17,r18
 402c054:	9829883a 	mov	r20,r19
 402c058:	04000084 	movi	r16,2
 402c05c:	003c9206 	br	402b2a8 <__flash_rwdata_start+0xffff4d50>
 402c060:	04000044 	movi	r16,1
 402c064:	dc000c15 	stw	r16,48(sp)
 402c068:	dc000615 	stw	r16,24(sp)
 402c06c:	dc002215 	stw	r16,136(sp)
 402c070:	e0001115 	stw	zero,68(fp)
 402c074:	000b883a 	mov	r5,zero
 402c078:	003c6906 	br	402b220 <__flash_rwdata_start+0xffff4cc8>
 402c07c:	3021883a 	mov	r16,r6
 402c080:	003ffb06 	br	402c070 <__flash_rwdata_start+0xffff5b18>
 402c084:	1000021e 	bne	r2,zero,402c090 <_dtoa_r+0x11ec>
 402c088:	4200004c 	andi	r8,r8,1
 402c08c:	403e7d1e 	bne	r8,zero,402ba84 <__flash_rwdata_start+0xffff552c>
 402c090:	01000c04 	movi	r4,48
 402c094:	00000106 	br	402c09c <_dtoa_r+0x11f8>
 402c098:	102f883a 	mov	r23,r2
 402c09c:	b8bfffc4 	addi	r2,r23,-1
 402c0a0:	10c00007 	ldb	r3,0(r2)
 402c0a4:	193ffc26 	beq	r3,r4,402c098 <__flash_rwdata_start+0xffff5b40>
 402c0a8:	003e8706 	br	402bac8 <__flash_rwdata_start+0xffff5570>
 402c0ac:	d8800517 	ldw	r2,20(sp)
 402c0b0:	00a3c83a 	sub	r17,zero,r2
 402c0b4:	8800a426 	beq	r17,zero,402c348 <_dtoa_r+0x14a4>
 402c0b8:	888003cc 	andi	r2,r17,15
 402c0bc:	100490fa 	slli	r2,r2,3
 402c0c0:	00c00034 	movhi	r3,0
 402c0c4:	18c16104 	addi	r3,r3,1412
 402c0c8:	1885883a 	add	r2,r3,r2
 402c0cc:	11800017 	ldw	r6,0(r2)
 402c0d0:	11c00117 	ldw	r7,4(r2)
 402c0d4:	9009883a 	mov	r4,r18
 402c0d8:	980b883a 	mov	r5,r19
 402c0dc:	8823d13a 	srai	r17,r17,4
 402c0e0:	4032e540 	call	4032e54 <__muldf3>
 402c0e4:	d8800f15 	stw	r2,60(sp)
 402c0e8:	d8c01015 	stw	r3,64(sp)
 402c0ec:	8800e826 	beq	r17,zero,402c490 <_dtoa_r+0x15ec>
 402c0f0:	05000034 	movhi	r20,0
 402c0f4:	a5015704 	addi	r20,r20,1372
 402c0f8:	04000084 	movi	r16,2
 402c0fc:	8980004c 	andi	r6,r17,1
 402c100:	1009883a 	mov	r4,r2
 402c104:	8823d07a 	srai	r17,r17,1
 402c108:	180b883a 	mov	r5,r3
 402c10c:	30000426 	beq	r6,zero,402c120 <_dtoa_r+0x127c>
 402c110:	a1800017 	ldw	r6,0(r20)
 402c114:	a1c00117 	ldw	r7,4(r20)
 402c118:	84000044 	addi	r16,r16,1
 402c11c:	4032e540 	call	4032e54 <__muldf3>
 402c120:	a5000204 	addi	r20,r20,8
 402c124:	883ff51e 	bne	r17,zero,402c0fc <__flash_rwdata_start+0xffff5ba4>
 402c128:	d8800f15 	stw	r2,60(sp)
 402c12c:	d8c01015 	stw	r3,64(sp)
 402c130:	003c7606 	br	402b30c <__flash_rwdata_start+0xffff4db4>
 402c134:	00c00c04 	movi	r3,48
 402c138:	10c00005 	stb	r3,0(r2)
 402c13c:	d8c00517 	ldw	r3,20(sp)
 402c140:	bd3fffc3 	ldbu	r20,-1(r23)
 402c144:	18c00044 	addi	r3,r3,1
 402c148:	d8c00515 	stw	r3,20(sp)
 402c14c:	003db906 	br	402b834 <__flash_rwdata_start+0xffff52dc>
 402c150:	89400117 	ldw	r5,4(r17)
 402c154:	e009883a 	mov	r4,fp
 402c158:	402ddac0 	call	402ddac <_Balloc>
 402c15c:	89800417 	ldw	r6,16(r17)
 402c160:	89400304 	addi	r5,r17,12
 402c164:	11000304 	addi	r4,r2,12
 402c168:	31800084 	addi	r6,r6,2
 402c16c:	318d883a 	add	r6,r6,r6
 402c170:	318d883a 	add	r6,r6,r6
 402c174:	1027883a 	mov	r19,r2
 402c178:	402daf40 	call	402daf4 <memcpy>
 402c17c:	01800044 	movi	r6,1
 402c180:	980b883a 	mov	r5,r19
 402c184:	e009883a 	mov	r4,fp
 402c188:	402e5980 	call	402e598 <__lshift>
 402c18c:	1029883a 	mov	r20,r2
 402c190:	003ecc06 	br	402bcc4 <__flash_rwdata_start+0xffff576c>
 402c194:	00800e44 	movi	r2,57
 402c198:	90809026 	beq	r18,r2,402c3dc <_dtoa_r+0x1538>
 402c19c:	92000044 	addi	r8,r18,1
 402c1a0:	003f1f06 	br	402be20 <__flash_rwdata_start+0xffff58c8>
 402c1a4:	9011883a 	mov	r8,r18
 402c1a8:	8825883a 	mov	r18,r17
 402c1ac:	a023883a 	mov	r17,r20
 402c1b0:	003e2906 	br	402ba58 <__flash_rwdata_start+0xffff5500>
 402c1b4:	002b883a 	mov	r21,zero
 402c1b8:	0023883a 	mov	r17,zero
 402c1bc:	003f5406 	br	402bf10 <__flash_rwdata_start+0xffff59b8>
 402c1c0:	61bfffc4 	addi	r6,r12,-1
 402c1c4:	300490fa 	slli	r2,r6,3
 402c1c8:	00c00034 	movhi	r3,0
 402c1cc:	18c16104 	addi	r3,r3,1412
 402c1d0:	1885883a 	add	r2,r3,r2
 402c1d4:	11000017 	ldw	r4,0(r2)
 402c1d8:	11400117 	ldw	r5,4(r2)
 402c1dc:	d8800717 	ldw	r2,28(sp)
 402c1e0:	880f883a 	mov	r7,r17
 402c1e4:	d9801215 	stw	r6,72(sp)
 402c1e8:	800d883a 	mov	r6,r16
 402c1ec:	db001615 	stw	r12,88(sp)
 402c1f0:	15c00044 	addi	r23,r2,1
 402c1f4:	4032e540 	call	4032e54 <__muldf3>
 402c1f8:	d9401017 	ldw	r5,64(sp)
 402c1fc:	d9000f17 	ldw	r4,60(sp)
 402c200:	d8c01515 	stw	r3,84(sp)
 402c204:	d8801415 	stw	r2,80(sp)
 402c208:	4033e800 	call	4033e80 <__fixdfsi>
 402c20c:	1009883a 	mov	r4,r2
 402c210:	1021883a 	mov	r16,r2
 402c214:	4026cac0 	call	4026cac <__floatsidf>
 402c218:	d9000f17 	ldw	r4,60(sp)
 402c21c:	d9401017 	ldw	r5,64(sp)
 402c220:	100d883a 	mov	r6,r2
 402c224:	180f883a 	mov	r7,r3
 402c228:	40335780 	call	4033578 <__subdf3>
 402c22c:	1829883a 	mov	r20,r3
 402c230:	d8c00717 	ldw	r3,28(sp)
 402c234:	84000c04 	addi	r16,r16,48
 402c238:	1023883a 	mov	r17,r2
 402c23c:	1c000005 	stb	r16,0(r3)
 402c240:	db001617 	ldw	r12,88(sp)
 402c244:	00800044 	movi	r2,1
 402c248:	60802226 	beq	r12,r2,402c2d4 <_dtoa_r+0x1430>
 402c24c:	d9c00717 	ldw	r7,28(sp)
 402c250:	8805883a 	mov	r2,r17
 402c254:	b82b883a 	mov	r21,r23
 402c258:	3b19883a 	add	r12,r7,r12
 402c25c:	6023883a 	mov	r17,r12
 402c260:	a007883a 	mov	r3,r20
 402c264:	dc800f15 	stw	r18,60(sp)
 402c268:	000d883a 	mov	r6,zero
 402c26c:	01d00934 	movhi	r7,16420
 402c270:	1009883a 	mov	r4,r2
 402c274:	180b883a 	mov	r5,r3
 402c278:	4032e540 	call	4032e54 <__muldf3>
 402c27c:	180b883a 	mov	r5,r3
 402c280:	1009883a 	mov	r4,r2
 402c284:	1829883a 	mov	r20,r3
 402c288:	1025883a 	mov	r18,r2
 402c28c:	4033e800 	call	4033e80 <__fixdfsi>
 402c290:	1009883a 	mov	r4,r2
 402c294:	1021883a 	mov	r16,r2
 402c298:	4026cac0 	call	4026cac <__floatsidf>
 402c29c:	100d883a 	mov	r6,r2
 402c2a0:	180f883a 	mov	r7,r3
 402c2a4:	9009883a 	mov	r4,r18
 402c2a8:	a00b883a 	mov	r5,r20
 402c2ac:	84000c04 	addi	r16,r16,48
 402c2b0:	40335780 	call	4033578 <__subdf3>
 402c2b4:	ad400044 	addi	r21,r21,1
 402c2b8:	ac3fffc5 	stb	r16,-1(r21)
 402c2bc:	ac7fea1e 	bne	r21,r17,402c268 <__flash_rwdata_start+0xffff5d10>
 402c2c0:	1023883a 	mov	r17,r2
 402c2c4:	d8801217 	ldw	r2,72(sp)
 402c2c8:	dc800f17 	ldw	r18,60(sp)
 402c2cc:	1829883a 	mov	r20,r3
 402c2d0:	b8af883a 	add	r23,r23,r2
 402c2d4:	d9001417 	ldw	r4,80(sp)
 402c2d8:	d9401517 	ldw	r5,84(sp)
 402c2dc:	000d883a 	mov	r6,zero
 402c2e0:	01cff834 	movhi	r7,16352
 402c2e4:	40323300 	call	4032330 <__adddf3>
 402c2e8:	880d883a 	mov	r6,r17
 402c2ec:	a00f883a 	mov	r7,r20
 402c2f0:	1009883a 	mov	r4,r2
 402c2f4:	180b883a 	mov	r5,r3
 402c2f8:	4032d5c0 	call	4032d5c <__ledf2>
 402c2fc:	10003e0e 	bge	r2,zero,402c3f8 <_dtoa_r+0x1554>
 402c300:	d9001317 	ldw	r4,76(sp)
 402c304:	bd3fffc3 	ldbu	r20,-1(r23)
 402c308:	d9000515 	stw	r4,20(sp)
 402c30c:	003d3b06 	br	402b7fc <__flash_rwdata_start+0xffff52a4>
 402c310:	0027883a 	mov	r19,zero
 402c314:	003f1b06 	br	402bf84 <__flash_rwdata_start+0xffff5a2c>
 402c318:	d8800817 	ldw	r2,32(sp)
 402c31c:	11e9c83a 	sub	r20,r2,r7
 402c320:	0005883a 	mov	r2,zero
 402c324:	003d5406 	br	402b878 <__flash_rwdata_start+0xffff5320>
 402c328:	00800044 	movi	r2,1
 402c32c:	003dc706 	br	402ba4c <__flash_rwdata_start+0xffff54f4>
 402c330:	d8c00217 	ldw	r3,8(sp)
 402c334:	00800d84 	movi	r2,54
 402c338:	dd400a17 	ldw	r21,40(sp)
 402c33c:	10c5c83a 	sub	r2,r2,r3
 402c340:	dd000817 	ldw	r20,32(sp)
 402c344:	003d4c06 	br	402b878 <__flash_rwdata_start+0xffff5320>
 402c348:	dc800f15 	stw	r18,60(sp)
 402c34c:	dcc01015 	stw	r19,64(sp)
 402c350:	04000084 	movi	r16,2
 402c354:	003bed06 	br	402b30c <__flash_rwdata_start+0xffff4db4>
 402c358:	d9000617 	ldw	r4,24(sp)
 402c35c:	203f0d26 	beq	r4,zero,402bf94 <__flash_rwdata_start+0xffff5a3c>
 402c360:	d9800c17 	ldw	r6,48(sp)
 402c364:	01bcab0e 	bge	zero,r6,402b614 <__flash_rwdata_start+0xffff50bc>
 402c368:	d9401017 	ldw	r5,64(sp)
 402c36c:	d9000f17 	ldw	r4,60(sp)
 402c370:	000d883a 	mov	r6,zero
 402c374:	01d00934 	movhi	r7,16420
 402c378:	4032e540 	call	4032e54 <__muldf3>
 402c37c:	81000044 	addi	r4,r16,1
 402c380:	d8800f15 	stw	r2,60(sp)
 402c384:	d8c01015 	stw	r3,64(sp)
 402c388:	4026cac0 	call	4026cac <__floatsidf>
 402c38c:	d9800f17 	ldw	r6,60(sp)
 402c390:	d9c01017 	ldw	r7,64(sp)
 402c394:	1009883a 	mov	r4,r2
 402c398:	180b883a 	mov	r5,r3
 402c39c:	4032e540 	call	4032e54 <__muldf3>
 402c3a0:	01d00734 	movhi	r7,16412
 402c3a4:	000d883a 	mov	r6,zero
 402c3a8:	1009883a 	mov	r4,r2
 402c3ac:	180b883a 	mov	r5,r3
 402c3b0:	40323300 	call	4032330 <__adddf3>
 402c3b4:	d9c00517 	ldw	r7,20(sp)
 402c3b8:	047f3034 	movhi	r17,64704
 402c3bc:	1021883a 	mov	r16,r2
 402c3c0:	39ffffc4 	addi	r7,r7,-1
 402c3c4:	d9c01315 	stw	r7,76(sp)
 402c3c8:	1c63883a 	add	r17,r3,r17
 402c3cc:	db000c17 	ldw	r12,48(sp)
 402c3d0:	003bea06 	br	402b37c <__flash_rwdata_start+0xffff4e24>
 402c3d4:	dc000915 	stw	r16,36(sp)
 402c3d8:	003e0e06 	br	402bc14 <__flash_rwdata_start+0xffff56bc>
 402c3dc:	01000e44 	movi	r4,57
 402c3e0:	8825883a 	mov	r18,r17
 402c3e4:	9dc00044 	addi	r23,r19,1
 402c3e8:	99000005 	stb	r4,0(r19)
 402c3ec:	a023883a 	mov	r17,r20
 402c3f0:	dc000915 	stw	r16,36(sp)
 402c3f4:	003da406 	br	402ba88 <__flash_rwdata_start+0xffff5530>
 402c3f8:	d9801417 	ldw	r6,80(sp)
 402c3fc:	d9c01517 	ldw	r7,84(sp)
 402c400:	0009883a 	mov	r4,zero
 402c404:	014ff834 	movhi	r5,16352
 402c408:	40335780 	call	4033578 <__subdf3>
 402c40c:	880d883a 	mov	r6,r17
 402c410:	a00f883a 	mov	r7,r20
 402c414:	1009883a 	mov	r4,r2
 402c418:	180b883a 	mov	r5,r3
 402c41c:	4032c780 	call	4032c78 <__gedf2>
 402c420:	00bc7c0e 	bge	zero,r2,402b614 <__flash_rwdata_start+0xffff50bc>
 402c424:	01000c04 	movi	r4,48
 402c428:	00000106 	br	402c430 <_dtoa_r+0x158c>
 402c42c:	102f883a 	mov	r23,r2
 402c430:	b8bfffc4 	addi	r2,r23,-1
 402c434:	10c00007 	ldb	r3,0(r2)
 402c438:	193ffc26 	beq	r3,r4,402c42c <__flash_rwdata_start+0xffff5ed4>
 402c43c:	d9801317 	ldw	r6,76(sp)
 402c440:	d9800515 	stw	r6,20(sp)
 402c444:	003c4406 	br	402b558 <__flash_rwdata_start+0xffff5000>
 402c448:	d9801317 	ldw	r6,76(sp)
 402c44c:	d9800515 	stw	r6,20(sp)
 402c450:	003cea06 	br	402b7fc <__flash_rwdata_start+0xffff52a4>
 402c454:	dd800f17 	ldw	r22,60(sp)
 402c458:	dcc01017 	ldw	r19,64(sp)
 402c45c:	dc801217 	ldw	r18,72(sp)
 402c460:	003c6c06 	br	402b614 <__flash_rwdata_start+0xffff50bc>
 402c464:	903e031e 	bne	r18,zero,402bc74 <__flash_rwdata_start+0xffff571c>
 402c468:	003ebb06 	br	402bf58 <__flash_rwdata_start+0xffff5a00>
 402c46c:	103e6c1e 	bne	r2,zero,402be20 <__flash_rwdata_start+0xffff58c8>
 402c470:	4080004c 	andi	r2,r8,1
 402c474:	103e6a26 	beq	r2,zero,402be20 <__flash_rwdata_start+0xffff58c8>
 402c478:	003e6606 	br	402be14 <__flash_rwdata_start+0xffff58bc>
 402c47c:	d8c00317 	ldw	r3,12(sp)
 402c480:	00800084 	movi	r2,2
 402c484:	10c02916 	blt	r2,r3,402c52c <_dtoa_r+0x1688>
 402c488:	d9000c17 	ldw	r4,48(sp)
 402c48c:	003e8806 	br	402beb0 <__flash_rwdata_start+0xffff5958>
 402c490:	04000084 	movi	r16,2
 402c494:	003b9d06 	br	402b30c <__flash_rwdata_start+0xffff4db4>
 402c498:	d9001317 	ldw	r4,76(sp)
 402c49c:	d9000515 	stw	r4,20(sp)
 402c4a0:	003cd606 	br	402b7fc <__flash_rwdata_start+0xffff52a4>
 402c4a4:	d8801317 	ldw	r2,76(sp)
 402c4a8:	d8800515 	stw	r2,20(sp)
 402c4ac:	003c2a06 	br	402b558 <__flash_rwdata_start+0xffff5000>
 402c4b0:	d9800317 	ldw	r6,12(sp)
 402c4b4:	00800084 	movi	r2,2
 402c4b8:	11801516 	blt	r2,r6,402c510 <_dtoa_r+0x166c>
 402c4bc:	d9c00c17 	ldw	r7,48(sp)
 402c4c0:	d9c00615 	stw	r7,24(sp)
 402c4c4:	003df706 	br	402bca4 <__flash_rwdata_start+0xffff574c>
 402c4c8:	193d3926 	beq	r3,r4,402b9b0 <__flash_rwdata_start+0xffff5458>
 402c4cc:	00c00f04 	movi	r3,60
 402c4d0:	1885c83a 	sub	r2,r3,r2
 402c4d4:	003ddf06 	br	402bc54 <__flash_rwdata_start+0xffff56fc>
 402c4d8:	e009883a 	mov	r4,fp
 402c4dc:	e0001115 	stw	zero,68(fp)
 402c4e0:	000b883a 	mov	r5,zero
 402c4e4:	402ddac0 	call	402ddac <_Balloc>
 402c4e8:	d8800715 	stw	r2,28(sp)
 402c4ec:	d8c00717 	ldw	r3,28(sp)
 402c4f0:	00bfffc4 	movi	r2,-1
 402c4f4:	01000044 	movi	r4,1
 402c4f8:	d8800c15 	stw	r2,48(sp)
 402c4fc:	e0c01015 	stw	r3,64(fp)
 402c500:	d9000b15 	stw	r4,44(sp)
 402c504:	d8800615 	stw	r2,24(sp)
 402c508:	d8002215 	stw	zero,136(sp)
 402c50c:	003c4106 	br	402b614 <__flash_rwdata_start+0xffff50bc>
 402c510:	d8c00c17 	ldw	r3,48(sp)
 402c514:	d8c00615 	stw	r3,24(sp)
 402c518:	003e7006 	br	402bedc <__flash_rwdata_start+0xffff5984>
 402c51c:	04400044 	movi	r17,1
 402c520:	003b2006 	br	402b1a4 <__flash_rwdata_start+0xffff4c4c>
 402c524:	000b883a 	mov	r5,zero
 402c528:	003b3d06 	br	402b220 <__flash_rwdata_start+0xffff4cc8>
 402c52c:	d8800c17 	ldw	r2,48(sp)
 402c530:	d8800615 	stw	r2,24(sp)
 402c534:	003e6906 	br	402bedc <__flash_rwdata_start+0xffff5984>

0402c538 <__sflush_r>:
 402c538:	f811883a 	mov	r8,ra
 402c53c:	40346e80 	call	40346e8 <_mcount>
 402c540:	403f883a 	mov	ra,r8
 402c544:	defffb04 	addi	sp,sp,-20
 402c548:	dfc00415 	stw	ra,16(sp)
 402c54c:	dcc00315 	stw	r19,12(sp)
 402c550:	dc800215 	stw	r18,8(sp)
 402c554:	dc400115 	stw	r17,4(sp)
 402c558:	dc000015 	stw	r16,0(sp)
 402c55c:	2880030b 	ldhu	r2,12(r5)
 402c560:	2823883a 	mov	r17,r5
 402c564:	2027883a 	mov	r19,r4
 402c568:	10c0020c 	andi	r3,r2,8
 402c56c:	1800311e 	bne	r3,zero,402c634 <__sflush_r+0xfc>
 402c570:	28c00117 	ldw	r3,4(r5)
 402c574:	10820014 	ori	r2,r2,2048
 402c578:	2880030d 	sth	r2,12(r5)
 402c57c:	00c04b0e 	bge	zero,r3,402c6ac <__sflush_r+0x174>
 402c580:	8a000a17 	ldw	r8,40(r17)
 402c584:	40002326 	beq	r8,zero,402c614 <__sflush_r+0xdc>
 402c588:	9c000017 	ldw	r16,0(r19)
 402c58c:	10c4000c 	andi	r3,r2,4096
 402c590:	98000015 	stw	zero,0(r19)
 402c594:	18004826 	beq	r3,zero,402c6b8 <__sflush_r+0x180>
 402c598:	89801417 	ldw	r6,80(r17)
 402c59c:	10c0010c 	andi	r3,r2,4
 402c5a0:	18000626 	beq	r3,zero,402c5bc <__sflush_r+0x84>
 402c5a4:	88c00117 	ldw	r3,4(r17)
 402c5a8:	88800c17 	ldw	r2,48(r17)
 402c5ac:	30cdc83a 	sub	r6,r6,r3
 402c5b0:	10000226 	beq	r2,zero,402c5bc <__sflush_r+0x84>
 402c5b4:	88800f17 	ldw	r2,60(r17)
 402c5b8:	308dc83a 	sub	r6,r6,r2
 402c5bc:	89400717 	ldw	r5,28(r17)
 402c5c0:	000f883a 	mov	r7,zero
 402c5c4:	9809883a 	mov	r4,r19
 402c5c8:	403ee83a 	callr	r8
 402c5cc:	00ffffc4 	movi	r3,-1
 402c5d0:	10c04426 	beq	r2,r3,402c6e4 <__sflush_r+0x1ac>
 402c5d4:	88c0030b 	ldhu	r3,12(r17)
 402c5d8:	89000417 	ldw	r4,16(r17)
 402c5dc:	88000115 	stw	zero,4(r17)
 402c5e0:	197dffcc 	andi	r5,r3,63487
 402c5e4:	8940030d 	sth	r5,12(r17)
 402c5e8:	89000015 	stw	r4,0(r17)
 402c5ec:	18c4000c 	andi	r3,r3,4096
 402c5f0:	18002c1e 	bne	r3,zero,402c6a4 <__sflush_r+0x16c>
 402c5f4:	89400c17 	ldw	r5,48(r17)
 402c5f8:	9c000015 	stw	r16,0(r19)
 402c5fc:	28000526 	beq	r5,zero,402c614 <__sflush_r+0xdc>
 402c600:	88801004 	addi	r2,r17,64
 402c604:	28800226 	beq	r5,r2,402c610 <__sflush_r+0xd8>
 402c608:	9809883a 	mov	r4,r19
 402c60c:	402cd7c0 	call	402cd7c <_free_r>
 402c610:	88000c15 	stw	zero,48(r17)
 402c614:	0005883a 	mov	r2,zero
 402c618:	dfc00417 	ldw	ra,16(sp)
 402c61c:	dcc00317 	ldw	r19,12(sp)
 402c620:	dc800217 	ldw	r18,8(sp)
 402c624:	dc400117 	ldw	r17,4(sp)
 402c628:	dc000017 	ldw	r16,0(sp)
 402c62c:	dec00504 	addi	sp,sp,20
 402c630:	f800283a 	ret
 402c634:	2c800417 	ldw	r18,16(r5)
 402c638:	903ff626 	beq	r18,zero,402c614 <__flash_rwdata_start+0xffff60bc>
 402c63c:	2c000017 	ldw	r16,0(r5)
 402c640:	108000cc 	andi	r2,r2,3
 402c644:	2c800015 	stw	r18,0(r5)
 402c648:	84a1c83a 	sub	r16,r16,r18
 402c64c:	1000131e 	bne	r2,zero,402c69c <__sflush_r+0x164>
 402c650:	28800517 	ldw	r2,20(r5)
 402c654:	88800215 	stw	r2,8(r17)
 402c658:	04000316 	blt	zero,r16,402c668 <__sflush_r+0x130>
 402c65c:	003fed06 	br	402c614 <__flash_rwdata_start+0xffff60bc>
 402c660:	90a5883a 	add	r18,r18,r2
 402c664:	043feb0e 	bge	zero,r16,402c614 <__flash_rwdata_start+0xffff60bc>
 402c668:	88800917 	ldw	r2,36(r17)
 402c66c:	89400717 	ldw	r5,28(r17)
 402c670:	800f883a 	mov	r7,r16
 402c674:	900d883a 	mov	r6,r18
 402c678:	9809883a 	mov	r4,r19
 402c67c:	103ee83a 	callr	r2
 402c680:	80a1c83a 	sub	r16,r16,r2
 402c684:	00bff616 	blt	zero,r2,402c660 <__flash_rwdata_start+0xffff6108>
 402c688:	88c0030b 	ldhu	r3,12(r17)
 402c68c:	00bfffc4 	movi	r2,-1
 402c690:	18c01014 	ori	r3,r3,64
 402c694:	88c0030d 	sth	r3,12(r17)
 402c698:	003fdf06 	br	402c618 <__flash_rwdata_start+0xffff60c0>
 402c69c:	0005883a 	mov	r2,zero
 402c6a0:	003fec06 	br	402c654 <__flash_rwdata_start+0xffff60fc>
 402c6a4:	88801415 	stw	r2,80(r17)
 402c6a8:	003fd206 	br	402c5f4 <__flash_rwdata_start+0xffff609c>
 402c6ac:	28c00f17 	ldw	r3,60(r5)
 402c6b0:	00ffb316 	blt	zero,r3,402c580 <__flash_rwdata_start+0xffff6028>
 402c6b4:	003fd706 	br	402c614 <__flash_rwdata_start+0xffff60bc>
 402c6b8:	89400717 	ldw	r5,28(r17)
 402c6bc:	000d883a 	mov	r6,zero
 402c6c0:	01c00044 	movi	r7,1
 402c6c4:	9809883a 	mov	r4,r19
 402c6c8:	403ee83a 	callr	r8
 402c6cc:	100d883a 	mov	r6,r2
 402c6d0:	00bfffc4 	movi	r2,-1
 402c6d4:	30801426 	beq	r6,r2,402c728 <__sflush_r+0x1f0>
 402c6d8:	8880030b 	ldhu	r2,12(r17)
 402c6dc:	8a000a17 	ldw	r8,40(r17)
 402c6e0:	003fae06 	br	402c59c <__flash_rwdata_start+0xffff6044>
 402c6e4:	98c00017 	ldw	r3,0(r19)
 402c6e8:	183fba26 	beq	r3,zero,402c5d4 <__flash_rwdata_start+0xffff607c>
 402c6ec:	01000744 	movi	r4,29
 402c6f0:	19000626 	beq	r3,r4,402c70c <__sflush_r+0x1d4>
 402c6f4:	01000584 	movi	r4,22
 402c6f8:	19000426 	beq	r3,r4,402c70c <__sflush_r+0x1d4>
 402c6fc:	88c0030b 	ldhu	r3,12(r17)
 402c700:	18c01014 	ori	r3,r3,64
 402c704:	88c0030d 	sth	r3,12(r17)
 402c708:	003fc306 	br	402c618 <__flash_rwdata_start+0xffff60c0>
 402c70c:	8880030b 	ldhu	r2,12(r17)
 402c710:	88c00417 	ldw	r3,16(r17)
 402c714:	88000115 	stw	zero,4(r17)
 402c718:	10bdffcc 	andi	r2,r2,63487
 402c71c:	8880030d 	sth	r2,12(r17)
 402c720:	88c00015 	stw	r3,0(r17)
 402c724:	003fb306 	br	402c5f4 <__flash_rwdata_start+0xffff609c>
 402c728:	98800017 	ldw	r2,0(r19)
 402c72c:	103fea26 	beq	r2,zero,402c6d8 <__flash_rwdata_start+0xffff6180>
 402c730:	00c00744 	movi	r3,29
 402c734:	10c00226 	beq	r2,r3,402c740 <__sflush_r+0x208>
 402c738:	00c00584 	movi	r3,22
 402c73c:	10c0031e 	bne	r2,r3,402c74c <__sflush_r+0x214>
 402c740:	9c000015 	stw	r16,0(r19)
 402c744:	0005883a 	mov	r2,zero
 402c748:	003fb306 	br	402c618 <__flash_rwdata_start+0xffff60c0>
 402c74c:	88c0030b 	ldhu	r3,12(r17)
 402c750:	3005883a 	mov	r2,r6
 402c754:	18c01014 	ori	r3,r3,64
 402c758:	88c0030d 	sth	r3,12(r17)
 402c75c:	003fae06 	br	402c618 <__flash_rwdata_start+0xffff60c0>

0402c760 <_fflush_r>:
 402c760:	f811883a 	mov	r8,ra
 402c764:	40346e80 	call	40346e8 <_mcount>
 402c768:	403f883a 	mov	ra,r8
 402c76c:	defffd04 	addi	sp,sp,-12
 402c770:	dfc00215 	stw	ra,8(sp)
 402c774:	dc000115 	stw	r16,4(sp)
 402c778:	2021883a 	mov	r16,r4
 402c77c:	20000226 	beq	r4,zero,402c788 <_fflush_r+0x28>
 402c780:	20800e17 	ldw	r2,56(r4)
 402c784:	10000c26 	beq	r2,zero,402c7b8 <_fflush_r+0x58>
 402c788:	2880030f 	ldh	r2,12(r5)
 402c78c:	1000051e 	bne	r2,zero,402c7a4 <_fflush_r+0x44>
 402c790:	0005883a 	mov	r2,zero
 402c794:	dfc00217 	ldw	ra,8(sp)
 402c798:	dc000117 	ldw	r16,4(sp)
 402c79c:	dec00304 	addi	sp,sp,12
 402c7a0:	f800283a 	ret
 402c7a4:	8009883a 	mov	r4,r16
 402c7a8:	dfc00217 	ldw	ra,8(sp)
 402c7ac:	dc000117 	ldw	r16,4(sp)
 402c7b0:	dec00304 	addi	sp,sp,12
 402c7b4:	402c5381 	jmpi	402c538 <__sflush_r>
 402c7b8:	d9400015 	stw	r5,0(sp)
 402c7bc:	402cba80 	call	402cba8 <__sinit>
 402c7c0:	d9400017 	ldw	r5,0(sp)
 402c7c4:	003ff006 	br	402c788 <__flash_rwdata_start+0xffff6230>

0402c7c8 <fflush>:
 402c7c8:	f811883a 	mov	r8,ra
 402c7cc:	40346e80 	call	40346e8 <_mcount>
 402c7d0:	403f883a 	mov	ra,r8
 402c7d4:	20000526 	beq	r4,zero,402c7ec <fflush+0x24>
 402c7d8:	00800034 	movhi	r2,0
 402c7dc:	10886904 	addi	r2,r2,8612
 402c7e0:	200b883a 	mov	r5,r4
 402c7e4:	11000017 	ldw	r4,0(r2)
 402c7e8:	402c7601 	jmpi	402c760 <_fflush_r>
 402c7ec:	00800034 	movhi	r2,0
 402c7f0:	10886804 	addi	r2,r2,8608
 402c7f4:	11000017 	ldw	r4,0(r2)
 402c7f8:	014100f4 	movhi	r5,1027
 402c7fc:	2971d804 	addi	r5,r5,-14496
 402c800:	402d6301 	jmpi	402d630 <_fwalk_reent>

0402c804 <__fp_unlock>:
 402c804:	f811883a 	mov	r8,ra
 402c808:	40346e80 	call	40346e8 <_mcount>
 402c80c:	403f883a 	mov	ra,r8
 402c810:	0005883a 	mov	r2,zero
 402c814:	f800283a 	ret

0402c818 <_cleanup_r>:
 402c818:	f811883a 	mov	r8,ra
 402c81c:	40346e80 	call	40346e8 <_mcount>
 402c820:	403f883a 	mov	ra,r8
 402c824:	014100f4 	movhi	r5,1027
 402c828:	29443f04 	addi	r5,r5,4348
 402c82c:	402d6301 	jmpi	402d630 <_fwalk_reent>

0402c830 <__sinit.part.1>:
 402c830:	f811883a 	mov	r8,ra
 402c834:	40346e80 	call	40346e8 <_mcount>
 402c838:	403f883a 	mov	ra,r8
 402c83c:	defff704 	addi	sp,sp,-36
 402c840:	dfc00815 	stw	ra,32(sp)
 402c844:	ddc00715 	stw	r23,28(sp)
 402c848:	dd800615 	stw	r22,24(sp)
 402c84c:	dd400515 	stw	r21,20(sp)
 402c850:	dd000415 	stw	r20,16(sp)
 402c854:	dcc00315 	stw	r19,12(sp)
 402c858:	dc800215 	stw	r18,8(sp)
 402c85c:	dc400115 	stw	r17,4(sp)
 402c860:	dc000015 	stw	r16,0(sp)
 402c864:	00c100f4 	movhi	r3,1027
 402c868:	24000117 	ldw	r16,4(r4)
 402c86c:	18f20604 	addi	r3,r3,-14312
 402c870:	20c00f15 	stw	r3,60(r4)
 402c874:	2080bb04 	addi	r2,r4,748
 402c878:	00c000c4 	movi	r3,3
 402c87c:	20c0b915 	stw	r3,740(r4)
 402c880:	2080ba15 	stw	r2,744(r4)
 402c884:	2000b815 	stw	zero,736(r4)
 402c888:	05c00204 	movi	r23,8
 402c88c:	00800104 	movi	r2,4
 402c890:	2025883a 	mov	r18,r4
 402c894:	b80d883a 	mov	r6,r23
 402c898:	81001704 	addi	r4,r16,92
 402c89c:	000b883a 	mov	r5,zero
 402c8a0:	80000015 	stw	zero,0(r16)
 402c8a4:	80000115 	stw	zero,4(r16)
 402c8a8:	80000215 	stw	zero,8(r16)
 402c8ac:	8080030d 	sth	r2,12(r16)
 402c8b0:	80001915 	stw	zero,100(r16)
 402c8b4:	8000038d 	sth	zero,14(r16)
 402c8b8:	80000415 	stw	zero,16(r16)
 402c8bc:	80000515 	stw	zero,20(r16)
 402c8c0:	80000615 	stw	zero,24(r16)
 402c8c4:	4027f780 	call	4027f78 <memset>
 402c8c8:	058100f4 	movhi	r22,1027
 402c8cc:	94400217 	ldw	r17,8(r18)
 402c8d0:	054100f4 	movhi	r21,1027
 402c8d4:	050100f4 	movhi	r20,1027
 402c8d8:	04c100f4 	movhi	r19,1027
 402c8dc:	b5bd7d04 	addi	r22,r22,-2572
 402c8e0:	ad7d9a04 	addi	r21,r21,-2456
 402c8e4:	a53dbc04 	addi	r20,r20,-2320
 402c8e8:	9cfdd604 	addi	r19,r19,-2216
 402c8ec:	85800815 	stw	r22,32(r16)
 402c8f0:	85400915 	stw	r21,36(r16)
 402c8f4:	85000a15 	stw	r20,40(r16)
 402c8f8:	84c00b15 	stw	r19,44(r16)
 402c8fc:	84000715 	stw	r16,28(r16)
 402c900:	00800284 	movi	r2,10
 402c904:	8880030d 	sth	r2,12(r17)
 402c908:	00800044 	movi	r2,1
 402c90c:	b80d883a 	mov	r6,r23
 402c910:	89001704 	addi	r4,r17,92
 402c914:	000b883a 	mov	r5,zero
 402c918:	88000015 	stw	zero,0(r17)
 402c91c:	88000115 	stw	zero,4(r17)
 402c920:	88000215 	stw	zero,8(r17)
 402c924:	88001915 	stw	zero,100(r17)
 402c928:	8880038d 	sth	r2,14(r17)
 402c92c:	88000415 	stw	zero,16(r17)
 402c930:	88000515 	stw	zero,20(r17)
 402c934:	88000615 	stw	zero,24(r17)
 402c938:	4027f780 	call	4027f78 <memset>
 402c93c:	94000317 	ldw	r16,12(r18)
 402c940:	00800484 	movi	r2,18
 402c944:	8c400715 	stw	r17,28(r17)
 402c948:	8d800815 	stw	r22,32(r17)
 402c94c:	8d400915 	stw	r21,36(r17)
 402c950:	8d000a15 	stw	r20,40(r17)
 402c954:	8cc00b15 	stw	r19,44(r17)
 402c958:	8080030d 	sth	r2,12(r16)
 402c95c:	00800084 	movi	r2,2
 402c960:	80000015 	stw	zero,0(r16)
 402c964:	80000115 	stw	zero,4(r16)
 402c968:	80000215 	stw	zero,8(r16)
 402c96c:	80001915 	stw	zero,100(r16)
 402c970:	8080038d 	sth	r2,14(r16)
 402c974:	80000415 	stw	zero,16(r16)
 402c978:	80000515 	stw	zero,20(r16)
 402c97c:	80000615 	stw	zero,24(r16)
 402c980:	b80d883a 	mov	r6,r23
 402c984:	000b883a 	mov	r5,zero
 402c988:	81001704 	addi	r4,r16,92
 402c98c:	4027f780 	call	4027f78 <memset>
 402c990:	00800044 	movi	r2,1
 402c994:	84000715 	stw	r16,28(r16)
 402c998:	85800815 	stw	r22,32(r16)
 402c99c:	85400915 	stw	r21,36(r16)
 402c9a0:	85000a15 	stw	r20,40(r16)
 402c9a4:	84c00b15 	stw	r19,44(r16)
 402c9a8:	90800e15 	stw	r2,56(r18)
 402c9ac:	dfc00817 	ldw	ra,32(sp)
 402c9b0:	ddc00717 	ldw	r23,28(sp)
 402c9b4:	dd800617 	ldw	r22,24(sp)
 402c9b8:	dd400517 	ldw	r21,20(sp)
 402c9bc:	dd000417 	ldw	r20,16(sp)
 402c9c0:	dcc00317 	ldw	r19,12(sp)
 402c9c4:	dc800217 	ldw	r18,8(sp)
 402c9c8:	dc400117 	ldw	r17,4(sp)
 402c9cc:	dc000017 	ldw	r16,0(sp)
 402c9d0:	dec00904 	addi	sp,sp,36
 402c9d4:	f800283a 	ret

0402c9d8 <__fp_lock>:
 402c9d8:	f811883a 	mov	r8,ra
 402c9dc:	40346e80 	call	40346e8 <_mcount>
 402c9e0:	403f883a 	mov	ra,r8
 402c9e4:	0005883a 	mov	r2,zero
 402c9e8:	f800283a 	ret

0402c9ec <__sfmoreglue>:
 402c9ec:	f811883a 	mov	r8,ra
 402c9f0:	40346e80 	call	40346e8 <_mcount>
 402c9f4:	403f883a 	mov	ra,r8
 402c9f8:	defffc04 	addi	sp,sp,-16
 402c9fc:	dfc00315 	stw	ra,12(sp)
 402ca00:	dc800215 	stw	r18,8(sp)
 402ca04:	dc400115 	stw	r17,4(sp)
 402ca08:	dc000015 	stw	r16,0(sp)
 402ca0c:	2c7fffc4 	addi	r17,r5,-1
 402ca10:	8c401a24 	muli	r17,r17,104
 402ca14:	2825883a 	mov	r18,r5
 402ca18:	89401d04 	addi	r5,r17,116
 402ca1c:	40277600 	call	4027760 <_malloc_r>
 402ca20:	1021883a 	mov	r16,r2
 402ca24:	10000726 	beq	r2,zero,402ca44 <__sfmoreglue+0x58>
 402ca28:	11000304 	addi	r4,r2,12
 402ca2c:	10000015 	stw	zero,0(r2)
 402ca30:	14800115 	stw	r18,4(r2)
 402ca34:	11000215 	stw	r4,8(r2)
 402ca38:	89801a04 	addi	r6,r17,104
 402ca3c:	000b883a 	mov	r5,zero
 402ca40:	4027f780 	call	4027f78 <memset>
 402ca44:	8005883a 	mov	r2,r16
 402ca48:	dfc00317 	ldw	ra,12(sp)
 402ca4c:	dc800217 	ldw	r18,8(sp)
 402ca50:	dc400117 	ldw	r17,4(sp)
 402ca54:	dc000017 	ldw	r16,0(sp)
 402ca58:	dec00404 	addi	sp,sp,16
 402ca5c:	f800283a 	ret

0402ca60 <__sfp>:
 402ca60:	f811883a 	mov	r8,ra
 402ca64:	40346e80 	call	40346e8 <_mcount>
 402ca68:	403f883a 	mov	ra,r8
 402ca6c:	defffb04 	addi	sp,sp,-20
 402ca70:	dfc00415 	stw	ra,16(sp)
 402ca74:	dcc00315 	stw	r19,12(sp)
 402ca78:	dc800215 	stw	r18,8(sp)
 402ca7c:	dc400115 	stw	r17,4(sp)
 402ca80:	dc000015 	stw	r16,0(sp)
 402ca84:	04000034 	movhi	r16,0
 402ca88:	84086804 	addi	r16,r16,8608
 402ca8c:	2027883a 	mov	r19,r4
 402ca90:	81000017 	ldw	r4,0(r16)
 402ca94:	20800e17 	ldw	r2,56(r4)
 402ca98:	1000021e 	bne	r2,zero,402caa4 <__sfp+0x44>
 402ca9c:	402c8300 	call	402c830 <__sinit.part.1>
 402caa0:	81000017 	ldw	r4,0(r16)
 402caa4:	2480b804 	addi	r18,r4,736
 402caa8:	047fffc4 	movi	r17,-1
 402caac:	91000117 	ldw	r4,4(r18)
 402cab0:	94000217 	ldw	r16,8(r18)
 402cab4:	213fffc4 	addi	r4,r4,-1
 402cab8:	20000a16 	blt	r4,zero,402cae4 <__sfp+0x84>
 402cabc:	8080030f 	ldh	r2,12(r16)
 402cac0:	10000c26 	beq	r2,zero,402caf4 <__sfp+0x94>
 402cac4:	80c01d04 	addi	r3,r16,116
 402cac8:	00000206 	br	402cad4 <__sfp+0x74>
 402cacc:	18bfe60f 	ldh	r2,-104(r3)
 402cad0:	10000826 	beq	r2,zero,402caf4 <__sfp+0x94>
 402cad4:	213fffc4 	addi	r4,r4,-1
 402cad8:	1c3ffd04 	addi	r16,r3,-12
 402cadc:	18c01a04 	addi	r3,r3,104
 402cae0:	247ffa1e 	bne	r4,r17,402cacc <__flash_rwdata_start+0xffff6574>
 402cae4:	90800017 	ldw	r2,0(r18)
 402cae8:	10001d26 	beq	r2,zero,402cb60 <__sfp+0x100>
 402caec:	1025883a 	mov	r18,r2
 402caf0:	003fee06 	br	402caac <__flash_rwdata_start+0xffff6554>
 402caf4:	00bfffc4 	movi	r2,-1
 402caf8:	8080038d 	sth	r2,14(r16)
 402cafc:	00800044 	movi	r2,1
 402cb00:	8080030d 	sth	r2,12(r16)
 402cb04:	80001915 	stw	zero,100(r16)
 402cb08:	80000015 	stw	zero,0(r16)
 402cb0c:	80000215 	stw	zero,8(r16)
 402cb10:	80000115 	stw	zero,4(r16)
 402cb14:	80000415 	stw	zero,16(r16)
 402cb18:	80000515 	stw	zero,20(r16)
 402cb1c:	80000615 	stw	zero,24(r16)
 402cb20:	01800204 	movi	r6,8
 402cb24:	000b883a 	mov	r5,zero
 402cb28:	81001704 	addi	r4,r16,92
 402cb2c:	4027f780 	call	4027f78 <memset>
 402cb30:	8005883a 	mov	r2,r16
 402cb34:	80000c15 	stw	zero,48(r16)
 402cb38:	80000d15 	stw	zero,52(r16)
 402cb3c:	80001115 	stw	zero,68(r16)
 402cb40:	80001215 	stw	zero,72(r16)
 402cb44:	dfc00417 	ldw	ra,16(sp)
 402cb48:	dcc00317 	ldw	r19,12(sp)
 402cb4c:	dc800217 	ldw	r18,8(sp)
 402cb50:	dc400117 	ldw	r17,4(sp)
 402cb54:	dc000017 	ldw	r16,0(sp)
 402cb58:	dec00504 	addi	sp,sp,20
 402cb5c:	f800283a 	ret
 402cb60:	01400104 	movi	r5,4
 402cb64:	9809883a 	mov	r4,r19
 402cb68:	402c9ec0 	call	402c9ec <__sfmoreglue>
 402cb6c:	90800015 	stw	r2,0(r18)
 402cb70:	103fde1e 	bne	r2,zero,402caec <__flash_rwdata_start+0xffff6594>
 402cb74:	00800304 	movi	r2,12
 402cb78:	98800015 	stw	r2,0(r19)
 402cb7c:	0005883a 	mov	r2,zero
 402cb80:	003ff006 	br	402cb44 <__flash_rwdata_start+0xffff65ec>

0402cb84 <_cleanup>:
 402cb84:	f811883a 	mov	r8,ra
 402cb88:	40346e80 	call	40346e8 <_mcount>
 402cb8c:	403f883a 	mov	ra,r8
 402cb90:	00800034 	movhi	r2,0
 402cb94:	10886804 	addi	r2,r2,8608
 402cb98:	11000017 	ldw	r4,0(r2)
 402cb9c:	014100f4 	movhi	r5,1027
 402cba0:	29443f04 	addi	r5,r5,4348
 402cba4:	402d6301 	jmpi	402d630 <_fwalk_reent>

0402cba8 <__sinit>:
 402cba8:	f811883a 	mov	r8,ra
 402cbac:	40346e80 	call	40346e8 <_mcount>
 402cbb0:	403f883a 	mov	ra,r8
 402cbb4:	20800e17 	ldw	r2,56(r4)
 402cbb8:	10000126 	beq	r2,zero,402cbc0 <__sinit+0x18>
 402cbbc:	f800283a 	ret
 402cbc0:	402c8301 	jmpi	402c830 <__sinit.part.1>

0402cbc4 <__sfp_lock_acquire>:
 402cbc4:	f811883a 	mov	r8,ra
 402cbc8:	40346e80 	call	40346e8 <_mcount>
 402cbcc:	403f883a 	mov	ra,r8
 402cbd0:	f800283a 	ret

0402cbd4 <__sfp_lock_release>:
 402cbd4:	f811883a 	mov	r8,ra
 402cbd8:	40346e80 	call	40346e8 <_mcount>
 402cbdc:	403f883a 	mov	ra,r8
 402cbe0:	f800283a 	ret

0402cbe4 <__sinit_lock_acquire>:
 402cbe4:	f811883a 	mov	r8,ra
 402cbe8:	40346e80 	call	40346e8 <_mcount>
 402cbec:	403f883a 	mov	ra,r8
 402cbf0:	f800283a 	ret

0402cbf4 <__sinit_lock_release>:
 402cbf4:	f811883a 	mov	r8,ra
 402cbf8:	40346e80 	call	40346e8 <_mcount>
 402cbfc:	403f883a 	mov	ra,r8
 402cc00:	f800283a 	ret

0402cc04 <__fp_lock_all>:
 402cc04:	f811883a 	mov	r8,ra
 402cc08:	40346e80 	call	40346e8 <_mcount>
 402cc0c:	403f883a 	mov	ra,r8
 402cc10:	00800034 	movhi	r2,0
 402cc14:	10886904 	addi	r2,r2,8612
 402cc18:	11000017 	ldw	r4,0(r2)
 402cc1c:	014100f4 	movhi	r5,1027
 402cc20:	29727604 	addi	r5,r5,-13864
 402cc24:	402d5601 	jmpi	402d560 <_fwalk>

0402cc28 <__fp_unlock_all>:
 402cc28:	f811883a 	mov	r8,ra
 402cc2c:	40346e80 	call	40346e8 <_mcount>
 402cc30:	403f883a 	mov	ra,r8
 402cc34:	00800034 	movhi	r2,0
 402cc38:	10886904 	addi	r2,r2,8612
 402cc3c:	11000017 	ldw	r4,0(r2)
 402cc40:	014100f4 	movhi	r5,1027
 402cc44:	29720104 	addi	r5,r5,-14332
 402cc48:	402d5601 	jmpi	402d560 <_fwalk>

0402cc4c <_malloc_trim_r>:
 402cc4c:	f811883a 	mov	r8,ra
 402cc50:	40346e80 	call	40346e8 <_mcount>
 402cc54:	403f883a 	mov	ra,r8
 402cc58:	defffb04 	addi	sp,sp,-20
 402cc5c:	dfc00415 	stw	ra,16(sp)
 402cc60:	dcc00315 	stw	r19,12(sp)
 402cc64:	dc800215 	stw	r18,8(sp)
 402cc68:	dc400115 	stw	r17,4(sp)
 402cc6c:	dc000015 	stw	r16,0(sp)
 402cc70:	04c00034 	movhi	r19,0
 402cc74:	2821883a 	mov	r16,r5
 402cc78:	9cc1a204 	addi	r19,r19,1672
 402cc7c:	2025883a 	mov	r18,r4
 402cc80:	40346c80 	call	40346c8 <__malloc_lock>
 402cc84:	98800217 	ldw	r2,8(r19)
 402cc88:	14400117 	ldw	r17,4(r2)
 402cc8c:	00bfff04 	movi	r2,-4
 402cc90:	88a2703a 	and	r17,r17,r2
 402cc94:	8c21c83a 	sub	r16,r17,r16
 402cc98:	8403fbc4 	addi	r16,r16,4079
 402cc9c:	8020d33a 	srli	r16,r16,12
 402cca0:	0083ffc4 	movi	r2,4095
 402cca4:	843fffc4 	addi	r16,r16,-1
 402cca8:	8020933a 	slli	r16,r16,12
 402ccac:	1400060e 	bge	r2,r16,402ccc8 <_malloc_trim_r+0x7c>
 402ccb0:	000b883a 	mov	r5,zero
 402ccb4:	9009883a 	mov	r4,r18
 402ccb8:	40282e40 	call	40282e4 <_sbrk_r>
 402ccbc:	98c00217 	ldw	r3,8(r19)
 402ccc0:	1c47883a 	add	r3,r3,r17
 402ccc4:	10c00a26 	beq	r2,r3,402ccf0 <_malloc_trim_r+0xa4>
 402ccc8:	9009883a 	mov	r4,r18
 402cccc:	40346d80 	call	40346d8 <__malloc_unlock>
 402ccd0:	0005883a 	mov	r2,zero
 402ccd4:	dfc00417 	ldw	ra,16(sp)
 402ccd8:	dcc00317 	ldw	r19,12(sp)
 402ccdc:	dc800217 	ldw	r18,8(sp)
 402cce0:	dc400117 	ldw	r17,4(sp)
 402cce4:	dc000017 	ldw	r16,0(sp)
 402cce8:	dec00504 	addi	sp,sp,20
 402ccec:	f800283a 	ret
 402ccf0:	040bc83a 	sub	r5,zero,r16
 402ccf4:	9009883a 	mov	r4,r18
 402ccf8:	40282e40 	call	40282e4 <_sbrk_r>
 402ccfc:	00ffffc4 	movi	r3,-1
 402cd00:	10c00d26 	beq	r2,r3,402cd38 <_malloc_trim_r+0xec>
 402cd04:	00c00174 	movhi	r3,5
 402cd08:	18f49404 	addi	r3,r3,-11696
 402cd0c:	18800017 	ldw	r2,0(r3)
 402cd10:	99000217 	ldw	r4,8(r19)
 402cd14:	8c23c83a 	sub	r17,r17,r16
 402cd18:	8c400054 	ori	r17,r17,1
 402cd1c:	1421c83a 	sub	r16,r2,r16
 402cd20:	24400115 	stw	r17,4(r4)
 402cd24:	9009883a 	mov	r4,r18
 402cd28:	1c000015 	stw	r16,0(r3)
 402cd2c:	40346d80 	call	40346d8 <__malloc_unlock>
 402cd30:	00800044 	movi	r2,1
 402cd34:	003fe706 	br	402ccd4 <__flash_rwdata_start+0xffff677c>
 402cd38:	000b883a 	mov	r5,zero
 402cd3c:	9009883a 	mov	r4,r18
 402cd40:	40282e40 	call	40282e4 <_sbrk_r>
 402cd44:	99000217 	ldw	r4,8(r19)
 402cd48:	014003c4 	movi	r5,15
 402cd4c:	1107c83a 	sub	r3,r2,r4
 402cd50:	28ffdd0e 	bge	r5,r3,402ccc8 <__flash_rwdata_start+0xffff6770>
 402cd54:	01400034 	movhi	r5,0
 402cd58:	29486604 	addi	r5,r5,8600
 402cd5c:	29400017 	ldw	r5,0(r5)
 402cd60:	18c00054 	ori	r3,r3,1
 402cd64:	20c00115 	stw	r3,4(r4)
 402cd68:	00c00174 	movhi	r3,5
 402cd6c:	1145c83a 	sub	r2,r2,r5
 402cd70:	18f49404 	addi	r3,r3,-11696
 402cd74:	18800015 	stw	r2,0(r3)
 402cd78:	003fd306 	br	402ccc8 <__flash_rwdata_start+0xffff6770>

0402cd7c <_free_r>:
 402cd7c:	f811883a 	mov	r8,ra
 402cd80:	40346e80 	call	40346e8 <_mcount>
 402cd84:	403f883a 	mov	ra,r8
 402cd88:	28004126 	beq	r5,zero,402ce90 <_free_r+0x114>
 402cd8c:	defffd04 	addi	sp,sp,-12
 402cd90:	dfc00215 	stw	ra,8(sp)
 402cd94:	dc400115 	stw	r17,4(sp)
 402cd98:	dc000015 	stw	r16,0(sp)
 402cd9c:	2821883a 	mov	r16,r5
 402cda0:	2023883a 	mov	r17,r4
 402cda4:	40346c80 	call	40346c8 <__malloc_lock>
 402cda8:	81ffff17 	ldw	r7,-4(r16)
 402cdac:	00bfff84 	movi	r2,-2
 402cdb0:	01000034 	movhi	r4,0
 402cdb4:	81bffe04 	addi	r6,r16,-8
 402cdb8:	3884703a 	and	r2,r7,r2
 402cdbc:	2101a204 	addi	r4,r4,1672
 402cdc0:	308b883a 	add	r5,r6,r2
 402cdc4:	2a400117 	ldw	r9,4(r5)
 402cdc8:	22000217 	ldw	r8,8(r4)
 402cdcc:	00ffff04 	movi	r3,-4
 402cdd0:	48c6703a 	and	r3,r9,r3
 402cdd4:	2a005726 	beq	r5,r8,402cf34 <_free_r+0x1b8>
 402cdd8:	28c00115 	stw	r3,4(r5)
 402cddc:	39c0004c 	andi	r7,r7,1
 402cde0:	3800091e 	bne	r7,zero,402ce08 <_free_r+0x8c>
 402cde4:	823ffe17 	ldw	r8,-8(r16)
 402cde8:	22400204 	addi	r9,r4,8
 402cdec:	320dc83a 	sub	r6,r6,r8
 402cdf0:	31c00217 	ldw	r7,8(r6)
 402cdf4:	1205883a 	add	r2,r2,r8
 402cdf8:	3a406526 	beq	r7,r9,402cf90 <_free_r+0x214>
 402cdfc:	32000317 	ldw	r8,12(r6)
 402ce00:	3a000315 	stw	r8,12(r7)
 402ce04:	41c00215 	stw	r7,8(r8)
 402ce08:	28cf883a 	add	r7,r5,r3
 402ce0c:	39c00117 	ldw	r7,4(r7)
 402ce10:	39c0004c 	andi	r7,r7,1
 402ce14:	38003a26 	beq	r7,zero,402cf00 <_free_r+0x184>
 402ce18:	10c00054 	ori	r3,r2,1
 402ce1c:	30c00115 	stw	r3,4(r6)
 402ce20:	3087883a 	add	r3,r6,r2
 402ce24:	18800015 	stw	r2,0(r3)
 402ce28:	00c07fc4 	movi	r3,511
 402ce2c:	18801936 	bltu	r3,r2,402ce94 <_free_r+0x118>
 402ce30:	1004d0fa 	srli	r2,r2,3
 402ce34:	01c00044 	movi	r7,1
 402ce38:	21400117 	ldw	r5,4(r4)
 402ce3c:	10c00044 	addi	r3,r2,1
 402ce40:	18c7883a 	add	r3,r3,r3
 402ce44:	1005d0ba 	srai	r2,r2,2
 402ce48:	18c7883a 	add	r3,r3,r3
 402ce4c:	18c7883a 	add	r3,r3,r3
 402ce50:	1907883a 	add	r3,r3,r4
 402ce54:	3884983a 	sll	r2,r7,r2
 402ce58:	19c00017 	ldw	r7,0(r3)
 402ce5c:	1a3ffe04 	addi	r8,r3,-8
 402ce60:	1144b03a 	or	r2,r2,r5
 402ce64:	32000315 	stw	r8,12(r6)
 402ce68:	31c00215 	stw	r7,8(r6)
 402ce6c:	20800115 	stw	r2,4(r4)
 402ce70:	19800015 	stw	r6,0(r3)
 402ce74:	39800315 	stw	r6,12(r7)
 402ce78:	8809883a 	mov	r4,r17
 402ce7c:	dfc00217 	ldw	ra,8(sp)
 402ce80:	dc400117 	ldw	r17,4(sp)
 402ce84:	dc000017 	ldw	r16,0(sp)
 402ce88:	dec00304 	addi	sp,sp,12
 402ce8c:	40346d81 	jmpi	40346d8 <__malloc_unlock>
 402ce90:	f800283a 	ret
 402ce94:	100ad27a 	srli	r5,r2,9
 402ce98:	00c00104 	movi	r3,4
 402ce9c:	19404a36 	bltu	r3,r5,402cfc8 <_free_r+0x24c>
 402cea0:	100ad1ba 	srli	r5,r2,6
 402cea4:	28c00e44 	addi	r3,r5,57
 402cea8:	18c7883a 	add	r3,r3,r3
 402ceac:	29400e04 	addi	r5,r5,56
 402ceb0:	18c7883a 	add	r3,r3,r3
 402ceb4:	18c7883a 	add	r3,r3,r3
 402ceb8:	1909883a 	add	r4,r3,r4
 402cebc:	20c00017 	ldw	r3,0(r4)
 402cec0:	01c00034 	movhi	r7,0
 402cec4:	213ffe04 	addi	r4,r4,-8
 402cec8:	39c1a204 	addi	r7,r7,1672
 402cecc:	20c04426 	beq	r4,r3,402cfe0 <_free_r+0x264>
 402ced0:	01ffff04 	movi	r7,-4
 402ced4:	19400117 	ldw	r5,4(r3)
 402ced8:	29ca703a 	and	r5,r5,r7
 402cedc:	1140022e 	bgeu	r2,r5,402cee8 <_free_r+0x16c>
 402cee0:	18c00217 	ldw	r3,8(r3)
 402cee4:	20fffb1e 	bne	r4,r3,402ced4 <__flash_rwdata_start+0xffff697c>
 402cee8:	19000317 	ldw	r4,12(r3)
 402ceec:	31000315 	stw	r4,12(r6)
 402cef0:	30c00215 	stw	r3,8(r6)
 402cef4:	21800215 	stw	r6,8(r4)
 402cef8:	19800315 	stw	r6,12(r3)
 402cefc:	003fde06 	br	402ce78 <__flash_rwdata_start+0xffff6920>
 402cf00:	29c00217 	ldw	r7,8(r5)
 402cf04:	10c5883a 	add	r2,r2,r3
 402cf08:	00c00034 	movhi	r3,0
 402cf0c:	18c1a404 	addi	r3,r3,1680
 402cf10:	38c03b26 	beq	r7,r3,402d000 <_free_r+0x284>
 402cf14:	2a000317 	ldw	r8,12(r5)
 402cf18:	11400054 	ori	r5,r2,1
 402cf1c:	3087883a 	add	r3,r6,r2
 402cf20:	3a000315 	stw	r8,12(r7)
 402cf24:	41c00215 	stw	r7,8(r8)
 402cf28:	31400115 	stw	r5,4(r6)
 402cf2c:	18800015 	stw	r2,0(r3)
 402cf30:	003fbd06 	br	402ce28 <__flash_rwdata_start+0xffff68d0>
 402cf34:	39c0004c 	andi	r7,r7,1
 402cf38:	10c5883a 	add	r2,r2,r3
 402cf3c:	3800071e 	bne	r7,zero,402cf5c <_free_r+0x1e0>
 402cf40:	81fffe17 	ldw	r7,-8(r16)
 402cf44:	31cdc83a 	sub	r6,r6,r7
 402cf48:	30c00317 	ldw	r3,12(r6)
 402cf4c:	31400217 	ldw	r5,8(r6)
 402cf50:	11c5883a 	add	r2,r2,r7
 402cf54:	28c00315 	stw	r3,12(r5)
 402cf58:	19400215 	stw	r5,8(r3)
 402cf5c:	10c00054 	ori	r3,r2,1
 402cf60:	30c00115 	stw	r3,4(r6)
 402cf64:	00c00034 	movhi	r3,0
 402cf68:	18c86704 	addi	r3,r3,8604
 402cf6c:	18c00017 	ldw	r3,0(r3)
 402cf70:	21800215 	stw	r6,8(r4)
 402cf74:	10ffc036 	bltu	r2,r3,402ce78 <__flash_rwdata_start+0xffff6920>
 402cf78:	00800034 	movhi	r2,0
 402cf7c:	10887f04 	addi	r2,r2,8700
 402cf80:	11400017 	ldw	r5,0(r2)
 402cf84:	8809883a 	mov	r4,r17
 402cf88:	402cc4c0 	call	402cc4c <_malloc_trim_r>
 402cf8c:	003fba06 	br	402ce78 <__flash_rwdata_start+0xffff6920>
 402cf90:	28c9883a 	add	r4,r5,r3
 402cf94:	21000117 	ldw	r4,4(r4)
 402cf98:	2100004c 	andi	r4,r4,1
 402cf9c:	2000391e 	bne	r4,zero,402d084 <_free_r+0x308>
 402cfa0:	29c00217 	ldw	r7,8(r5)
 402cfa4:	29000317 	ldw	r4,12(r5)
 402cfa8:	1885883a 	add	r2,r3,r2
 402cfac:	10c00054 	ori	r3,r2,1
 402cfb0:	39000315 	stw	r4,12(r7)
 402cfb4:	21c00215 	stw	r7,8(r4)
 402cfb8:	30c00115 	stw	r3,4(r6)
 402cfbc:	308d883a 	add	r6,r6,r2
 402cfc0:	30800015 	stw	r2,0(r6)
 402cfc4:	003fac06 	br	402ce78 <__flash_rwdata_start+0xffff6920>
 402cfc8:	00c00504 	movi	r3,20
 402cfcc:	19401536 	bltu	r3,r5,402d024 <_free_r+0x2a8>
 402cfd0:	28c01704 	addi	r3,r5,92
 402cfd4:	18c7883a 	add	r3,r3,r3
 402cfd8:	294016c4 	addi	r5,r5,91
 402cfdc:	003fb406 	br	402ceb0 <__flash_rwdata_start+0xffff6958>
 402cfe0:	280bd0ba 	srai	r5,r5,2
 402cfe4:	00c00044 	movi	r3,1
 402cfe8:	38800117 	ldw	r2,4(r7)
 402cfec:	194a983a 	sll	r5,r3,r5
 402cff0:	2007883a 	mov	r3,r4
 402cff4:	2884b03a 	or	r2,r5,r2
 402cff8:	38800115 	stw	r2,4(r7)
 402cffc:	003fbb06 	br	402ceec <__flash_rwdata_start+0xffff6994>
 402d000:	21800515 	stw	r6,20(r4)
 402d004:	21800415 	stw	r6,16(r4)
 402d008:	10c00054 	ori	r3,r2,1
 402d00c:	31c00315 	stw	r7,12(r6)
 402d010:	31c00215 	stw	r7,8(r6)
 402d014:	30c00115 	stw	r3,4(r6)
 402d018:	308d883a 	add	r6,r6,r2
 402d01c:	30800015 	stw	r2,0(r6)
 402d020:	003f9506 	br	402ce78 <__flash_rwdata_start+0xffff6920>
 402d024:	00c01504 	movi	r3,84
 402d028:	19400536 	bltu	r3,r5,402d040 <_free_r+0x2c4>
 402d02c:	100ad33a 	srli	r5,r2,12
 402d030:	28c01bc4 	addi	r3,r5,111
 402d034:	18c7883a 	add	r3,r3,r3
 402d038:	29401b84 	addi	r5,r5,110
 402d03c:	003f9c06 	br	402ceb0 <__flash_rwdata_start+0xffff6958>
 402d040:	00c05504 	movi	r3,340
 402d044:	19400536 	bltu	r3,r5,402d05c <_free_r+0x2e0>
 402d048:	100ad3fa 	srli	r5,r2,15
 402d04c:	28c01e04 	addi	r3,r5,120
 402d050:	18c7883a 	add	r3,r3,r3
 402d054:	29401dc4 	addi	r5,r5,119
 402d058:	003f9506 	br	402ceb0 <__flash_rwdata_start+0xffff6958>
 402d05c:	00c15504 	movi	r3,1364
 402d060:	19400536 	bltu	r3,r5,402d078 <_free_r+0x2fc>
 402d064:	100ad4ba 	srli	r5,r2,18
 402d068:	28c01f44 	addi	r3,r5,125
 402d06c:	18c7883a 	add	r3,r3,r3
 402d070:	29401f04 	addi	r5,r5,124
 402d074:	003f8e06 	br	402ceb0 <__flash_rwdata_start+0xffff6958>
 402d078:	00c03f84 	movi	r3,254
 402d07c:	01401f84 	movi	r5,126
 402d080:	003f8b06 	br	402ceb0 <__flash_rwdata_start+0xffff6958>
 402d084:	10c00054 	ori	r3,r2,1
 402d088:	30c00115 	stw	r3,4(r6)
 402d08c:	308d883a 	add	r6,r6,r2
 402d090:	30800015 	stw	r2,0(r6)
 402d094:	003f7806 	br	402ce78 <__flash_rwdata_start+0xffff6920>

0402d098 <__sfvwrite_r>:
 402d098:	f811883a 	mov	r8,ra
 402d09c:	40346e80 	call	40346e8 <_mcount>
 402d0a0:	403f883a 	mov	ra,r8
 402d0a4:	30800217 	ldw	r2,8(r6)
 402d0a8:	10006726 	beq	r2,zero,402d248 <__sfvwrite_r+0x1b0>
 402d0ac:	defff404 	addi	sp,sp,-48
 402d0b0:	dfc00b15 	stw	ra,44(sp)
 402d0b4:	df000a15 	stw	fp,40(sp)
 402d0b8:	ddc00915 	stw	r23,36(sp)
 402d0bc:	dd800815 	stw	r22,32(sp)
 402d0c0:	dd400715 	stw	r21,28(sp)
 402d0c4:	dd000615 	stw	r20,24(sp)
 402d0c8:	dcc00515 	stw	r19,20(sp)
 402d0cc:	dc800415 	stw	r18,16(sp)
 402d0d0:	dc400315 	stw	r17,12(sp)
 402d0d4:	dc000215 	stw	r16,8(sp)
 402d0d8:	28c0030b 	ldhu	r3,12(r5)
 402d0dc:	2821883a 	mov	r16,r5
 402d0e0:	202b883a 	mov	r21,r4
 402d0e4:	1880020c 	andi	r2,r3,8
 402d0e8:	3029883a 	mov	r20,r6
 402d0ec:	10002726 	beq	r2,zero,402d18c <__sfvwrite_r+0xf4>
 402d0f0:	28800417 	ldw	r2,16(r5)
 402d0f4:	10002526 	beq	r2,zero,402d18c <__sfvwrite_r+0xf4>
 402d0f8:	1880008c 	andi	r2,r3,2
 402d0fc:	a4400017 	ldw	r17,0(r20)
 402d100:	10002a26 	beq	r2,zero,402d1ac <__sfvwrite_r+0x114>
 402d104:	05a00034 	movhi	r22,32768
 402d108:	0027883a 	mov	r19,zero
 402d10c:	0025883a 	mov	r18,zero
 402d110:	b5bf0004 	addi	r22,r22,-1024
 402d114:	980d883a 	mov	r6,r19
 402d118:	a809883a 	mov	r4,r21
 402d11c:	90004626 	beq	r18,zero,402d238 <__sfvwrite_r+0x1a0>
 402d120:	900f883a 	mov	r7,r18
 402d124:	b480022e 	bgeu	r22,r18,402d130 <__sfvwrite_r+0x98>
 402d128:	01e00034 	movhi	r7,32768
 402d12c:	39ff0004 	addi	r7,r7,-1024
 402d130:	80800917 	ldw	r2,36(r16)
 402d134:	81400717 	ldw	r5,28(r16)
 402d138:	103ee83a 	callr	r2
 402d13c:	0080570e 	bge	zero,r2,402d29c <__sfvwrite_r+0x204>
 402d140:	a0c00217 	ldw	r3,8(r20)
 402d144:	98a7883a 	add	r19,r19,r2
 402d148:	90a5c83a 	sub	r18,r18,r2
 402d14c:	1885c83a 	sub	r2,r3,r2
 402d150:	a0800215 	stw	r2,8(r20)
 402d154:	103fef1e 	bne	r2,zero,402d114 <__flash_rwdata_start+0xffff6bbc>
 402d158:	0005883a 	mov	r2,zero
 402d15c:	dfc00b17 	ldw	ra,44(sp)
 402d160:	df000a17 	ldw	fp,40(sp)
 402d164:	ddc00917 	ldw	r23,36(sp)
 402d168:	dd800817 	ldw	r22,32(sp)
 402d16c:	dd400717 	ldw	r21,28(sp)
 402d170:	dd000617 	ldw	r20,24(sp)
 402d174:	dcc00517 	ldw	r19,20(sp)
 402d178:	dc800417 	ldw	r18,16(sp)
 402d17c:	dc400317 	ldw	r17,12(sp)
 402d180:	dc000217 	ldw	r16,8(sp)
 402d184:	dec00c04 	addi	sp,sp,48
 402d188:	f800283a 	ret
 402d18c:	800b883a 	mov	r5,r16
 402d190:	a809883a 	mov	r4,r21
 402d194:	402ab380 	call	402ab38 <__swsetup_r>
 402d198:	1000eb1e 	bne	r2,zero,402d548 <__sfvwrite_r+0x4b0>
 402d19c:	80c0030b 	ldhu	r3,12(r16)
 402d1a0:	a4400017 	ldw	r17,0(r20)
 402d1a4:	1880008c 	andi	r2,r3,2
 402d1a8:	103fd61e 	bne	r2,zero,402d104 <__flash_rwdata_start+0xffff6bac>
 402d1ac:	1880004c 	andi	r2,r3,1
 402d1b0:	10003f1e 	bne	r2,zero,402d2b0 <__sfvwrite_r+0x218>
 402d1b4:	0039883a 	mov	fp,zero
 402d1b8:	0025883a 	mov	r18,zero
 402d1bc:	90001a26 	beq	r18,zero,402d228 <__sfvwrite_r+0x190>
 402d1c0:	1880800c 	andi	r2,r3,512
 402d1c4:	84c00217 	ldw	r19,8(r16)
 402d1c8:	10002126 	beq	r2,zero,402d250 <__sfvwrite_r+0x1b8>
 402d1cc:	982f883a 	mov	r23,r19
 402d1d0:	94c09336 	bltu	r18,r19,402d420 <__sfvwrite_r+0x388>
 402d1d4:	1881200c 	andi	r2,r3,1152
 402d1d8:	10009e1e 	bne	r2,zero,402d454 <__sfvwrite_r+0x3bc>
 402d1dc:	81000017 	ldw	r4,0(r16)
 402d1e0:	b80d883a 	mov	r6,r23
 402d1e4:	e00b883a 	mov	r5,fp
 402d1e8:	402dc480 	call	402dc48 <memmove>
 402d1ec:	80c00217 	ldw	r3,8(r16)
 402d1f0:	81000017 	ldw	r4,0(r16)
 402d1f4:	9005883a 	mov	r2,r18
 402d1f8:	1ce7c83a 	sub	r19,r3,r19
 402d1fc:	25cf883a 	add	r7,r4,r23
 402d200:	84c00215 	stw	r19,8(r16)
 402d204:	81c00015 	stw	r7,0(r16)
 402d208:	a0c00217 	ldw	r3,8(r20)
 402d20c:	e0b9883a 	add	fp,fp,r2
 402d210:	90a5c83a 	sub	r18,r18,r2
 402d214:	18a7c83a 	sub	r19,r3,r2
 402d218:	a4c00215 	stw	r19,8(r20)
 402d21c:	983fce26 	beq	r19,zero,402d158 <__flash_rwdata_start+0xffff6c00>
 402d220:	80c0030b 	ldhu	r3,12(r16)
 402d224:	903fe61e 	bne	r18,zero,402d1c0 <__flash_rwdata_start+0xffff6c68>
 402d228:	8f000017 	ldw	fp,0(r17)
 402d22c:	8c800117 	ldw	r18,4(r17)
 402d230:	8c400204 	addi	r17,r17,8
 402d234:	003fe106 	br	402d1bc <__flash_rwdata_start+0xffff6c64>
 402d238:	8cc00017 	ldw	r19,0(r17)
 402d23c:	8c800117 	ldw	r18,4(r17)
 402d240:	8c400204 	addi	r17,r17,8
 402d244:	003fb306 	br	402d114 <__flash_rwdata_start+0xffff6bbc>
 402d248:	0005883a 	mov	r2,zero
 402d24c:	f800283a 	ret
 402d250:	81000017 	ldw	r4,0(r16)
 402d254:	80800417 	ldw	r2,16(r16)
 402d258:	11005736 	bltu	r2,r4,402d3b8 <__sfvwrite_r+0x320>
 402d25c:	85c00517 	ldw	r23,20(r16)
 402d260:	95c05536 	bltu	r18,r23,402d3b8 <__sfvwrite_r+0x320>
 402d264:	00a00034 	movhi	r2,32768
 402d268:	10bfffc4 	addi	r2,r2,-1
 402d26c:	9009883a 	mov	r4,r18
 402d270:	1480012e 	bgeu	r2,r18,402d278 <__sfvwrite_r+0x1e0>
 402d274:	1009883a 	mov	r4,r2
 402d278:	b80b883a 	mov	r5,r23
 402d27c:	4024bd40 	call	4024bd4 <__divsi3>
 402d280:	15cf383a 	mul	r7,r2,r23
 402d284:	81400717 	ldw	r5,28(r16)
 402d288:	80800917 	ldw	r2,36(r16)
 402d28c:	e00d883a 	mov	r6,fp
 402d290:	a809883a 	mov	r4,r21
 402d294:	103ee83a 	callr	r2
 402d298:	00bfdb16 	blt	zero,r2,402d208 <__flash_rwdata_start+0xffff6cb0>
 402d29c:	8080030b 	ldhu	r2,12(r16)
 402d2a0:	10801014 	ori	r2,r2,64
 402d2a4:	8080030d 	sth	r2,12(r16)
 402d2a8:	00bfffc4 	movi	r2,-1
 402d2ac:	003fab06 	br	402d15c <__flash_rwdata_start+0xffff6c04>
 402d2b0:	0027883a 	mov	r19,zero
 402d2b4:	0011883a 	mov	r8,zero
 402d2b8:	0039883a 	mov	fp,zero
 402d2bc:	0025883a 	mov	r18,zero
 402d2c0:	90001f26 	beq	r18,zero,402d340 <__sfvwrite_r+0x2a8>
 402d2c4:	40005a26 	beq	r8,zero,402d430 <__sfvwrite_r+0x398>
 402d2c8:	982d883a 	mov	r22,r19
 402d2cc:	94c0012e 	bgeu	r18,r19,402d2d4 <__sfvwrite_r+0x23c>
 402d2d0:	902d883a 	mov	r22,r18
 402d2d4:	81000017 	ldw	r4,0(r16)
 402d2d8:	80800417 	ldw	r2,16(r16)
 402d2dc:	b02f883a 	mov	r23,r22
 402d2e0:	81c00517 	ldw	r7,20(r16)
 402d2e4:	1100032e 	bgeu	r2,r4,402d2f4 <__sfvwrite_r+0x25c>
 402d2e8:	80c00217 	ldw	r3,8(r16)
 402d2ec:	38c7883a 	add	r3,r7,r3
 402d2f0:	1d801816 	blt	r3,r22,402d354 <__sfvwrite_r+0x2bc>
 402d2f4:	b1c03e16 	blt	r22,r7,402d3f0 <__sfvwrite_r+0x358>
 402d2f8:	80800917 	ldw	r2,36(r16)
 402d2fc:	81400717 	ldw	r5,28(r16)
 402d300:	e00d883a 	mov	r6,fp
 402d304:	da000115 	stw	r8,4(sp)
 402d308:	a809883a 	mov	r4,r21
 402d30c:	103ee83a 	callr	r2
 402d310:	102f883a 	mov	r23,r2
 402d314:	da000117 	ldw	r8,4(sp)
 402d318:	00bfe00e 	bge	zero,r2,402d29c <__flash_rwdata_start+0xffff6d44>
 402d31c:	9de7c83a 	sub	r19,r19,r23
 402d320:	98001f26 	beq	r19,zero,402d3a0 <__sfvwrite_r+0x308>
 402d324:	a0800217 	ldw	r2,8(r20)
 402d328:	e5f9883a 	add	fp,fp,r23
 402d32c:	95e5c83a 	sub	r18,r18,r23
 402d330:	15efc83a 	sub	r23,r2,r23
 402d334:	a5c00215 	stw	r23,8(r20)
 402d338:	b83f8726 	beq	r23,zero,402d158 <__flash_rwdata_start+0xffff6c00>
 402d33c:	903fe11e 	bne	r18,zero,402d2c4 <__flash_rwdata_start+0xffff6d6c>
 402d340:	8f000017 	ldw	fp,0(r17)
 402d344:	8c800117 	ldw	r18,4(r17)
 402d348:	0011883a 	mov	r8,zero
 402d34c:	8c400204 	addi	r17,r17,8
 402d350:	003fdb06 	br	402d2c0 <__flash_rwdata_start+0xffff6d68>
 402d354:	180d883a 	mov	r6,r3
 402d358:	e00b883a 	mov	r5,fp
 402d35c:	da000115 	stw	r8,4(sp)
 402d360:	d8c00015 	stw	r3,0(sp)
 402d364:	402dc480 	call	402dc48 <memmove>
 402d368:	d8c00017 	ldw	r3,0(sp)
 402d36c:	80800017 	ldw	r2,0(r16)
 402d370:	800b883a 	mov	r5,r16
 402d374:	a809883a 	mov	r4,r21
 402d378:	10c5883a 	add	r2,r2,r3
 402d37c:	80800015 	stw	r2,0(r16)
 402d380:	d8c00015 	stw	r3,0(sp)
 402d384:	402c7600 	call	402c760 <_fflush_r>
 402d388:	d8c00017 	ldw	r3,0(sp)
 402d38c:	da000117 	ldw	r8,4(sp)
 402d390:	103fc21e 	bne	r2,zero,402d29c <__flash_rwdata_start+0xffff6d44>
 402d394:	182f883a 	mov	r23,r3
 402d398:	9de7c83a 	sub	r19,r19,r23
 402d39c:	983fe11e 	bne	r19,zero,402d324 <__flash_rwdata_start+0xffff6dcc>
 402d3a0:	800b883a 	mov	r5,r16
 402d3a4:	a809883a 	mov	r4,r21
 402d3a8:	402c7600 	call	402c760 <_fflush_r>
 402d3ac:	103fbb1e 	bne	r2,zero,402d29c <__flash_rwdata_start+0xffff6d44>
 402d3b0:	0011883a 	mov	r8,zero
 402d3b4:	003fdb06 	br	402d324 <__flash_rwdata_start+0xffff6dcc>
 402d3b8:	94c0012e 	bgeu	r18,r19,402d3c0 <__sfvwrite_r+0x328>
 402d3bc:	9027883a 	mov	r19,r18
 402d3c0:	980d883a 	mov	r6,r19
 402d3c4:	e00b883a 	mov	r5,fp
 402d3c8:	402dc480 	call	402dc48 <memmove>
 402d3cc:	80800217 	ldw	r2,8(r16)
 402d3d0:	80c00017 	ldw	r3,0(r16)
 402d3d4:	14c5c83a 	sub	r2,r2,r19
 402d3d8:	1cc7883a 	add	r3,r3,r19
 402d3dc:	80800215 	stw	r2,8(r16)
 402d3e0:	80c00015 	stw	r3,0(r16)
 402d3e4:	10004326 	beq	r2,zero,402d4f4 <__sfvwrite_r+0x45c>
 402d3e8:	9805883a 	mov	r2,r19
 402d3ec:	003f8606 	br	402d208 <__flash_rwdata_start+0xffff6cb0>
 402d3f0:	b00d883a 	mov	r6,r22
 402d3f4:	e00b883a 	mov	r5,fp
 402d3f8:	da000115 	stw	r8,4(sp)
 402d3fc:	402dc480 	call	402dc48 <memmove>
 402d400:	80800217 	ldw	r2,8(r16)
 402d404:	80c00017 	ldw	r3,0(r16)
 402d408:	da000117 	ldw	r8,4(sp)
 402d40c:	1585c83a 	sub	r2,r2,r22
 402d410:	1dad883a 	add	r22,r3,r22
 402d414:	80800215 	stw	r2,8(r16)
 402d418:	85800015 	stw	r22,0(r16)
 402d41c:	003fbf06 	br	402d31c <__flash_rwdata_start+0xffff6dc4>
 402d420:	81000017 	ldw	r4,0(r16)
 402d424:	9027883a 	mov	r19,r18
 402d428:	902f883a 	mov	r23,r18
 402d42c:	003f6c06 	br	402d1e0 <__flash_rwdata_start+0xffff6c88>
 402d430:	900d883a 	mov	r6,r18
 402d434:	01400284 	movi	r5,10
 402d438:	e009883a 	mov	r4,fp
 402d43c:	402da040 	call	402da04 <memchr>
 402d440:	10003e26 	beq	r2,zero,402d53c <__sfvwrite_r+0x4a4>
 402d444:	10800044 	addi	r2,r2,1
 402d448:	1727c83a 	sub	r19,r2,fp
 402d44c:	02000044 	movi	r8,1
 402d450:	003f9d06 	br	402d2c8 <__flash_rwdata_start+0xffff6d70>
 402d454:	80800517 	ldw	r2,20(r16)
 402d458:	81400417 	ldw	r5,16(r16)
 402d45c:	81c00017 	ldw	r7,0(r16)
 402d460:	10a7883a 	add	r19,r2,r2
 402d464:	9885883a 	add	r2,r19,r2
 402d468:	1026d7fa 	srli	r19,r2,31
 402d46c:	396dc83a 	sub	r22,r7,r5
 402d470:	b1000044 	addi	r4,r22,1
 402d474:	9885883a 	add	r2,r19,r2
 402d478:	1027d07a 	srai	r19,r2,1
 402d47c:	2485883a 	add	r2,r4,r18
 402d480:	980d883a 	mov	r6,r19
 402d484:	9880022e 	bgeu	r19,r2,402d490 <__sfvwrite_r+0x3f8>
 402d488:	1027883a 	mov	r19,r2
 402d48c:	100d883a 	mov	r6,r2
 402d490:	18c1000c 	andi	r3,r3,1024
 402d494:	18001c26 	beq	r3,zero,402d508 <__sfvwrite_r+0x470>
 402d498:	300b883a 	mov	r5,r6
 402d49c:	a809883a 	mov	r4,r21
 402d4a0:	40277600 	call	4027760 <_malloc_r>
 402d4a4:	102f883a 	mov	r23,r2
 402d4a8:	10002926 	beq	r2,zero,402d550 <__sfvwrite_r+0x4b8>
 402d4ac:	81400417 	ldw	r5,16(r16)
 402d4b0:	b00d883a 	mov	r6,r22
 402d4b4:	1009883a 	mov	r4,r2
 402d4b8:	402daf40 	call	402daf4 <memcpy>
 402d4bc:	8080030b 	ldhu	r2,12(r16)
 402d4c0:	00fedfc4 	movi	r3,-1153
 402d4c4:	10c4703a 	and	r2,r2,r3
 402d4c8:	10802014 	ori	r2,r2,128
 402d4cc:	8080030d 	sth	r2,12(r16)
 402d4d0:	bd89883a 	add	r4,r23,r22
 402d4d4:	9d8fc83a 	sub	r7,r19,r22
 402d4d8:	85c00415 	stw	r23,16(r16)
 402d4dc:	84c00515 	stw	r19,20(r16)
 402d4e0:	81000015 	stw	r4,0(r16)
 402d4e4:	9027883a 	mov	r19,r18
 402d4e8:	81c00215 	stw	r7,8(r16)
 402d4ec:	902f883a 	mov	r23,r18
 402d4f0:	003f3b06 	br	402d1e0 <__flash_rwdata_start+0xffff6c88>
 402d4f4:	800b883a 	mov	r5,r16
 402d4f8:	a809883a 	mov	r4,r21
 402d4fc:	402c7600 	call	402c760 <_fflush_r>
 402d500:	103fb926 	beq	r2,zero,402d3e8 <__flash_rwdata_start+0xffff6e90>
 402d504:	003f6506 	br	402d29c <__flash_rwdata_start+0xffff6d44>
 402d508:	a809883a 	mov	r4,r21
 402d50c:	402f0040 	call	402f004 <_realloc_r>
 402d510:	102f883a 	mov	r23,r2
 402d514:	103fee1e 	bne	r2,zero,402d4d0 <__flash_rwdata_start+0xffff6f78>
 402d518:	81400417 	ldw	r5,16(r16)
 402d51c:	a809883a 	mov	r4,r21
 402d520:	402cd7c0 	call	402cd7c <_free_r>
 402d524:	8080030b 	ldhu	r2,12(r16)
 402d528:	00ffdfc4 	movi	r3,-129
 402d52c:	1884703a 	and	r2,r3,r2
 402d530:	00c00304 	movi	r3,12
 402d534:	a8c00015 	stw	r3,0(r21)
 402d538:	003f5906 	br	402d2a0 <__flash_rwdata_start+0xffff6d48>
 402d53c:	94c00044 	addi	r19,r18,1
 402d540:	02000044 	movi	r8,1
 402d544:	003f6006 	br	402d2c8 <__flash_rwdata_start+0xffff6d70>
 402d548:	00bfffc4 	movi	r2,-1
 402d54c:	003f0306 	br	402d15c <__flash_rwdata_start+0xffff6c04>
 402d550:	00800304 	movi	r2,12
 402d554:	a8800015 	stw	r2,0(r21)
 402d558:	8080030b 	ldhu	r2,12(r16)
 402d55c:	003f5006 	br	402d2a0 <__flash_rwdata_start+0xffff6d48>

0402d560 <_fwalk>:
 402d560:	f811883a 	mov	r8,ra
 402d564:	40346e80 	call	40346e8 <_mcount>
 402d568:	403f883a 	mov	ra,r8
 402d56c:	defff704 	addi	sp,sp,-36
 402d570:	dfc00815 	stw	ra,32(sp)
 402d574:	ddc00715 	stw	r23,28(sp)
 402d578:	dd800615 	stw	r22,24(sp)
 402d57c:	dd400515 	stw	r21,20(sp)
 402d580:	dd000415 	stw	r20,16(sp)
 402d584:	dcc00315 	stw	r19,12(sp)
 402d588:	dc800215 	stw	r18,8(sp)
 402d58c:	dc400115 	stw	r17,4(sp)
 402d590:	dc000015 	stw	r16,0(sp)
 402d594:	2500b804 	addi	r20,r4,736
 402d598:	a0002326 	beq	r20,zero,402d628 <_fwalk+0xc8>
 402d59c:	282b883a 	mov	r21,r5
 402d5a0:	002f883a 	mov	r23,zero
 402d5a4:	05800044 	movi	r22,1
 402d5a8:	04ffffc4 	movi	r19,-1
 402d5ac:	a4400117 	ldw	r17,4(r20)
 402d5b0:	a4800217 	ldw	r18,8(r20)
 402d5b4:	8c7fffc4 	addi	r17,r17,-1
 402d5b8:	88000d16 	blt	r17,zero,402d5f0 <_fwalk+0x90>
 402d5bc:	94000304 	addi	r16,r18,12
 402d5c0:	94800384 	addi	r18,r18,14
 402d5c4:	8080000b 	ldhu	r2,0(r16)
 402d5c8:	8c7fffc4 	addi	r17,r17,-1
 402d5cc:	813ffd04 	addi	r4,r16,-12
 402d5d0:	b080042e 	bgeu	r22,r2,402d5e4 <_fwalk+0x84>
 402d5d4:	9080000f 	ldh	r2,0(r18)
 402d5d8:	14c00226 	beq	r2,r19,402d5e4 <_fwalk+0x84>
 402d5dc:	a83ee83a 	callr	r21
 402d5e0:	b8aeb03a 	or	r23,r23,r2
 402d5e4:	84001a04 	addi	r16,r16,104
 402d5e8:	94801a04 	addi	r18,r18,104
 402d5ec:	8cfff51e 	bne	r17,r19,402d5c4 <__flash_rwdata_start+0xffff706c>
 402d5f0:	a5000017 	ldw	r20,0(r20)
 402d5f4:	a03fed1e 	bne	r20,zero,402d5ac <__flash_rwdata_start+0xffff7054>
 402d5f8:	b805883a 	mov	r2,r23
 402d5fc:	dfc00817 	ldw	ra,32(sp)
 402d600:	ddc00717 	ldw	r23,28(sp)
 402d604:	dd800617 	ldw	r22,24(sp)
 402d608:	dd400517 	ldw	r21,20(sp)
 402d60c:	dd000417 	ldw	r20,16(sp)
 402d610:	dcc00317 	ldw	r19,12(sp)
 402d614:	dc800217 	ldw	r18,8(sp)
 402d618:	dc400117 	ldw	r17,4(sp)
 402d61c:	dc000017 	ldw	r16,0(sp)
 402d620:	dec00904 	addi	sp,sp,36
 402d624:	f800283a 	ret
 402d628:	002f883a 	mov	r23,zero
 402d62c:	003ff206 	br	402d5f8 <__flash_rwdata_start+0xffff70a0>

0402d630 <_fwalk_reent>:
 402d630:	f811883a 	mov	r8,ra
 402d634:	40346e80 	call	40346e8 <_mcount>
 402d638:	403f883a 	mov	ra,r8
 402d63c:	defff704 	addi	sp,sp,-36
 402d640:	dfc00815 	stw	ra,32(sp)
 402d644:	ddc00715 	stw	r23,28(sp)
 402d648:	dd800615 	stw	r22,24(sp)
 402d64c:	dd400515 	stw	r21,20(sp)
 402d650:	dd000415 	stw	r20,16(sp)
 402d654:	dcc00315 	stw	r19,12(sp)
 402d658:	dc800215 	stw	r18,8(sp)
 402d65c:	dc400115 	stw	r17,4(sp)
 402d660:	dc000015 	stw	r16,0(sp)
 402d664:	2500b804 	addi	r20,r4,736
 402d668:	a0002326 	beq	r20,zero,402d6f8 <_fwalk_reent+0xc8>
 402d66c:	282b883a 	mov	r21,r5
 402d670:	2027883a 	mov	r19,r4
 402d674:	002f883a 	mov	r23,zero
 402d678:	05800044 	movi	r22,1
 402d67c:	04bfffc4 	movi	r18,-1
 402d680:	a4400117 	ldw	r17,4(r20)
 402d684:	a4000217 	ldw	r16,8(r20)
 402d688:	8c7fffc4 	addi	r17,r17,-1
 402d68c:	88000c16 	blt	r17,zero,402d6c0 <_fwalk_reent+0x90>
 402d690:	84000304 	addi	r16,r16,12
 402d694:	8080000b 	ldhu	r2,0(r16)
 402d698:	8c7fffc4 	addi	r17,r17,-1
 402d69c:	817ffd04 	addi	r5,r16,-12
 402d6a0:	b080052e 	bgeu	r22,r2,402d6b8 <_fwalk_reent+0x88>
 402d6a4:	8080008f 	ldh	r2,2(r16)
 402d6a8:	9809883a 	mov	r4,r19
 402d6ac:	14800226 	beq	r2,r18,402d6b8 <_fwalk_reent+0x88>
 402d6b0:	a83ee83a 	callr	r21
 402d6b4:	b8aeb03a 	or	r23,r23,r2
 402d6b8:	84001a04 	addi	r16,r16,104
 402d6bc:	8cbff51e 	bne	r17,r18,402d694 <__flash_rwdata_start+0xffff713c>
 402d6c0:	a5000017 	ldw	r20,0(r20)
 402d6c4:	a03fee1e 	bne	r20,zero,402d680 <__flash_rwdata_start+0xffff7128>
 402d6c8:	b805883a 	mov	r2,r23
 402d6cc:	dfc00817 	ldw	ra,32(sp)
 402d6d0:	ddc00717 	ldw	r23,28(sp)
 402d6d4:	dd800617 	ldw	r22,24(sp)
 402d6d8:	dd400517 	ldw	r21,20(sp)
 402d6dc:	dd000417 	ldw	r20,16(sp)
 402d6e0:	dcc00317 	ldw	r19,12(sp)
 402d6e4:	dc800217 	ldw	r18,8(sp)
 402d6e8:	dc400117 	ldw	r17,4(sp)
 402d6ec:	dc000017 	ldw	r16,0(sp)
 402d6f0:	dec00904 	addi	sp,sp,36
 402d6f4:	f800283a 	ret
 402d6f8:	002f883a 	mov	r23,zero
 402d6fc:	003ff206 	br	402d6c8 <__flash_rwdata_start+0xffff7170>

0402d700 <_setlocale_r>:
 402d700:	f811883a 	mov	r8,ra
 402d704:	40346e80 	call	40346e8 <_mcount>
 402d708:	403f883a 	mov	ra,r8
 402d70c:	30001b26 	beq	r6,zero,402d77c <_setlocale_r+0x7c>
 402d710:	defffe04 	addi	sp,sp,-8
 402d714:	dfc00115 	stw	ra,4(sp)
 402d718:	dc000015 	stw	r16,0(sp)
 402d71c:	01400034 	movhi	r5,0
 402d720:	29414704 	addi	r5,r5,1308
 402d724:	3009883a 	mov	r4,r6
 402d728:	3021883a 	mov	r16,r6
 402d72c:	40286c00 	call	40286c0 <strcmp>
 402d730:	1000061e 	bne	r2,zero,402d74c <_setlocale_r+0x4c>
 402d734:	00800034 	movhi	r2,0
 402d738:	10814604 	addi	r2,r2,1304
 402d73c:	dfc00117 	ldw	ra,4(sp)
 402d740:	dc000017 	ldw	r16,0(sp)
 402d744:	dec00204 	addi	sp,sp,8
 402d748:	f800283a 	ret
 402d74c:	01400034 	movhi	r5,0
 402d750:	29414604 	addi	r5,r5,1304
 402d754:	8009883a 	mov	r4,r16
 402d758:	40286c00 	call	40286c0 <strcmp>
 402d75c:	103ff526 	beq	r2,zero,402d734 <__flash_rwdata_start+0xffff71dc>
 402d760:	01400034 	movhi	r5,0
 402d764:	29413104 	addi	r5,r5,1220
 402d768:	8009883a 	mov	r4,r16
 402d76c:	40286c00 	call	40286c0 <strcmp>
 402d770:	103ff026 	beq	r2,zero,402d734 <__flash_rwdata_start+0xffff71dc>
 402d774:	0005883a 	mov	r2,zero
 402d778:	003ff006 	br	402d73c <__flash_rwdata_start+0xffff71e4>
 402d77c:	00800034 	movhi	r2,0
 402d780:	10814604 	addi	r2,r2,1304
 402d784:	f800283a 	ret

0402d788 <__locale_charset>:
 402d788:	f811883a 	mov	r8,ra
 402d78c:	40346e80 	call	40346e8 <_mcount>
 402d790:	403f883a 	mov	ra,r8
 402d794:	00800034 	movhi	r2,0
 402d798:	1083b504 	addi	r2,r2,3796
 402d79c:	f800283a 	ret

0402d7a0 <__locale_mb_cur_max>:
 402d7a0:	f811883a 	mov	r8,ra
 402d7a4:	40346e80 	call	40346e8 <_mcount>
 402d7a8:	403f883a 	mov	ra,r8
 402d7ac:	00800034 	movhi	r2,0
 402d7b0:	10886a04 	addi	r2,r2,8616
 402d7b4:	10800017 	ldw	r2,0(r2)
 402d7b8:	f800283a 	ret

0402d7bc <__locale_msgcharset>:
 402d7bc:	f811883a 	mov	r8,ra
 402d7c0:	40346e80 	call	40346e8 <_mcount>
 402d7c4:	403f883a 	mov	ra,r8
 402d7c8:	00800034 	movhi	r2,0
 402d7cc:	1083ad04 	addi	r2,r2,3764
 402d7d0:	f800283a 	ret

0402d7d4 <__locale_cjk_lang>:
 402d7d4:	f811883a 	mov	r8,ra
 402d7d8:	40346e80 	call	40346e8 <_mcount>
 402d7dc:	403f883a 	mov	ra,r8
 402d7e0:	0005883a 	mov	r2,zero
 402d7e4:	f800283a 	ret

0402d7e8 <_localeconv_r>:
 402d7e8:	f811883a 	mov	r8,ra
 402d7ec:	40346e80 	call	40346e8 <_mcount>
 402d7f0:	403f883a 	mov	ra,r8
 402d7f4:	00800034 	movhi	r2,0
 402d7f8:	1083bd04 	addi	r2,r2,3828
 402d7fc:	f800283a 	ret

0402d800 <setlocale>:
 402d800:	f811883a 	mov	r8,ra
 402d804:	40346e80 	call	40346e8 <_mcount>
 402d808:	403f883a 	mov	ra,r8
 402d80c:	00800034 	movhi	r2,0
 402d810:	10886904 	addi	r2,r2,8612
 402d814:	280d883a 	mov	r6,r5
 402d818:	200b883a 	mov	r5,r4
 402d81c:	11000017 	ldw	r4,0(r2)
 402d820:	402d7001 	jmpi	402d700 <_setlocale_r>

0402d824 <localeconv>:
 402d824:	f811883a 	mov	r8,ra
 402d828:	40346e80 	call	40346e8 <_mcount>
 402d82c:	403f883a 	mov	ra,r8
 402d830:	00800034 	movhi	r2,0
 402d834:	1083bd04 	addi	r2,r2,3828
 402d838:	f800283a 	ret

0402d83c <__smakebuf_r>:
 402d83c:	f811883a 	mov	r8,ra
 402d840:	40346e80 	call	40346e8 <_mcount>
 402d844:	403f883a 	mov	ra,r8
 402d848:	2880030b 	ldhu	r2,12(r5)
 402d84c:	10c0008c 	andi	r3,r2,2
 402d850:	1800411e 	bne	r3,zero,402d958 <__smakebuf_r+0x11c>
 402d854:	deffec04 	addi	sp,sp,-80
 402d858:	dfc01315 	stw	ra,76(sp)
 402d85c:	dcc01215 	stw	r19,72(sp)
 402d860:	dc801115 	stw	r18,68(sp)
 402d864:	dc401015 	stw	r17,64(sp)
 402d868:	dc000f15 	stw	r16,60(sp)
 402d86c:	2821883a 	mov	r16,r5
 402d870:	2940038f 	ldh	r5,14(r5)
 402d874:	2023883a 	mov	r17,r4
 402d878:	28001c16 	blt	r5,zero,402d8ec <__smakebuf_r+0xb0>
 402d87c:	d80d883a 	mov	r6,sp
 402d880:	40314440 	call	4031444 <_fstat_r>
 402d884:	10001816 	blt	r2,zero,402d8e8 <__smakebuf_r+0xac>
 402d888:	d8800117 	ldw	r2,4(sp)
 402d88c:	00e00014 	movui	r3,32768
 402d890:	10bc000c 	andi	r2,r2,61440
 402d894:	14c80020 	cmpeqi	r19,r2,8192
 402d898:	10c03726 	beq	r2,r3,402d978 <__smakebuf_r+0x13c>
 402d89c:	80c0030b 	ldhu	r3,12(r16)
 402d8a0:	18c20014 	ori	r3,r3,2048
 402d8a4:	80c0030d 	sth	r3,12(r16)
 402d8a8:	00c80004 	movi	r3,8192
 402d8ac:	10c0521e 	bne	r2,r3,402d9f8 <__smakebuf_r+0x1bc>
 402d8b0:	8140038f 	ldh	r5,14(r16)
 402d8b4:	8809883a 	mov	r4,r17
 402d8b8:	40314ac0 	call	40314ac <_isatty_r>
 402d8bc:	10004c26 	beq	r2,zero,402d9f0 <__smakebuf_r+0x1b4>
 402d8c0:	8080030b 	ldhu	r2,12(r16)
 402d8c4:	80c010c4 	addi	r3,r16,67
 402d8c8:	80c00015 	stw	r3,0(r16)
 402d8cc:	10800054 	ori	r2,r2,1
 402d8d0:	8080030d 	sth	r2,12(r16)
 402d8d4:	00800044 	movi	r2,1
 402d8d8:	80c00415 	stw	r3,16(r16)
 402d8dc:	80800515 	stw	r2,20(r16)
 402d8e0:	04810004 	movi	r18,1024
 402d8e4:	00000706 	br	402d904 <__smakebuf_r+0xc8>
 402d8e8:	8080030b 	ldhu	r2,12(r16)
 402d8ec:	10c0200c 	andi	r3,r2,128
 402d8f0:	18001f1e 	bne	r3,zero,402d970 <__smakebuf_r+0x134>
 402d8f4:	04810004 	movi	r18,1024
 402d8f8:	10820014 	ori	r2,r2,2048
 402d8fc:	8080030d 	sth	r2,12(r16)
 402d900:	0027883a 	mov	r19,zero
 402d904:	900b883a 	mov	r5,r18
 402d908:	8809883a 	mov	r4,r17
 402d90c:	40277600 	call	4027760 <_malloc_r>
 402d910:	10002c26 	beq	r2,zero,402d9c4 <__smakebuf_r+0x188>
 402d914:	80c0030b 	ldhu	r3,12(r16)
 402d918:	010100f4 	movhi	r4,1027
 402d91c:	21320604 	addi	r4,r4,-14312
 402d920:	89000f15 	stw	r4,60(r17)
 402d924:	18c02014 	ori	r3,r3,128
 402d928:	80c0030d 	sth	r3,12(r16)
 402d92c:	80800015 	stw	r2,0(r16)
 402d930:	80800415 	stw	r2,16(r16)
 402d934:	84800515 	stw	r18,20(r16)
 402d938:	98001a1e 	bne	r19,zero,402d9a4 <__smakebuf_r+0x168>
 402d93c:	dfc01317 	ldw	ra,76(sp)
 402d940:	dcc01217 	ldw	r19,72(sp)
 402d944:	dc801117 	ldw	r18,68(sp)
 402d948:	dc401017 	ldw	r17,64(sp)
 402d94c:	dc000f17 	ldw	r16,60(sp)
 402d950:	dec01404 	addi	sp,sp,80
 402d954:	f800283a 	ret
 402d958:	288010c4 	addi	r2,r5,67
 402d95c:	28800015 	stw	r2,0(r5)
 402d960:	28800415 	stw	r2,16(r5)
 402d964:	00800044 	movi	r2,1
 402d968:	28800515 	stw	r2,20(r5)
 402d96c:	f800283a 	ret
 402d970:	04801004 	movi	r18,64
 402d974:	003fe006 	br	402d8f8 <__flash_rwdata_start+0xffff73a0>
 402d978:	81000a17 	ldw	r4,40(r16)
 402d97c:	00c100f4 	movhi	r3,1027
 402d980:	18fdbc04 	addi	r3,r3,-2320
 402d984:	20ffc51e 	bne	r4,r3,402d89c <__flash_rwdata_start+0xffff7344>
 402d988:	8080030b 	ldhu	r2,12(r16)
 402d98c:	04810004 	movi	r18,1024
 402d990:	84801315 	stw	r18,76(r16)
 402d994:	1484b03a 	or	r2,r2,r18
 402d998:	8080030d 	sth	r2,12(r16)
 402d99c:	0027883a 	mov	r19,zero
 402d9a0:	003fd806 	br	402d904 <__flash_rwdata_start+0xffff73ac>
 402d9a4:	8140038f 	ldh	r5,14(r16)
 402d9a8:	8809883a 	mov	r4,r17
 402d9ac:	40314ac0 	call	40314ac <_isatty_r>
 402d9b0:	103fe226 	beq	r2,zero,402d93c <__flash_rwdata_start+0xffff73e4>
 402d9b4:	8080030b 	ldhu	r2,12(r16)
 402d9b8:	10800054 	ori	r2,r2,1
 402d9bc:	8080030d 	sth	r2,12(r16)
 402d9c0:	003fde06 	br	402d93c <__flash_rwdata_start+0xffff73e4>
 402d9c4:	8080030b 	ldhu	r2,12(r16)
 402d9c8:	10c0800c 	andi	r3,r2,512
 402d9cc:	183fdb1e 	bne	r3,zero,402d93c <__flash_rwdata_start+0xffff73e4>
 402d9d0:	10800094 	ori	r2,r2,2
 402d9d4:	80c010c4 	addi	r3,r16,67
 402d9d8:	8080030d 	sth	r2,12(r16)
 402d9dc:	00800044 	movi	r2,1
 402d9e0:	80c00015 	stw	r3,0(r16)
 402d9e4:	80c00415 	stw	r3,16(r16)
 402d9e8:	80800515 	stw	r2,20(r16)
 402d9ec:	003fd306 	br	402d93c <__flash_rwdata_start+0xffff73e4>
 402d9f0:	04810004 	movi	r18,1024
 402d9f4:	003fc306 	br	402d904 <__flash_rwdata_start+0xffff73ac>
 402d9f8:	0027883a 	mov	r19,zero
 402d9fc:	04810004 	movi	r18,1024
 402da00:	003fc006 	br	402d904 <__flash_rwdata_start+0xffff73ac>

0402da04 <memchr>:
 402da04:	f811883a 	mov	r8,ra
 402da08:	40346e80 	call	40346e8 <_mcount>
 402da0c:	403f883a 	mov	ra,r8
 402da10:	208000cc 	andi	r2,r4,3
 402da14:	280f883a 	mov	r7,r5
 402da18:	10003426 	beq	r2,zero,402daec <memchr+0xe8>
 402da1c:	30bfffc4 	addi	r2,r6,-1
 402da20:	30001a26 	beq	r6,zero,402da8c <memchr+0x88>
 402da24:	20c00003 	ldbu	r3,0(r4)
 402da28:	29803fcc 	andi	r6,r5,255
 402da2c:	30c0051e 	bne	r6,r3,402da44 <memchr+0x40>
 402da30:	00001806 	br	402da94 <memchr+0x90>
 402da34:	10001526 	beq	r2,zero,402da8c <memchr+0x88>
 402da38:	20c00003 	ldbu	r3,0(r4)
 402da3c:	10bfffc4 	addi	r2,r2,-1
 402da40:	30c01426 	beq	r6,r3,402da94 <memchr+0x90>
 402da44:	21000044 	addi	r4,r4,1
 402da48:	20c000cc 	andi	r3,r4,3
 402da4c:	183ff91e 	bne	r3,zero,402da34 <__flash_rwdata_start+0xffff74dc>
 402da50:	020000c4 	movi	r8,3
 402da54:	40801136 	bltu	r8,r2,402da9c <memchr+0x98>
 402da58:	10000c26 	beq	r2,zero,402da8c <memchr+0x88>
 402da5c:	20c00003 	ldbu	r3,0(r4)
 402da60:	29403fcc 	andi	r5,r5,255
 402da64:	28c00b26 	beq	r5,r3,402da94 <memchr+0x90>
 402da68:	20c00044 	addi	r3,r4,1
 402da6c:	39803fcc 	andi	r6,r7,255
 402da70:	2089883a 	add	r4,r4,r2
 402da74:	00000306 	br	402da84 <memchr+0x80>
 402da78:	18c00044 	addi	r3,r3,1
 402da7c:	197fffc3 	ldbu	r5,-1(r3)
 402da80:	31400326 	beq	r6,r5,402da90 <memchr+0x8c>
 402da84:	1805883a 	mov	r2,r3
 402da88:	20fffb1e 	bne	r4,r3,402da78 <__flash_rwdata_start+0xffff7520>
 402da8c:	0005883a 	mov	r2,zero
 402da90:	f800283a 	ret
 402da94:	2005883a 	mov	r2,r4
 402da98:	f800283a 	ret
 402da9c:	28c03fcc 	andi	r3,r5,255
 402daa0:	1812923a 	slli	r9,r3,8
 402daa4:	02ffbff4 	movhi	r11,65279
 402daa8:	02a02074 	movhi	r10,32897
 402daac:	48d2b03a 	or	r9,r9,r3
 402dab0:	4806943a 	slli	r3,r9,16
 402dab4:	5affbfc4 	addi	r11,r11,-257
 402dab8:	52a02004 	addi	r10,r10,-32640
 402dabc:	48d2b03a 	or	r9,r9,r3
 402dac0:	20c00017 	ldw	r3,0(r4)
 402dac4:	48c6f03a 	xor	r3,r9,r3
 402dac8:	1acd883a 	add	r6,r3,r11
 402dacc:	00c6303a 	nor	r3,zero,r3
 402dad0:	30c6703a 	and	r3,r6,r3
 402dad4:	1a86703a 	and	r3,r3,r10
 402dad8:	183fe01e 	bne	r3,zero,402da5c <__flash_rwdata_start+0xffff7504>
 402dadc:	10bfff04 	addi	r2,r2,-4
 402dae0:	21000104 	addi	r4,r4,4
 402dae4:	40bff636 	bltu	r8,r2,402dac0 <__flash_rwdata_start+0xffff7568>
 402dae8:	003fdb06 	br	402da58 <__flash_rwdata_start+0xffff7500>
 402daec:	3005883a 	mov	r2,r6
 402daf0:	003fd706 	br	402da50 <__flash_rwdata_start+0xffff74f8>

0402daf4 <memcpy>:
 402daf4:	f811883a 	mov	r8,ra
 402daf8:	40346e80 	call	40346e8 <_mcount>
 402dafc:	403f883a 	mov	ra,r8
 402db00:	defffd04 	addi	sp,sp,-12
 402db04:	dfc00215 	stw	ra,8(sp)
 402db08:	dc400115 	stw	r17,4(sp)
 402db0c:	dc000015 	stw	r16,0(sp)
 402db10:	00c003c4 	movi	r3,15
 402db14:	2005883a 	mov	r2,r4
 402db18:	1980452e 	bgeu	r3,r6,402dc30 <memcpy+0x13c>
 402db1c:	2906b03a 	or	r3,r5,r4
 402db20:	18c000cc 	andi	r3,r3,3
 402db24:	1800441e 	bne	r3,zero,402dc38 <memcpy+0x144>
 402db28:	347ffc04 	addi	r17,r6,-16
 402db2c:	8822d13a 	srli	r17,r17,4
 402db30:	28c00104 	addi	r3,r5,4
 402db34:	23400104 	addi	r13,r4,4
 402db38:	8820913a 	slli	r16,r17,4
 402db3c:	2b000204 	addi	r12,r5,8
 402db40:	22c00204 	addi	r11,r4,8
 402db44:	84000504 	addi	r16,r16,20
 402db48:	2a800304 	addi	r10,r5,12
 402db4c:	22400304 	addi	r9,r4,12
 402db50:	2c21883a 	add	r16,r5,r16
 402db54:	2811883a 	mov	r8,r5
 402db58:	200f883a 	mov	r7,r4
 402db5c:	41000017 	ldw	r4,0(r8)
 402db60:	1fc00017 	ldw	ra,0(r3)
 402db64:	63c00017 	ldw	r15,0(r12)
 402db68:	39000015 	stw	r4,0(r7)
 402db6c:	53800017 	ldw	r14,0(r10)
 402db70:	6fc00015 	stw	ra,0(r13)
 402db74:	5bc00015 	stw	r15,0(r11)
 402db78:	4b800015 	stw	r14,0(r9)
 402db7c:	18c00404 	addi	r3,r3,16
 402db80:	39c00404 	addi	r7,r7,16
 402db84:	42000404 	addi	r8,r8,16
 402db88:	6b400404 	addi	r13,r13,16
 402db8c:	63000404 	addi	r12,r12,16
 402db90:	5ac00404 	addi	r11,r11,16
 402db94:	52800404 	addi	r10,r10,16
 402db98:	4a400404 	addi	r9,r9,16
 402db9c:	1c3fef1e 	bne	r3,r16,402db5c <__flash_rwdata_start+0xffff7604>
 402dba0:	89c00044 	addi	r7,r17,1
 402dba4:	380e913a 	slli	r7,r7,4
 402dba8:	310003cc 	andi	r4,r6,15
 402dbac:	02c000c4 	movi	r11,3
 402dbb0:	11c7883a 	add	r3,r2,r7
 402dbb4:	29cb883a 	add	r5,r5,r7
 402dbb8:	5900212e 	bgeu	r11,r4,402dc40 <memcpy+0x14c>
 402dbbc:	1813883a 	mov	r9,r3
 402dbc0:	2811883a 	mov	r8,r5
 402dbc4:	200f883a 	mov	r7,r4
 402dbc8:	42800017 	ldw	r10,0(r8)
 402dbcc:	4a400104 	addi	r9,r9,4
 402dbd0:	39ffff04 	addi	r7,r7,-4
 402dbd4:	4abfff15 	stw	r10,-4(r9)
 402dbd8:	42000104 	addi	r8,r8,4
 402dbdc:	59fffa36 	bltu	r11,r7,402dbc8 <__flash_rwdata_start+0xffff7670>
 402dbe0:	213fff04 	addi	r4,r4,-4
 402dbe4:	2008d0ba 	srli	r4,r4,2
 402dbe8:	318000cc 	andi	r6,r6,3
 402dbec:	21000044 	addi	r4,r4,1
 402dbf0:	2109883a 	add	r4,r4,r4
 402dbf4:	2109883a 	add	r4,r4,r4
 402dbf8:	1907883a 	add	r3,r3,r4
 402dbfc:	290b883a 	add	r5,r5,r4
 402dc00:	30000626 	beq	r6,zero,402dc1c <memcpy+0x128>
 402dc04:	198d883a 	add	r6,r3,r6
 402dc08:	29c00003 	ldbu	r7,0(r5)
 402dc0c:	18c00044 	addi	r3,r3,1
 402dc10:	29400044 	addi	r5,r5,1
 402dc14:	19ffffc5 	stb	r7,-1(r3)
 402dc18:	19bffb1e 	bne	r3,r6,402dc08 <__flash_rwdata_start+0xffff76b0>
 402dc1c:	dfc00217 	ldw	ra,8(sp)
 402dc20:	dc400117 	ldw	r17,4(sp)
 402dc24:	dc000017 	ldw	r16,0(sp)
 402dc28:	dec00304 	addi	sp,sp,12
 402dc2c:	f800283a 	ret
 402dc30:	2007883a 	mov	r3,r4
 402dc34:	003ff206 	br	402dc00 <__flash_rwdata_start+0xffff76a8>
 402dc38:	2007883a 	mov	r3,r4
 402dc3c:	003ff106 	br	402dc04 <__flash_rwdata_start+0xffff76ac>
 402dc40:	200d883a 	mov	r6,r4
 402dc44:	003fee06 	br	402dc00 <__flash_rwdata_start+0xffff76a8>

0402dc48 <memmove>:
 402dc48:	f811883a 	mov	r8,ra
 402dc4c:	40346e80 	call	40346e8 <_mcount>
 402dc50:	403f883a 	mov	ra,r8
 402dc54:	2005883a 	mov	r2,r4
 402dc58:	29000b2e 	bgeu	r5,r4,402dc88 <memmove+0x40>
 402dc5c:	298f883a 	add	r7,r5,r6
 402dc60:	21c0092e 	bgeu	r4,r7,402dc88 <memmove+0x40>
 402dc64:	2187883a 	add	r3,r4,r6
 402dc68:	198bc83a 	sub	r5,r3,r6
 402dc6c:	30000526 	beq	r6,zero,402dc84 <memmove+0x3c>
 402dc70:	39ffffc4 	addi	r7,r7,-1
 402dc74:	39000003 	ldbu	r4,0(r7)
 402dc78:	18ffffc4 	addi	r3,r3,-1
 402dc7c:	19000005 	stb	r4,0(r3)
 402dc80:	28fffb1e 	bne	r5,r3,402dc70 <__flash_rwdata_start+0xffff7718>
 402dc84:	f800283a 	ret
 402dc88:	00c003c4 	movi	r3,15
 402dc8c:	1980412e 	bgeu	r3,r6,402dd94 <memmove+0x14c>
 402dc90:	2886b03a 	or	r3,r5,r2
 402dc94:	18c000cc 	andi	r3,r3,3
 402dc98:	1800401e 	bne	r3,zero,402dd9c <memmove+0x154>
 402dc9c:	33fffc04 	addi	r15,r6,-16
 402dca0:	781ed13a 	srli	r15,r15,4
 402dca4:	28c00104 	addi	r3,r5,4
 402dca8:	13400104 	addi	r13,r2,4
 402dcac:	781c913a 	slli	r14,r15,4
 402dcb0:	2b000204 	addi	r12,r5,8
 402dcb4:	12c00204 	addi	r11,r2,8
 402dcb8:	73800504 	addi	r14,r14,20
 402dcbc:	2a800304 	addi	r10,r5,12
 402dcc0:	12400304 	addi	r9,r2,12
 402dcc4:	2b9d883a 	add	r14,r5,r14
 402dcc8:	2811883a 	mov	r8,r5
 402dccc:	100f883a 	mov	r7,r2
 402dcd0:	41000017 	ldw	r4,0(r8)
 402dcd4:	39c00404 	addi	r7,r7,16
 402dcd8:	18c00404 	addi	r3,r3,16
 402dcdc:	393ffc15 	stw	r4,-16(r7)
 402dce0:	193ffc17 	ldw	r4,-16(r3)
 402dce4:	6b400404 	addi	r13,r13,16
 402dce8:	5ac00404 	addi	r11,r11,16
 402dcec:	693ffc15 	stw	r4,-16(r13)
 402dcf0:	61000017 	ldw	r4,0(r12)
 402dcf4:	4a400404 	addi	r9,r9,16
 402dcf8:	42000404 	addi	r8,r8,16
 402dcfc:	593ffc15 	stw	r4,-16(r11)
 402dd00:	51000017 	ldw	r4,0(r10)
 402dd04:	63000404 	addi	r12,r12,16
 402dd08:	52800404 	addi	r10,r10,16
 402dd0c:	493ffc15 	stw	r4,-16(r9)
 402dd10:	1bbfef1e 	bne	r3,r14,402dcd0 <__flash_rwdata_start+0xffff7778>
 402dd14:	79000044 	addi	r4,r15,1
 402dd18:	2008913a 	slli	r4,r4,4
 402dd1c:	328003cc 	andi	r10,r6,15
 402dd20:	02c000c4 	movi	r11,3
 402dd24:	1107883a 	add	r3,r2,r4
 402dd28:	290b883a 	add	r5,r5,r4
 402dd2c:	5a801d2e 	bgeu	r11,r10,402dda4 <memmove+0x15c>
 402dd30:	1813883a 	mov	r9,r3
 402dd34:	2811883a 	mov	r8,r5
 402dd38:	500f883a 	mov	r7,r10
 402dd3c:	41000017 	ldw	r4,0(r8)
 402dd40:	4a400104 	addi	r9,r9,4
 402dd44:	39ffff04 	addi	r7,r7,-4
 402dd48:	493fff15 	stw	r4,-4(r9)
 402dd4c:	42000104 	addi	r8,r8,4
 402dd50:	59fffa36 	bltu	r11,r7,402dd3c <__flash_rwdata_start+0xffff77e4>
 402dd54:	513fff04 	addi	r4,r10,-4
 402dd58:	2008d0ba 	srli	r4,r4,2
 402dd5c:	318000cc 	andi	r6,r6,3
 402dd60:	21000044 	addi	r4,r4,1
 402dd64:	2109883a 	add	r4,r4,r4
 402dd68:	2109883a 	add	r4,r4,r4
 402dd6c:	1907883a 	add	r3,r3,r4
 402dd70:	290b883a 	add	r5,r5,r4
 402dd74:	303fc326 	beq	r6,zero,402dc84 <__flash_rwdata_start+0xffff772c>
 402dd78:	198d883a 	add	r6,r3,r6
 402dd7c:	29c00003 	ldbu	r7,0(r5)
 402dd80:	18c00044 	addi	r3,r3,1
 402dd84:	29400044 	addi	r5,r5,1
 402dd88:	19ffffc5 	stb	r7,-1(r3)
 402dd8c:	19bffb1e 	bne	r3,r6,402dd7c <__flash_rwdata_start+0xffff7824>
 402dd90:	f800283a 	ret
 402dd94:	1007883a 	mov	r3,r2
 402dd98:	003ff606 	br	402dd74 <__flash_rwdata_start+0xffff781c>
 402dd9c:	1007883a 	mov	r3,r2
 402dda0:	003ff506 	br	402dd78 <__flash_rwdata_start+0xffff7820>
 402dda4:	500d883a 	mov	r6,r10
 402dda8:	003ff206 	br	402dd74 <__flash_rwdata_start+0xffff781c>

0402ddac <_Balloc>:
 402ddac:	f811883a 	mov	r8,ra
 402ddb0:	40346e80 	call	40346e8 <_mcount>
 402ddb4:	403f883a 	mov	ra,r8
 402ddb8:	defffc04 	addi	sp,sp,-16
 402ddbc:	dfc00315 	stw	ra,12(sp)
 402ddc0:	dc800215 	stw	r18,8(sp)
 402ddc4:	dc400115 	stw	r17,4(sp)
 402ddc8:	dc000015 	stw	r16,0(sp)
 402ddcc:	20801317 	ldw	r2,76(r4)
 402ddd0:	2023883a 	mov	r17,r4
 402ddd4:	2821883a 	mov	r16,r5
 402ddd8:	10000f26 	beq	r2,zero,402de18 <_Balloc+0x6c>
 402dddc:	8407883a 	add	r3,r16,r16
 402dde0:	18c7883a 	add	r3,r3,r3
 402dde4:	10c7883a 	add	r3,r2,r3
 402dde8:	18800017 	ldw	r2,0(r3)
 402ddec:	10001126 	beq	r2,zero,402de34 <_Balloc+0x88>
 402ddf0:	11000017 	ldw	r4,0(r2)
 402ddf4:	19000015 	stw	r4,0(r3)
 402ddf8:	10000415 	stw	zero,16(r2)
 402ddfc:	10000315 	stw	zero,12(r2)
 402de00:	dfc00317 	ldw	ra,12(sp)
 402de04:	dc800217 	ldw	r18,8(sp)
 402de08:	dc400117 	ldw	r17,4(sp)
 402de0c:	dc000017 	ldw	r16,0(sp)
 402de10:	dec00404 	addi	sp,sp,16
 402de14:	f800283a 	ret
 402de18:	01800844 	movi	r6,33
 402de1c:	01400104 	movi	r5,4
 402de20:	403102c0 	call	403102c <_calloc_r>
 402de24:	88801315 	stw	r2,76(r17)
 402de28:	103fec1e 	bne	r2,zero,402dddc <__flash_rwdata_start+0xffff7884>
 402de2c:	0005883a 	mov	r2,zero
 402de30:	003ff306 	br	402de00 <__flash_rwdata_start+0xffff78a8>
 402de34:	01400044 	movi	r5,1
 402de38:	2c24983a 	sll	r18,r5,r16
 402de3c:	8809883a 	mov	r4,r17
 402de40:	91800144 	addi	r6,r18,5
 402de44:	318d883a 	add	r6,r6,r6
 402de48:	318d883a 	add	r6,r6,r6
 402de4c:	403102c0 	call	403102c <_calloc_r>
 402de50:	103ff626 	beq	r2,zero,402de2c <__flash_rwdata_start+0xffff78d4>
 402de54:	14000115 	stw	r16,4(r2)
 402de58:	14800215 	stw	r18,8(r2)
 402de5c:	003fe606 	br	402ddf8 <__flash_rwdata_start+0xffff78a0>

0402de60 <_Bfree>:
 402de60:	f811883a 	mov	r8,ra
 402de64:	40346e80 	call	40346e8 <_mcount>
 402de68:	403f883a 	mov	ra,r8
 402de6c:	28000826 	beq	r5,zero,402de90 <_Bfree+0x30>
 402de70:	28c00117 	ldw	r3,4(r5)
 402de74:	20801317 	ldw	r2,76(r4)
 402de78:	18c7883a 	add	r3,r3,r3
 402de7c:	18c7883a 	add	r3,r3,r3
 402de80:	10c5883a 	add	r2,r2,r3
 402de84:	10c00017 	ldw	r3,0(r2)
 402de88:	28c00015 	stw	r3,0(r5)
 402de8c:	11400015 	stw	r5,0(r2)
 402de90:	f800283a 	ret

0402de94 <__multadd>:
 402de94:	f811883a 	mov	r8,ra
 402de98:	40346e80 	call	40346e8 <_mcount>
 402de9c:	403f883a 	mov	ra,r8
 402dea0:	defffa04 	addi	sp,sp,-24
 402dea4:	dfc00515 	stw	ra,20(sp)
 402dea8:	dcc00415 	stw	r19,16(sp)
 402deac:	dc800315 	stw	r18,12(sp)
 402deb0:	dc400215 	stw	r17,8(sp)
 402deb4:	dc000115 	stw	r16,4(sp)
 402deb8:	0011883a 	mov	r8,zero
 402debc:	2823883a 	mov	r17,r5
 402dec0:	2c000417 	ldw	r16,16(r5)
 402dec4:	2025883a 	mov	r18,r4
 402dec8:	29400504 	addi	r5,r5,20
 402decc:	28c00017 	ldw	r3,0(r5)
 402ded0:	29400104 	addi	r5,r5,4
 402ded4:	42000044 	addi	r8,r8,1
 402ded8:	18bfffcc 	andi	r2,r3,65535
 402dedc:	1185383a 	mul	r2,r2,r6
 402dee0:	1806d43a 	srli	r3,r3,16
 402dee4:	11cf883a 	add	r7,r2,r7
 402dee8:	3808d43a 	srli	r4,r7,16
 402deec:	1987383a 	mul	r3,r3,r6
 402def0:	38bfffcc 	andi	r2,r7,65535
 402def4:	1907883a 	add	r3,r3,r4
 402def8:	1808943a 	slli	r4,r3,16
 402defc:	180ed43a 	srli	r7,r3,16
 402df00:	2085883a 	add	r2,r4,r2
 402df04:	28bfff15 	stw	r2,-4(r5)
 402df08:	443ff016 	blt	r8,r16,402decc <__flash_rwdata_start+0xffff7974>
 402df0c:	38000926 	beq	r7,zero,402df34 <__multadd+0xa0>
 402df10:	88800217 	ldw	r2,8(r17)
 402df14:	80800f0e 	bge	r16,r2,402df54 <__multadd+0xc0>
 402df18:	80800144 	addi	r2,r16,5
 402df1c:	1085883a 	add	r2,r2,r2
 402df20:	1085883a 	add	r2,r2,r2
 402df24:	8885883a 	add	r2,r17,r2
 402df28:	11c00015 	stw	r7,0(r2)
 402df2c:	84000044 	addi	r16,r16,1
 402df30:	8c000415 	stw	r16,16(r17)
 402df34:	8805883a 	mov	r2,r17
 402df38:	dfc00517 	ldw	ra,20(sp)
 402df3c:	dcc00417 	ldw	r19,16(sp)
 402df40:	dc800317 	ldw	r18,12(sp)
 402df44:	dc400217 	ldw	r17,8(sp)
 402df48:	dc000117 	ldw	r16,4(sp)
 402df4c:	dec00604 	addi	sp,sp,24
 402df50:	f800283a 	ret
 402df54:	89400117 	ldw	r5,4(r17)
 402df58:	9009883a 	mov	r4,r18
 402df5c:	d9c00015 	stw	r7,0(sp)
 402df60:	29400044 	addi	r5,r5,1
 402df64:	402ddac0 	call	402ddac <_Balloc>
 402df68:	89800417 	ldw	r6,16(r17)
 402df6c:	89400304 	addi	r5,r17,12
 402df70:	11000304 	addi	r4,r2,12
 402df74:	31800084 	addi	r6,r6,2
 402df78:	318d883a 	add	r6,r6,r6
 402df7c:	318d883a 	add	r6,r6,r6
 402df80:	1027883a 	mov	r19,r2
 402df84:	402daf40 	call	402daf4 <memcpy>
 402df88:	d9c00017 	ldw	r7,0(sp)
 402df8c:	88000a26 	beq	r17,zero,402dfb8 <__multadd+0x124>
 402df90:	88c00117 	ldw	r3,4(r17)
 402df94:	90801317 	ldw	r2,76(r18)
 402df98:	18c7883a 	add	r3,r3,r3
 402df9c:	18c7883a 	add	r3,r3,r3
 402dfa0:	10c5883a 	add	r2,r2,r3
 402dfa4:	10c00017 	ldw	r3,0(r2)
 402dfa8:	88c00015 	stw	r3,0(r17)
 402dfac:	14400015 	stw	r17,0(r2)
 402dfb0:	9823883a 	mov	r17,r19
 402dfb4:	003fd806 	br	402df18 <__flash_rwdata_start+0xffff79c0>
 402dfb8:	9823883a 	mov	r17,r19
 402dfbc:	003fd606 	br	402df18 <__flash_rwdata_start+0xffff79c0>

0402dfc0 <__s2b>:
 402dfc0:	f811883a 	mov	r8,ra
 402dfc4:	40346e80 	call	40346e8 <_mcount>
 402dfc8:	403f883a 	mov	ra,r8
 402dfcc:	defff904 	addi	sp,sp,-28
 402dfd0:	dfc00615 	stw	ra,24(sp)
 402dfd4:	dd400515 	stw	r21,20(sp)
 402dfd8:	dd000415 	stw	r20,16(sp)
 402dfdc:	dcc00315 	stw	r19,12(sp)
 402dfe0:	dc800215 	stw	r18,8(sp)
 402dfe4:	dc400115 	stw	r17,4(sp)
 402dfe8:	dc000015 	stw	r16,0(sp)
 402dfec:	2023883a 	mov	r17,r4
 402dff0:	2821883a 	mov	r16,r5
 402dff4:	39000204 	addi	r4,r7,8
 402dff8:	01400244 	movi	r5,9
 402dffc:	3825883a 	mov	r18,r7
 402e000:	3027883a 	mov	r19,r6
 402e004:	4024bd40 	call	4024bd4 <__divsi3>
 402e008:	00c00044 	movi	r3,1
 402e00c:	000b883a 	mov	r5,zero
 402e010:	1880030e 	bge	r3,r2,402e020 <__s2b+0x60>
 402e014:	18c7883a 	add	r3,r3,r3
 402e018:	29400044 	addi	r5,r5,1
 402e01c:	18bffd16 	blt	r3,r2,402e014 <__flash_rwdata_start+0xffff7abc>
 402e020:	8809883a 	mov	r4,r17
 402e024:	402ddac0 	call	402ddac <_Balloc>
 402e028:	d8c00717 	ldw	r3,28(sp)
 402e02c:	10c00515 	stw	r3,20(r2)
 402e030:	00c00044 	movi	r3,1
 402e034:	10c00415 	stw	r3,16(r2)
 402e038:	00c00244 	movi	r3,9
 402e03c:	1cc0210e 	bge	r3,r19,402e0c4 <__s2b+0x104>
 402e040:	80eb883a 	add	r21,r16,r3
 402e044:	a829883a 	mov	r20,r21
 402e048:	84e1883a 	add	r16,r16,r19
 402e04c:	a1c00007 	ldb	r7,0(r20)
 402e050:	01800284 	movi	r6,10
 402e054:	a5000044 	addi	r20,r20,1
 402e058:	100b883a 	mov	r5,r2
 402e05c:	39fff404 	addi	r7,r7,-48
 402e060:	8809883a 	mov	r4,r17
 402e064:	402de940 	call	402de94 <__multadd>
 402e068:	a43ff81e 	bne	r20,r16,402e04c <__flash_rwdata_start+0xffff7af4>
 402e06c:	ace1883a 	add	r16,r21,r19
 402e070:	843ffe04 	addi	r16,r16,-8
 402e074:	9c800a0e 	bge	r19,r18,402e0a0 <__s2b+0xe0>
 402e078:	94e5c83a 	sub	r18,r18,r19
 402e07c:	84a5883a 	add	r18,r16,r18
 402e080:	81c00007 	ldb	r7,0(r16)
 402e084:	01800284 	movi	r6,10
 402e088:	84000044 	addi	r16,r16,1
 402e08c:	100b883a 	mov	r5,r2
 402e090:	39fff404 	addi	r7,r7,-48
 402e094:	8809883a 	mov	r4,r17
 402e098:	402de940 	call	402de94 <__multadd>
 402e09c:	84bff81e 	bne	r16,r18,402e080 <__flash_rwdata_start+0xffff7b28>
 402e0a0:	dfc00617 	ldw	ra,24(sp)
 402e0a4:	dd400517 	ldw	r21,20(sp)
 402e0a8:	dd000417 	ldw	r20,16(sp)
 402e0ac:	dcc00317 	ldw	r19,12(sp)
 402e0b0:	dc800217 	ldw	r18,8(sp)
 402e0b4:	dc400117 	ldw	r17,4(sp)
 402e0b8:	dc000017 	ldw	r16,0(sp)
 402e0bc:	dec00704 	addi	sp,sp,28
 402e0c0:	f800283a 	ret
 402e0c4:	84000284 	addi	r16,r16,10
 402e0c8:	1827883a 	mov	r19,r3
 402e0cc:	003fe906 	br	402e074 <__flash_rwdata_start+0xffff7b1c>

0402e0d0 <__hi0bits>:
 402e0d0:	f811883a 	mov	r8,ra
 402e0d4:	40346e80 	call	40346e8 <_mcount>
 402e0d8:	403f883a 	mov	ra,r8
 402e0dc:	20bfffec 	andhi	r2,r4,65535
 402e0e0:	1000141e 	bne	r2,zero,402e134 <__hi0bits+0x64>
 402e0e4:	2008943a 	slli	r4,r4,16
 402e0e8:	00800404 	movi	r2,16
 402e0ec:	20ffc02c 	andhi	r3,r4,65280
 402e0f0:	1800021e 	bne	r3,zero,402e0fc <__hi0bits+0x2c>
 402e0f4:	2008923a 	slli	r4,r4,8
 402e0f8:	10800204 	addi	r2,r2,8
 402e0fc:	20fc002c 	andhi	r3,r4,61440
 402e100:	1800021e 	bne	r3,zero,402e10c <__hi0bits+0x3c>
 402e104:	2008913a 	slli	r4,r4,4
 402e108:	10800104 	addi	r2,r2,4
 402e10c:	20f0002c 	andhi	r3,r4,49152
 402e110:	1800031e 	bne	r3,zero,402e120 <__hi0bits+0x50>
 402e114:	2109883a 	add	r4,r4,r4
 402e118:	10800084 	addi	r2,r2,2
 402e11c:	2109883a 	add	r4,r4,r4
 402e120:	20000316 	blt	r4,zero,402e130 <__hi0bits+0x60>
 402e124:	2110002c 	andhi	r4,r4,16384
 402e128:	2000041e 	bne	r4,zero,402e13c <__hi0bits+0x6c>
 402e12c:	00800804 	movi	r2,32
 402e130:	f800283a 	ret
 402e134:	0005883a 	mov	r2,zero
 402e138:	003fec06 	br	402e0ec <__flash_rwdata_start+0xffff7b94>
 402e13c:	10800044 	addi	r2,r2,1
 402e140:	f800283a 	ret

0402e144 <__lo0bits>:
 402e144:	f811883a 	mov	r8,ra
 402e148:	40346e80 	call	40346e8 <_mcount>
 402e14c:	403f883a 	mov	ra,r8
 402e150:	20c00017 	ldw	r3,0(r4)
 402e154:	188001cc 	andi	r2,r3,7
 402e158:	10000826 	beq	r2,zero,402e17c <__lo0bits+0x38>
 402e15c:	1880004c 	andi	r2,r3,1
 402e160:	1000211e 	bne	r2,zero,402e1e8 <__lo0bits+0xa4>
 402e164:	1880008c 	andi	r2,r3,2
 402e168:	1000211e 	bne	r2,zero,402e1f0 <__lo0bits+0xac>
 402e16c:	1806d0ba 	srli	r3,r3,2
 402e170:	00800084 	movi	r2,2
 402e174:	20c00015 	stw	r3,0(r4)
 402e178:	f800283a 	ret
 402e17c:	18bfffcc 	andi	r2,r3,65535
 402e180:	10001326 	beq	r2,zero,402e1d0 <__lo0bits+0x8c>
 402e184:	0005883a 	mov	r2,zero
 402e188:	19403fcc 	andi	r5,r3,255
 402e18c:	2800021e 	bne	r5,zero,402e198 <__lo0bits+0x54>
 402e190:	1806d23a 	srli	r3,r3,8
 402e194:	10800204 	addi	r2,r2,8
 402e198:	194003cc 	andi	r5,r3,15
 402e19c:	2800021e 	bne	r5,zero,402e1a8 <__lo0bits+0x64>
 402e1a0:	1806d13a 	srli	r3,r3,4
 402e1a4:	10800104 	addi	r2,r2,4
 402e1a8:	194000cc 	andi	r5,r3,3
 402e1ac:	2800021e 	bne	r5,zero,402e1b8 <__lo0bits+0x74>
 402e1b0:	1806d0ba 	srli	r3,r3,2
 402e1b4:	10800084 	addi	r2,r2,2
 402e1b8:	1940004c 	andi	r5,r3,1
 402e1bc:	2800081e 	bne	r5,zero,402e1e0 <__lo0bits+0x9c>
 402e1c0:	1806d07a 	srli	r3,r3,1
 402e1c4:	1800051e 	bne	r3,zero,402e1dc <__lo0bits+0x98>
 402e1c8:	00800804 	movi	r2,32
 402e1cc:	f800283a 	ret
 402e1d0:	1806d43a 	srli	r3,r3,16
 402e1d4:	00800404 	movi	r2,16
 402e1d8:	003feb06 	br	402e188 <__flash_rwdata_start+0xffff7c30>
 402e1dc:	10800044 	addi	r2,r2,1
 402e1e0:	20c00015 	stw	r3,0(r4)
 402e1e4:	f800283a 	ret
 402e1e8:	0005883a 	mov	r2,zero
 402e1ec:	f800283a 	ret
 402e1f0:	1806d07a 	srli	r3,r3,1
 402e1f4:	00800044 	movi	r2,1
 402e1f8:	20c00015 	stw	r3,0(r4)
 402e1fc:	f800283a 	ret

0402e200 <__i2b>:
 402e200:	f811883a 	mov	r8,ra
 402e204:	40346e80 	call	40346e8 <_mcount>
 402e208:	403f883a 	mov	ra,r8
 402e20c:	defffd04 	addi	sp,sp,-12
 402e210:	dfc00215 	stw	ra,8(sp)
 402e214:	dc400115 	stw	r17,4(sp)
 402e218:	dc000015 	stw	r16,0(sp)
 402e21c:	04000044 	movi	r16,1
 402e220:	2823883a 	mov	r17,r5
 402e224:	800b883a 	mov	r5,r16
 402e228:	402ddac0 	call	402ddac <_Balloc>
 402e22c:	14400515 	stw	r17,20(r2)
 402e230:	14000415 	stw	r16,16(r2)
 402e234:	dfc00217 	ldw	ra,8(sp)
 402e238:	dc400117 	ldw	r17,4(sp)
 402e23c:	dc000017 	ldw	r16,0(sp)
 402e240:	dec00304 	addi	sp,sp,12
 402e244:	f800283a 	ret

0402e248 <__multiply>:
 402e248:	f811883a 	mov	r8,ra
 402e24c:	40346e80 	call	40346e8 <_mcount>
 402e250:	403f883a 	mov	ra,r8
 402e254:	defffa04 	addi	sp,sp,-24
 402e258:	dfc00515 	stw	ra,20(sp)
 402e25c:	dd000415 	stw	r20,16(sp)
 402e260:	dcc00315 	stw	r19,12(sp)
 402e264:	dc800215 	stw	r18,8(sp)
 402e268:	dc400115 	stw	r17,4(sp)
 402e26c:	dc000015 	stw	r16,0(sp)
 402e270:	2c800417 	ldw	r18,16(r5)
 402e274:	34c00417 	ldw	r19,16(r6)
 402e278:	2829883a 	mov	r20,r5
 402e27c:	3023883a 	mov	r17,r6
 402e280:	94c0050e 	bge	r18,r19,402e298 <__multiply+0x50>
 402e284:	9007883a 	mov	r3,r18
 402e288:	3029883a 	mov	r20,r6
 402e28c:	9825883a 	mov	r18,r19
 402e290:	2823883a 	mov	r17,r5
 402e294:	1827883a 	mov	r19,r3
 402e298:	a0800217 	ldw	r2,8(r20)
 402e29c:	94e1883a 	add	r16,r18,r19
 402e2a0:	a1400117 	ldw	r5,4(r20)
 402e2a4:	1400010e 	bge	r2,r16,402e2ac <__multiply+0x64>
 402e2a8:	29400044 	addi	r5,r5,1
 402e2ac:	402ddac0 	call	402ddac <_Balloc>
 402e2b0:	8415883a 	add	r10,r16,r16
 402e2b4:	12c00504 	addi	r11,r2,20
 402e2b8:	5295883a 	add	r10,r10,r10
 402e2bc:	5a95883a 	add	r10,r11,r10
 402e2c0:	5807883a 	mov	r3,r11
 402e2c4:	5a80032e 	bgeu	r11,r10,402e2d4 <__multiply+0x8c>
 402e2c8:	18000015 	stw	zero,0(r3)
 402e2cc:	18c00104 	addi	r3,r3,4
 402e2d0:	1abffd36 	bltu	r3,r10,402e2c8 <__flash_rwdata_start+0xffff7d70>
 402e2d4:	9ce7883a 	add	r19,r19,r19
 402e2d8:	94a5883a 	add	r18,r18,r18
 402e2dc:	89800504 	addi	r6,r17,20
 402e2e0:	9ce7883a 	add	r19,r19,r19
 402e2e4:	a3400504 	addi	r13,r20,20
 402e2e8:	94a5883a 	add	r18,r18,r18
 402e2ec:	34d9883a 	add	r12,r6,r19
 402e2f0:	6c93883a 	add	r9,r13,r18
 402e2f4:	3300422e 	bgeu	r6,r12,402e400 <__multiply+0x1b8>
 402e2f8:	37c00017 	ldw	ra,0(r6)
 402e2fc:	fbffffcc 	andi	r15,ra,65535
 402e300:	78001b26 	beq	r15,zero,402e370 <__multiply+0x128>
 402e304:	5811883a 	mov	r8,r11
 402e308:	681d883a 	mov	r14,r13
 402e30c:	000f883a 	mov	r7,zero
 402e310:	71000017 	ldw	r4,0(r14)
 402e314:	40c00017 	ldw	r3,0(r8)
 402e318:	73800104 	addi	r14,r14,4
 402e31c:	217fffcc 	andi	r5,r4,65535
 402e320:	2bcb383a 	mul	r5,r5,r15
 402e324:	2008d43a 	srli	r4,r4,16
 402e328:	1c7fffcc 	andi	r17,r3,65535
 402e32c:	2c4b883a 	add	r5,r5,r17
 402e330:	29cb883a 	add	r5,r5,r7
 402e334:	23c9383a 	mul	r4,r4,r15
 402e338:	1806d43a 	srli	r3,r3,16
 402e33c:	280ed43a 	srli	r7,r5,16
 402e340:	297fffcc 	andi	r5,r5,65535
 402e344:	20c7883a 	add	r3,r4,r3
 402e348:	19c7883a 	add	r3,r3,r7
 402e34c:	1808943a 	slli	r4,r3,16
 402e350:	4023883a 	mov	r17,r8
 402e354:	180ed43a 	srli	r7,r3,16
 402e358:	214ab03a 	or	r5,r4,r5
 402e35c:	41400015 	stw	r5,0(r8)
 402e360:	42000104 	addi	r8,r8,4
 402e364:	727fea36 	bltu	r14,r9,402e310 <__flash_rwdata_start+0xffff7db8>
 402e368:	89c00115 	stw	r7,4(r17)
 402e36c:	37c00017 	ldw	ra,0(r6)
 402e370:	f83ed43a 	srli	ra,ra,16
 402e374:	f8001f26 	beq	ra,zero,402e3f4 <__multiply+0x1ac>
 402e378:	58c00017 	ldw	r3,0(r11)
 402e37c:	681d883a 	mov	r14,r13
 402e380:	581f883a 	mov	r15,r11
 402e384:	1811883a 	mov	r8,r3
 402e388:	5825883a 	mov	r18,r11
 402e38c:	000f883a 	mov	r7,zero
 402e390:	00000106 	br	402e398 <__multiply+0x150>
 402e394:	8825883a 	mov	r18,r17
 402e398:	7140000b 	ldhu	r5,0(r14)
 402e39c:	4010d43a 	srli	r8,r8,16
 402e3a0:	193fffcc 	andi	r4,r3,65535
 402e3a4:	2fcb383a 	mul	r5,r5,ra
 402e3a8:	7bc00104 	addi	r15,r15,4
 402e3ac:	73800104 	addi	r14,r14,4
 402e3b0:	2a0b883a 	add	r5,r5,r8
 402e3b4:	29cb883a 	add	r5,r5,r7
 402e3b8:	2806943a 	slli	r3,r5,16
 402e3bc:	94400104 	addi	r17,r18,4
 402e3c0:	280ad43a 	srli	r5,r5,16
 402e3c4:	1908b03a 	or	r4,r3,r4
 402e3c8:	793fff15 	stw	r4,-4(r15)
 402e3cc:	70ffff17 	ldw	r3,-4(r14)
 402e3d0:	8a000017 	ldw	r8,0(r17)
 402e3d4:	1806d43a 	srli	r3,r3,16
 402e3d8:	413fffcc 	andi	r4,r8,65535
 402e3dc:	1fc7383a 	mul	r3,r3,ra
 402e3e0:	1907883a 	add	r3,r3,r4
 402e3e4:	1947883a 	add	r3,r3,r5
 402e3e8:	180ed43a 	srli	r7,r3,16
 402e3ec:	727fe936 	bltu	r14,r9,402e394 <__flash_rwdata_start+0xffff7e3c>
 402e3f0:	90c00115 	stw	r3,4(r18)
 402e3f4:	31800104 	addi	r6,r6,4
 402e3f8:	5ac00104 	addi	r11,r11,4
 402e3fc:	333fbe36 	bltu	r6,r12,402e2f8 <__flash_rwdata_start+0xffff7da0>
 402e400:	0400090e 	bge	zero,r16,402e428 <__multiply+0x1e0>
 402e404:	50ffff17 	ldw	r3,-4(r10)
 402e408:	52bfff04 	addi	r10,r10,-4
 402e40c:	18000326 	beq	r3,zero,402e41c <__multiply+0x1d4>
 402e410:	00000506 	br	402e428 <__multiply+0x1e0>
 402e414:	50c00017 	ldw	r3,0(r10)
 402e418:	1800031e 	bne	r3,zero,402e428 <__multiply+0x1e0>
 402e41c:	843fffc4 	addi	r16,r16,-1
 402e420:	52bfff04 	addi	r10,r10,-4
 402e424:	803ffb1e 	bne	r16,zero,402e414 <__flash_rwdata_start+0xffff7ebc>
 402e428:	14000415 	stw	r16,16(r2)
 402e42c:	dfc00517 	ldw	ra,20(sp)
 402e430:	dd000417 	ldw	r20,16(sp)
 402e434:	dcc00317 	ldw	r19,12(sp)
 402e438:	dc800217 	ldw	r18,8(sp)
 402e43c:	dc400117 	ldw	r17,4(sp)
 402e440:	dc000017 	ldw	r16,0(sp)
 402e444:	dec00604 	addi	sp,sp,24
 402e448:	f800283a 	ret

0402e44c <__pow5mult>:
 402e44c:	f811883a 	mov	r8,ra
 402e450:	40346e80 	call	40346e8 <_mcount>
 402e454:	403f883a 	mov	ra,r8
 402e458:	defffa04 	addi	sp,sp,-24
 402e45c:	dfc00515 	stw	ra,20(sp)
 402e460:	dd000415 	stw	r20,16(sp)
 402e464:	dcc00315 	stw	r19,12(sp)
 402e468:	dc800215 	stw	r18,8(sp)
 402e46c:	dc400115 	stw	r17,4(sp)
 402e470:	dc000015 	stw	r16,0(sp)
 402e474:	308000cc 	andi	r2,r6,3
 402e478:	3021883a 	mov	r16,r6
 402e47c:	2027883a 	mov	r19,r4
 402e480:	10002f1e 	bne	r2,zero,402e540 <__pow5mult+0xf4>
 402e484:	2825883a 	mov	r18,r5
 402e488:	8021d0ba 	srai	r16,r16,2
 402e48c:	80001a26 	beq	r16,zero,402e4f8 <__pow5mult+0xac>
 402e490:	9c401217 	ldw	r17,72(r19)
 402e494:	8800061e 	bne	r17,zero,402e4b0 <__pow5mult+0x64>
 402e498:	00003406 	br	402e56c <__pow5mult+0x120>
 402e49c:	8021d07a 	srai	r16,r16,1
 402e4a0:	80001526 	beq	r16,zero,402e4f8 <__pow5mult+0xac>
 402e4a4:	88800017 	ldw	r2,0(r17)
 402e4a8:	10001c26 	beq	r2,zero,402e51c <__pow5mult+0xd0>
 402e4ac:	1023883a 	mov	r17,r2
 402e4b0:	8080004c 	andi	r2,r16,1
 402e4b4:	103ff926 	beq	r2,zero,402e49c <__flash_rwdata_start+0xffff7f44>
 402e4b8:	880d883a 	mov	r6,r17
 402e4bc:	900b883a 	mov	r5,r18
 402e4c0:	9809883a 	mov	r4,r19
 402e4c4:	402e2480 	call	402e248 <__multiply>
 402e4c8:	90001b26 	beq	r18,zero,402e538 <__pow5mult+0xec>
 402e4cc:	91000117 	ldw	r4,4(r18)
 402e4d0:	98c01317 	ldw	r3,76(r19)
 402e4d4:	8021d07a 	srai	r16,r16,1
 402e4d8:	2109883a 	add	r4,r4,r4
 402e4dc:	2109883a 	add	r4,r4,r4
 402e4e0:	1907883a 	add	r3,r3,r4
 402e4e4:	19000017 	ldw	r4,0(r3)
 402e4e8:	91000015 	stw	r4,0(r18)
 402e4ec:	1c800015 	stw	r18,0(r3)
 402e4f0:	1025883a 	mov	r18,r2
 402e4f4:	803feb1e 	bne	r16,zero,402e4a4 <__flash_rwdata_start+0xffff7f4c>
 402e4f8:	9005883a 	mov	r2,r18
 402e4fc:	dfc00517 	ldw	ra,20(sp)
 402e500:	dd000417 	ldw	r20,16(sp)
 402e504:	dcc00317 	ldw	r19,12(sp)
 402e508:	dc800217 	ldw	r18,8(sp)
 402e50c:	dc400117 	ldw	r17,4(sp)
 402e510:	dc000017 	ldw	r16,0(sp)
 402e514:	dec00604 	addi	sp,sp,24
 402e518:	f800283a 	ret
 402e51c:	880d883a 	mov	r6,r17
 402e520:	880b883a 	mov	r5,r17
 402e524:	9809883a 	mov	r4,r19
 402e528:	402e2480 	call	402e248 <__multiply>
 402e52c:	88800015 	stw	r2,0(r17)
 402e530:	10000015 	stw	zero,0(r2)
 402e534:	003fdd06 	br	402e4ac <__flash_rwdata_start+0xffff7f54>
 402e538:	1025883a 	mov	r18,r2
 402e53c:	003fd706 	br	402e49c <__flash_rwdata_start+0xffff7f44>
 402e540:	10bfffc4 	addi	r2,r2,-1
 402e544:	1085883a 	add	r2,r2,r2
 402e548:	00c00034 	movhi	r3,0
 402e54c:	18c14a04 	addi	r3,r3,1320
 402e550:	1085883a 	add	r2,r2,r2
 402e554:	1885883a 	add	r2,r3,r2
 402e558:	11800017 	ldw	r6,0(r2)
 402e55c:	000f883a 	mov	r7,zero
 402e560:	402de940 	call	402de94 <__multadd>
 402e564:	1025883a 	mov	r18,r2
 402e568:	003fc706 	br	402e488 <__flash_rwdata_start+0xffff7f30>
 402e56c:	05000044 	movi	r20,1
 402e570:	a00b883a 	mov	r5,r20
 402e574:	9809883a 	mov	r4,r19
 402e578:	402ddac0 	call	402ddac <_Balloc>
 402e57c:	1023883a 	mov	r17,r2
 402e580:	00809c44 	movi	r2,625
 402e584:	88800515 	stw	r2,20(r17)
 402e588:	8d000415 	stw	r20,16(r17)
 402e58c:	9c401215 	stw	r17,72(r19)
 402e590:	88000015 	stw	zero,0(r17)
 402e594:	003fc606 	br	402e4b0 <__flash_rwdata_start+0xffff7f58>

0402e598 <__lshift>:
 402e598:	f811883a 	mov	r8,ra
 402e59c:	40346e80 	call	40346e8 <_mcount>
 402e5a0:	403f883a 	mov	ra,r8
 402e5a4:	defff904 	addi	sp,sp,-28
 402e5a8:	dfc00615 	stw	ra,24(sp)
 402e5ac:	dd400515 	stw	r21,20(sp)
 402e5b0:	dd000415 	stw	r20,16(sp)
 402e5b4:	dcc00315 	stw	r19,12(sp)
 402e5b8:	dc800215 	stw	r18,8(sp)
 402e5bc:	dc400115 	stw	r17,4(sp)
 402e5c0:	dc000015 	stw	r16,0(sp)
 402e5c4:	2cc00417 	ldw	r19,16(r5)
 402e5c8:	302bd17a 	srai	r21,r6,5
 402e5cc:	28800217 	ldw	r2,8(r5)
 402e5d0:	2823883a 	mov	r17,r5
 402e5d4:	ace7883a 	add	r19,r21,r19
 402e5d8:	9c000044 	addi	r16,r19,1
 402e5dc:	3029883a 	mov	r20,r6
 402e5e0:	2025883a 	mov	r18,r4
 402e5e4:	29400117 	ldw	r5,4(r5)
 402e5e8:	1400030e 	bge	r2,r16,402e5f8 <__lshift+0x60>
 402e5ec:	1085883a 	add	r2,r2,r2
 402e5f0:	29400044 	addi	r5,r5,1
 402e5f4:	143ffd16 	blt	r2,r16,402e5ec <__flash_rwdata_start+0xffff8094>
 402e5f8:	9009883a 	mov	r4,r18
 402e5fc:	402ddac0 	call	402ddac <_Balloc>
 402e600:	10c00504 	addi	r3,r2,20
 402e604:	0540070e 	bge	zero,r21,402e624 <__lshift+0x8c>
 402e608:	ad6b883a 	add	r21,r21,r21
 402e60c:	ad6b883a 	add	r21,r21,r21
 402e610:	1809883a 	mov	r4,r3
 402e614:	1d47883a 	add	r3,r3,r21
 402e618:	20000015 	stw	zero,0(r4)
 402e61c:	21000104 	addi	r4,r4,4
 402e620:	193ffd1e 	bne	r3,r4,402e618 <__flash_rwdata_start+0xffff80c0>
 402e624:	8a000417 	ldw	r8,16(r17)
 402e628:	89000504 	addi	r4,r17,20
 402e62c:	a18007cc 	andi	r6,r20,31
 402e630:	4211883a 	add	r8,r8,r8
 402e634:	4211883a 	add	r8,r8,r8
 402e638:	2211883a 	add	r8,r4,r8
 402e63c:	30002326 	beq	r6,zero,402e6cc <__lshift+0x134>
 402e640:	02400804 	movi	r9,32
 402e644:	4993c83a 	sub	r9,r9,r6
 402e648:	000b883a 	mov	r5,zero
 402e64c:	21c00017 	ldw	r7,0(r4)
 402e650:	1815883a 	mov	r10,r3
 402e654:	18c00104 	addi	r3,r3,4
 402e658:	398e983a 	sll	r7,r7,r6
 402e65c:	21000104 	addi	r4,r4,4
 402e660:	394ab03a 	or	r5,r7,r5
 402e664:	197fff15 	stw	r5,-4(r3)
 402e668:	217fff17 	ldw	r5,-4(r4)
 402e66c:	2a4ad83a 	srl	r5,r5,r9
 402e670:	223ff636 	bltu	r4,r8,402e64c <__flash_rwdata_start+0xffff80f4>
 402e674:	51400115 	stw	r5,4(r10)
 402e678:	28001a1e 	bne	r5,zero,402e6e4 <__lshift+0x14c>
 402e67c:	843fffc4 	addi	r16,r16,-1
 402e680:	14000415 	stw	r16,16(r2)
 402e684:	88000826 	beq	r17,zero,402e6a8 <__lshift+0x110>
 402e688:	89000117 	ldw	r4,4(r17)
 402e68c:	90c01317 	ldw	r3,76(r18)
 402e690:	2109883a 	add	r4,r4,r4
 402e694:	2109883a 	add	r4,r4,r4
 402e698:	1907883a 	add	r3,r3,r4
 402e69c:	19000017 	ldw	r4,0(r3)
 402e6a0:	89000015 	stw	r4,0(r17)
 402e6a4:	1c400015 	stw	r17,0(r3)
 402e6a8:	dfc00617 	ldw	ra,24(sp)
 402e6ac:	dd400517 	ldw	r21,20(sp)
 402e6b0:	dd000417 	ldw	r20,16(sp)
 402e6b4:	dcc00317 	ldw	r19,12(sp)
 402e6b8:	dc800217 	ldw	r18,8(sp)
 402e6bc:	dc400117 	ldw	r17,4(sp)
 402e6c0:	dc000017 	ldw	r16,0(sp)
 402e6c4:	dec00704 	addi	sp,sp,28
 402e6c8:	f800283a 	ret
 402e6cc:	21400017 	ldw	r5,0(r4)
 402e6d0:	18c00104 	addi	r3,r3,4
 402e6d4:	21000104 	addi	r4,r4,4
 402e6d8:	197fff15 	stw	r5,-4(r3)
 402e6dc:	223ffb36 	bltu	r4,r8,402e6cc <__flash_rwdata_start+0xffff8174>
 402e6e0:	003fe606 	br	402e67c <__flash_rwdata_start+0xffff8124>
 402e6e4:	9c000084 	addi	r16,r19,2
 402e6e8:	003fe406 	br	402e67c <__flash_rwdata_start+0xffff8124>

0402e6ec <__mcmp>:
 402e6ec:	f811883a 	mov	r8,ra
 402e6f0:	40346e80 	call	40346e8 <_mcount>
 402e6f4:	403f883a 	mov	ra,r8
 402e6f8:	20800417 	ldw	r2,16(r4)
 402e6fc:	28c00417 	ldw	r3,16(r5)
 402e700:	10c5c83a 	sub	r2,r2,r3
 402e704:	10000f1e 	bne	r2,zero,402e744 <__mcmp+0x58>
 402e708:	18c7883a 	add	r3,r3,r3
 402e70c:	18c7883a 	add	r3,r3,r3
 402e710:	21000504 	addi	r4,r4,20
 402e714:	29400504 	addi	r5,r5,20
 402e718:	20c5883a 	add	r2,r4,r3
 402e71c:	28cb883a 	add	r5,r5,r3
 402e720:	00000106 	br	402e728 <__mcmp+0x3c>
 402e724:	2080082e 	bgeu	r4,r2,402e748 <__mcmp+0x5c>
 402e728:	10bfff04 	addi	r2,r2,-4
 402e72c:	297fff04 	addi	r5,r5,-4
 402e730:	11800017 	ldw	r6,0(r2)
 402e734:	28c00017 	ldw	r3,0(r5)
 402e738:	30fffa26 	beq	r6,r3,402e724 <__flash_rwdata_start+0xffff81cc>
 402e73c:	30c00436 	bltu	r6,r3,402e750 <__mcmp+0x64>
 402e740:	00800044 	movi	r2,1
 402e744:	f800283a 	ret
 402e748:	0005883a 	mov	r2,zero
 402e74c:	f800283a 	ret
 402e750:	00bfffc4 	movi	r2,-1
 402e754:	003ffb06 	br	402e744 <__flash_rwdata_start+0xffff81ec>

0402e758 <__mdiff>:
 402e758:	f811883a 	mov	r8,ra
 402e75c:	40346e80 	call	40346e8 <_mcount>
 402e760:	403f883a 	mov	ra,r8
 402e764:	defffa04 	addi	sp,sp,-24
 402e768:	dfc00515 	stw	ra,20(sp)
 402e76c:	dd000415 	stw	r20,16(sp)
 402e770:	dcc00315 	stw	r19,12(sp)
 402e774:	dc800215 	stw	r18,8(sp)
 402e778:	dc400115 	stw	r17,4(sp)
 402e77c:	dc000015 	stw	r16,0(sp)
 402e780:	28c00417 	ldw	r3,16(r5)
 402e784:	30800417 	ldw	r2,16(r6)
 402e788:	2825883a 	mov	r18,r5
 402e78c:	3027883a 	mov	r19,r6
 402e790:	1887c83a 	sub	r3,r3,r2
 402e794:	1800141e 	bne	r3,zero,402e7e8 <__mdiff+0x90>
 402e798:	1085883a 	add	r2,r2,r2
 402e79c:	1085883a 	add	r2,r2,r2
 402e7a0:	2a000504 	addi	r8,r5,20
 402e7a4:	34000504 	addi	r16,r6,20
 402e7a8:	4087883a 	add	r3,r8,r2
 402e7ac:	8085883a 	add	r2,r16,r2
 402e7b0:	00000106 	br	402e7b8 <__mdiff+0x60>
 402e7b4:	40c0592e 	bgeu	r8,r3,402e91c <__mdiff+0x1c4>
 402e7b8:	18ffff04 	addi	r3,r3,-4
 402e7bc:	10bfff04 	addi	r2,r2,-4
 402e7c0:	19c00017 	ldw	r7,0(r3)
 402e7c4:	11400017 	ldw	r5,0(r2)
 402e7c8:	397ffa26 	beq	r7,r5,402e7b4 <__flash_rwdata_start+0xffff825c>
 402e7cc:	3940592e 	bgeu	r7,r5,402e934 <__mdiff+0x1dc>
 402e7d0:	9005883a 	mov	r2,r18
 402e7d4:	4023883a 	mov	r17,r8
 402e7d8:	9825883a 	mov	r18,r19
 402e7dc:	05000044 	movi	r20,1
 402e7e0:	1027883a 	mov	r19,r2
 402e7e4:	00000406 	br	402e7f8 <__mdiff+0xa0>
 402e7e8:	18005616 	blt	r3,zero,402e944 <__mdiff+0x1ec>
 402e7ec:	34400504 	addi	r17,r6,20
 402e7f0:	2c000504 	addi	r16,r5,20
 402e7f4:	0029883a 	mov	r20,zero
 402e7f8:	91400117 	ldw	r5,4(r18)
 402e7fc:	402ddac0 	call	402ddac <_Balloc>
 402e800:	92400417 	ldw	r9,16(r18)
 402e804:	9b000417 	ldw	r12,16(r19)
 402e808:	12c00504 	addi	r11,r2,20
 402e80c:	4a51883a 	add	r8,r9,r9
 402e810:	6319883a 	add	r12,r12,r12
 402e814:	4211883a 	add	r8,r8,r8
 402e818:	6319883a 	add	r12,r12,r12
 402e81c:	15000315 	stw	r20,12(r2)
 402e820:	8211883a 	add	r8,r16,r8
 402e824:	8b19883a 	add	r12,r17,r12
 402e828:	0007883a 	mov	r3,zero
 402e82c:	81400017 	ldw	r5,0(r16)
 402e830:	89c00017 	ldw	r7,0(r17)
 402e834:	59800104 	addi	r6,r11,4
 402e838:	293fffcc 	andi	r4,r5,65535
 402e83c:	20c7883a 	add	r3,r4,r3
 402e840:	393fffcc 	andi	r4,r7,65535
 402e844:	1909c83a 	sub	r4,r3,r4
 402e848:	280ad43a 	srli	r5,r5,16
 402e84c:	380ed43a 	srli	r7,r7,16
 402e850:	2007d43a 	srai	r3,r4,16
 402e854:	213fffcc 	andi	r4,r4,65535
 402e858:	29cbc83a 	sub	r5,r5,r7
 402e85c:	28c7883a 	add	r3,r5,r3
 402e860:	180a943a 	slli	r5,r3,16
 402e864:	8c400104 	addi	r17,r17,4
 402e868:	84000104 	addi	r16,r16,4
 402e86c:	2908b03a 	or	r4,r5,r4
 402e870:	59000015 	stw	r4,0(r11)
 402e874:	1807d43a 	srai	r3,r3,16
 402e878:	3015883a 	mov	r10,r6
 402e87c:	3017883a 	mov	r11,r6
 402e880:	8b3fea36 	bltu	r17,r12,402e82c <__flash_rwdata_start+0xffff82d4>
 402e884:	8200162e 	bgeu	r16,r8,402e8e0 <__mdiff+0x188>
 402e888:	8017883a 	mov	r11,r16
 402e88c:	59400017 	ldw	r5,0(r11)
 402e890:	31800104 	addi	r6,r6,4
 402e894:	5ac00104 	addi	r11,r11,4
 402e898:	293fffcc 	andi	r4,r5,65535
 402e89c:	20c7883a 	add	r3,r4,r3
 402e8a0:	280ed43a 	srli	r7,r5,16
 402e8a4:	180bd43a 	srai	r5,r3,16
 402e8a8:	193fffcc 	andi	r4,r3,65535
 402e8ac:	3947883a 	add	r3,r7,r5
 402e8b0:	180a943a 	slli	r5,r3,16
 402e8b4:	1807d43a 	srai	r3,r3,16
 402e8b8:	2908b03a 	or	r4,r5,r4
 402e8bc:	313fff15 	stw	r4,-4(r6)
 402e8c0:	5a3ff236 	bltu	r11,r8,402e88c <__flash_rwdata_start+0xffff8334>
 402e8c4:	0406303a 	nor	r3,zero,r16
 402e8c8:	1a07883a 	add	r3,r3,r8
 402e8cc:	1806d0ba 	srli	r3,r3,2
 402e8d0:	18c00044 	addi	r3,r3,1
 402e8d4:	18c7883a 	add	r3,r3,r3
 402e8d8:	18c7883a 	add	r3,r3,r3
 402e8dc:	50d5883a 	add	r10,r10,r3
 402e8e0:	50ffff04 	addi	r3,r10,-4
 402e8e4:	2000041e 	bne	r4,zero,402e8f8 <__mdiff+0x1a0>
 402e8e8:	18ffff04 	addi	r3,r3,-4
 402e8ec:	19000017 	ldw	r4,0(r3)
 402e8f0:	4a7fffc4 	addi	r9,r9,-1
 402e8f4:	203ffc26 	beq	r4,zero,402e8e8 <__flash_rwdata_start+0xffff8390>
 402e8f8:	12400415 	stw	r9,16(r2)
 402e8fc:	dfc00517 	ldw	ra,20(sp)
 402e900:	dd000417 	ldw	r20,16(sp)
 402e904:	dcc00317 	ldw	r19,12(sp)
 402e908:	dc800217 	ldw	r18,8(sp)
 402e90c:	dc400117 	ldw	r17,4(sp)
 402e910:	dc000017 	ldw	r16,0(sp)
 402e914:	dec00604 	addi	sp,sp,24
 402e918:	f800283a 	ret
 402e91c:	000b883a 	mov	r5,zero
 402e920:	402ddac0 	call	402ddac <_Balloc>
 402e924:	00c00044 	movi	r3,1
 402e928:	10c00415 	stw	r3,16(r2)
 402e92c:	10000515 	stw	zero,20(r2)
 402e930:	003ff206 	br	402e8fc <__flash_rwdata_start+0xffff83a4>
 402e934:	8023883a 	mov	r17,r16
 402e938:	0029883a 	mov	r20,zero
 402e93c:	4021883a 	mov	r16,r8
 402e940:	003fad06 	br	402e7f8 <__flash_rwdata_start+0xffff82a0>
 402e944:	9005883a 	mov	r2,r18
 402e948:	94400504 	addi	r17,r18,20
 402e94c:	9c000504 	addi	r16,r19,20
 402e950:	9825883a 	mov	r18,r19
 402e954:	05000044 	movi	r20,1
 402e958:	1027883a 	mov	r19,r2
 402e95c:	003fa606 	br	402e7f8 <__flash_rwdata_start+0xffff82a0>

0402e960 <__ulp>:
 402e960:	f811883a 	mov	r8,ra
 402e964:	40346e80 	call	40346e8 <_mcount>
 402e968:	403f883a 	mov	ra,r8
 402e96c:	00bf3034 	movhi	r2,64704
 402e970:	295ffc2c 	andhi	r5,r5,32752
 402e974:	2887883a 	add	r3,r5,r2
 402e978:	00c0020e 	bge	zero,r3,402e984 <__ulp+0x24>
 402e97c:	0005883a 	mov	r2,zero
 402e980:	f800283a 	ret
 402e984:	00c7c83a 	sub	r3,zero,r3
 402e988:	1807d53a 	srai	r3,r3,20
 402e98c:	008004c4 	movi	r2,19
 402e990:	10c00b0e 	bge	r2,r3,402e9c0 <__ulp+0x60>
 402e994:	18bffb04 	addi	r2,r3,-20
 402e998:	01000784 	movi	r4,30
 402e99c:	0007883a 	mov	r3,zero
 402e9a0:	20800516 	blt	r4,r2,402e9b8 <__ulp+0x58>
 402e9a4:	010007c4 	movi	r4,31
 402e9a8:	2089c83a 	sub	r4,r4,r2
 402e9ac:	00800044 	movi	r2,1
 402e9b0:	1104983a 	sll	r2,r2,r4
 402e9b4:	f800283a 	ret
 402e9b8:	00800044 	movi	r2,1
 402e9bc:	f800283a 	ret
 402e9c0:	01400234 	movhi	r5,8
 402e9c4:	28c7d83a 	sra	r3,r5,r3
 402e9c8:	003fec06 	br	402e97c <__flash_rwdata_start+0xffff8424>

0402e9cc <__b2d>:
 402e9cc:	f811883a 	mov	r8,ra
 402e9d0:	40346e80 	call	40346e8 <_mcount>
 402e9d4:	403f883a 	mov	ra,r8
 402e9d8:	defffa04 	addi	sp,sp,-24
 402e9dc:	dfc00515 	stw	ra,20(sp)
 402e9e0:	dd000415 	stw	r20,16(sp)
 402e9e4:	dcc00315 	stw	r19,12(sp)
 402e9e8:	dc800215 	stw	r18,8(sp)
 402e9ec:	dc400115 	stw	r17,4(sp)
 402e9f0:	dc000015 	stw	r16,0(sp)
 402e9f4:	24000417 	ldw	r16,16(r4)
 402e9f8:	24400504 	addi	r17,r4,20
 402e9fc:	2829883a 	mov	r20,r5
 402ea00:	8421883a 	add	r16,r16,r16
 402ea04:	8421883a 	add	r16,r16,r16
 402ea08:	8c21883a 	add	r16,r17,r16
 402ea0c:	84bfff17 	ldw	r18,-4(r16)
 402ea10:	84ffff04 	addi	r19,r16,-4
 402ea14:	9009883a 	mov	r4,r18
 402ea18:	402e0d00 	call	402e0d0 <__hi0bits>
 402ea1c:	00c00804 	movi	r3,32
 402ea20:	1889c83a 	sub	r4,r3,r2
 402ea24:	a1000015 	stw	r4,0(r20)
 402ea28:	01000284 	movi	r4,10
 402ea2c:	20801216 	blt	r4,r2,402ea78 <__b2d+0xac>
 402ea30:	018002c4 	movi	r6,11
 402ea34:	308dc83a 	sub	r6,r6,r2
 402ea38:	9186d83a 	srl	r3,r18,r6
 402ea3c:	18cffc34 	orhi	r3,r3,16368
 402ea40:	8cc0212e 	bgeu	r17,r19,402eac8 <__b2d+0xfc>
 402ea44:	813ffe17 	ldw	r4,-8(r16)
 402ea48:	218cd83a 	srl	r6,r4,r6
 402ea4c:	10800544 	addi	r2,r2,21
 402ea50:	9084983a 	sll	r2,r18,r2
 402ea54:	1184b03a 	or	r2,r2,r6
 402ea58:	dfc00517 	ldw	ra,20(sp)
 402ea5c:	dd000417 	ldw	r20,16(sp)
 402ea60:	dcc00317 	ldw	r19,12(sp)
 402ea64:	dc800217 	ldw	r18,8(sp)
 402ea68:	dc400117 	ldw	r17,4(sp)
 402ea6c:	dc000017 	ldw	r16,0(sp)
 402ea70:	dec00604 	addi	sp,sp,24
 402ea74:	f800283a 	ret
 402ea78:	8cc00f2e 	bgeu	r17,r19,402eab8 <__b2d+0xec>
 402ea7c:	117ffd44 	addi	r5,r2,-11
 402ea80:	80bffe17 	ldw	r2,-8(r16)
 402ea84:	28000e26 	beq	r5,zero,402eac0 <__b2d+0xf4>
 402ea88:	1949c83a 	sub	r4,r3,r5
 402ea8c:	9164983a 	sll	r18,r18,r5
 402ea90:	1106d83a 	srl	r3,r2,r4
 402ea94:	81bffe04 	addi	r6,r16,-8
 402ea98:	948ffc34 	orhi	r18,r18,16368
 402ea9c:	90c6b03a 	or	r3,r18,r3
 402eaa0:	89800e2e 	bgeu	r17,r6,402eadc <__b2d+0x110>
 402eaa4:	81bffd17 	ldw	r6,-12(r16)
 402eaa8:	1144983a 	sll	r2,r2,r5
 402eaac:	310ad83a 	srl	r5,r6,r4
 402eab0:	2884b03a 	or	r2,r5,r2
 402eab4:	003fe806 	br	402ea58 <__flash_rwdata_start+0xffff8500>
 402eab8:	10bffd44 	addi	r2,r2,-11
 402eabc:	1000041e 	bne	r2,zero,402ead0 <__b2d+0x104>
 402eac0:	90cffc34 	orhi	r3,r18,16368
 402eac4:	003fe406 	br	402ea58 <__flash_rwdata_start+0xffff8500>
 402eac8:	000d883a 	mov	r6,zero
 402eacc:	003fdf06 	br	402ea4c <__flash_rwdata_start+0xffff84f4>
 402ead0:	90a4983a 	sll	r18,r18,r2
 402ead4:	0005883a 	mov	r2,zero
 402ead8:	003ff906 	br	402eac0 <__flash_rwdata_start+0xffff8568>
 402eadc:	1144983a 	sll	r2,r2,r5
 402eae0:	003fdd06 	br	402ea58 <__flash_rwdata_start+0xffff8500>

0402eae4 <__d2b>:
 402eae4:	f811883a 	mov	r8,ra
 402eae8:	40346e80 	call	40346e8 <_mcount>
 402eaec:	403f883a 	mov	ra,r8
 402eaf0:	defff804 	addi	sp,sp,-32
 402eaf4:	dfc00715 	stw	ra,28(sp)
 402eaf8:	dd000615 	stw	r20,24(sp)
 402eafc:	dcc00515 	stw	r19,20(sp)
 402eb00:	dc800415 	stw	r18,16(sp)
 402eb04:	dc400315 	stw	r17,12(sp)
 402eb08:	dc000215 	stw	r16,8(sp)
 402eb0c:	3021883a 	mov	r16,r6
 402eb10:	8022907a 	slli	r17,r16,1
 402eb14:	2829883a 	mov	r20,r5
 402eb18:	01400044 	movi	r5,1
 402eb1c:	3825883a 	mov	r18,r7
 402eb20:	8822d57a 	srli	r17,r17,21
 402eb24:	402ddac0 	call	402ddac <_Balloc>
 402eb28:	1027883a 	mov	r19,r2
 402eb2c:	00800434 	movhi	r2,16
 402eb30:	10bfffc4 	addi	r2,r2,-1
 402eb34:	808c703a 	and	r6,r16,r2
 402eb38:	88000126 	beq	r17,zero,402eb40 <__d2b+0x5c>
 402eb3c:	31800434 	orhi	r6,r6,16
 402eb40:	d9800015 	stw	r6,0(sp)
 402eb44:	a0002426 	beq	r20,zero,402ebd8 <__d2b+0xf4>
 402eb48:	d9000104 	addi	r4,sp,4
 402eb4c:	dd000115 	stw	r20,4(sp)
 402eb50:	402e1440 	call	402e144 <__lo0bits>
 402eb54:	d8c00017 	ldw	r3,0(sp)
 402eb58:	10002f1e 	bne	r2,zero,402ec18 <__d2b+0x134>
 402eb5c:	d9000117 	ldw	r4,4(sp)
 402eb60:	99000515 	stw	r4,20(r19)
 402eb64:	1821003a 	cmpeq	r16,r3,zero
 402eb68:	01000084 	movi	r4,2
 402eb6c:	2421c83a 	sub	r16,r4,r16
 402eb70:	98c00615 	stw	r3,24(r19)
 402eb74:	9c000415 	stw	r16,16(r19)
 402eb78:	88001f1e 	bne	r17,zero,402ebf8 <__d2b+0x114>
 402eb7c:	10bef384 	addi	r2,r2,-1074
 402eb80:	90800015 	stw	r2,0(r18)
 402eb84:	00900034 	movhi	r2,16384
 402eb88:	10bfffc4 	addi	r2,r2,-1
 402eb8c:	8085883a 	add	r2,r16,r2
 402eb90:	1085883a 	add	r2,r2,r2
 402eb94:	1085883a 	add	r2,r2,r2
 402eb98:	9885883a 	add	r2,r19,r2
 402eb9c:	11000517 	ldw	r4,20(r2)
 402eba0:	8020917a 	slli	r16,r16,5
 402eba4:	402e0d00 	call	402e0d0 <__hi0bits>
 402eba8:	d8c00817 	ldw	r3,32(sp)
 402ebac:	8085c83a 	sub	r2,r16,r2
 402ebb0:	18800015 	stw	r2,0(r3)
 402ebb4:	9805883a 	mov	r2,r19
 402ebb8:	dfc00717 	ldw	ra,28(sp)
 402ebbc:	dd000617 	ldw	r20,24(sp)
 402ebc0:	dcc00517 	ldw	r19,20(sp)
 402ebc4:	dc800417 	ldw	r18,16(sp)
 402ebc8:	dc400317 	ldw	r17,12(sp)
 402ebcc:	dc000217 	ldw	r16,8(sp)
 402ebd0:	dec00804 	addi	sp,sp,32
 402ebd4:	f800283a 	ret
 402ebd8:	d809883a 	mov	r4,sp
 402ebdc:	402e1440 	call	402e144 <__lo0bits>
 402ebe0:	d8c00017 	ldw	r3,0(sp)
 402ebe4:	04000044 	movi	r16,1
 402ebe8:	9c000415 	stw	r16,16(r19)
 402ebec:	98c00515 	stw	r3,20(r19)
 402ebf0:	10800804 	addi	r2,r2,32
 402ebf4:	883fe126 	beq	r17,zero,402eb7c <__flash_rwdata_start+0xffff8624>
 402ebf8:	00c00d44 	movi	r3,53
 402ebfc:	8c7ef344 	addi	r17,r17,-1075
 402ec00:	88a3883a 	add	r17,r17,r2
 402ec04:	1885c83a 	sub	r2,r3,r2
 402ec08:	d8c00817 	ldw	r3,32(sp)
 402ec0c:	94400015 	stw	r17,0(r18)
 402ec10:	18800015 	stw	r2,0(r3)
 402ec14:	003fe706 	br	402ebb4 <__flash_rwdata_start+0xffff865c>
 402ec18:	01000804 	movi	r4,32
 402ec1c:	2089c83a 	sub	r4,r4,r2
 402ec20:	1908983a 	sll	r4,r3,r4
 402ec24:	d9400117 	ldw	r5,4(sp)
 402ec28:	1886d83a 	srl	r3,r3,r2
 402ec2c:	2148b03a 	or	r4,r4,r5
 402ec30:	99000515 	stw	r4,20(r19)
 402ec34:	d8c00015 	stw	r3,0(sp)
 402ec38:	003fca06 	br	402eb64 <__flash_rwdata_start+0xffff860c>

0402ec3c <__ratio>:
 402ec3c:	f811883a 	mov	r8,ra
 402ec40:	40346e80 	call	40346e8 <_mcount>
 402ec44:	403f883a 	mov	ra,r8
 402ec48:	defff904 	addi	sp,sp,-28
 402ec4c:	dfc00615 	stw	ra,24(sp)
 402ec50:	dcc00515 	stw	r19,20(sp)
 402ec54:	dc800415 	stw	r18,16(sp)
 402ec58:	dc400315 	stw	r17,12(sp)
 402ec5c:	dc000215 	stw	r16,8(sp)
 402ec60:	2823883a 	mov	r17,r5
 402ec64:	d9400104 	addi	r5,sp,4
 402ec68:	2027883a 	mov	r19,r4
 402ec6c:	402e9cc0 	call	402e9cc <__b2d>
 402ec70:	d80b883a 	mov	r5,sp
 402ec74:	8809883a 	mov	r4,r17
 402ec78:	1025883a 	mov	r18,r2
 402ec7c:	1821883a 	mov	r16,r3
 402ec80:	402e9cc0 	call	402e9cc <__b2d>
 402ec84:	8a000417 	ldw	r8,16(r17)
 402ec88:	99000417 	ldw	r4,16(r19)
 402ec8c:	d9400117 	ldw	r5,4(sp)
 402ec90:	2209c83a 	sub	r4,r4,r8
 402ec94:	2010917a 	slli	r8,r4,5
 402ec98:	d9000017 	ldw	r4,0(sp)
 402ec9c:	2909c83a 	sub	r4,r5,r4
 402eca0:	4109883a 	add	r4,r8,r4
 402eca4:	01000e0e 	bge	zero,r4,402ece0 <__ratio+0xa4>
 402eca8:	2008953a 	slli	r4,r4,20
 402ecac:	2421883a 	add	r16,r4,r16
 402ecb0:	100d883a 	mov	r6,r2
 402ecb4:	180f883a 	mov	r7,r3
 402ecb8:	9009883a 	mov	r4,r18
 402ecbc:	800b883a 	mov	r5,r16
 402ecc0:	40263b80 	call	40263b8 <__divdf3>
 402ecc4:	dfc00617 	ldw	ra,24(sp)
 402ecc8:	dcc00517 	ldw	r19,20(sp)
 402eccc:	dc800417 	ldw	r18,16(sp)
 402ecd0:	dc400317 	ldw	r17,12(sp)
 402ecd4:	dc000217 	ldw	r16,8(sp)
 402ecd8:	dec00704 	addi	sp,sp,28
 402ecdc:	f800283a 	ret
 402ece0:	2008953a 	slli	r4,r4,20
 402ece4:	1907c83a 	sub	r3,r3,r4
 402ece8:	003ff106 	br	402ecb0 <__flash_rwdata_start+0xffff8758>

0402ecec <_mprec_log10>:
 402ecec:	f811883a 	mov	r8,ra
 402ecf0:	40346e80 	call	40346e8 <_mcount>
 402ecf4:	403f883a 	mov	ra,r8
 402ecf8:	defffe04 	addi	sp,sp,-8
 402ecfc:	dfc00115 	stw	ra,4(sp)
 402ed00:	dc000015 	stw	r16,0(sp)
 402ed04:	008005c4 	movi	r2,23
 402ed08:	2021883a 	mov	r16,r4
 402ed0c:	11000d0e 	bge	r2,r4,402ed44 <_mprec_log10+0x58>
 402ed10:	0005883a 	mov	r2,zero
 402ed14:	00cffc34 	movhi	r3,16368
 402ed18:	843fffc4 	addi	r16,r16,-1
 402ed1c:	000d883a 	mov	r6,zero
 402ed20:	01d00934 	movhi	r7,16420
 402ed24:	1009883a 	mov	r4,r2
 402ed28:	180b883a 	mov	r5,r3
 402ed2c:	4032e540 	call	4032e54 <__muldf3>
 402ed30:	803ff91e 	bne	r16,zero,402ed18 <__flash_rwdata_start+0xffff87c0>
 402ed34:	dfc00117 	ldw	ra,4(sp)
 402ed38:	dc000017 	ldw	r16,0(sp)
 402ed3c:	dec00204 	addi	sp,sp,8
 402ed40:	f800283a 	ret
 402ed44:	202090fa 	slli	r16,r4,3
 402ed48:	00800034 	movhi	r2,0
 402ed4c:	10816104 	addi	r2,r2,1412
 402ed50:	1421883a 	add	r16,r2,r16
 402ed54:	80800017 	ldw	r2,0(r16)
 402ed58:	80c00117 	ldw	r3,4(r16)
 402ed5c:	dfc00117 	ldw	ra,4(sp)
 402ed60:	dc000017 	ldw	r16,0(sp)
 402ed64:	dec00204 	addi	sp,sp,8
 402ed68:	f800283a 	ret

0402ed6c <__copybits>:
 402ed6c:	f811883a 	mov	r8,ra
 402ed70:	40346e80 	call	40346e8 <_mcount>
 402ed74:	403f883a 	mov	ra,r8
 402ed78:	297fffc4 	addi	r5,r5,-1
 402ed7c:	280fd17a 	srai	r7,r5,5
 402ed80:	30c00417 	ldw	r3,16(r6)
 402ed84:	30800504 	addi	r2,r6,20
 402ed88:	39c00044 	addi	r7,r7,1
 402ed8c:	18c7883a 	add	r3,r3,r3
 402ed90:	39cf883a 	add	r7,r7,r7
 402ed94:	18c7883a 	add	r3,r3,r3
 402ed98:	39cf883a 	add	r7,r7,r7
 402ed9c:	10c7883a 	add	r3,r2,r3
 402eda0:	21cf883a 	add	r7,r4,r7
 402eda4:	10c00d2e 	bgeu	r2,r3,402eddc <__copybits+0x70>
 402eda8:	200b883a 	mov	r5,r4
 402edac:	12000017 	ldw	r8,0(r2)
 402edb0:	29400104 	addi	r5,r5,4
 402edb4:	10800104 	addi	r2,r2,4
 402edb8:	2a3fff15 	stw	r8,-4(r5)
 402edbc:	10fffb36 	bltu	r2,r3,402edac <__flash_rwdata_start+0xffff8854>
 402edc0:	1985c83a 	sub	r2,r3,r6
 402edc4:	10bffac4 	addi	r2,r2,-21
 402edc8:	1004d0ba 	srli	r2,r2,2
 402edcc:	10800044 	addi	r2,r2,1
 402edd0:	1085883a 	add	r2,r2,r2
 402edd4:	1085883a 	add	r2,r2,r2
 402edd8:	2089883a 	add	r4,r4,r2
 402eddc:	21c0032e 	bgeu	r4,r7,402edec <__copybits+0x80>
 402ede0:	20000015 	stw	zero,0(r4)
 402ede4:	21000104 	addi	r4,r4,4
 402ede8:	21fffd36 	bltu	r4,r7,402ede0 <__flash_rwdata_start+0xffff8888>
 402edec:	f800283a 	ret

0402edf0 <__any_on>:
 402edf0:	f811883a 	mov	r8,ra
 402edf4:	40346e80 	call	40346e8 <_mcount>
 402edf8:	403f883a 	mov	ra,r8
 402edfc:	20c00417 	ldw	r3,16(r4)
 402ee00:	2805d17a 	srai	r2,r5,5
 402ee04:	21000504 	addi	r4,r4,20
 402ee08:	18800d0e 	bge	r3,r2,402ee40 <__any_on+0x50>
 402ee0c:	18c7883a 	add	r3,r3,r3
 402ee10:	18c7883a 	add	r3,r3,r3
 402ee14:	20c7883a 	add	r3,r4,r3
 402ee18:	20c0182e 	bgeu	r4,r3,402ee7c <__any_on+0x8c>
 402ee1c:	18bfff17 	ldw	r2,-4(r3)
 402ee20:	18ffff04 	addi	r3,r3,-4
 402ee24:	1000041e 	bne	r2,zero,402ee38 <__any_on+0x48>
 402ee28:	20c0042e 	bgeu	r4,r3,402ee3c <__any_on+0x4c>
 402ee2c:	18ffff04 	addi	r3,r3,-4
 402ee30:	19400017 	ldw	r5,0(r3)
 402ee34:	283ffc26 	beq	r5,zero,402ee28 <__flash_rwdata_start+0xffff88d0>
 402ee38:	00800044 	movi	r2,1
 402ee3c:	f800283a 	ret
 402ee40:	10c00a0e 	bge	r2,r3,402ee6c <__any_on+0x7c>
 402ee44:	1085883a 	add	r2,r2,r2
 402ee48:	1085883a 	add	r2,r2,r2
 402ee4c:	294007cc 	andi	r5,r5,31
 402ee50:	2087883a 	add	r3,r4,r2
 402ee54:	283ff026 	beq	r5,zero,402ee18 <__flash_rwdata_start+0xffff88c0>
 402ee58:	19800017 	ldw	r6,0(r3)
 402ee5c:	3144d83a 	srl	r2,r6,r5
 402ee60:	114a983a 	sll	r5,r2,r5
 402ee64:	317ff41e 	bne	r6,r5,402ee38 <__flash_rwdata_start+0xffff88e0>
 402ee68:	003feb06 	br	402ee18 <__flash_rwdata_start+0xffff88c0>
 402ee6c:	1085883a 	add	r2,r2,r2
 402ee70:	1085883a 	add	r2,r2,r2
 402ee74:	2087883a 	add	r3,r4,r2
 402ee78:	003fe706 	br	402ee18 <__flash_rwdata_start+0xffff88c0>
 402ee7c:	0005883a 	mov	r2,zero
 402ee80:	003fee06 	br	402ee3c <__flash_rwdata_start+0xffff88e4>

0402ee84 <_putc_r>:
 402ee84:	f811883a 	mov	r8,ra
 402ee88:	40346e80 	call	40346e8 <_mcount>
 402ee8c:	403f883a 	mov	ra,r8
 402ee90:	defffc04 	addi	sp,sp,-16
 402ee94:	dfc00315 	stw	ra,12(sp)
 402ee98:	dc000215 	stw	r16,8(sp)
 402ee9c:	2021883a 	mov	r16,r4
 402eea0:	20000226 	beq	r4,zero,402eeac <_putc_r+0x28>
 402eea4:	20800e17 	ldw	r2,56(r4)
 402eea8:	10001b26 	beq	r2,zero,402ef18 <_putc_r+0x94>
 402eeac:	30800217 	ldw	r2,8(r6)
 402eeb0:	10bfffc4 	addi	r2,r2,-1
 402eeb4:	30800215 	stw	r2,8(r6)
 402eeb8:	10000a16 	blt	r2,zero,402eee4 <_putc_r+0x60>
 402eebc:	30800017 	ldw	r2,0(r6)
 402eec0:	11400005 	stb	r5,0(r2)
 402eec4:	30800017 	ldw	r2,0(r6)
 402eec8:	10c00044 	addi	r3,r2,1
 402eecc:	30c00015 	stw	r3,0(r6)
 402eed0:	10800003 	ldbu	r2,0(r2)
 402eed4:	dfc00317 	ldw	ra,12(sp)
 402eed8:	dc000217 	ldw	r16,8(sp)
 402eedc:	dec00404 	addi	sp,sp,16
 402eee0:	f800283a 	ret
 402eee4:	30c00617 	ldw	r3,24(r6)
 402eee8:	10c00616 	blt	r2,r3,402ef04 <_putc_r+0x80>
 402eeec:	30800017 	ldw	r2,0(r6)
 402eef0:	00c00284 	movi	r3,10
 402eef4:	11400005 	stb	r5,0(r2)
 402eef8:	30800017 	ldw	r2,0(r6)
 402eefc:	11400003 	ldbu	r5,0(r2)
 402ef00:	28fff11e 	bne	r5,r3,402eec8 <__flash_rwdata_start+0xffff8970>
 402ef04:	8009883a 	mov	r4,r16
 402ef08:	dfc00317 	ldw	ra,12(sp)
 402ef0c:	dc000217 	ldw	r16,8(sp)
 402ef10:	dec00404 	addi	sp,sp,16
 402ef14:	4030df01 	jmpi	4030df0 <__swbuf_r>
 402ef18:	d9400015 	stw	r5,0(sp)
 402ef1c:	d9800115 	stw	r6,4(sp)
 402ef20:	402cba80 	call	402cba8 <__sinit>
 402ef24:	d9800117 	ldw	r6,4(sp)
 402ef28:	d9400017 	ldw	r5,0(sp)
 402ef2c:	003fdf06 	br	402eeac <__flash_rwdata_start+0xffff8954>

0402ef30 <putc>:
 402ef30:	f811883a 	mov	r8,ra
 402ef34:	40346e80 	call	40346e8 <_mcount>
 402ef38:	403f883a 	mov	ra,r8
 402ef3c:	defffc04 	addi	sp,sp,-16
 402ef40:	dfc00315 	stw	ra,12(sp)
 402ef44:	dc400215 	stw	r17,8(sp)
 402ef48:	dc000115 	stw	r16,4(sp)
 402ef4c:	00800034 	movhi	r2,0
 402ef50:	10886904 	addi	r2,r2,8612
 402ef54:	14000017 	ldw	r16,0(r2)
 402ef58:	2023883a 	mov	r17,r4
 402ef5c:	80000226 	beq	r16,zero,402ef68 <putc+0x38>
 402ef60:	80800e17 	ldw	r2,56(r16)
 402ef64:	10001a26 	beq	r2,zero,402efd0 <putc+0xa0>
 402ef68:	28800217 	ldw	r2,8(r5)
 402ef6c:	10bfffc4 	addi	r2,r2,-1
 402ef70:	28800215 	stw	r2,8(r5)
 402ef74:	10000b16 	blt	r2,zero,402efa4 <putc+0x74>
 402ef78:	28800017 	ldw	r2,0(r5)
 402ef7c:	14400005 	stb	r17,0(r2)
 402ef80:	28800017 	ldw	r2,0(r5)
 402ef84:	10c00044 	addi	r3,r2,1
 402ef88:	28c00015 	stw	r3,0(r5)
 402ef8c:	10800003 	ldbu	r2,0(r2)
 402ef90:	dfc00317 	ldw	ra,12(sp)
 402ef94:	dc400217 	ldw	r17,8(sp)
 402ef98:	dc000117 	ldw	r16,4(sp)
 402ef9c:	dec00404 	addi	sp,sp,16
 402efa0:	f800283a 	ret
 402efa4:	28c00617 	ldw	r3,24(r5)
 402efa8:	10c00e16 	blt	r2,r3,402efe4 <putc+0xb4>
 402efac:	28800017 	ldw	r2,0(r5)
 402efb0:	01000284 	movi	r4,10
 402efb4:	14400005 	stb	r17,0(r2)
 402efb8:	28800017 	ldw	r2,0(r5)
 402efbc:	10c00003 	ldbu	r3,0(r2)
 402efc0:	193ff01e 	bne	r3,r4,402ef84 <__flash_rwdata_start+0xffff8a2c>
 402efc4:	280d883a 	mov	r6,r5
 402efc8:	180b883a 	mov	r5,r3
 402efcc:	00000706 	br	402efec <putc+0xbc>
 402efd0:	8009883a 	mov	r4,r16
 402efd4:	d9400015 	stw	r5,0(sp)
 402efd8:	402cba80 	call	402cba8 <__sinit>
 402efdc:	d9400017 	ldw	r5,0(sp)
 402efe0:	003fe106 	br	402ef68 <__flash_rwdata_start+0xffff8a10>
 402efe4:	280d883a 	mov	r6,r5
 402efe8:	880b883a 	mov	r5,r17
 402efec:	8009883a 	mov	r4,r16
 402eff0:	dfc00317 	ldw	ra,12(sp)
 402eff4:	dc400217 	ldw	r17,8(sp)
 402eff8:	dc000117 	ldw	r16,4(sp)
 402effc:	dec00404 	addi	sp,sp,16
 402f000:	4030df01 	jmpi	4030df0 <__swbuf_r>

0402f004 <_realloc_r>:
 402f004:	f811883a 	mov	r8,ra
 402f008:	40346e80 	call	40346e8 <_mcount>
 402f00c:	403f883a 	mov	ra,r8
 402f010:	defff604 	addi	sp,sp,-40
 402f014:	dfc00915 	stw	ra,36(sp)
 402f018:	df000815 	stw	fp,32(sp)
 402f01c:	ddc00715 	stw	r23,28(sp)
 402f020:	dd800615 	stw	r22,24(sp)
 402f024:	dd400515 	stw	r21,20(sp)
 402f028:	dd000415 	stw	r20,16(sp)
 402f02c:	dcc00315 	stw	r19,12(sp)
 402f030:	dc800215 	stw	r18,8(sp)
 402f034:	dc400115 	stw	r17,4(sp)
 402f038:	dc000015 	stw	r16,0(sp)
 402f03c:	3025883a 	mov	r18,r6
 402f040:	2800b726 	beq	r5,zero,402f320 <_realloc_r+0x31c>
 402f044:	282b883a 	mov	r21,r5
 402f048:	2029883a 	mov	r20,r4
 402f04c:	40346c80 	call	40346c8 <__malloc_lock>
 402f050:	a8bfff17 	ldw	r2,-4(r21)
 402f054:	043fff04 	movi	r16,-4
 402f058:	90c002c4 	addi	r3,r18,11
 402f05c:	01000584 	movi	r4,22
 402f060:	acfffe04 	addi	r19,r21,-8
 402f064:	1420703a 	and	r16,r2,r16
 402f068:	20c0332e 	bgeu	r4,r3,402f138 <_realloc_r+0x134>
 402f06c:	047ffe04 	movi	r17,-8
 402f070:	1c62703a 	and	r17,r3,r17
 402f074:	8807883a 	mov	r3,r17
 402f078:	88005816 	blt	r17,zero,402f1dc <_realloc_r+0x1d8>
 402f07c:	8c805736 	bltu	r17,r18,402f1dc <_realloc_r+0x1d8>
 402f080:	80c0300e 	bge	r16,r3,402f144 <_realloc_r+0x140>
 402f084:	07000034 	movhi	fp,0
 402f088:	e701a204 	addi	fp,fp,1672
 402f08c:	e1c00217 	ldw	r7,8(fp)
 402f090:	9c09883a 	add	r4,r19,r16
 402f094:	22000117 	ldw	r8,4(r4)
 402f098:	21c06326 	beq	r4,r7,402f228 <_realloc_r+0x224>
 402f09c:	017fff84 	movi	r5,-2
 402f0a0:	414a703a 	and	r5,r8,r5
 402f0a4:	214b883a 	add	r5,r4,r5
 402f0a8:	29800117 	ldw	r6,4(r5)
 402f0ac:	3180004c 	andi	r6,r6,1
 402f0b0:	30003f26 	beq	r6,zero,402f1b0 <_realloc_r+0x1ac>
 402f0b4:	1080004c 	andi	r2,r2,1
 402f0b8:	10008326 	beq	r2,zero,402f2c8 <_realloc_r+0x2c4>
 402f0bc:	900b883a 	mov	r5,r18
 402f0c0:	a009883a 	mov	r4,r20
 402f0c4:	40277600 	call	4027760 <_malloc_r>
 402f0c8:	1025883a 	mov	r18,r2
 402f0cc:	10011e26 	beq	r2,zero,402f548 <_realloc_r+0x544>
 402f0d0:	a93fff17 	ldw	r4,-4(r21)
 402f0d4:	10fffe04 	addi	r3,r2,-8
 402f0d8:	00bfff84 	movi	r2,-2
 402f0dc:	2084703a 	and	r2,r4,r2
 402f0e0:	9885883a 	add	r2,r19,r2
 402f0e4:	1880ee26 	beq	r3,r2,402f4a0 <_realloc_r+0x49c>
 402f0e8:	81bfff04 	addi	r6,r16,-4
 402f0ec:	00800904 	movi	r2,36
 402f0f0:	1180b836 	bltu	r2,r6,402f3d4 <_realloc_r+0x3d0>
 402f0f4:	00c004c4 	movi	r3,19
 402f0f8:	19809636 	bltu	r3,r6,402f354 <_realloc_r+0x350>
 402f0fc:	9005883a 	mov	r2,r18
 402f100:	a807883a 	mov	r3,r21
 402f104:	19000017 	ldw	r4,0(r3)
 402f108:	11000015 	stw	r4,0(r2)
 402f10c:	19000117 	ldw	r4,4(r3)
 402f110:	11000115 	stw	r4,4(r2)
 402f114:	18c00217 	ldw	r3,8(r3)
 402f118:	10c00215 	stw	r3,8(r2)
 402f11c:	a80b883a 	mov	r5,r21
 402f120:	a009883a 	mov	r4,r20
 402f124:	402cd7c0 	call	402cd7c <_free_r>
 402f128:	a009883a 	mov	r4,r20
 402f12c:	40346d80 	call	40346d8 <__malloc_unlock>
 402f130:	9005883a 	mov	r2,r18
 402f134:	00001206 	br	402f180 <_realloc_r+0x17c>
 402f138:	00c00404 	movi	r3,16
 402f13c:	1823883a 	mov	r17,r3
 402f140:	003fce06 	br	402f07c <__flash_rwdata_start+0xffff8b24>
 402f144:	a825883a 	mov	r18,r21
 402f148:	8445c83a 	sub	r2,r16,r17
 402f14c:	00c003c4 	movi	r3,15
 402f150:	18802636 	bltu	r3,r2,402f1ec <_realloc_r+0x1e8>
 402f154:	99800117 	ldw	r6,4(r19)
 402f158:	9c07883a 	add	r3,r19,r16
 402f15c:	3180004c 	andi	r6,r6,1
 402f160:	3420b03a 	or	r16,r6,r16
 402f164:	9c000115 	stw	r16,4(r19)
 402f168:	18800117 	ldw	r2,4(r3)
 402f16c:	10800054 	ori	r2,r2,1
 402f170:	18800115 	stw	r2,4(r3)
 402f174:	a009883a 	mov	r4,r20
 402f178:	40346d80 	call	40346d8 <__malloc_unlock>
 402f17c:	9005883a 	mov	r2,r18
 402f180:	dfc00917 	ldw	ra,36(sp)
 402f184:	df000817 	ldw	fp,32(sp)
 402f188:	ddc00717 	ldw	r23,28(sp)
 402f18c:	dd800617 	ldw	r22,24(sp)
 402f190:	dd400517 	ldw	r21,20(sp)
 402f194:	dd000417 	ldw	r20,16(sp)
 402f198:	dcc00317 	ldw	r19,12(sp)
 402f19c:	dc800217 	ldw	r18,8(sp)
 402f1a0:	dc400117 	ldw	r17,4(sp)
 402f1a4:	dc000017 	ldw	r16,0(sp)
 402f1a8:	dec00a04 	addi	sp,sp,40
 402f1ac:	f800283a 	ret
 402f1b0:	017fff04 	movi	r5,-4
 402f1b4:	414a703a 	and	r5,r8,r5
 402f1b8:	814d883a 	add	r6,r16,r5
 402f1bc:	30c01f16 	blt	r6,r3,402f23c <_realloc_r+0x238>
 402f1c0:	20800317 	ldw	r2,12(r4)
 402f1c4:	20c00217 	ldw	r3,8(r4)
 402f1c8:	a825883a 	mov	r18,r21
 402f1cc:	3021883a 	mov	r16,r6
 402f1d0:	18800315 	stw	r2,12(r3)
 402f1d4:	10c00215 	stw	r3,8(r2)
 402f1d8:	003fdb06 	br	402f148 <__flash_rwdata_start+0xffff8bf0>
 402f1dc:	00800304 	movi	r2,12
 402f1e0:	a0800015 	stw	r2,0(r20)
 402f1e4:	0005883a 	mov	r2,zero
 402f1e8:	003fe506 	br	402f180 <__flash_rwdata_start+0xffff8c28>
 402f1ec:	98c00117 	ldw	r3,4(r19)
 402f1f0:	9c4b883a 	add	r5,r19,r17
 402f1f4:	11000054 	ori	r4,r2,1
 402f1f8:	18c0004c 	andi	r3,r3,1
 402f1fc:	1c62b03a 	or	r17,r3,r17
 402f200:	9c400115 	stw	r17,4(r19)
 402f204:	29000115 	stw	r4,4(r5)
 402f208:	2885883a 	add	r2,r5,r2
 402f20c:	10c00117 	ldw	r3,4(r2)
 402f210:	29400204 	addi	r5,r5,8
 402f214:	a009883a 	mov	r4,r20
 402f218:	18c00054 	ori	r3,r3,1
 402f21c:	10c00115 	stw	r3,4(r2)
 402f220:	402cd7c0 	call	402cd7c <_free_r>
 402f224:	003fd306 	br	402f174 <__flash_rwdata_start+0xffff8c1c>
 402f228:	017fff04 	movi	r5,-4
 402f22c:	414a703a 	and	r5,r8,r5
 402f230:	89800404 	addi	r6,r17,16
 402f234:	8151883a 	add	r8,r16,r5
 402f238:	4180590e 	bge	r8,r6,402f3a0 <_realloc_r+0x39c>
 402f23c:	1080004c 	andi	r2,r2,1
 402f240:	103f9e1e 	bne	r2,zero,402f0bc <__flash_rwdata_start+0xffff8b64>
 402f244:	adbffe17 	ldw	r22,-8(r21)
 402f248:	00bfff04 	movi	r2,-4
 402f24c:	9dadc83a 	sub	r22,r19,r22
 402f250:	b1800117 	ldw	r6,4(r22)
 402f254:	3084703a 	and	r2,r6,r2
 402f258:	20002026 	beq	r4,zero,402f2dc <_realloc_r+0x2d8>
 402f25c:	80af883a 	add	r23,r16,r2
 402f260:	b96f883a 	add	r23,r23,r5
 402f264:	21c05f26 	beq	r4,r7,402f3e4 <_realloc_r+0x3e0>
 402f268:	b8c01c16 	blt	r23,r3,402f2dc <_realloc_r+0x2d8>
 402f26c:	20800317 	ldw	r2,12(r4)
 402f270:	20c00217 	ldw	r3,8(r4)
 402f274:	81bfff04 	addi	r6,r16,-4
 402f278:	01000904 	movi	r4,36
 402f27c:	18800315 	stw	r2,12(r3)
 402f280:	10c00215 	stw	r3,8(r2)
 402f284:	b0c00217 	ldw	r3,8(r22)
 402f288:	b0800317 	ldw	r2,12(r22)
 402f28c:	b4800204 	addi	r18,r22,8
 402f290:	18800315 	stw	r2,12(r3)
 402f294:	10c00215 	stw	r3,8(r2)
 402f298:	21801b36 	bltu	r4,r6,402f308 <_realloc_r+0x304>
 402f29c:	008004c4 	movi	r2,19
 402f2a0:	1180352e 	bgeu	r2,r6,402f378 <_realloc_r+0x374>
 402f2a4:	a8800017 	ldw	r2,0(r21)
 402f2a8:	b0800215 	stw	r2,8(r22)
 402f2ac:	a8800117 	ldw	r2,4(r21)
 402f2b0:	b0800315 	stw	r2,12(r22)
 402f2b4:	008006c4 	movi	r2,27
 402f2b8:	11807f36 	bltu	r2,r6,402f4b8 <_realloc_r+0x4b4>
 402f2bc:	b0800404 	addi	r2,r22,16
 402f2c0:	ad400204 	addi	r21,r21,8
 402f2c4:	00002d06 	br	402f37c <_realloc_r+0x378>
 402f2c8:	adbffe17 	ldw	r22,-8(r21)
 402f2cc:	00bfff04 	movi	r2,-4
 402f2d0:	9dadc83a 	sub	r22,r19,r22
 402f2d4:	b1000117 	ldw	r4,4(r22)
 402f2d8:	2084703a 	and	r2,r4,r2
 402f2dc:	b03f7726 	beq	r22,zero,402f0bc <__flash_rwdata_start+0xffff8b64>
 402f2e0:	80af883a 	add	r23,r16,r2
 402f2e4:	b8ff7516 	blt	r23,r3,402f0bc <__flash_rwdata_start+0xffff8b64>
 402f2e8:	b0800317 	ldw	r2,12(r22)
 402f2ec:	b0c00217 	ldw	r3,8(r22)
 402f2f0:	81bfff04 	addi	r6,r16,-4
 402f2f4:	01000904 	movi	r4,36
 402f2f8:	18800315 	stw	r2,12(r3)
 402f2fc:	10c00215 	stw	r3,8(r2)
 402f300:	b4800204 	addi	r18,r22,8
 402f304:	21bfe52e 	bgeu	r4,r6,402f29c <__flash_rwdata_start+0xffff8d44>
 402f308:	a80b883a 	mov	r5,r21
 402f30c:	9009883a 	mov	r4,r18
 402f310:	402dc480 	call	402dc48 <memmove>
 402f314:	b821883a 	mov	r16,r23
 402f318:	b027883a 	mov	r19,r22
 402f31c:	003f8a06 	br	402f148 <__flash_rwdata_start+0xffff8bf0>
 402f320:	300b883a 	mov	r5,r6
 402f324:	dfc00917 	ldw	ra,36(sp)
 402f328:	df000817 	ldw	fp,32(sp)
 402f32c:	ddc00717 	ldw	r23,28(sp)
 402f330:	dd800617 	ldw	r22,24(sp)
 402f334:	dd400517 	ldw	r21,20(sp)
 402f338:	dd000417 	ldw	r20,16(sp)
 402f33c:	dcc00317 	ldw	r19,12(sp)
 402f340:	dc800217 	ldw	r18,8(sp)
 402f344:	dc400117 	ldw	r17,4(sp)
 402f348:	dc000017 	ldw	r16,0(sp)
 402f34c:	dec00a04 	addi	sp,sp,40
 402f350:	40277601 	jmpi	4027760 <_malloc_r>
 402f354:	a8c00017 	ldw	r3,0(r21)
 402f358:	90c00015 	stw	r3,0(r18)
 402f35c:	a8c00117 	ldw	r3,4(r21)
 402f360:	90c00115 	stw	r3,4(r18)
 402f364:	00c006c4 	movi	r3,27
 402f368:	19804536 	bltu	r3,r6,402f480 <_realloc_r+0x47c>
 402f36c:	90800204 	addi	r2,r18,8
 402f370:	a8c00204 	addi	r3,r21,8
 402f374:	003f6306 	br	402f104 <__flash_rwdata_start+0xffff8bac>
 402f378:	9005883a 	mov	r2,r18
 402f37c:	a8c00017 	ldw	r3,0(r21)
 402f380:	b821883a 	mov	r16,r23
 402f384:	b027883a 	mov	r19,r22
 402f388:	10c00015 	stw	r3,0(r2)
 402f38c:	a8c00117 	ldw	r3,4(r21)
 402f390:	10c00115 	stw	r3,4(r2)
 402f394:	a8c00217 	ldw	r3,8(r21)
 402f398:	10c00215 	stw	r3,8(r2)
 402f39c:	003f6a06 	br	402f148 <__flash_rwdata_start+0xffff8bf0>
 402f3a0:	9c67883a 	add	r19,r19,r17
 402f3a4:	4445c83a 	sub	r2,r8,r17
 402f3a8:	e4c00215 	stw	r19,8(fp)
 402f3ac:	10800054 	ori	r2,r2,1
 402f3b0:	98800115 	stw	r2,4(r19)
 402f3b4:	a8bfff17 	ldw	r2,-4(r21)
 402f3b8:	a009883a 	mov	r4,r20
 402f3bc:	1080004c 	andi	r2,r2,1
 402f3c0:	1462b03a 	or	r17,r2,r17
 402f3c4:	ac7fff15 	stw	r17,-4(r21)
 402f3c8:	40346d80 	call	40346d8 <__malloc_unlock>
 402f3cc:	a805883a 	mov	r2,r21
 402f3d0:	003f6b06 	br	402f180 <__flash_rwdata_start+0xffff8c28>
 402f3d4:	a80b883a 	mov	r5,r21
 402f3d8:	9009883a 	mov	r4,r18
 402f3dc:	402dc480 	call	402dc48 <memmove>
 402f3e0:	003f4e06 	br	402f11c <__flash_rwdata_start+0xffff8bc4>
 402f3e4:	89000404 	addi	r4,r17,16
 402f3e8:	b93fbc16 	blt	r23,r4,402f2dc <__flash_rwdata_start+0xffff8d84>
 402f3ec:	b0800317 	ldw	r2,12(r22)
 402f3f0:	b0c00217 	ldw	r3,8(r22)
 402f3f4:	81bfff04 	addi	r6,r16,-4
 402f3f8:	01000904 	movi	r4,36
 402f3fc:	18800315 	stw	r2,12(r3)
 402f400:	10c00215 	stw	r3,8(r2)
 402f404:	b4800204 	addi	r18,r22,8
 402f408:	21804336 	bltu	r4,r6,402f518 <_realloc_r+0x514>
 402f40c:	008004c4 	movi	r2,19
 402f410:	11803f2e 	bgeu	r2,r6,402f510 <_realloc_r+0x50c>
 402f414:	a8800017 	ldw	r2,0(r21)
 402f418:	b0800215 	stw	r2,8(r22)
 402f41c:	a8800117 	ldw	r2,4(r21)
 402f420:	b0800315 	stw	r2,12(r22)
 402f424:	008006c4 	movi	r2,27
 402f428:	11803f36 	bltu	r2,r6,402f528 <_realloc_r+0x524>
 402f42c:	b0800404 	addi	r2,r22,16
 402f430:	ad400204 	addi	r21,r21,8
 402f434:	a8c00017 	ldw	r3,0(r21)
 402f438:	10c00015 	stw	r3,0(r2)
 402f43c:	a8c00117 	ldw	r3,4(r21)
 402f440:	10c00115 	stw	r3,4(r2)
 402f444:	a8c00217 	ldw	r3,8(r21)
 402f448:	10c00215 	stw	r3,8(r2)
 402f44c:	b447883a 	add	r3,r22,r17
 402f450:	bc45c83a 	sub	r2,r23,r17
 402f454:	e0c00215 	stw	r3,8(fp)
 402f458:	10800054 	ori	r2,r2,1
 402f45c:	18800115 	stw	r2,4(r3)
 402f460:	b0800117 	ldw	r2,4(r22)
 402f464:	a009883a 	mov	r4,r20
 402f468:	1080004c 	andi	r2,r2,1
 402f46c:	1462b03a 	or	r17,r2,r17
 402f470:	b4400115 	stw	r17,4(r22)
 402f474:	40346d80 	call	40346d8 <__malloc_unlock>
 402f478:	9005883a 	mov	r2,r18
 402f47c:	003f4006 	br	402f180 <__flash_rwdata_start+0xffff8c28>
 402f480:	a8c00217 	ldw	r3,8(r21)
 402f484:	90c00215 	stw	r3,8(r18)
 402f488:	a8c00317 	ldw	r3,12(r21)
 402f48c:	90c00315 	stw	r3,12(r18)
 402f490:	30801126 	beq	r6,r2,402f4d8 <_realloc_r+0x4d4>
 402f494:	90800404 	addi	r2,r18,16
 402f498:	a8c00404 	addi	r3,r21,16
 402f49c:	003f1906 	br	402f104 <__flash_rwdata_start+0xffff8bac>
 402f4a0:	90ffff17 	ldw	r3,-4(r18)
 402f4a4:	00bfff04 	movi	r2,-4
 402f4a8:	a825883a 	mov	r18,r21
 402f4ac:	1884703a 	and	r2,r3,r2
 402f4b0:	80a1883a 	add	r16,r16,r2
 402f4b4:	003f2406 	br	402f148 <__flash_rwdata_start+0xffff8bf0>
 402f4b8:	a8800217 	ldw	r2,8(r21)
 402f4bc:	b0800415 	stw	r2,16(r22)
 402f4c0:	a8800317 	ldw	r2,12(r21)
 402f4c4:	b0800515 	stw	r2,20(r22)
 402f4c8:	31000a26 	beq	r6,r4,402f4f4 <_realloc_r+0x4f0>
 402f4cc:	b0800604 	addi	r2,r22,24
 402f4d0:	ad400404 	addi	r21,r21,16
 402f4d4:	003fa906 	br	402f37c <__flash_rwdata_start+0xffff8e24>
 402f4d8:	a9000417 	ldw	r4,16(r21)
 402f4dc:	90800604 	addi	r2,r18,24
 402f4e0:	a8c00604 	addi	r3,r21,24
 402f4e4:	91000415 	stw	r4,16(r18)
 402f4e8:	a9000517 	ldw	r4,20(r21)
 402f4ec:	91000515 	stw	r4,20(r18)
 402f4f0:	003f0406 	br	402f104 <__flash_rwdata_start+0xffff8bac>
 402f4f4:	a8c00417 	ldw	r3,16(r21)
 402f4f8:	ad400604 	addi	r21,r21,24
 402f4fc:	b0800804 	addi	r2,r22,32
 402f500:	b0c00615 	stw	r3,24(r22)
 402f504:	a8ffff17 	ldw	r3,-4(r21)
 402f508:	b0c00715 	stw	r3,28(r22)
 402f50c:	003f9b06 	br	402f37c <__flash_rwdata_start+0xffff8e24>
 402f510:	9005883a 	mov	r2,r18
 402f514:	003fc706 	br	402f434 <__flash_rwdata_start+0xffff8edc>
 402f518:	a80b883a 	mov	r5,r21
 402f51c:	9009883a 	mov	r4,r18
 402f520:	402dc480 	call	402dc48 <memmove>
 402f524:	003fc906 	br	402f44c <__flash_rwdata_start+0xffff8ef4>
 402f528:	a8800217 	ldw	r2,8(r21)
 402f52c:	b0800415 	stw	r2,16(r22)
 402f530:	a8800317 	ldw	r2,12(r21)
 402f534:	b0800515 	stw	r2,20(r22)
 402f538:	31000726 	beq	r6,r4,402f558 <_realloc_r+0x554>
 402f53c:	b0800604 	addi	r2,r22,24
 402f540:	ad400404 	addi	r21,r21,16
 402f544:	003fbb06 	br	402f434 <__flash_rwdata_start+0xffff8edc>
 402f548:	a009883a 	mov	r4,r20
 402f54c:	40346d80 	call	40346d8 <__malloc_unlock>
 402f550:	0005883a 	mov	r2,zero
 402f554:	003f0a06 	br	402f180 <__flash_rwdata_start+0xffff8c28>
 402f558:	a8c00417 	ldw	r3,16(r21)
 402f55c:	ad400604 	addi	r21,r21,24
 402f560:	b0800804 	addi	r2,r22,32
 402f564:	b0c00615 	stw	r3,24(r22)
 402f568:	a8ffff17 	ldw	r3,-4(r21)
 402f56c:	b0c00715 	stw	r3,28(r22)
 402f570:	003fb006 	br	402f434 <__flash_rwdata_start+0xffff8edc>

0402f574 <__fpclassifyd>:
 402f574:	f811883a 	mov	r8,ra
 402f578:	40346e80 	call	40346e8 <_mcount>
 402f57c:	403f883a 	mov	ra,r8
 402f580:	00a00034 	movhi	r2,32768
 402f584:	10bfffc4 	addi	r2,r2,-1
 402f588:	2884703a 	and	r2,r5,r2
 402f58c:	10000726 	beq	r2,zero,402f5ac <__fpclassifyd+0x38>
 402f590:	00fffc34 	movhi	r3,65520
 402f594:	019ff834 	movhi	r6,32736
 402f598:	28c7883a 	add	r3,r5,r3
 402f59c:	31bfffc4 	addi	r6,r6,-1
 402f5a0:	30c00536 	bltu	r6,r3,402f5b8 <__fpclassifyd+0x44>
 402f5a4:	00800104 	movi	r2,4
 402f5a8:	f800283a 	ret
 402f5ac:	2000021e 	bne	r4,zero,402f5b8 <__fpclassifyd+0x44>
 402f5b0:	00800084 	movi	r2,2
 402f5b4:	f800283a 	ret
 402f5b8:	00dffc34 	movhi	r3,32752
 402f5bc:	019ff834 	movhi	r6,32736
 402f5c0:	28cb883a 	add	r5,r5,r3
 402f5c4:	31bfffc4 	addi	r6,r6,-1
 402f5c8:	317ff62e 	bgeu	r6,r5,402f5a4 <__flash_rwdata_start+0xffff904c>
 402f5cc:	01400434 	movhi	r5,16
 402f5d0:	297fffc4 	addi	r5,r5,-1
 402f5d4:	28800236 	bltu	r5,r2,402f5e0 <__fpclassifyd+0x6c>
 402f5d8:	008000c4 	movi	r2,3
 402f5dc:	003ff206 	br	402f5a8 <__flash_rwdata_start+0xffff9050>
 402f5e0:	10c00226 	beq	r2,r3,402f5ec <__fpclassifyd+0x78>
 402f5e4:	0005883a 	mov	r2,zero
 402f5e8:	003fef06 	br	402f5a8 <__flash_rwdata_start+0xffff9050>
 402f5ec:	2005003a 	cmpeq	r2,r4,zero
 402f5f0:	003fed06 	br	402f5a8 <__flash_rwdata_start+0xffff9050>

0402f5f4 <__sread>:
 402f5f4:	f811883a 	mov	r8,ra
 402f5f8:	40346e80 	call	40346e8 <_mcount>
 402f5fc:	403f883a 	mov	ra,r8
 402f600:	defffe04 	addi	sp,sp,-8
 402f604:	dfc00115 	stw	ra,4(sp)
 402f608:	dc000015 	stw	r16,0(sp)
 402f60c:	2821883a 	mov	r16,r5
 402f610:	2940038f 	ldh	r5,14(r5)
 402f614:	40315780 	call	4031578 <_read_r>
 402f618:	10000716 	blt	r2,zero,402f638 <__sread+0x44>
 402f61c:	80c01417 	ldw	r3,80(r16)
 402f620:	1887883a 	add	r3,r3,r2
 402f624:	80c01415 	stw	r3,80(r16)
 402f628:	dfc00117 	ldw	ra,4(sp)
 402f62c:	dc000017 	ldw	r16,0(sp)
 402f630:	dec00204 	addi	sp,sp,8
 402f634:	f800283a 	ret
 402f638:	80c0030b 	ldhu	r3,12(r16)
 402f63c:	18fbffcc 	andi	r3,r3,61439
 402f640:	80c0030d 	sth	r3,12(r16)
 402f644:	dfc00117 	ldw	ra,4(sp)
 402f648:	dc000017 	ldw	r16,0(sp)
 402f64c:	dec00204 	addi	sp,sp,8
 402f650:	f800283a 	ret

0402f654 <__seofread>:
 402f654:	f811883a 	mov	r8,ra
 402f658:	40346e80 	call	40346e8 <_mcount>
 402f65c:	403f883a 	mov	ra,r8
 402f660:	0005883a 	mov	r2,zero
 402f664:	f800283a 	ret

0402f668 <__swrite>:
 402f668:	f811883a 	mov	r8,ra
 402f66c:	40346e80 	call	40346e8 <_mcount>
 402f670:	403f883a 	mov	ra,r8
 402f674:	defffb04 	addi	sp,sp,-20
 402f678:	dfc00415 	stw	ra,16(sp)
 402f67c:	dcc00315 	stw	r19,12(sp)
 402f680:	dc800215 	stw	r18,8(sp)
 402f684:	dc400115 	stw	r17,4(sp)
 402f688:	dc000015 	stw	r16,0(sp)
 402f68c:	2880030b 	ldhu	r2,12(r5)
 402f690:	2821883a 	mov	r16,r5
 402f694:	2023883a 	mov	r17,r4
 402f698:	10c0400c 	andi	r3,r2,256
 402f69c:	3025883a 	mov	r18,r6
 402f6a0:	3827883a 	mov	r19,r7
 402f6a4:	18000526 	beq	r3,zero,402f6bc <__swrite+0x54>
 402f6a8:	2940038f 	ldh	r5,14(r5)
 402f6ac:	01c00084 	movi	r7,2
 402f6b0:	000d883a 	mov	r6,zero
 402f6b4:	403150c0 	call	403150c <_lseek_r>
 402f6b8:	8080030b 	ldhu	r2,12(r16)
 402f6bc:	8140038f 	ldh	r5,14(r16)
 402f6c0:	10bbffcc 	andi	r2,r2,61439
 402f6c4:	980f883a 	mov	r7,r19
 402f6c8:	900d883a 	mov	r6,r18
 402f6cc:	8809883a 	mov	r4,r17
 402f6d0:	8080030d 	sth	r2,12(r16)
 402f6d4:	dfc00417 	ldw	ra,16(sp)
 402f6d8:	dcc00317 	ldw	r19,12(sp)
 402f6dc:	dc800217 	ldw	r18,8(sp)
 402f6e0:	dc400117 	ldw	r17,4(sp)
 402f6e4:	dc000017 	ldw	r16,0(sp)
 402f6e8:	dec00504 	addi	sp,sp,20
 402f6ec:	4030f601 	jmpi	4030f60 <_write_r>

0402f6f0 <__sseek>:
 402f6f0:	f811883a 	mov	r8,ra
 402f6f4:	40346e80 	call	40346e8 <_mcount>
 402f6f8:	403f883a 	mov	ra,r8
 402f6fc:	defffe04 	addi	sp,sp,-8
 402f700:	dfc00115 	stw	ra,4(sp)
 402f704:	dc000015 	stw	r16,0(sp)
 402f708:	2821883a 	mov	r16,r5
 402f70c:	2940038f 	ldh	r5,14(r5)
 402f710:	403150c0 	call	403150c <_lseek_r>
 402f714:	00ffffc4 	movi	r3,-1
 402f718:	10c00826 	beq	r2,r3,402f73c <__sseek+0x4c>
 402f71c:	80c0030b 	ldhu	r3,12(r16)
 402f720:	80801415 	stw	r2,80(r16)
 402f724:	18c40014 	ori	r3,r3,4096
 402f728:	80c0030d 	sth	r3,12(r16)
 402f72c:	dfc00117 	ldw	ra,4(sp)
 402f730:	dc000017 	ldw	r16,0(sp)
 402f734:	dec00204 	addi	sp,sp,8
 402f738:	f800283a 	ret
 402f73c:	80c0030b 	ldhu	r3,12(r16)
 402f740:	18fbffcc 	andi	r3,r3,61439
 402f744:	80c0030d 	sth	r3,12(r16)
 402f748:	dfc00117 	ldw	ra,4(sp)
 402f74c:	dc000017 	ldw	r16,0(sp)
 402f750:	dec00204 	addi	sp,sp,8
 402f754:	f800283a 	ret

0402f758 <__sclose>:
 402f758:	f811883a 	mov	r8,ra
 402f75c:	40346e80 	call	40346e8 <_mcount>
 402f760:	403f883a 	mov	ra,r8
 402f764:	2940038f 	ldh	r5,14(r5)
 402f768:	4030fcc1 	jmpi	4030fcc <_close_r>

0402f76c <__sprint_r.part.0>:
 402f76c:	f811883a 	mov	r8,ra
 402f770:	40346e80 	call	40346e8 <_mcount>
 402f774:	403f883a 	mov	ra,r8
 402f778:	defff604 	addi	sp,sp,-40
 402f77c:	dfc00915 	stw	ra,36(sp)
 402f780:	df000815 	stw	fp,32(sp)
 402f784:	ddc00715 	stw	r23,28(sp)
 402f788:	dd800615 	stw	r22,24(sp)
 402f78c:	dd400515 	stw	r21,20(sp)
 402f790:	dd000415 	stw	r20,16(sp)
 402f794:	dcc00315 	stw	r19,12(sp)
 402f798:	dc800215 	stw	r18,8(sp)
 402f79c:	dc400115 	stw	r17,4(sp)
 402f7a0:	dc000015 	stw	r16,0(sp)
 402f7a4:	28801917 	ldw	r2,100(r5)
 402f7a8:	302b883a 	mov	r21,r6
 402f7ac:	1088000c 	andi	r2,r2,8192
 402f7b0:	10002e26 	beq	r2,zero,402f86c <__sprint_r.part.0+0x100>
 402f7b4:	30800217 	ldw	r2,8(r6)
 402f7b8:	35800017 	ldw	r22,0(r6)
 402f7bc:	10002926 	beq	r2,zero,402f864 <__sprint_r.part.0+0xf8>
 402f7c0:	2827883a 	mov	r19,r5
 402f7c4:	2029883a 	mov	r20,r4
 402f7c8:	b5c00104 	addi	r23,r22,4
 402f7cc:	04bfffc4 	movi	r18,-1
 402f7d0:	bc400017 	ldw	r17,0(r23)
 402f7d4:	b4000017 	ldw	r16,0(r22)
 402f7d8:	0039883a 	mov	fp,zero
 402f7dc:	8822d0ba 	srli	r17,r17,2
 402f7e0:	8800031e 	bne	r17,zero,402f7f0 <__sprint_r.part.0+0x84>
 402f7e4:	00001806 	br	402f848 <__sprint_r.part.0+0xdc>
 402f7e8:	84000104 	addi	r16,r16,4
 402f7ec:	8f001526 	beq	r17,fp,402f844 <__sprint_r.part.0+0xd8>
 402f7f0:	81400017 	ldw	r5,0(r16)
 402f7f4:	980d883a 	mov	r6,r19
 402f7f8:	a009883a 	mov	r4,r20
 402f7fc:	40313880 	call	4031388 <_fputwc_r>
 402f800:	e7000044 	addi	fp,fp,1
 402f804:	14bff81e 	bne	r2,r18,402f7e8 <__flash_rwdata_start+0xffff9290>
 402f808:	9005883a 	mov	r2,r18
 402f80c:	a8000215 	stw	zero,8(r21)
 402f810:	a8000115 	stw	zero,4(r21)
 402f814:	dfc00917 	ldw	ra,36(sp)
 402f818:	df000817 	ldw	fp,32(sp)
 402f81c:	ddc00717 	ldw	r23,28(sp)
 402f820:	dd800617 	ldw	r22,24(sp)
 402f824:	dd400517 	ldw	r21,20(sp)
 402f828:	dd000417 	ldw	r20,16(sp)
 402f82c:	dcc00317 	ldw	r19,12(sp)
 402f830:	dc800217 	ldw	r18,8(sp)
 402f834:	dc400117 	ldw	r17,4(sp)
 402f838:	dc000017 	ldw	r16,0(sp)
 402f83c:	dec00a04 	addi	sp,sp,40
 402f840:	f800283a 	ret
 402f844:	a8800217 	ldw	r2,8(r21)
 402f848:	8c63883a 	add	r17,r17,r17
 402f84c:	8c63883a 	add	r17,r17,r17
 402f850:	1445c83a 	sub	r2,r2,r17
 402f854:	a8800215 	stw	r2,8(r21)
 402f858:	b5800204 	addi	r22,r22,8
 402f85c:	bdc00204 	addi	r23,r23,8
 402f860:	103fdb1e 	bne	r2,zero,402f7d0 <__flash_rwdata_start+0xffff9278>
 402f864:	0005883a 	mov	r2,zero
 402f868:	003fe806 	br	402f80c <__flash_rwdata_start+0xffff92b4>
 402f86c:	402d0980 	call	402d098 <__sfvwrite_r>
 402f870:	003fe606 	br	402f80c <__flash_rwdata_start+0xffff92b4>

0402f874 <__sprint_r>:
 402f874:	f811883a 	mov	r8,ra
 402f878:	40346e80 	call	40346e8 <_mcount>
 402f87c:	403f883a 	mov	ra,r8
 402f880:	30c00217 	ldw	r3,8(r6)
 402f884:	18000126 	beq	r3,zero,402f88c <__sprint_r+0x18>
 402f888:	402f76c1 	jmpi	402f76c <__sprint_r.part.0>
 402f88c:	0005883a 	mov	r2,zero
 402f890:	30000115 	stw	zero,4(r6)
 402f894:	f800283a 	ret

0402f898 <___vfiprintf_internal_r>:
 402f898:	f811883a 	mov	r8,ra
 402f89c:	40346e80 	call	40346e8 <_mcount>
 402f8a0:	403f883a 	mov	ra,r8
 402f8a4:	deffc904 	addi	sp,sp,-220
 402f8a8:	dfc03615 	stw	ra,216(sp)
 402f8ac:	df003515 	stw	fp,212(sp)
 402f8b0:	ddc03415 	stw	r23,208(sp)
 402f8b4:	dd803315 	stw	r22,204(sp)
 402f8b8:	dd403215 	stw	r21,200(sp)
 402f8bc:	dd003115 	stw	r20,196(sp)
 402f8c0:	dcc03015 	stw	r19,192(sp)
 402f8c4:	dc802f15 	stw	r18,188(sp)
 402f8c8:	dc402e15 	stw	r17,184(sp)
 402f8cc:	dc002d15 	stw	r16,180(sp)
 402f8d0:	d9002015 	stw	r4,128(sp)
 402f8d4:	d9c02215 	stw	r7,136(sp)
 402f8d8:	2829883a 	mov	r20,r5
 402f8dc:	3039883a 	mov	fp,r6
 402f8e0:	20000226 	beq	r4,zero,402f8ec <___vfiprintf_internal_r+0x54>
 402f8e4:	20800e17 	ldw	r2,56(r4)
 402f8e8:	1000cf26 	beq	r2,zero,402fc28 <___vfiprintf_internal_r+0x390>
 402f8ec:	a080030b 	ldhu	r2,12(r20)
 402f8f0:	10c8000c 	andi	r3,r2,8192
 402f8f4:	1800061e 	bne	r3,zero,402f910 <___vfiprintf_internal_r+0x78>
 402f8f8:	a1001917 	ldw	r4,100(r20)
 402f8fc:	00f7ffc4 	movi	r3,-8193
 402f900:	10880014 	ori	r2,r2,8192
 402f904:	20c6703a 	and	r3,r4,r3
 402f908:	a080030d 	sth	r2,12(r20)
 402f90c:	a0c01915 	stw	r3,100(r20)
 402f910:	10c0020c 	andi	r3,r2,8
 402f914:	1800a926 	beq	r3,zero,402fbbc <___vfiprintf_internal_r+0x324>
 402f918:	a0c00417 	ldw	r3,16(r20)
 402f91c:	1800a726 	beq	r3,zero,402fbbc <___vfiprintf_internal_r+0x324>
 402f920:	1080068c 	andi	r2,r2,26
 402f924:	00c00284 	movi	r3,10
 402f928:	10c0ac26 	beq	r2,r3,402fbdc <___vfiprintf_internal_r+0x344>
 402f92c:	da801a04 	addi	r10,sp,104
 402f930:	da801e15 	stw	r10,120(sp)
 402f934:	d8801e17 	ldw	r2,120(sp)
 402f938:	da8019c4 	addi	r10,sp,103
 402f93c:	05800034 	movhi	r22,0
 402f940:	05c00034 	movhi	r23,0
 402f944:	da801f15 	stw	r10,124(sp)
 402f948:	1295c83a 	sub	r10,r2,r10
 402f94c:	b5819704 	addi	r22,r22,1628
 402f950:	bdc19304 	addi	r23,r23,1612
 402f954:	dec01a15 	stw	sp,104(sp)
 402f958:	d8001c15 	stw	zero,112(sp)
 402f95c:	d8001b15 	stw	zero,108(sp)
 402f960:	d8002615 	stw	zero,152(sp)
 402f964:	d8002315 	stw	zero,140(sp)
 402f968:	da802715 	stw	r10,156(sp)
 402f96c:	d811883a 	mov	r8,sp
 402f970:	dd002115 	stw	r20,132(sp)
 402f974:	e021883a 	mov	r16,fp
 402f978:	80800007 	ldb	r2,0(r16)
 402f97c:	1003ea26 	beq	r2,zero,4030928 <___vfiprintf_internal_r+0x1090>
 402f980:	00c00944 	movi	r3,37
 402f984:	8025883a 	mov	r18,r16
 402f988:	10c0021e 	bne	r2,r3,402f994 <___vfiprintf_internal_r+0xfc>
 402f98c:	00001606 	br	402f9e8 <___vfiprintf_internal_r+0x150>
 402f990:	10c00326 	beq	r2,r3,402f9a0 <___vfiprintf_internal_r+0x108>
 402f994:	94800044 	addi	r18,r18,1
 402f998:	90800007 	ldb	r2,0(r18)
 402f99c:	103ffc1e 	bne	r2,zero,402f990 <__flash_rwdata_start+0xffff9438>
 402f9a0:	9423c83a 	sub	r17,r18,r16
 402f9a4:	88001026 	beq	r17,zero,402f9e8 <___vfiprintf_internal_r+0x150>
 402f9a8:	d8c01c17 	ldw	r3,112(sp)
 402f9ac:	d8801b17 	ldw	r2,108(sp)
 402f9b0:	44000015 	stw	r16,0(r8)
 402f9b4:	88c7883a 	add	r3,r17,r3
 402f9b8:	10800044 	addi	r2,r2,1
 402f9bc:	44400115 	stw	r17,4(r8)
 402f9c0:	d8c01c15 	stw	r3,112(sp)
 402f9c4:	d8801b15 	stw	r2,108(sp)
 402f9c8:	010001c4 	movi	r4,7
 402f9cc:	2080760e 	bge	r4,r2,402fba8 <___vfiprintf_internal_r+0x310>
 402f9d0:	1803821e 	bne	r3,zero,40307dc <___vfiprintf_internal_r+0xf44>
 402f9d4:	da802317 	ldw	r10,140(sp)
 402f9d8:	d8001b15 	stw	zero,108(sp)
 402f9dc:	d811883a 	mov	r8,sp
 402f9e0:	5455883a 	add	r10,r10,r17
 402f9e4:	da802315 	stw	r10,140(sp)
 402f9e8:	90800007 	ldb	r2,0(r18)
 402f9ec:	10044626 	beq	r2,zero,4030b08 <___vfiprintf_internal_r+0x1270>
 402f9f0:	90c00047 	ldb	r3,1(r18)
 402f9f4:	94000044 	addi	r16,r18,1
 402f9f8:	d8001d85 	stb	zero,118(sp)
 402f9fc:	0009883a 	mov	r4,zero
 402fa00:	000f883a 	mov	r7,zero
 402fa04:	027fffc4 	movi	r9,-1
 402fa08:	0023883a 	mov	r17,zero
 402fa0c:	0029883a 	mov	r20,zero
 402fa10:	01401604 	movi	r5,88
 402fa14:	01800244 	movi	r6,9
 402fa18:	03400a84 	movi	r13,42
 402fa1c:	03001b04 	movi	r12,108
 402fa20:	84000044 	addi	r16,r16,1
 402fa24:	18bff804 	addi	r2,r3,-32
 402fa28:	28827336 	bltu	r5,r2,40303f8 <___vfiprintf_internal_r+0xb60>
 402fa2c:	100490ba 	slli	r2,r2,2
 402fa30:	028100f4 	movhi	r10,1027
 402fa34:	52be9104 	addi	r10,r10,-1468
 402fa38:	1285883a 	add	r2,r2,r10
 402fa3c:	10800017 	ldw	r2,0(r2)
 402fa40:	1000683a 	jmp	r2
 402fa44:	0403012c 	andhi	r16,zero,3076
 402fa48:	040303f8 	rdprs	r16,zero,3087
 402fa4c:	040303f8 	rdprs	r16,zero,3087
 402fa50:	0403014c 	andi	r16,zero,3077
 402fa54:	040303f8 	rdprs	r16,zero,3087
 402fa58:	040303f8 	rdprs	r16,zero,3087
 402fa5c:	040303f8 	rdprs	r16,zero,3087
 402fa60:	040303f8 	rdprs	r16,zero,3087
 402fa64:	040303f8 	rdprs	r16,zero,3087
 402fa68:	040303f8 	rdprs	r16,zero,3087
 402fa6c:	04030334 	movhi	r16,3084
 402fa70:	04030350 	cmplti	r16,zero,3085
 402fa74:	040303f8 	rdprs	r16,zero,3087
 402fa78:	0402fc38 	rdprs	r16,zero,3056
 402fa7c:	04030360 	cmpeqi	r16,zero,3085
 402fa80:	040303f8 	rdprs	r16,zero,3087
 402fa84:	04030158 	cmpnei	r16,zero,3077
 402fa88:	04030164 	muli	r16,zero,3077
 402fa8c:	04030164 	muli	r16,zero,3077
 402fa90:	04030164 	muli	r16,zero,3077
 402fa94:	04030164 	muli	r16,zero,3077
 402fa98:	04030164 	muli	r16,zero,3077
 402fa9c:	04030164 	muli	r16,zero,3077
 402faa0:	04030164 	muli	r16,zero,3077
 402faa4:	04030164 	muli	r16,zero,3077
 402faa8:	04030164 	muli	r16,zero,3077
 402faac:	040303f8 	rdprs	r16,zero,3087
 402fab0:	040303f8 	rdprs	r16,zero,3087
 402fab4:	040303f8 	rdprs	r16,zero,3087
 402fab8:	040303f8 	rdprs	r16,zero,3087
 402fabc:	040303f8 	rdprs	r16,zero,3087
 402fac0:	040303f8 	rdprs	r16,zero,3087
 402fac4:	040303f8 	rdprs	r16,zero,3087
 402fac8:	040303f8 	rdprs	r16,zero,3087
 402facc:	040303f8 	rdprs	r16,zero,3087
 402fad0:	040303f8 	rdprs	r16,zero,3087
 402fad4:	04030190 	cmplti	r16,zero,3078
 402fad8:	040303f8 	rdprs	r16,zero,3087
 402fadc:	040303f8 	rdprs	r16,zero,3087
 402fae0:	040303f8 	rdprs	r16,zero,3087
 402fae4:	040303f8 	rdprs	r16,zero,3087
 402fae8:	040303f8 	rdprs	r16,zero,3087
 402faec:	040303f8 	rdprs	r16,zero,3087
 402faf0:	040303f8 	rdprs	r16,zero,3087
 402faf4:	040303f8 	rdprs	r16,zero,3087
 402faf8:	040303f8 	rdprs	r16,zero,3087
 402fafc:	040303f8 	rdprs	r16,zero,3087
 402fb00:	040301c8 	cmpgei	r16,zero,3079
 402fb04:	040303f8 	rdprs	r16,zero,3087
 402fb08:	040303f8 	rdprs	r16,zero,3087
 402fb0c:	040303f8 	rdprs	r16,zero,3087
 402fb10:	040303f8 	rdprs	r16,zero,3087
 402fb14:	040303f8 	rdprs	r16,zero,3087
 402fb18:	04030220 	cmpeqi	r16,zero,3080
 402fb1c:	040303f8 	rdprs	r16,zero,3087
 402fb20:	040303f8 	rdprs	r16,zero,3087
 402fb24:	04030290 	cmplti	r16,zero,3082
 402fb28:	040303f8 	rdprs	r16,zero,3087
 402fb2c:	040303f8 	rdprs	r16,zero,3087
 402fb30:	040303f8 	rdprs	r16,zero,3087
 402fb34:	040303f8 	rdprs	r16,zero,3087
 402fb38:	040303f8 	rdprs	r16,zero,3087
 402fb3c:	040303f8 	rdprs	r16,zero,3087
 402fb40:	040303f8 	rdprs	r16,zero,3087
 402fb44:	040303f8 	rdprs	r16,zero,3087
 402fb48:	040303f8 	rdprs	r16,zero,3087
 402fb4c:	040303f8 	rdprs	r16,zero,3087
 402fb50:	0403003c 	xorhi	r16,zero,3072
 402fb54:	04030068 	cmpgeui	r16,zero,3073
 402fb58:	040303f8 	rdprs	r16,zero,3087
 402fb5c:	040303f8 	rdprs	r16,zero,3087
 402fb60:	040303f8 	rdprs	r16,zero,3087
 402fb64:	040303a0 	cmpeqi	r16,zero,3086
 402fb68:	04030068 	cmpgeui	r16,zero,3073
 402fb6c:	040303f8 	rdprs	r16,zero,3087
 402fb70:	040303f8 	rdprs	r16,zero,3087
 402fb74:	0402fefc 	xorhi	r16,zero,3067
 402fb78:	040303f8 	rdprs	r16,zero,3087
 402fb7c:	0402ff0c 	andi	r16,zero,3068
 402fb80:	0402ff48 	cmpgei	r16,zero,3069
 402fb84:	0402fc44 	movi	r16,3057
 402fb88:	0402fef0 	cmpltui	r16,zero,3067
 402fb8c:	040303f8 	rdprs	r16,zero,3087
 402fb90:	040302cc 	andi	r16,zero,3083
 402fb94:	040303f8 	rdprs	r16,zero,3087
 402fb98:	04030324 	muli	r16,zero,3084
 402fb9c:	040303f8 	rdprs	r16,zero,3087
 402fba0:	040303f8 	rdprs	r16,zero,3087
 402fba4:	0402ffe8 	cmpgeui	r16,zero,3071
 402fba8:	42000204 	addi	r8,r8,8
 402fbac:	da802317 	ldw	r10,140(sp)
 402fbb0:	5455883a 	add	r10,r10,r17
 402fbb4:	da802315 	stw	r10,140(sp)
 402fbb8:	003f8b06 	br	402f9e8 <__flash_rwdata_start+0xffff9490>
 402fbbc:	d9002017 	ldw	r4,128(sp)
 402fbc0:	a00b883a 	mov	r5,r20
 402fbc4:	402ab380 	call	402ab38 <__swsetup_r>
 402fbc8:	1003b11e 	bne	r2,zero,4030a90 <___vfiprintf_internal_r+0x11f8>
 402fbcc:	a080030b 	ldhu	r2,12(r20)
 402fbd0:	00c00284 	movi	r3,10
 402fbd4:	1080068c 	andi	r2,r2,26
 402fbd8:	10ff541e 	bne	r2,r3,402f92c <__flash_rwdata_start+0xffff93d4>
 402fbdc:	a080038f 	ldh	r2,14(r20)
 402fbe0:	103f5216 	blt	r2,zero,402f92c <__flash_rwdata_start+0xffff93d4>
 402fbe4:	d9c02217 	ldw	r7,136(sp)
 402fbe8:	d9002017 	ldw	r4,128(sp)
 402fbec:	e00d883a 	mov	r6,fp
 402fbf0:	a00b883a 	mov	r5,r20
 402fbf4:	4030d280 	call	4030d28 <__sbprintf>
 402fbf8:	dfc03617 	ldw	ra,216(sp)
 402fbfc:	df003517 	ldw	fp,212(sp)
 402fc00:	ddc03417 	ldw	r23,208(sp)
 402fc04:	dd803317 	ldw	r22,204(sp)
 402fc08:	dd403217 	ldw	r21,200(sp)
 402fc0c:	dd003117 	ldw	r20,196(sp)
 402fc10:	dcc03017 	ldw	r19,192(sp)
 402fc14:	dc802f17 	ldw	r18,188(sp)
 402fc18:	dc402e17 	ldw	r17,184(sp)
 402fc1c:	dc002d17 	ldw	r16,180(sp)
 402fc20:	dec03704 	addi	sp,sp,220
 402fc24:	f800283a 	ret
 402fc28:	402cba80 	call	402cba8 <__sinit>
 402fc2c:	003f2f06 	br	402f8ec <__flash_rwdata_start+0xffff9394>
 402fc30:	0463c83a 	sub	r17,zero,r17
 402fc34:	d8802215 	stw	r2,136(sp)
 402fc38:	a5000114 	ori	r20,r20,4
 402fc3c:	80c00007 	ldb	r3,0(r16)
 402fc40:	003f7706 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 402fc44:	00800c04 	movi	r2,48
 402fc48:	da802217 	ldw	r10,136(sp)
 402fc4c:	d8801d05 	stb	r2,116(sp)
 402fc50:	00801e04 	movi	r2,120
 402fc54:	d8801d45 	stb	r2,117(sp)
 402fc58:	d8001d85 	stb	zero,118(sp)
 402fc5c:	50c00104 	addi	r3,r10,4
 402fc60:	54800017 	ldw	r18,0(r10)
 402fc64:	0027883a 	mov	r19,zero
 402fc68:	a0800094 	ori	r2,r20,2
 402fc6c:	48030b16 	blt	r9,zero,403089c <___vfiprintf_internal_r+0x1004>
 402fc70:	00bfdfc4 	movi	r2,-129
 402fc74:	a096703a 	and	r11,r20,r2
 402fc78:	d8c02215 	stw	r3,136(sp)
 402fc7c:	5d000094 	ori	r20,r11,2
 402fc80:	90032b1e 	bne	r18,zero,4030930 <___vfiprintf_internal_r+0x1098>
 402fc84:	00800034 	movhi	r2,0
 402fc88:	10813204 	addi	r2,r2,1224
 402fc8c:	d8802615 	stw	r2,152(sp)
 402fc90:	0039883a 	mov	fp,zero
 402fc94:	48017b1e 	bne	r9,zero,4030284 <___vfiprintf_internal_r+0x9ec>
 402fc98:	0013883a 	mov	r9,zero
 402fc9c:	0027883a 	mov	r19,zero
 402fca0:	dd401a04 	addi	r21,sp,104
 402fca4:	4825883a 	mov	r18,r9
 402fca8:	4cc0010e 	bge	r9,r19,402fcb0 <___vfiprintf_internal_r+0x418>
 402fcac:	9825883a 	mov	r18,r19
 402fcb0:	e7003fcc 	andi	fp,fp,255
 402fcb4:	e700201c 	xori	fp,fp,128
 402fcb8:	e73fe004 	addi	fp,fp,-128
 402fcbc:	e0000126 	beq	fp,zero,402fcc4 <___vfiprintf_internal_r+0x42c>
 402fcc0:	94800044 	addi	r18,r18,1
 402fcc4:	a380008c 	andi	r14,r20,2
 402fcc8:	70000126 	beq	r14,zero,402fcd0 <___vfiprintf_internal_r+0x438>
 402fccc:	94800084 	addi	r18,r18,2
 402fcd0:	a700210c 	andi	fp,r20,132
 402fcd4:	e001df1e 	bne	fp,zero,4030454 <___vfiprintf_internal_r+0xbbc>
 402fcd8:	8c87c83a 	sub	r3,r17,r18
 402fcdc:	00c1dd0e 	bge	zero,r3,4030454 <___vfiprintf_internal_r+0xbbc>
 402fce0:	01c00404 	movi	r7,16
 402fce4:	d8801c17 	ldw	r2,112(sp)
 402fce8:	38c3ad0e 	bge	r7,r3,4030ba0 <___vfiprintf_internal_r+0x1308>
 402fcec:	02800034 	movhi	r10,0
 402fcf0:	52819704 	addi	r10,r10,1628
 402fcf4:	dc002915 	stw	r16,164(sp)
 402fcf8:	d9801b17 	ldw	r6,108(sp)
 402fcfc:	da802415 	stw	r10,144(sp)
 402fd00:	03c001c4 	movi	r15,7
 402fd04:	da402515 	stw	r9,148(sp)
 402fd08:	db802815 	stw	r14,160(sp)
 402fd0c:	1821883a 	mov	r16,r3
 402fd10:	00000506 	br	402fd28 <___vfiprintf_internal_r+0x490>
 402fd14:	31400084 	addi	r5,r6,2
 402fd18:	42000204 	addi	r8,r8,8
 402fd1c:	200d883a 	mov	r6,r4
 402fd20:	843ffc04 	addi	r16,r16,-16
 402fd24:	3c000d0e 	bge	r7,r16,402fd5c <___vfiprintf_internal_r+0x4c4>
 402fd28:	10800404 	addi	r2,r2,16
 402fd2c:	31000044 	addi	r4,r6,1
 402fd30:	45800015 	stw	r22,0(r8)
 402fd34:	41c00115 	stw	r7,4(r8)
 402fd38:	d8801c15 	stw	r2,112(sp)
 402fd3c:	d9001b15 	stw	r4,108(sp)
 402fd40:	793ff40e 	bge	r15,r4,402fd14 <__flash_rwdata_start+0xffff97bc>
 402fd44:	1001b51e 	bne	r2,zero,403041c <___vfiprintf_internal_r+0xb84>
 402fd48:	843ffc04 	addi	r16,r16,-16
 402fd4c:	000d883a 	mov	r6,zero
 402fd50:	01400044 	movi	r5,1
 402fd54:	d811883a 	mov	r8,sp
 402fd58:	3c3ff316 	blt	r7,r16,402fd28 <__flash_rwdata_start+0xffff97d0>
 402fd5c:	8007883a 	mov	r3,r16
 402fd60:	da402517 	ldw	r9,148(sp)
 402fd64:	db802817 	ldw	r14,160(sp)
 402fd68:	dc002917 	ldw	r16,164(sp)
 402fd6c:	da802417 	ldw	r10,144(sp)
 402fd70:	1885883a 	add	r2,r3,r2
 402fd74:	40c00115 	stw	r3,4(r8)
 402fd78:	42800015 	stw	r10,0(r8)
 402fd7c:	d8801c15 	stw	r2,112(sp)
 402fd80:	d9401b15 	stw	r5,108(sp)
 402fd84:	00c001c4 	movi	r3,7
 402fd88:	19426016 	blt	r3,r5,403070c <___vfiprintf_internal_r+0xe74>
 402fd8c:	d8c01d87 	ldb	r3,118(sp)
 402fd90:	42000204 	addi	r8,r8,8
 402fd94:	29000044 	addi	r4,r5,1
 402fd98:	1801b31e 	bne	r3,zero,4030468 <___vfiprintf_internal_r+0xbd0>
 402fd9c:	7001c026 	beq	r14,zero,40304a0 <___vfiprintf_internal_r+0xc08>
 402fda0:	d8c01d04 	addi	r3,sp,116
 402fda4:	10800084 	addi	r2,r2,2
 402fda8:	40c00015 	stw	r3,0(r8)
 402fdac:	00c00084 	movi	r3,2
 402fdb0:	40c00115 	stw	r3,4(r8)
 402fdb4:	d8801c15 	stw	r2,112(sp)
 402fdb8:	d9001b15 	stw	r4,108(sp)
 402fdbc:	00c001c4 	movi	r3,7
 402fdc0:	1902650e 	bge	r3,r4,4030758 <___vfiprintf_internal_r+0xec0>
 402fdc4:	10029a1e 	bne	r2,zero,4030830 <___vfiprintf_internal_r+0xf98>
 402fdc8:	00c02004 	movi	r3,128
 402fdcc:	01000044 	movi	r4,1
 402fdd0:	000b883a 	mov	r5,zero
 402fdd4:	d811883a 	mov	r8,sp
 402fdd8:	e0c1b31e 	bne	fp,r3,40304a8 <___vfiprintf_internal_r+0xc10>
 402fddc:	8cb9c83a 	sub	fp,r17,r18
 402fde0:	0701b10e 	bge	zero,fp,40304a8 <___vfiprintf_internal_r+0xc10>
 402fde4:	01c00404 	movi	r7,16
 402fde8:	3f03890e 	bge	r7,fp,4030c10 <___vfiprintf_internal_r+0x1378>
 402fdec:	00c00034 	movhi	r3,0
 402fdf0:	18c19304 	addi	r3,r3,1612
 402fdf4:	d8c02415 	stw	r3,144(sp)
 402fdf8:	8007883a 	mov	r3,r16
 402fdfc:	034001c4 	movi	r13,7
 402fe00:	e021883a 	mov	r16,fp
 402fe04:	da402515 	stw	r9,148(sp)
 402fe08:	1839883a 	mov	fp,r3
 402fe0c:	00000506 	br	402fe24 <___vfiprintf_internal_r+0x58c>
 402fe10:	29800084 	addi	r6,r5,2
 402fe14:	42000204 	addi	r8,r8,8
 402fe18:	180b883a 	mov	r5,r3
 402fe1c:	843ffc04 	addi	r16,r16,-16
 402fe20:	3c000d0e 	bge	r7,r16,402fe58 <___vfiprintf_internal_r+0x5c0>
 402fe24:	10800404 	addi	r2,r2,16
 402fe28:	28c00044 	addi	r3,r5,1
 402fe2c:	45c00015 	stw	r23,0(r8)
 402fe30:	41c00115 	stw	r7,4(r8)
 402fe34:	d8801c15 	stw	r2,112(sp)
 402fe38:	d8c01b15 	stw	r3,108(sp)
 402fe3c:	68fff40e 	bge	r13,r3,402fe10 <__flash_rwdata_start+0xffff98b8>
 402fe40:	1002241e 	bne	r2,zero,40306d4 <___vfiprintf_internal_r+0xe3c>
 402fe44:	843ffc04 	addi	r16,r16,-16
 402fe48:	01800044 	movi	r6,1
 402fe4c:	000b883a 	mov	r5,zero
 402fe50:	d811883a 	mov	r8,sp
 402fe54:	3c3ff316 	blt	r7,r16,402fe24 <__flash_rwdata_start+0xffff98cc>
 402fe58:	da402517 	ldw	r9,148(sp)
 402fe5c:	e007883a 	mov	r3,fp
 402fe60:	8039883a 	mov	fp,r16
 402fe64:	1821883a 	mov	r16,r3
 402fe68:	d8c02417 	ldw	r3,144(sp)
 402fe6c:	1705883a 	add	r2,r2,fp
 402fe70:	47000115 	stw	fp,4(r8)
 402fe74:	40c00015 	stw	r3,0(r8)
 402fe78:	d8801c15 	stw	r2,112(sp)
 402fe7c:	d9801b15 	stw	r6,108(sp)
 402fe80:	00c001c4 	movi	r3,7
 402fe84:	19827616 	blt	r3,r6,4030860 <___vfiprintf_internal_r+0xfc8>
 402fe88:	4cf9c83a 	sub	fp,r9,r19
 402fe8c:	42000204 	addi	r8,r8,8
 402fe90:	31000044 	addi	r4,r6,1
 402fe94:	300b883a 	mov	r5,r6
 402fe98:	07018516 	blt	zero,fp,40304b0 <___vfiprintf_internal_r+0xc18>
 402fe9c:	9885883a 	add	r2,r19,r2
 402fea0:	45400015 	stw	r21,0(r8)
 402fea4:	44c00115 	stw	r19,4(r8)
 402fea8:	d8801c15 	stw	r2,112(sp)
 402feac:	d9001b15 	stw	r4,108(sp)
 402feb0:	00c001c4 	movi	r3,7
 402feb4:	1901dd0e 	bge	r3,r4,403062c <___vfiprintf_internal_r+0xd94>
 402feb8:	1002401e 	bne	r2,zero,40307bc <___vfiprintf_internal_r+0xf24>
 402febc:	d8001b15 	stw	zero,108(sp)
 402fec0:	a2c0010c 	andi	r11,r20,4
 402fec4:	58000226 	beq	r11,zero,402fed0 <___vfiprintf_internal_r+0x638>
 402fec8:	8ca7c83a 	sub	r19,r17,r18
 402fecc:	04c2f216 	blt	zero,r19,4030a98 <___vfiprintf_internal_r+0x1200>
 402fed0:	8c80010e 	bge	r17,r18,402fed8 <___vfiprintf_internal_r+0x640>
 402fed4:	9023883a 	mov	r17,r18
 402fed8:	da802317 	ldw	r10,140(sp)
 402fedc:	5455883a 	add	r10,r10,r17
 402fee0:	da802315 	stw	r10,140(sp)
 402fee4:	d8001b15 	stw	zero,108(sp)
 402fee8:	d811883a 	mov	r8,sp
 402feec:	003ea206 	br	402f978 <__flash_rwdata_start+0xffff9420>
 402fef0:	a5000814 	ori	r20,r20,32
 402fef4:	80c00007 	ldb	r3,0(r16)
 402fef8:	003ec906 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 402fefc:	80c00007 	ldb	r3,0(r16)
 402ff00:	1b030926 	beq	r3,r12,4030b28 <___vfiprintf_internal_r+0x1290>
 402ff04:	a5000414 	ori	r20,r20,16
 402ff08:	003ec506 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 402ff0c:	21003fcc 	andi	r4,r4,255
 402ff10:	20035e1e 	bne	r4,zero,4030c8c <___vfiprintf_internal_r+0x13f4>
 402ff14:	a080080c 	andi	r2,r20,32
 402ff18:	1002a526 	beq	r2,zero,40309b0 <___vfiprintf_internal_r+0x1118>
 402ff1c:	da802217 	ldw	r10,136(sp)
 402ff20:	50800017 	ldw	r2,0(r10)
 402ff24:	da802317 	ldw	r10,140(sp)
 402ff28:	5007d7fa 	srai	r3,r10,31
 402ff2c:	da802217 	ldw	r10,136(sp)
 402ff30:	10c00115 	stw	r3,4(r2)
 402ff34:	52800104 	addi	r10,r10,4
 402ff38:	da802215 	stw	r10,136(sp)
 402ff3c:	da802317 	ldw	r10,140(sp)
 402ff40:	12800015 	stw	r10,0(r2)
 402ff44:	003e8c06 	br	402f978 <__flash_rwdata_start+0xffff9420>
 402ff48:	21003fcc 	andi	r4,r4,255
 402ff4c:	2003511e 	bne	r4,zero,4030c94 <___vfiprintf_internal_r+0x13fc>
 402ff50:	a080080c 	andi	r2,r20,32
 402ff54:	1000a126 	beq	r2,zero,40301dc <___vfiprintf_internal_r+0x944>
 402ff58:	da802217 	ldw	r10,136(sp)
 402ff5c:	d8001d85 	stb	zero,118(sp)
 402ff60:	50800204 	addi	r2,r10,8
 402ff64:	54800017 	ldw	r18,0(r10)
 402ff68:	54c00117 	ldw	r19,4(r10)
 402ff6c:	4802b416 	blt	r9,zero,4030a40 <___vfiprintf_internal_r+0x11a8>
 402ff70:	013fdfc4 	movi	r4,-129
 402ff74:	94c6b03a 	or	r3,r18,r19
 402ff78:	d8802215 	stw	r2,136(sp)
 402ff7c:	a128703a 	and	r20,r20,r4
 402ff80:	1800a226 	beq	r3,zero,403020c <___vfiprintf_internal_r+0x974>
 402ff84:	0039883a 	mov	fp,zero
 402ff88:	dd401a04 	addi	r21,sp,104
 402ff8c:	9006d0fa 	srli	r3,r18,3
 402ff90:	9808977a 	slli	r4,r19,29
 402ff94:	9826d0fa 	srli	r19,r19,3
 402ff98:	948001cc 	andi	r18,r18,7
 402ff9c:	90800c04 	addi	r2,r18,48
 402ffa0:	ad7fffc4 	addi	r21,r21,-1
 402ffa4:	20e4b03a 	or	r18,r4,r3
 402ffa8:	a8800005 	stb	r2,0(r21)
 402ffac:	94c6b03a 	or	r3,r18,r19
 402ffb0:	183ff61e 	bne	r3,zero,402ff8c <__flash_rwdata_start+0xffff9a34>
 402ffb4:	a0c0004c 	andi	r3,r20,1
 402ffb8:	18005926 	beq	r3,zero,4030120 <___vfiprintf_internal_r+0x888>
 402ffbc:	10803fcc 	andi	r2,r2,255
 402ffc0:	1080201c 	xori	r2,r2,128
 402ffc4:	10bfe004 	addi	r2,r2,-128
 402ffc8:	00c00c04 	movi	r3,48
 402ffcc:	10c05426 	beq	r2,r3,4030120 <___vfiprintf_internal_r+0x888>
 402ffd0:	da801e17 	ldw	r10,120(sp)
 402ffd4:	a8bfffc4 	addi	r2,r21,-1
 402ffd8:	a8ffffc5 	stb	r3,-1(r21)
 402ffdc:	50a7c83a 	sub	r19,r10,r2
 402ffe0:	102b883a 	mov	r21,r2
 402ffe4:	003f2f06 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 402ffe8:	21003fcc 	andi	r4,r4,255
 402ffec:	2003421e 	bne	r4,zero,4030cf8 <___vfiprintf_internal_r+0x1460>
 402fff0:	00800034 	movhi	r2,0
 402fff4:	10813204 	addi	r2,r2,1224
 402fff8:	d8802615 	stw	r2,152(sp)
 402fffc:	a080080c 	andi	r2,r20,32
 4030000:	1000aa26 	beq	r2,zero,40302ac <___vfiprintf_internal_r+0xa14>
 4030004:	da802217 	ldw	r10,136(sp)
 4030008:	54800017 	ldw	r18,0(r10)
 403000c:	54c00117 	ldw	r19,4(r10)
 4030010:	52800204 	addi	r10,r10,8
 4030014:	da802215 	stw	r10,136(sp)
 4030018:	a080004c 	andi	r2,r20,1
 403001c:	1001d226 	beq	r2,zero,4030768 <___vfiprintf_internal_r+0xed0>
 4030020:	94c4b03a 	or	r2,r18,r19
 4030024:	1002351e 	bne	r2,zero,40308fc <___vfiprintf_internal_r+0x1064>
 4030028:	d8001d85 	stb	zero,118(sp)
 403002c:	48022216 	blt	r9,zero,40308b8 <___vfiprintf_internal_r+0x1020>
 4030030:	00bfdfc4 	movi	r2,-129
 4030034:	a0a8703a 	and	r20,r20,r2
 4030038:	003f1506 	br	402fc90 <__flash_rwdata_start+0xffff9738>
 403003c:	da802217 	ldw	r10,136(sp)
 4030040:	04800044 	movi	r18,1
 4030044:	d8001d85 	stb	zero,118(sp)
 4030048:	50800017 	ldw	r2,0(r10)
 403004c:	52800104 	addi	r10,r10,4
 4030050:	da802215 	stw	r10,136(sp)
 4030054:	d8801005 	stb	r2,64(sp)
 4030058:	9027883a 	mov	r19,r18
 403005c:	dd401004 	addi	r21,sp,64
 4030060:	0013883a 	mov	r9,zero
 4030064:	003f1706 	br	402fcc4 <__flash_rwdata_start+0xffff976c>
 4030068:	21003fcc 	andi	r4,r4,255
 403006c:	2003201e 	bne	r4,zero,4030cf0 <___vfiprintf_internal_r+0x1458>
 4030070:	a080080c 	andi	r2,r20,32
 4030074:	10004b26 	beq	r2,zero,40301a4 <___vfiprintf_internal_r+0x90c>
 4030078:	da802217 	ldw	r10,136(sp)
 403007c:	50800117 	ldw	r2,4(r10)
 4030080:	54800017 	ldw	r18,0(r10)
 4030084:	52800204 	addi	r10,r10,8
 4030088:	da802215 	stw	r10,136(sp)
 403008c:	1027883a 	mov	r19,r2
 4030090:	10022c16 	blt	r2,zero,4030944 <___vfiprintf_internal_r+0x10ac>
 4030094:	df001d83 	ldbu	fp,118(sp)
 4030098:	48007216 	blt	r9,zero,4030264 <___vfiprintf_internal_r+0x9cc>
 403009c:	00ffdfc4 	movi	r3,-129
 40300a0:	94c4b03a 	or	r2,r18,r19
 40300a4:	a0e8703a 	and	r20,r20,r3
 40300a8:	1000cc26 	beq	r2,zero,40303dc <___vfiprintf_internal_r+0xb44>
 40300ac:	98021026 	beq	r19,zero,40308f0 <___vfiprintf_internal_r+0x1058>
 40300b0:	dc402415 	stw	r17,144(sp)
 40300b4:	dc002515 	stw	r16,148(sp)
 40300b8:	9823883a 	mov	r17,r19
 40300bc:	9021883a 	mov	r16,r18
 40300c0:	dd401a04 	addi	r21,sp,104
 40300c4:	4825883a 	mov	r18,r9
 40300c8:	4027883a 	mov	r19,r8
 40300cc:	8009883a 	mov	r4,r16
 40300d0:	880b883a 	mov	r5,r17
 40300d4:	01800284 	movi	r6,10
 40300d8:	000f883a 	mov	r7,zero
 40300dc:	4031dec0 	call	4031dec <__umoddi3>
 40300e0:	10800c04 	addi	r2,r2,48
 40300e4:	ad7fffc4 	addi	r21,r21,-1
 40300e8:	8009883a 	mov	r4,r16
 40300ec:	880b883a 	mov	r5,r17
 40300f0:	a8800005 	stb	r2,0(r21)
 40300f4:	01800284 	movi	r6,10
 40300f8:	000f883a 	mov	r7,zero
 40300fc:	40318680 	call	4031868 <__udivdi3>
 4030100:	1021883a 	mov	r16,r2
 4030104:	10c4b03a 	or	r2,r2,r3
 4030108:	1823883a 	mov	r17,r3
 403010c:	103fef1e 	bne	r2,zero,40300cc <__flash_rwdata_start+0xffff9b74>
 4030110:	dc402417 	ldw	r17,144(sp)
 4030114:	dc002517 	ldw	r16,148(sp)
 4030118:	9013883a 	mov	r9,r18
 403011c:	9811883a 	mov	r8,r19
 4030120:	da801e17 	ldw	r10,120(sp)
 4030124:	5567c83a 	sub	r19,r10,r21
 4030128:	003ede06 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 403012c:	38803fcc 	andi	r2,r7,255
 4030130:	1080201c 	xori	r2,r2,128
 4030134:	10bfe004 	addi	r2,r2,-128
 4030138:	1002371e 	bne	r2,zero,4030a18 <___vfiprintf_internal_r+0x1180>
 403013c:	01000044 	movi	r4,1
 4030140:	01c00804 	movi	r7,32
 4030144:	80c00007 	ldb	r3,0(r16)
 4030148:	003e3506 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 403014c:	a5000054 	ori	r20,r20,1
 4030150:	80c00007 	ldb	r3,0(r16)
 4030154:	003e3206 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030158:	a5002014 	ori	r20,r20,128
 403015c:	80c00007 	ldb	r3,0(r16)
 4030160:	003e2f06 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030164:	8015883a 	mov	r10,r16
 4030168:	0023883a 	mov	r17,zero
 403016c:	18bff404 	addi	r2,r3,-48
 4030170:	50c00007 	ldb	r3,0(r10)
 4030174:	8c4002a4 	muli	r17,r17,10
 4030178:	84000044 	addi	r16,r16,1
 403017c:	8015883a 	mov	r10,r16
 4030180:	1463883a 	add	r17,r2,r17
 4030184:	18bff404 	addi	r2,r3,-48
 4030188:	30bff92e 	bgeu	r6,r2,4030170 <__flash_rwdata_start+0xffff9c18>
 403018c:	003e2506 	br	402fa24 <__flash_rwdata_start+0xffff94cc>
 4030190:	21003fcc 	andi	r4,r4,255
 4030194:	2002d41e 	bne	r4,zero,4030ce8 <___vfiprintf_internal_r+0x1450>
 4030198:	a5000414 	ori	r20,r20,16
 403019c:	a080080c 	andi	r2,r20,32
 40301a0:	103fb51e 	bne	r2,zero,4030078 <__flash_rwdata_start+0xffff9b20>
 40301a4:	a080040c 	andi	r2,r20,16
 40301a8:	1001f826 	beq	r2,zero,403098c <___vfiprintf_internal_r+0x10f4>
 40301ac:	da802217 	ldw	r10,136(sp)
 40301b0:	54800017 	ldw	r18,0(r10)
 40301b4:	52800104 	addi	r10,r10,4
 40301b8:	da802215 	stw	r10,136(sp)
 40301bc:	9027d7fa 	srai	r19,r18,31
 40301c0:	9805883a 	mov	r2,r19
 40301c4:	003fb206 	br	4030090 <__flash_rwdata_start+0xffff9b38>
 40301c8:	21003fcc 	andi	r4,r4,255
 40301cc:	2002c41e 	bne	r4,zero,4030ce0 <___vfiprintf_internal_r+0x1448>
 40301d0:	a5000414 	ori	r20,r20,16
 40301d4:	a080080c 	andi	r2,r20,32
 40301d8:	103f5f1e 	bne	r2,zero,402ff58 <__flash_rwdata_start+0xffff9a00>
 40301dc:	a080040c 	andi	r2,r20,16
 40301e0:	10020f26 	beq	r2,zero,4030a20 <___vfiprintf_internal_r+0x1188>
 40301e4:	da802217 	ldw	r10,136(sp)
 40301e8:	d8001d85 	stb	zero,118(sp)
 40301ec:	0027883a 	mov	r19,zero
 40301f0:	50800104 	addi	r2,r10,4
 40301f4:	54800017 	ldw	r18,0(r10)
 40301f8:	48021116 	blt	r9,zero,4030a40 <___vfiprintf_internal_r+0x11a8>
 40301fc:	00ffdfc4 	movi	r3,-129
 4030200:	d8802215 	stw	r2,136(sp)
 4030204:	a0e8703a 	and	r20,r20,r3
 4030208:	903f5e1e 	bne	r18,zero,402ff84 <__flash_rwdata_start+0xffff9a2c>
 403020c:	0039883a 	mov	fp,zero
 4030210:	4802a626 	beq	r9,zero,4030cac <___vfiprintf_internal_r+0x1414>
 4030214:	0025883a 	mov	r18,zero
 4030218:	0027883a 	mov	r19,zero
 403021c:	003f5a06 	br	402ff88 <__flash_rwdata_start+0xffff9a30>
 4030220:	21003fcc 	andi	r4,r4,255
 4030224:	20029f1e 	bne	r4,zero,4030ca4 <___vfiprintf_internal_r+0x140c>
 4030228:	a5000414 	ori	r20,r20,16
 403022c:	a080080c 	andi	r2,r20,32
 4030230:	10005e1e 	bne	r2,zero,40303ac <___vfiprintf_internal_r+0xb14>
 4030234:	a080040c 	andi	r2,r20,16
 4030238:	1001a21e 	bne	r2,zero,40308c4 <___vfiprintf_internal_r+0x102c>
 403023c:	a080100c 	andi	r2,r20,64
 4030240:	d8001d85 	stb	zero,118(sp)
 4030244:	da802217 	ldw	r10,136(sp)
 4030248:	1002231e 	bne	r2,zero,4030ad8 <___vfiprintf_internal_r+0x1240>
 403024c:	50800104 	addi	r2,r10,4
 4030250:	54800017 	ldw	r18,0(r10)
 4030254:	0027883a 	mov	r19,zero
 4030258:	4801a00e 	bge	r9,zero,40308dc <___vfiprintf_internal_r+0x1044>
 403025c:	d8802215 	stw	r2,136(sp)
 4030260:	0039883a 	mov	fp,zero
 4030264:	94c4b03a 	or	r2,r18,r19
 4030268:	103f901e 	bne	r2,zero,40300ac <__flash_rwdata_start+0xffff9b54>
 403026c:	00800044 	movi	r2,1
 4030270:	10803fcc 	andi	r2,r2,255
 4030274:	00c00044 	movi	r3,1
 4030278:	10c05926 	beq	r2,r3,40303e0 <___vfiprintf_internal_r+0xb48>
 403027c:	00c00084 	movi	r3,2
 4030280:	10ffe41e 	bne	r2,r3,4030214 <__flash_rwdata_start+0xffff9cbc>
 4030284:	0025883a 	mov	r18,zero
 4030288:	0027883a 	mov	r19,zero
 403028c:	00013d06 	br	4030784 <___vfiprintf_internal_r+0xeec>
 4030290:	21003fcc 	andi	r4,r4,255
 4030294:	2002811e 	bne	r4,zero,4030c9c <___vfiprintf_internal_r+0x1404>
 4030298:	00800034 	movhi	r2,0
 403029c:	10812d04 	addi	r2,r2,1204
 40302a0:	d8802615 	stw	r2,152(sp)
 40302a4:	a080080c 	andi	r2,r20,32
 40302a8:	103f561e 	bne	r2,zero,4030004 <__flash_rwdata_start+0xffff9aac>
 40302ac:	a080040c 	andi	r2,r20,16
 40302b0:	1001d126 	beq	r2,zero,40309f8 <___vfiprintf_internal_r+0x1160>
 40302b4:	da802217 	ldw	r10,136(sp)
 40302b8:	0027883a 	mov	r19,zero
 40302bc:	54800017 	ldw	r18,0(r10)
 40302c0:	52800104 	addi	r10,r10,4
 40302c4:	da802215 	stw	r10,136(sp)
 40302c8:	003f5306 	br	4030018 <__flash_rwdata_start+0xffff9ac0>
 40302cc:	da802217 	ldw	r10,136(sp)
 40302d0:	d8001d85 	stb	zero,118(sp)
 40302d4:	55400017 	ldw	r21,0(r10)
 40302d8:	50c00104 	addi	r3,r10,4
 40302dc:	a8024226 	beq	r21,zero,4030be8 <___vfiprintf_internal_r+0x1350>
 40302e0:	48021816 	blt	r9,zero,4030b44 <___vfiprintf_internal_r+0x12ac>
 40302e4:	480d883a 	mov	r6,r9
 40302e8:	000b883a 	mov	r5,zero
 40302ec:	a809883a 	mov	r4,r21
 40302f0:	d8c02a15 	stw	r3,168(sp)
 40302f4:	da002b15 	stw	r8,172(sp)
 40302f8:	da402c15 	stw	r9,176(sp)
 40302fc:	402da040 	call	402da04 <memchr>
 4030300:	d8c02a17 	ldw	r3,168(sp)
 4030304:	da002b17 	ldw	r8,172(sp)
 4030308:	da402c17 	ldw	r9,176(sp)
 403030c:	10024826 	beq	r2,zero,4030c30 <___vfiprintf_internal_r+0x1398>
 4030310:	1567c83a 	sub	r19,r2,r21
 4030314:	df001d83 	ldbu	fp,118(sp)
 4030318:	d8c02215 	stw	r3,136(sp)
 403031c:	0013883a 	mov	r9,zero
 4030320:	003e6006 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 4030324:	21003fcc 	andi	r4,r4,255
 4030328:	203fc026 	beq	r4,zero,403022c <__flash_rwdata_start+0xffff9cd4>
 403032c:	d9c01d85 	stb	r7,118(sp)
 4030330:	003fbe06 	br	403022c <__flash_rwdata_start+0xffff9cd4>
 4030334:	da802217 	ldw	r10,136(sp)
 4030338:	54400017 	ldw	r17,0(r10)
 403033c:	50800104 	addi	r2,r10,4
 4030340:	883e3b16 	blt	r17,zero,402fc30 <__flash_rwdata_start+0xffff96d8>
 4030344:	d8802215 	stw	r2,136(sp)
 4030348:	80c00007 	ldb	r3,0(r16)
 403034c:	003db406 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030350:	01000044 	movi	r4,1
 4030354:	01c00ac4 	movi	r7,43
 4030358:	80c00007 	ldb	r3,0(r16)
 403035c:	003db006 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030360:	80c00007 	ldb	r3,0(r16)
 4030364:	82800044 	addi	r10,r16,1
 4030368:	1b423c26 	beq	r3,r13,4030c5c <___vfiprintf_internal_r+0x13c4>
 403036c:	18bff404 	addi	r2,r3,-48
 4030370:	0013883a 	mov	r9,zero
 4030374:	30822b36 	bltu	r6,r2,4030c24 <___vfiprintf_internal_r+0x138c>
 4030378:	50c00007 	ldb	r3,0(r10)
 403037c:	4a4002a4 	muli	r9,r9,10
 4030380:	54000044 	addi	r16,r10,1
 4030384:	8015883a 	mov	r10,r16
 4030388:	4893883a 	add	r9,r9,r2
 403038c:	18bff404 	addi	r2,r3,-48
 4030390:	30bff92e 	bgeu	r6,r2,4030378 <__flash_rwdata_start+0xffff9e20>
 4030394:	483da30e 	bge	r9,zero,402fa24 <__flash_rwdata_start+0xffff94cc>
 4030398:	027fffc4 	movi	r9,-1
 403039c:	003da106 	br	402fa24 <__flash_rwdata_start+0xffff94cc>
 40303a0:	a5001014 	ori	r20,r20,64
 40303a4:	80c00007 	ldb	r3,0(r16)
 40303a8:	003d9d06 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 40303ac:	da802217 	ldw	r10,136(sp)
 40303b0:	d8001d85 	stb	zero,118(sp)
 40303b4:	50c00204 	addi	r3,r10,8
 40303b8:	54800017 	ldw	r18,0(r10)
 40303bc:	54c00117 	ldw	r19,4(r10)
 40303c0:	4801ca16 	blt	r9,zero,4030aec <___vfiprintf_internal_r+0x1254>
 40303c4:	013fdfc4 	movi	r4,-129
 40303c8:	94c4b03a 	or	r2,r18,r19
 40303cc:	d8c02215 	stw	r3,136(sp)
 40303d0:	a128703a 	and	r20,r20,r4
 40303d4:	0039883a 	mov	fp,zero
 40303d8:	103f341e 	bne	r2,zero,40300ac <__flash_rwdata_start+0xffff9b54>
 40303dc:	483e2e26 	beq	r9,zero,402fc98 <__flash_rwdata_start+0xffff9740>
 40303e0:	0025883a 	mov	r18,zero
 40303e4:	94800c04 	addi	r18,r18,48
 40303e8:	dc8019c5 	stb	r18,103(sp)
 40303ec:	dcc02717 	ldw	r19,156(sp)
 40303f0:	dd4019c4 	addi	r21,sp,103
 40303f4:	003e2b06 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 40303f8:	21003fcc 	andi	r4,r4,255
 40303fc:	2002361e 	bne	r4,zero,4030cd8 <___vfiprintf_internal_r+0x1440>
 4030400:	1801c126 	beq	r3,zero,4030b08 <___vfiprintf_internal_r+0x1270>
 4030404:	04800044 	movi	r18,1
 4030408:	d8c01005 	stb	r3,64(sp)
 403040c:	d8001d85 	stb	zero,118(sp)
 4030410:	9027883a 	mov	r19,r18
 4030414:	dd401004 	addi	r21,sp,64
 4030418:	003f1106 	br	4030060 <__flash_rwdata_start+0xffff9b08>
 403041c:	d9402117 	ldw	r5,132(sp)
 4030420:	d9002017 	ldw	r4,128(sp)
 4030424:	d9801a04 	addi	r6,sp,104
 4030428:	d9c02b15 	stw	r7,172(sp)
 403042c:	dbc02a15 	stw	r15,168(sp)
 4030430:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030434:	d9c02b17 	ldw	r7,172(sp)
 4030438:	dbc02a17 	ldw	r15,168(sp)
 403043c:	10006d1e 	bne	r2,zero,40305f4 <___vfiprintf_internal_r+0xd5c>
 4030440:	d9801b17 	ldw	r6,108(sp)
 4030444:	d8801c17 	ldw	r2,112(sp)
 4030448:	d811883a 	mov	r8,sp
 403044c:	31400044 	addi	r5,r6,1
 4030450:	003e3306 	br	402fd20 <__flash_rwdata_start+0xffff97c8>
 4030454:	d9401b17 	ldw	r5,108(sp)
 4030458:	d8801c17 	ldw	r2,112(sp)
 403045c:	29000044 	addi	r4,r5,1
 4030460:	d8c01d87 	ldb	r3,118(sp)
 4030464:	183e4d26 	beq	r3,zero,402fd9c <__flash_rwdata_start+0xffff9844>
 4030468:	00c00044 	movi	r3,1
 403046c:	d9401d84 	addi	r5,sp,118
 4030470:	10c5883a 	add	r2,r2,r3
 4030474:	41400015 	stw	r5,0(r8)
 4030478:	40c00115 	stw	r3,4(r8)
 403047c:	d8801c15 	stw	r2,112(sp)
 4030480:	d9001b15 	stw	r4,108(sp)
 4030484:	014001c4 	movi	r5,7
 4030488:	2900a90e 	bge	r5,r4,4030730 <___vfiprintf_internal_r+0xe98>
 403048c:	1000da1e 	bne	r2,zero,40307f8 <___vfiprintf_internal_r+0xf60>
 4030490:	7000ab1e 	bne	r14,zero,4030740 <___vfiprintf_internal_r+0xea8>
 4030494:	000b883a 	mov	r5,zero
 4030498:	1809883a 	mov	r4,r3
 403049c:	d811883a 	mov	r8,sp
 40304a0:	00c02004 	movi	r3,128
 40304a4:	e0fe4d26 	beq	fp,r3,402fddc <__flash_rwdata_start+0xffff9884>
 40304a8:	4cf9c83a 	sub	fp,r9,r19
 40304ac:	073e7b0e 	bge	zero,fp,402fe9c <__flash_rwdata_start+0xffff9944>
 40304b0:	01c00404 	movi	r7,16
 40304b4:	3f01900e 	bge	r7,fp,4030af8 <___vfiprintf_internal_r+0x1260>
 40304b8:	00c00034 	movhi	r3,0
 40304bc:	18c19304 	addi	r3,r3,1612
 40304c0:	d8c02415 	stw	r3,144(sp)
 40304c4:	034001c4 	movi	r13,7
 40304c8:	00000506 	br	40304e0 <___vfiprintf_internal_r+0xc48>
 40304cc:	29000084 	addi	r4,r5,2
 40304d0:	42000204 	addi	r8,r8,8
 40304d4:	180b883a 	mov	r5,r3
 40304d8:	e73ffc04 	addi	fp,fp,-16
 40304dc:	3f000d0e 	bge	r7,fp,4030514 <___vfiprintf_internal_r+0xc7c>
 40304e0:	10800404 	addi	r2,r2,16
 40304e4:	28c00044 	addi	r3,r5,1
 40304e8:	45c00015 	stw	r23,0(r8)
 40304ec:	41c00115 	stw	r7,4(r8)
 40304f0:	d8801c15 	stw	r2,112(sp)
 40304f4:	d8c01b15 	stw	r3,108(sp)
 40304f8:	68fff40e 	bge	r13,r3,40304cc <__flash_rwdata_start+0xffff9f74>
 40304fc:	1000101e 	bne	r2,zero,4030540 <___vfiprintf_internal_r+0xca8>
 4030500:	e73ffc04 	addi	fp,fp,-16
 4030504:	01000044 	movi	r4,1
 4030508:	000b883a 	mov	r5,zero
 403050c:	d811883a 	mov	r8,sp
 4030510:	3f3ff316 	blt	r7,fp,40304e0 <__flash_rwdata_start+0xffff9f88>
 4030514:	da802417 	ldw	r10,144(sp)
 4030518:	1705883a 	add	r2,r2,fp
 403051c:	47000115 	stw	fp,4(r8)
 4030520:	42800015 	stw	r10,0(r8)
 4030524:	d8801c15 	stw	r2,112(sp)
 4030528:	d9001b15 	stw	r4,108(sp)
 403052c:	00c001c4 	movi	r3,7
 4030530:	19003616 	blt	r3,r4,403060c <___vfiprintf_internal_r+0xd74>
 4030534:	42000204 	addi	r8,r8,8
 4030538:	21000044 	addi	r4,r4,1
 403053c:	003e5706 	br	402fe9c <__flash_rwdata_start+0xffff9944>
 4030540:	d9402117 	ldw	r5,132(sp)
 4030544:	d9002017 	ldw	r4,128(sp)
 4030548:	d9801a04 	addi	r6,sp,104
 403054c:	d9c02b15 	stw	r7,172(sp)
 4030550:	db402a15 	stw	r13,168(sp)
 4030554:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030558:	d9c02b17 	ldw	r7,172(sp)
 403055c:	db402a17 	ldw	r13,168(sp)
 4030560:	1000241e 	bne	r2,zero,40305f4 <___vfiprintf_internal_r+0xd5c>
 4030564:	d9401b17 	ldw	r5,108(sp)
 4030568:	d8801c17 	ldw	r2,112(sp)
 403056c:	d811883a 	mov	r8,sp
 4030570:	29000044 	addi	r4,r5,1
 4030574:	003fd806 	br	40304d8 <__flash_rwdata_start+0xffff9f80>
 4030578:	d9401b17 	ldw	r5,108(sp)
 403057c:	00c00034 	movhi	r3,0
 4030580:	18c19704 	addi	r3,r3,1628
 4030584:	d8c02415 	stw	r3,144(sp)
 4030588:	29400044 	addi	r5,r5,1
 403058c:	d8c02417 	ldw	r3,144(sp)
 4030590:	14c5883a 	add	r2,r2,r19
 4030594:	44c00115 	stw	r19,4(r8)
 4030598:	40c00015 	stw	r3,0(r8)
 403059c:	d8801c15 	stw	r2,112(sp)
 40305a0:	d9401b15 	stw	r5,108(sp)
 40305a4:	00c001c4 	movi	r3,7
 40305a8:	1940070e 	bge	r3,r5,40305c8 <___vfiprintf_internal_r+0xd30>
 40305ac:	103e4826 	beq	r2,zero,402fed0 <__flash_rwdata_start+0xffff9978>
 40305b0:	d9402117 	ldw	r5,132(sp)
 40305b4:	d9002017 	ldw	r4,128(sp)
 40305b8:	d9801a04 	addi	r6,sp,104
 40305bc:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40305c0:	10000c1e 	bne	r2,zero,40305f4 <___vfiprintf_internal_r+0xd5c>
 40305c4:	d8801c17 	ldw	r2,112(sp)
 40305c8:	8c80010e 	bge	r17,r18,40305d0 <___vfiprintf_internal_r+0xd38>
 40305cc:	9023883a 	mov	r17,r18
 40305d0:	da802317 	ldw	r10,140(sp)
 40305d4:	5455883a 	add	r10,r10,r17
 40305d8:	da802315 	stw	r10,140(sp)
 40305dc:	103e4126 	beq	r2,zero,402fee4 <__flash_rwdata_start+0xffff998c>
 40305e0:	d9402117 	ldw	r5,132(sp)
 40305e4:	d9002017 	ldw	r4,128(sp)
 40305e8:	d9801a04 	addi	r6,sp,104
 40305ec:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40305f0:	103e3c26 	beq	r2,zero,402fee4 <__flash_rwdata_start+0xffff998c>
 40305f4:	dd002117 	ldw	r20,132(sp)
 40305f8:	a080030b 	ldhu	r2,12(r20)
 40305fc:	1080100c 	andi	r2,r2,64
 4030600:	1001231e 	bne	r2,zero,4030a90 <___vfiprintf_internal_r+0x11f8>
 4030604:	d8802317 	ldw	r2,140(sp)
 4030608:	003d7b06 	br	402fbf8 <__flash_rwdata_start+0xffff96a0>
 403060c:	1000991e 	bne	r2,zero,4030874 <___vfiprintf_internal_r+0xfdc>
 4030610:	00c00044 	movi	r3,1
 4030614:	9805883a 	mov	r2,r19
 4030618:	dd400015 	stw	r21,0(sp)
 403061c:	dcc00115 	stw	r19,4(sp)
 4030620:	dcc01c15 	stw	r19,112(sp)
 4030624:	d8c01b15 	stw	r3,108(sp)
 4030628:	d811883a 	mov	r8,sp
 403062c:	42000204 	addi	r8,r8,8
 4030630:	a2c0010c 	andi	r11,r20,4
 4030634:	583fe426 	beq	r11,zero,40305c8 <__flash_rwdata_start+0xffffa070>
 4030638:	8ca7c83a 	sub	r19,r17,r18
 403063c:	04ffe20e 	bge	zero,r19,40305c8 <__flash_rwdata_start+0xffffa070>
 4030640:	01c00404 	movi	r7,16
 4030644:	3cffcc0e 	bge	r7,r19,4030578 <__flash_rwdata_start+0xffffa020>
 4030648:	02800034 	movhi	r10,0
 403064c:	52819704 	addi	r10,r10,1628
 4030650:	d9001b17 	ldw	r4,108(sp)
 4030654:	da802415 	stw	r10,144(sp)
 4030658:	382b883a 	mov	r21,r7
 403065c:	050001c4 	movi	r20,7
 4030660:	df002017 	ldw	fp,128(sp)
 4030664:	00000506 	br	403067c <___vfiprintf_internal_r+0xde4>
 4030668:	21400084 	addi	r5,r4,2
 403066c:	42000204 	addi	r8,r8,8
 4030670:	1809883a 	mov	r4,r3
 4030674:	9cfffc04 	addi	r19,r19,-16
 4030678:	acffc40e 	bge	r21,r19,403058c <__flash_rwdata_start+0xffffa034>
 403067c:	10800404 	addi	r2,r2,16
 4030680:	20c00044 	addi	r3,r4,1
 4030684:	45800015 	stw	r22,0(r8)
 4030688:	45400115 	stw	r21,4(r8)
 403068c:	d8801c15 	stw	r2,112(sp)
 4030690:	d8c01b15 	stw	r3,108(sp)
 4030694:	a0fff40e 	bge	r20,r3,4030668 <__flash_rwdata_start+0xffffa110>
 4030698:	1000041e 	bne	r2,zero,40306ac <___vfiprintf_internal_r+0xe14>
 403069c:	01400044 	movi	r5,1
 40306a0:	0009883a 	mov	r4,zero
 40306a4:	d811883a 	mov	r8,sp
 40306a8:	003ff206 	br	4030674 <__flash_rwdata_start+0xffffa11c>
 40306ac:	d9402117 	ldw	r5,132(sp)
 40306b0:	d9801a04 	addi	r6,sp,104
 40306b4:	e009883a 	mov	r4,fp
 40306b8:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40306bc:	103fcd1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 40306c0:	d9001b17 	ldw	r4,108(sp)
 40306c4:	d8801c17 	ldw	r2,112(sp)
 40306c8:	d811883a 	mov	r8,sp
 40306cc:	21400044 	addi	r5,r4,1
 40306d0:	003fe806 	br	4030674 <__flash_rwdata_start+0xffffa11c>
 40306d4:	d9402117 	ldw	r5,132(sp)
 40306d8:	d9002017 	ldw	r4,128(sp)
 40306dc:	d9801a04 	addi	r6,sp,104
 40306e0:	d9c02b15 	stw	r7,172(sp)
 40306e4:	db402a15 	stw	r13,168(sp)
 40306e8:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40306ec:	d9c02b17 	ldw	r7,172(sp)
 40306f0:	db402a17 	ldw	r13,168(sp)
 40306f4:	103fbf1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 40306f8:	d9401b17 	ldw	r5,108(sp)
 40306fc:	d8801c17 	ldw	r2,112(sp)
 4030700:	d811883a 	mov	r8,sp
 4030704:	29800044 	addi	r6,r5,1
 4030708:	003dc406 	br	402fe1c <__flash_rwdata_start+0xffff98c4>
 403070c:	1000d21e 	bne	r2,zero,4030a58 <___vfiprintf_internal_r+0x11c0>
 4030710:	d8c01d87 	ldb	r3,118(sp)
 4030714:	18009526 	beq	r3,zero,403096c <___vfiprintf_internal_r+0x10d4>
 4030718:	00800044 	movi	r2,1
 403071c:	d8c01d84 	addi	r3,sp,118
 4030720:	1009883a 	mov	r4,r2
 4030724:	d8c00015 	stw	r3,0(sp)
 4030728:	d8800115 	stw	r2,4(sp)
 403072c:	d811883a 	mov	r8,sp
 4030730:	200b883a 	mov	r5,r4
 4030734:	42000204 	addi	r8,r8,8
 4030738:	21000044 	addi	r4,r4,1
 403073c:	003d9706 	br	402fd9c <__flash_rwdata_start+0xffff9844>
 4030740:	d9001d04 	addi	r4,sp,116
 4030744:	00800084 	movi	r2,2
 4030748:	d9000015 	stw	r4,0(sp)
 403074c:	d8800115 	stw	r2,4(sp)
 4030750:	1809883a 	mov	r4,r3
 4030754:	d811883a 	mov	r8,sp
 4030758:	200b883a 	mov	r5,r4
 403075c:	42000204 	addi	r8,r8,8
 4030760:	21000044 	addi	r4,r4,1
 4030764:	003f4e06 	br	40304a0 <__flash_rwdata_start+0xffff9f48>
 4030768:	d8001d85 	stb	zero,118(sp)
 403076c:	48005016 	blt	r9,zero,40308b0 <___vfiprintf_internal_r+0x1018>
 4030770:	00ffdfc4 	movi	r3,-129
 4030774:	94c4b03a 	or	r2,r18,r19
 4030778:	a0e8703a 	and	r20,r20,r3
 403077c:	103d4426 	beq	r2,zero,402fc90 <__flash_rwdata_start+0xffff9738>
 4030780:	0039883a 	mov	fp,zero
 4030784:	d9002617 	ldw	r4,152(sp)
 4030788:	dd401a04 	addi	r21,sp,104
 403078c:	908003cc 	andi	r2,r18,15
 4030790:	9806973a 	slli	r3,r19,28
 4030794:	2085883a 	add	r2,r4,r2
 4030798:	9024d13a 	srli	r18,r18,4
 403079c:	10800003 	ldbu	r2,0(r2)
 40307a0:	9826d13a 	srli	r19,r19,4
 40307a4:	ad7fffc4 	addi	r21,r21,-1
 40307a8:	1ca4b03a 	or	r18,r3,r18
 40307ac:	a8800005 	stb	r2,0(r21)
 40307b0:	94c4b03a 	or	r2,r18,r19
 40307b4:	103ff51e 	bne	r2,zero,403078c <__flash_rwdata_start+0xffffa234>
 40307b8:	003e5906 	br	4030120 <__flash_rwdata_start+0xffff9bc8>
 40307bc:	d9402117 	ldw	r5,132(sp)
 40307c0:	d9002017 	ldw	r4,128(sp)
 40307c4:	d9801a04 	addi	r6,sp,104
 40307c8:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40307cc:	103f891e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 40307d0:	d8801c17 	ldw	r2,112(sp)
 40307d4:	d811883a 	mov	r8,sp
 40307d8:	003f9506 	br	4030630 <__flash_rwdata_start+0xffffa0d8>
 40307dc:	d9402117 	ldw	r5,132(sp)
 40307e0:	d9002017 	ldw	r4,128(sp)
 40307e4:	d9801a04 	addi	r6,sp,104
 40307e8:	402f76c0 	call	402f76c <__sprint_r.part.0>
 40307ec:	103f811e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 40307f0:	d811883a 	mov	r8,sp
 40307f4:	003ced06 	br	402fbac <__flash_rwdata_start+0xffff9654>
 40307f8:	d9402117 	ldw	r5,132(sp)
 40307fc:	d9002017 	ldw	r4,128(sp)
 4030800:	d9801a04 	addi	r6,sp,104
 4030804:	da402c15 	stw	r9,176(sp)
 4030808:	db802a15 	stw	r14,168(sp)
 403080c:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030810:	da402c17 	ldw	r9,176(sp)
 4030814:	db802a17 	ldw	r14,168(sp)
 4030818:	103f761e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 403081c:	d9401b17 	ldw	r5,108(sp)
 4030820:	d8801c17 	ldw	r2,112(sp)
 4030824:	d811883a 	mov	r8,sp
 4030828:	29000044 	addi	r4,r5,1
 403082c:	003d5b06 	br	402fd9c <__flash_rwdata_start+0xffff9844>
 4030830:	d9402117 	ldw	r5,132(sp)
 4030834:	d9002017 	ldw	r4,128(sp)
 4030838:	d9801a04 	addi	r6,sp,104
 403083c:	da402c15 	stw	r9,176(sp)
 4030840:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030844:	da402c17 	ldw	r9,176(sp)
 4030848:	103f6a1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 403084c:	d9401b17 	ldw	r5,108(sp)
 4030850:	d8801c17 	ldw	r2,112(sp)
 4030854:	d811883a 	mov	r8,sp
 4030858:	29000044 	addi	r4,r5,1
 403085c:	003f1006 	br	40304a0 <__flash_rwdata_start+0xffff9f48>
 4030860:	1000c31e 	bne	r2,zero,4030b70 <___vfiprintf_internal_r+0x12d8>
 4030864:	01000044 	movi	r4,1
 4030868:	000b883a 	mov	r5,zero
 403086c:	d811883a 	mov	r8,sp
 4030870:	003f0d06 	br	40304a8 <__flash_rwdata_start+0xffff9f50>
 4030874:	d9402117 	ldw	r5,132(sp)
 4030878:	d9002017 	ldw	r4,128(sp)
 403087c:	d9801a04 	addi	r6,sp,104
 4030880:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030884:	103f5b1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 4030888:	d9001b17 	ldw	r4,108(sp)
 403088c:	d8801c17 	ldw	r2,112(sp)
 4030890:	d811883a 	mov	r8,sp
 4030894:	21000044 	addi	r4,r4,1
 4030898:	003d8006 	br	402fe9c <__flash_rwdata_start+0xffff9944>
 403089c:	01000034 	movhi	r4,0
 40308a0:	21013204 	addi	r4,r4,1224
 40308a4:	d9002615 	stw	r4,152(sp)
 40308a8:	d8c02215 	stw	r3,136(sp)
 40308ac:	1029883a 	mov	r20,r2
 40308b0:	94c4b03a 	or	r2,r18,r19
 40308b4:	103fb21e 	bne	r2,zero,4030780 <__flash_rwdata_start+0xffffa228>
 40308b8:	0039883a 	mov	fp,zero
 40308bc:	00800084 	movi	r2,2
 40308c0:	003e6b06 	br	4030270 <__flash_rwdata_start+0xffff9d18>
 40308c4:	da802217 	ldw	r10,136(sp)
 40308c8:	d8001d85 	stb	zero,118(sp)
 40308cc:	0027883a 	mov	r19,zero
 40308d0:	50800104 	addi	r2,r10,4
 40308d4:	54800017 	ldw	r18,0(r10)
 40308d8:	483e6016 	blt	r9,zero,403025c <__flash_rwdata_start+0xffff9d04>
 40308dc:	00ffdfc4 	movi	r3,-129
 40308e0:	d8802215 	stw	r2,136(sp)
 40308e4:	a0e8703a 	and	r20,r20,r3
 40308e8:	0039883a 	mov	fp,zero
 40308ec:	903ebb26 	beq	r18,zero,40303dc <__flash_rwdata_start+0xffff9e84>
 40308f0:	00800244 	movi	r2,9
 40308f4:	14bdee36 	bltu	r2,r18,40300b0 <__flash_rwdata_start+0xffff9b58>
 40308f8:	003eba06 	br	40303e4 <__flash_rwdata_start+0xffff9e8c>
 40308fc:	00800c04 	movi	r2,48
 4030900:	d8c01d45 	stb	r3,117(sp)
 4030904:	d8801d05 	stb	r2,116(sp)
 4030908:	d8001d85 	stb	zero,118(sp)
 403090c:	a0c00094 	ori	r3,r20,2
 4030910:	4800a916 	blt	r9,zero,4030bb8 <___vfiprintf_internal_r+0x1320>
 4030914:	00bfdfc4 	movi	r2,-129
 4030918:	a096703a 	and	r11,r20,r2
 403091c:	5d000094 	ori	r20,r11,2
 4030920:	0039883a 	mov	fp,zero
 4030924:	003f9706 	br	4030784 <__flash_rwdata_start+0xffffa22c>
 4030928:	8025883a 	mov	r18,r16
 403092c:	003c2e06 	br	402f9e8 <__flash_rwdata_start+0xffff9490>
 4030930:	00800034 	movhi	r2,0
 4030934:	10813204 	addi	r2,r2,1224
 4030938:	0039883a 	mov	fp,zero
 403093c:	d8802615 	stw	r2,152(sp)
 4030940:	003f9006 	br	4030784 <__flash_rwdata_start+0xffffa22c>
 4030944:	04a5c83a 	sub	r18,zero,r18
 4030948:	07000b44 	movi	fp,45
 403094c:	9004c03a 	cmpne	r2,r18,zero
 4030950:	04e7c83a 	sub	r19,zero,r19
 4030954:	df001d85 	stb	fp,118(sp)
 4030958:	98a7c83a 	sub	r19,r19,r2
 403095c:	48009f16 	blt	r9,zero,4030bdc <___vfiprintf_internal_r+0x1344>
 4030960:	00bfdfc4 	movi	r2,-129
 4030964:	a0a8703a 	and	r20,r20,r2
 4030968:	003dd006 	br	40300ac <__flash_rwdata_start+0xffff9b54>
 403096c:	70004c26 	beq	r14,zero,4030aa0 <___vfiprintf_internal_r+0x1208>
 4030970:	00800084 	movi	r2,2
 4030974:	d8c01d04 	addi	r3,sp,116
 4030978:	d8c00015 	stw	r3,0(sp)
 403097c:	d8800115 	stw	r2,4(sp)
 4030980:	01000044 	movi	r4,1
 4030984:	d811883a 	mov	r8,sp
 4030988:	003f7306 	br	4030758 <__flash_rwdata_start+0xffffa200>
 403098c:	a080100c 	andi	r2,r20,64
 4030990:	da802217 	ldw	r10,136(sp)
 4030994:	103e0626 	beq	r2,zero,40301b0 <__flash_rwdata_start+0xffff9c58>
 4030998:	5480000f 	ldh	r18,0(r10)
 403099c:	52800104 	addi	r10,r10,4
 40309a0:	da802215 	stw	r10,136(sp)
 40309a4:	9027d7fa 	srai	r19,r18,31
 40309a8:	9805883a 	mov	r2,r19
 40309ac:	003db806 	br	4030090 <__flash_rwdata_start+0xffff9b38>
 40309b0:	a080040c 	andi	r2,r20,16
 40309b4:	1000091e 	bne	r2,zero,40309dc <___vfiprintf_internal_r+0x1144>
 40309b8:	a2c0100c 	andi	r11,r20,64
 40309bc:	58000726 	beq	r11,zero,40309dc <___vfiprintf_internal_r+0x1144>
 40309c0:	da802217 	ldw	r10,136(sp)
 40309c4:	50800017 	ldw	r2,0(r10)
 40309c8:	52800104 	addi	r10,r10,4
 40309cc:	da802215 	stw	r10,136(sp)
 40309d0:	da802317 	ldw	r10,140(sp)
 40309d4:	1280000d 	sth	r10,0(r2)
 40309d8:	003be706 	br	402f978 <__flash_rwdata_start+0xffff9420>
 40309dc:	da802217 	ldw	r10,136(sp)
 40309e0:	50800017 	ldw	r2,0(r10)
 40309e4:	52800104 	addi	r10,r10,4
 40309e8:	da802215 	stw	r10,136(sp)
 40309ec:	da802317 	ldw	r10,140(sp)
 40309f0:	12800015 	stw	r10,0(r2)
 40309f4:	003be006 	br	402f978 <__flash_rwdata_start+0xffff9420>
 40309f8:	a080100c 	andi	r2,r20,64
 40309fc:	da802217 	ldw	r10,136(sp)
 4030a00:	10003026 	beq	r2,zero,4030ac4 <___vfiprintf_internal_r+0x122c>
 4030a04:	5480000b 	ldhu	r18,0(r10)
 4030a08:	52800104 	addi	r10,r10,4
 4030a0c:	0027883a 	mov	r19,zero
 4030a10:	da802215 	stw	r10,136(sp)
 4030a14:	003d8006 	br	4030018 <__flash_rwdata_start+0xffff9ac0>
 4030a18:	80c00007 	ldb	r3,0(r16)
 4030a1c:	003c0006 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030a20:	a080100c 	andi	r2,r20,64
 4030a24:	d8001d85 	stb	zero,118(sp)
 4030a28:	da802217 	ldw	r10,136(sp)
 4030a2c:	1000201e 	bne	r2,zero,4030ab0 <___vfiprintf_internal_r+0x1218>
 4030a30:	50800104 	addi	r2,r10,4
 4030a34:	54800017 	ldw	r18,0(r10)
 4030a38:	0027883a 	mov	r19,zero
 4030a3c:	483def0e 	bge	r9,zero,40301fc <__flash_rwdata_start+0xffff9ca4>
 4030a40:	94c6b03a 	or	r3,r18,r19
 4030a44:	d8802215 	stw	r2,136(sp)
 4030a48:	183d4e1e 	bne	r3,zero,402ff84 <__flash_rwdata_start+0xffff9a2c>
 4030a4c:	0039883a 	mov	fp,zero
 4030a50:	0005883a 	mov	r2,zero
 4030a54:	003e0606 	br	4030270 <__flash_rwdata_start+0xffff9d18>
 4030a58:	d9402117 	ldw	r5,132(sp)
 4030a5c:	d9002017 	ldw	r4,128(sp)
 4030a60:	d9801a04 	addi	r6,sp,104
 4030a64:	da402c15 	stw	r9,176(sp)
 4030a68:	db802a15 	stw	r14,168(sp)
 4030a6c:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030a70:	da402c17 	ldw	r9,176(sp)
 4030a74:	db802a17 	ldw	r14,168(sp)
 4030a78:	103ede1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 4030a7c:	d9401b17 	ldw	r5,108(sp)
 4030a80:	d8801c17 	ldw	r2,112(sp)
 4030a84:	d811883a 	mov	r8,sp
 4030a88:	29000044 	addi	r4,r5,1
 4030a8c:	003e7406 	br	4030460 <__flash_rwdata_start+0xffff9f08>
 4030a90:	00bfffc4 	movi	r2,-1
 4030a94:	003c5806 	br	402fbf8 <__flash_rwdata_start+0xffff96a0>
 4030a98:	d811883a 	mov	r8,sp
 4030a9c:	003ee806 	br	4030640 <__flash_rwdata_start+0xffffa0e8>
 4030aa0:	000b883a 	mov	r5,zero
 4030aa4:	01000044 	movi	r4,1
 4030aa8:	d811883a 	mov	r8,sp
 4030aac:	003e7c06 	br	40304a0 <__flash_rwdata_start+0xffff9f48>
 4030ab0:	50800104 	addi	r2,r10,4
 4030ab4:	5480000b 	ldhu	r18,0(r10)
 4030ab8:	0027883a 	mov	r19,zero
 4030abc:	483dcf0e 	bge	r9,zero,40301fc <__flash_rwdata_start+0xffff9ca4>
 4030ac0:	003fdf06 	br	4030a40 <__flash_rwdata_start+0xffffa4e8>
 4030ac4:	54800017 	ldw	r18,0(r10)
 4030ac8:	52800104 	addi	r10,r10,4
 4030acc:	0027883a 	mov	r19,zero
 4030ad0:	da802215 	stw	r10,136(sp)
 4030ad4:	003d5006 	br	4030018 <__flash_rwdata_start+0xffff9ac0>
 4030ad8:	50800104 	addi	r2,r10,4
 4030adc:	5480000b 	ldhu	r18,0(r10)
 4030ae0:	0027883a 	mov	r19,zero
 4030ae4:	483f7d0e 	bge	r9,zero,40308dc <__flash_rwdata_start+0xffffa384>
 4030ae8:	003ddc06 	br	403025c <__flash_rwdata_start+0xffff9d04>
 4030aec:	d8c02215 	stw	r3,136(sp)
 4030af0:	0039883a 	mov	fp,zero
 4030af4:	003ddb06 	br	4030264 <__flash_rwdata_start+0xffff9d0c>
 4030af8:	02800034 	movhi	r10,0
 4030afc:	52819304 	addi	r10,r10,1612
 4030b00:	da802415 	stw	r10,144(sp)
 4030b04:	003e8306 	br	4030514 <__flash_rwdata_start+0xffff9fbc>
 4030b08:	d8801c17 	ldw	r2,112(sp)
 4030b0c:	dd002117 	ldw	r20,132(sp)
 4030b10:	103eb926 	beq	r2,zero,40305f8 <__flash_rwdata_start+0xffffa0a0>
 4030b14:	d9002017 	ldw	r4,128(sp)
 4030b18:	d9801a04 	addi	r6,sp,104
 4030b1c:	a00b883a 	mov	r5,r20
 4030b20:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030b24:	003eb406 	br	40305f8 <__flash_rwdata_start+0xffffa0a0>
 4030b28:	80c00043 	ldbu	r3,1(r16)
 4030b2c:	a5000814 	ori	r20,r20,32
 4030b30:	84000044 	addi	r16,r16,1
 4030b34:	18c03fcc 	andi	r3,r3,255
 4030b38:	18c0201c 	xori	r3,r3,128
 4030b3c:	18ffe004 	addi	r3,r3,-128
 4030b40:	003bb706 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030b44:	a809883a 	mov	r4,r21
 4030b48:	d8c02a15 	stw	r3,168(sp)
 4030b4c:	da002b15 	stw	r8,172(sp)
 4030b50:	40287a00 	call	40287a0 <strlen>
 4030b54:	d8c02a17 	ldw	r3,168(sp)
 4030b58:	1027883a 	mov	r19,r2
 4030b5c:	df001d83 	ldbu	fp,118(sp)
 4030b60:	d8c02215 	stw	r3,136(sp)
 4030b64:	0013883a 	mov	r9,zero
 4030b68:	da002b17 	ldw	r8,172(sp)
 4030b6c:	003c4d06 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 4030b70:	d9402117 	ldw	r5,132(sp)
 4030b74:	d9002017 	ldw	r4,128(sp)
 4030b78:	d9801a04 	addi	r6,sp,104
 4030b7c:	da402c15 	stw	r9,176(sp)
 4030b80:	402f76c0 	call	402f76c <__sprint_r.part.0>
 4030b84:	da402c17 	ldw	r9,176(sp)
 4030b88:	103e9a1e 	bne	r2,zero,40305f4 <__flash_rwdata_start+0xffffa09c>
 4030b8c:	d9401b17 	ldw	r5,108(sp)
 4030b90:	d8801c17 	ldw	r2,112(sp)
 4030b94:	d811883a 	mov	r8,sp
 4030b98:	29000044 	addi	r4,r5,1
 4030b9c:	003e4206 	br	40304a8 <__flash_rwdata_start+0xffff9f50>
 4030ba0:	d9401b17 	ldw	r5,108(sp)
 4030ba4:	01000034 	movhi	r4,0
 4030ba8:	21019704 	addi	r4,r4,1628
 4030bac:	d9002415 	stw	r4,144(sp)
 4030bb0:	29400044 	addi	r5,r5,1
 4030bb4:	003c6d06 	br	402fd6c <__flash_rwdata_start+0xffff9814>
 4030bb8:	0039883a 	mov	fp,zero
 4030bbc:	00800084 	movi	r2,2
 4030bc0:	10803fcc 	andi	r2,r2,255
 4030bc4:	01000044 	movi	r4,1
 4030bc8:	11001e26 	beq	r2,r4,4030c44 <___vfiprintf_internal_r+0x13ac>
 4030bcc:	01000084 	movi	r4,2
 4030bd0:	11001e1e 	bne	r2,r4,4030c4c <___vfiprintf_internal_r+0x13b4>
 4030bd4:	1829883a 	mov	r20,r3
 4030bd8:	003eea06 	br	4030784 <__flash_rwdata_start+0xffffa22c>
 4030bdc:	a007883a 	mov	r3,r20
 4030be0:	00800044 	movi	r2,1
 4030be4:	003ff606 	br	4030bc0 <__flash_rwdata_start+0xffffa668>
 4030be8:	00800184 	movi	r2,6
 4030bec:	1240012e 	bgeu	r2,r9,4030bf4 <___vfiprintf_internal_r+0x135c>
 4030bf0:	1013883a 	mov	r9,r2
 4030bf4:	4827883a 	mov	r19,r9
 4030bf8:	4825883a 	mov	r18,r9
 4030bfc:	48001516 	blt	r9,zero,4030c54 <___vfiprintf_internal_r+0x13bc>
 4030c00:	05400034 	movhi	r21,0
 4030c04:	d8c02215 	stw	r3,136(sp)
 4030c08:	ad413704 	addi	r21,r21,1244
 4030c0c:	003d1406 	br	4030060 <__flash_rwdata_start+0xffff9b08>
 4030c10:	02800034 	movhi	r10,0
 4030c14:	52819304 	addi	r10,r10,1612
 4030c18:	da802415 	stw	r10,144(sp)
 4030c1c:	200d883a 	mov	r6,r4
 4030c20:	003c9106 	br	402fe68 <__flash_rwdata_start+0xffff9910>
 4030c24:	5021883a 	mov	r16,r10
 4030c28:	0013883a 	mov	r9,zero
 4030c2c:	003b7d06 	br	402fa24 <__flash_rwdata_start+0xffff94cc>
 4030c30:	4827883a 	mov	r19,r9
 4030c34:	df001d83 	ldbu	fp,118(sp)
 4030c38:	d8c02215 	stw	r3,136(sp)
 4030c3c:	0013883a 	mov	r9,zero
 4030c40:	003c1806 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 4030c44:	1829883a 	mov	r20,r3
 4030c48:	003d1806 	br	40300ac <__flash_rwdata_start+0xffff9b54>
 4030c4c:	1829883a 	mov	r20,r3
 4030c50:	003ccd06 	br	402ff88 <__flash_rwdata_start+0xffff9a30>
 4030c54:	0025883a 	mov	r18,zero
 4030c58:	003fe906 	br	4030c00 <__flash_rwdata_start+0xffffa6a8>
 4030c5c:	d8802217 	ldw	r2,136(sp)
 4030c60:	80c00043 	ldbu	r3,1(r16)
 4030c64:	5021883a 	mov	r16,r10
 4030c68:	12400017 	ldw	r9,0(r2)
 4030c6c:	10800104 	addi	r2,r2,4
 4030c70:	d8802215 	stw	r2,136(sp)
 4030c74:	483faf0e 	bge	r9,zero,4030b34 <__flash_rwdata_start+0xffffa5dc>
 4030c78:	18c03fcc 	andi	r3,r3,255
 4030c7c:	18c0201c 	xori	r3,r3,128
 4030c80:	027fffc4 	movi	r9,-1
 4030c84:	18ffe004 	addi	r3,r3,-128
 4030c88:	003b6506 	br	402fa20 <__flash_rwdata_start+0xffff94c8>
 4030c8c:	d9c01d85 	stb	r7,118(sp)
 4030c90:	003ca006 	br	402ff14 <__flash_rwdata_start+0xffff99bc>
 4030c94:	d9c01d85 	stb	r7,118(sp)
 4030c98:	003cad06 	br	402ff50 <__flash_rwdata_start+0xffff99f8>
 4030c9c:	d9c01d85 	stb	r7,118(sp)
 4030ca0:	003d7d06 	br	4030298 <__flash_rwdata_start+0xffff9d40>
 4030ca4:	d9c01d85 	stb	r7,118(sp)
 4030ca8:	003d5f06 	br	4030228 <__flash_rwdata_start+0xffff9cd0>
 4030cac:	a080004c 	andi	r2,r20,1
 4030cb0:	0039883a 	mov	fp,zero
 4030cb4:	10000526 	beq	r2,zero,4030ccc <___vfiprintf_internal_r+0x1434>
 4030cb8:	00800c04 	movi	r2,48
 4030cbc:	d88019c5 	stb	r2,103(sp)
 4030cc0:	dcc02717 	ldw	r19,156(sp)
 4030cc4:	dd4019c4 	addi	r21,sp,103
 4030cc8:	003bf606 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 4030ccc:	0027883a 	mov	r19,zero
 4030cd0:	dd401a04 	addi	r21,sp,104
 4030cd4:	003bf306 	br	402fca4 <__flash_rwdata_start+0xffff974c>
 4030cd8:	d9c01d85 	stb	r7,118(sp)
 4030cdc:	003dc806 	br	4030400 <__flash_rwdata_start+0xffff9ea8>
 4030ce0:	d9c01d85 	stb	r7,118(sp)
 4030ce4:	003d3a06 	br	40301d0 <__flash_rwdata_start+0xffff9c78>
 4030ce8:	d9c01d85 	stb	r7,118(sp)
 4030cec:	003d2a06 	br	4030198 <__flash_rwdata_start+0xffff9c40>
 4030cf0:	d9c01d85 	stb	r7,118(sp)
 4030cf4:	003cde06 	br	4030070 <__flash_rwdata_start+0xffff9b18>
 4030cf8:	d9c01d85 	stb	r7,118(sp)
 4030cfc:	003cbc06 	br	402fff0 <__flash_rwdata_start+0xffff9a98>

04030d00 <__vfiprintf_internal>:
 4030d00:	f811883a 	mov	r8,ra
 4030d04:	40346e80 	call	40346e8 <_mcount>
 4030d08:	403f883a 	mov	ra,r8
 4030d0c:	00800034 	movhi	r2,0
 4030d10:	10886904 	addi	r2,r2,8612
 4030d14:	300f883a 	mov	r7,r6
 4030d18:	280d883a 	mov	r6,r5
 4030d1c:	200b883a 	mov	r5,r4
 4030d20:	11000017 	ldw	r4,0(r2)
 4030d24:	402f8981 	jmpi	402f898 <___vfiprintf_internal_r>

04030d28 <__sbprintf>:
 4030d28:	f811883a 	mov	r8,ra
 4030d2c:	40346e80 	call	40346e8 <_mcount>
 4030d30:	403f883a 	mov	ra,r8
 4030d34:	defee204 	addi	sp,sp,-1144
 4030d38:	dfc11d15 	stw	ra,1140(sp)
 4030d3c:	dc811c15 	stw	r18,1136(sp)
 4030d40:	dc411b15 	stw	r17,1132(sp)
 4030d44:	dc011a15 	stw	r16,1128(sp)
 4030d48:	2880030b 	ldhu	r2,12(r5)
 4030d4c:	2ac01917 	ldw	r11,100(r5)
 4030d50:	2a80038b 	ldhu	r10,14(r5)
 4030d54:	2a400717 	ldw	r9,28(r5)
 4030d58:	2a000917 	ldw	r8,36(r5)
 4030d5c:	00c10004 	movi	r3,1024
 4030d60:	10bfff4c 	andi	r2,r2,65533
 4030d64:	2821883a 	mov	r16,r5
 4030d68:	d8cb883a 	add	r5,sp,r3
 4030d6c:	2025883a 	mov	r18,r4
 4030d70:	d881030d 	sth	r2,1036(sp)
 4030d74:	dac11915 	stw	r11,1124(sp)
 4030d78:	da81038d 	sth	r10,1038(sp)
 4030d7c:	da410715 	stw	r9,1052(sp)
 4030d80:	da010915 	stw	r8,1060(sp)
 4030d84:	dec10015 	stw	sp,1024(sp)
 4030d88:	dec10415 	stw	sp,1040(sp)
 4030d8c:	d8c10215 	stw	r3,1032(sp)
 4030d90:	d8c10515 	stw	r3,1044(sp)
 4030d94:	d8010615 	stw	zero,1048(sp)
 4030d98:	402f8980 	call	402f898 <___vfiprintf_internal_r>
 4030d9c:	1023883a 	mov	r17,r2
 4030da0:	10000416 	blt	r2,zero,4030db4 <__sbprintf+0x8c>
 4030da4:	d9410004 	addi	r5,sp,1024
 4030da8:	9009883a 	mov	r4,r18
 4030dac:	402c7600 	call	402c760 <_fflush_r>
 4030db0:	10000d1e 	bne	r2,zero,4030de8 <__sbprintf+0xc0>
 4030db4:	d881030b 	ldhu	r2,1036(sp)
 4030db8:	1080100c 	andi	r2,r2,64
 4030dbc:	10000326 	beq	r2,zero,4030dcc <__sbprintf+0xa4>
 4030dc0:	8080030b 	ldhu	r2,12(r16)
 4030dc4:	10801014 	ori	r2,r2,64
 4030dc8:	8080030d 	sth	r2,12(r16)
 4030dcc:	8805883a 	mov	r2,r17
 4030dd0:	dfc11d17 	ldw	ra,1140(sp)
 4030dd4:	dc811c17 	ldw	r18,1136(sp)
 4030dd8:	dc411b17 	ldw	r17,1132(sp)
 4030ddc:	dc011a17 	ldw	r16,1128(sp)
 4030de0:	dec11e04 	addi	sp,sp,1144
 4030de4:	f800283a 	ret
 4030de8:	047fffc4 	movi	r17,-1
 4030dec:	003ff106 	br	4030db4 <__flash_rwdata_start+0xffffa85c>

04030df0 <__swbuf_r>:
 4030df0:	f811883a 	mov	r8,ra
 4030df4:	40346e80 	call	40346e8 <_mcount>
 4030df8:	403f883a 	mov	ra,r8
 4030dfc:	defffb04 	addi	sp,sp,-20
 4030e00:	dfc00415 	stw	ra,16(sp)
 4030e04:	dcc00315 	stw	r19,12(sp)
 4030e08:	dc800215 	stw	r18,8(sp)
 4030e0c:	dc400115 	stw	r17,4(sp)
 4030e10:	dc000015 	stw	r16,0(sp)
 4030e14:	2025883a 	mov	r18,r4
 4030e18:	2827883a 	mov	r19,r5
 4030e1c:	3021883a 	mov	r16,r6
 4030e20:	20000226 	beq	r4,zero,4030e2c <__swbuf_r+0x3c>
 4030e24:	20800e17 	ldw	r2,56(r4)
 4030e28:	10004226 	beq	r2,zero,4030f34 <__swbuf_r+0x144>
 4030e2c:	80800617 	ldw	r2,24(r16)
 4030e30:	8100030b 	ldhu	r4,12(r16)
 4030e34:	80800215 	stw	r2,8(r16)
 4030e38:	2080020c 	andi	r2,r4,8
 4030e3c:	10003626 	beq	r2,zero,4030f18 <__swbuf_r+0x128>
 4030e40:	80c00417 	ldw	r3,16(r16)
 4030e44:	18003426 	beq	r3,zero,4030f18 <__swbuf_r+0x128>
 4030e48:	2088000c 	andi	r2,r4,8192
 4030e4c:	9c403fcc 	andi	r17,r19,255
 4030e50:	10001a26 	beq	r2,zero,4030ebc <__swbuf_r+0xcc>
 4030e54:	80800017 	ldw	r2,0(r16)
 4030e58:	81000517 	ldw	r4,20(r16)
 4030e5c:	10c7c83a 	sub	r3,r2,r3
 4030e60:	1900200e 	bge	r3,r4,4030ee4 <__swbuf_r+0xf4>
 4030e64:	18c00044 	addi	r3,r3,1
 4030e68:	81000217 	ldw	r4,8(r16)
 4030e6c:	11400044 	addi	r5,r2,1
 4030e70:	81400015 	stw	r5,0(r16)
 4030e74:	213fffc4 	addi	r4,r4,-1
 4030e78:	81000215 	stw	r4,8(r16)
 4030e7c:	14c00005 	stb	r19,0(r2)
 4030e80:	80800517 	ldw	r2,20(r16)
 4030e84:	10c01e26 	beq	r2,r3,4030f00 <__swbuf_r+0x110>
 4030e88:	8080030b 	ldhu	r2,12(r16)
 4030e8c:	1080004c 	andi	r2,r2,1
 4030e90:	10000226 	beq	r2,zero,4030e9c <__swbuf_r+0xac>
 4030e94:	00800284 	movi	r2,10
 4030e98:	88801926 	beq	r17,r2,4030f00 <__swbuf_r+0x110>
 4030e9c:	8805883a 	mov	r2,r17
 4030ea0:	dfc00417 	ldw	ra,16(sp)
 4030ea4:	dcc00317 	ldw	r19,12(sp)
 4030ea8:	dc800217 	ldw	r18,8(sp)
 4030eac:	dc400117 	ldw	r17,4(sp)
 4030eb0:	dc000017 	ldw	r16,0(sp)
 4030eb4:	dec00504 	addi	sp,sp,20
 4030eb8:	f800283a 	ret
 4030ebc:	81401917 	ldw	r5,100(r16)
 4030ec0:	00b7ffc4 	movi	r2,-8193
 4030ec4:	21080014 	ori	r4,r4,8192
 4030ec8:	2884703a 	and	r2,r5,r2
 4030ecc:	80801915 	stw	r2,100(r16)
 4030ed0:	80800017 	ldw	r2,0(r16)
 4030ed4:	8100030d 	sth	r4,12(r16)
 4030ed8:	81000517 	ldw	r4,20(r16)
 4030edc:	10c7c83a 	sub	r3,r2,r3
 4030ee0:	193fe016 	blt	r3,r4,4030e64 <__flash_rwdata_start+0xffffa90c>
 4030ee4:	800b883a 	mov	r5,r16
 4030ee8:	9009883a 	mov	r4,r18
 4030eec:	402c7600 	call	402c760 <_fflush_r>
 4030ef0:	1000071e 	bne	r2,zero,4030f10 <__swbuf_r+0x120>
 4030ef4:	80800017 	ldw	r2,0(r16)
 4030ef8:	00c00044 	movi	r3,1
 4030efc:	003fda06 	br	4030e68 <__flash_rwdata_start+0xffffa910>
 4030f00:	800b883a 	mov	r5,r16
 4030f04:	9009883a 	mov	r4,r18
 4030f08:	402c7600 	call	402c760 <_fflush_r>
 4030f0c:	103fe326 	beq	r2,zero,4030e9c <__flash_rwdata_start+0xffffa944>
 4030f10:	00bfffc4 	movi	r2,-1
 4030f14:	003fe206 	br	4030ea0 <__flash_rwdata_start+0xffffa948>
 4030f18:	800b883a 	mov	r5,r16
 4030f1c:	9009883a 	mov	r4,r18
 4030f20:	402ab380 	call	402ab38 <__swsetup_r>
 4030f24:	103ffa1e 	bne	r2,zero,4030f10 <__flash_rwdata_start+0xffffa9b8>
 4030f28:	8100030b 	ldhu	r4,12(r16)
 4030f2c:	80c00417 	ldw	r3,16(r16)
 4030f30:	003fc506 	br	4030e48 <__flash_rwdata_start+0xffffa8f0>
 4030f34:	402cba80 	call	402cba8 <__sinit>
 4030f38:	003fbc06 	br	4030e2c <__flash_rwdata_start+0xffffa8d4>

04030f3c <__swbuf>:
 4030f3c:	f811883a 	mov	r8,ra
 4030f40:	40346e80 	call	40346e8 <_mcount>
 4030f44:	403f883a 	mov	ra,r8
 4030f48:	00800034 	movhi	r2,0
 4030f4c:	10886904 	addi	r2,r2,8612
 4030f50:	280d883a 	mov	r6,r5
 4030f54:	200b883a 	mov	r5,r4
 4030f58:	11000017 	ldw	r4,0(r2)
 4030f5c:	4030df01 	jmpi	4030df0 <__swbuf_r>

04030f60 <_write_r>:
 4030f60:	f811883a 	mov	r8,ra
 4030f64:	40346e80 	call	40346e8 <_mcount>
 4030f68:	403f883a 	mov	ra,r8
 4030f6c:	defffd04 	addi	sp,sp,-12
 4030f70:	dfc00215 	stw	ra,8(sp)
 4030f74:	dc400115 	stw	r17,4(sp)
 4030f78:	dc000015 	stw	r16,0(sp)
 4030f7c:	04000034 	movhi	r16,0
 4030f80:	2805883a 	mov	r2,r5
 4030f84:	84088004 	addi	r16,r16,8704
 4030f88:	300b883a 	mov	r5,r6
 4030f8c:	2023883a 	mov	r17,r4
 4030f90:	380d883a 	mov	r6,r7
 4030f94:	1009883a 	mov	r4,r2
 4030f98:	80000015 	stw	zero,0(r16)
 4030f9c:	4034a140 	call	4034a14 <write>
 4030fa0:	00ffffc4 	movi	r3,-1
 4030fa4:	10c00526 	beq	r2,r3,4030fbc <_write_r+0x5c>
 4030fa8:	dfc00217 	ldw	ra,8(sp)
 4030fac:	dc400117 	ldw	r17,4(sp)
 4030fb0:	dc000017 	ldw	r16,0(sp)
 4030fb4:	dec00304 	addi	sp,sp,12
 4030fb8:	f800283a 	ret
 4030fbc:	80c00017 	ldw	r3,0(r16)
 4030fc0:	183ff926 	beq	r3,zero,4030fa8 <__flash_rwdata_start+0xffffaa50>
 4030fc4:	88c00015 	stw	r3,0(r17)
 4030fc8:	003ff706 	br	4030fa8 <__flash_rwdata_start+0xffffaa50>

04030fcc <_close_r>:
 4030fcc:	f811883a 	mov	r8,ra
 4030fd0:	40346e80 	call	40346e8 <_mcount>
 4030fd4:	403f883a 	mov	ra,r8
 4030fd8:	defffd04 	addi	sp,sp,-12
 4030fdc:	dfc00215 	stw	ra,8(sp)
 4030fe0:	dc400115 	stw	r17,4(sp)
 4030fe4:	dc000015 	stw	r16,0(sp)
 4030fe8:	04000034 	movhi	r16,0
 4030fec:	84088004 	addi	r16,r16,8704
 4030ff0:	2023883a 	mov	r17,r4
 4030ff4:	2809883a 	mov	r4,r5
 4030ff8:	80000015 	stw	zero,0(r16)
 4030ffc:	4033fc00 	call	4033fc0 <close>
 4031000:	00ffffc4 	movi	r3,-1
 4031004:	10c00526 	beq	r2,r3,403101c <_close_r+0x50>
 4031008:	dfc00217 	ldw	ra,8(sp)
 403100c:	dc400117 	ldw	r17,4(sp)
 4031010:	dc000017 	ldw	r16,0(sp)
 4031014:	dec00304 	addi	sp,sp,12
 4031018:	f800283a 	ret
 403101c:	80c00017 	ldw	r3,0(r16)
 4031020:	183ff926 	beq	r3,zero,4031008 <__flash_rwdata_start+0xffffaab0>
 4031024:	88c00015 	stw	r3,0(r17)
 4031028:	003ff706 	br	4031008 <__flash_rwdata_start+0xffffaab0>

0403102c <_calloc_r>:
 403102c:	f811883a 	mov	r8,ra
 4031030:	40346e80 	call	40346e8 <_mcount>
 4031034:	403f883a 	mov	ra,r8
 4031038:	defffe04 	addi	sp,sp,-8
 403103c:	dfc00115 	stw	ra,4(sp)
 4031040:	dc000015 	stw	r16,0(sp)
 4031044:	298b383a 	mul	r5,r5,r6
 4031048:	40277600 	call	4027760 <_malloc_r>
 403104c:	10002926 	beq	r2,zero,40310f4 <_calloc_r+0xc8>
 4031050:	11bfff17 	ldw	r6,-4(r2)
 4031054:	1021883a 	mov	r16,r2
 4031058:	00bfff04 	movi	r2,-4
 403105c:	308c703a 	and	r6,r6,r2
 4031060:	00c00904 	movi	r3,36
 4031064:	308d883a 	add	r6,r6,r2
 4031068:	19801636 	bltu	r3,r6,40310c4 <_calloc_r+0x98>
 403106c:	008004c4 	movi	r2,19
 4031070:	11800b2e 	bgeu	r2,r6,40310a0 <_calloc_r+0x74>
 4031074:	80000015 	stw	zero,0(r16)
 4031078:	80000115 	stw	zero,4(r16)
 403107c:	008006c4 	movi	r2,27
 4031080:	11801a2e 	bgeu	r2,r6,40310ec <_calloc_r+0xc0>
 4031084:	80000215 	stw	zero,8(r16)
 4031088:	80000315 	stw	zero,12(r16)
 403108c:	30c0151e 	bne	r6,r3,40310e4 <_calloc_r+0xb8>
 4031090:	80000415 	stw	zero,16(r16)
 4031094:	80800604 	addi	r2,r16,24
 4031098:	80000515 	stw	zero,20(r16)
 403109c:	00000106 	br	40310a4 <_calloc_r+0x78>
 40310a0:	8005883a 	mov	r2,r16
 40310a4:	10000015 	stw	zero,0(r2)
 40310a8:	10000115 	stw	zero,4(r2)
 40310ac:	10000215 	stw	zero,8(r2)
 40310b0:	8005883a 	mov	r2,r16
 40310b4:	dfc00117 	ldw	ra,4(sp)
 40310b8:	dc000017 	ldw	r16,0(sp)
 40310bc:	dec00204 	addi	sp,sp,8
 40310c0:	f800283a 	ret
 40310c4:	000b883a 	mov	r5,zero
 40310c8:	8009883a 	mov	r4,r16
 40310cc:	4027f780 	call	4027f78 <memset>
 40310d0:	8005883a 	mov	r2,r16
 40310d4:	dfc00117 	ldw	ra,4(sp)
 40310d8:	dc000017 	ldw	r16,0(sp)
 40310dc:	dec00204 	addi	sp,sp,8
 40310e0:	f800283a 	ret
 40310e4:	80800404 	addi	r2,r16,16
 40310e8:	003fee06 	br	40310a4 <__flash_rwdata_start+0xffffab4c>
 40310ec:	80800204 	addi	r2,r16,8
 40310f0:	003fec06 	br	40310a4 <__flash_rwdata_start+0xffffab4c>
 40310f4:	0005883a 	mov	r2,zero
 40310f8:	003fee06 	br	40310b4 <__flash_rwdata_start+0xffffab5c>

040310fc <_fclose_r>:
 40310fc:	f811883a 	mov	r8,ra
 4031100:	40346e80 	call	40346e8 <_mcount>
 4031104:	403f883a 	mov	ra,r8
 4031108:	28003926 	beq	r5,zero,40311f0 <_fclose_r+0xf4>
 403110c:	defffc04 	addi	sp,sp,-16
 4031110:	dfc00315 	stw	ra,12(sp)
 4031114:	dc800215 	stw	r18,8(sp)
 4031118:	dc400115 	stw	r17,4(sp)
 403111c:	dc000015 	stw	r16,0(sp)
 4031120:	2023883a 	mov	r17,r4
 4031124:	2821883a 	mov	r16,r5
 4031128:	20000226 	beq	r4,zero,4031134 <_fclose_r+0x38>
 403112c:	20800e17 	ldw	r2,56(r4)
 4031130:	10002726 	beq	r2,zero,40311d0 <_fclose_r+0xd4>
 4031134:	8080030f 	ldh	r2,12(r16)
 4031138:	1000071e 	bne	r2,zero,4031158 <_fclose_r+0x5c>
 403113c:	0005883a 	mov	r2,zero
 4031140:	dfc00317 	ldw	ra,12(sp)
 4031144:	dc800217 	ldw	r18,8(sp)
 4031148:	dc400117 	ldw	r17,4(sp)
 403114c:	dc000017 	ldw	r16,0(sp)
 4031150:	dec00404 	addi	sp,sp,16
 4031154:	f800283a 	ret
 4031158:	800b883a 	mov	r5,r16
 403115c:	8809883a 	mov	r4,r17
 4031160:	402c5380 	call	402c538 <__sflush_r>
 4031164:	1025883a 	mov	r18,r2
 4031168:	80800b17 	ldw	r2,44(r16)
 403116c:	10000426 	beq	r2,zero,4031180 <_fclose_r+0x84>
 4031170:	81400717 	ldw	r5,28(r16)
 4031174:	8809883a 	mov	r4,r17
 4031178:	103ee83a 	callr	r2
 403117c:	10001616 	blt	r2,zero,40311d8 <_fclose_r+0xdc>
 4031180:	8080030b 	ldhu	r2,12(r16)
 4031184:	1080200c 	andi	r2,r2,128
 4031188:	1000151e 	bne	r2,zero,40311e0 <_fclose_r+0xe4>
 403118c:	81400c17 	ldw	r5,48(r16)
 4031190:	28000526 	beq	r5,zero,40311a8 <_fclose_r+0xac>
 4031194:	80801004 	addi	r2,r16,64
 4031198:	28800226 	beq	r5,r2,40311a4 <_fclose_r+0xa8>
 403119c:	8809883a 	mov	r4,r17
 40311a0:	402cd7c0 	call	402cd7c <_free_r>
 40311a4:	80000c15 	stw	zero,48(r16)
 40311a8:	81401117 	ldw	r5,68(r16)
 40311ac:	28000326 	beq	r5,zero,40311bc <_fclose_r+0xc0>
 40311b0:	8809883a 	mov	r4,r17
 40311b4:	402cd7c0 	call	402cd7c <_free_r>
 40311b8:	80001115 	stw	zero,68(r16)
 40311bc:	402cbc40 	call	402cbc4 <__sfp_lock_acquire>
 40311c0:	8000030d 	sth	zero,12(r16)
 40311c4:	402cbd40 	call	402cbd4 <__sfp_lock_release>
 40311c8:	9005883a 	mov	r2,r18
 40311cc:	003fdc06 	br	4031140 <__flash_rwdata_start+0xffffabe8>
 40311d0:	402cba80 	call	402cba8 <__sinit>
 40311d4:	003fd706 	br	4031134 <__flash_rwdata_start+0xffffabdc>
 40311d8:	04bfffc4 	movi	r18,-1
 40311dc:	003fe806 	br	4031180 <__flash_rwdata_start+0xffffac28>
 40311e0:	81400417 	ldw	r5,16(r16)
 40311e4:	8809883a 	mov	r4,r17
 40311e8:	402cd7c0 	call	402cd7c <_free_r>
 40311ec:	003fe706 	br	403118c <__flash_rwdata_start+0xffffac34>
 40311f0:	0005883a 	mov	r2,zero
 40311f4:	f800283a 	ret

040311f8 <fclose>:
 40311f8:	f811883a 	mov	r8,ra
 40311fc:	40346e80 	call	40346e8 <_mcount>
 4031200:	403f883a 	mov	ra,r8
 4031204:	00800034 	movhi	r2,0
 4031208:	10886904 	addi	r2,r2,8612
 403120c:	200b883a 	mov	r5,r4
 4031210:	11000017 	ldw	r4,0(r2)
 4031214:	40310fc1 	jmpi	40310fc <_fclose_r>

04031218 <__fputwc>:
 4031218:	f811883a 	mov	r8,ra
 403121c:	40346e80 	call	40346e8 <_mcount>
 4031220:	403f883a 	mov	ra,r8
 4031224:	defff804 	addi	sp,sp,-32
 4031228:	dfc00715 	stw	ra,28(sp)
 403122c:	dd400615 	stw	r21,24(sp)
 4031230:	dd000515 	stw	r20,20(sp)
 4031234:	dcc00415 	stw	r19,16(sp)
 4031238:	dc800315 	stw	r18,12(sp)
 403123c:	dc400215 	stw	r17,8(sp)
 4031240:	dc000115 	stw	r16,4(sp)
 4031244:	2027883a 	mov	r19,r4
 4031248:	2825883a 	mov	r18,r5
 403124c:	3021883a 	mov	r16,r6
 4031250:	402d7a00 	call	402d7a0 <__locale_mb_cur_max>
 4031254:	00c00044 	movi	r3,1
 4031258:	10c03e26 	beq	r2,r3,4031354 <__fputwc+0x13c>
 403125c:	81c01704 	addi	r7,r16,92
 4031260:	900d883a 	mov	r6,r18
 4031264:	d80b883a 	mov	r5,sp
 4031268:	9809883a 	mov	r4,r19
 403126c:	40315e40 	call	40315e4 <_wcrtomb_r>
 4031270:	1029883a 	mov	r20,r2
 4031274:	00bfffc4 	movi	r2,-1
 4031278:	a0802026 	beq	r20,r2,40312fc <__fputwc+0xe4>
 403127c:	d9400003 	ldbu	r5,0(sp)
 4031280:	a0001c26 	beq	r20,zero,40312f4 <__fputwc+0xdc>
 4031284:	0023883a 	mov	r17,zero
 4031288:	05400284 	movi	r21,10
 403128c:	00000906 	br	40312b4 <__fputwc+0x9c>
 4031290:	80800017 	ldw	r2,0(r16)
 4031294:	11400005 	stb	r5,0(r2)
 4031298:	80c00017 	ldw	r3,0(r16)
 403129c:	18c00044 	addi	r3,r3,1
 40312a0:	80c00015 	stw	r3,0(r16)
 40312a4:	8c400044 	addi	r17,r17,1
 40312a8:	dc45883a 	add	r2,sp,r17
 40312ac:	8d00112e 	bgeu	r17,r20,40312f4 <__fputwc+0xdc>
 40312b0:	11400003 	ldbu	r5,0(r2)
 40312b4:	80c00217 	ldw	r3,8(r16)
 40312b8:	18ffffc4 	addi	r3,r3,-1
 40312bc:	80c00215 	stw	r3,8(r16)
 40312c0:	183ff30e 	bge	r3,zero,4031290 <__flash_rwdata_start+0xffffad38>
 40312c4:	80800617 	ldw	r2,24(r16)
 40312c8:	18801916 	blt	r3,r2,4031330 <__fputwc+0x118>
 40312cc:	80800017 	ldw	r2,0(r16)
 40312d0:	11400005 	stb	r5,0(r2)
 40312d4:	80800017 	ldw	r2,0(r16)
 40312d8:	10c00003 	ldbu	r3,0(r2)
 40312dc:	10800044 	addi	r2,r2,1
 40312e0:	1d402326 	beq	r3,r21,4031370 <__fputwc+0x158>
 40312e4:	80800015 	stw	r2,0(r16)
 40312e8:	8c400044 	addi	r17,r17,1
 40312ec:	dc45883a 	add	r2,sp,r17
 40312f0:	8d3fef36 	bltu	r17,r20,40312b0 <__flash_rwdata_start+0xffffad58>
 40312f4:	9005883a 	mov	r2,r18
 40312f8:	00000406 	br	403130c <__fputwc+0xf4>
 40312fc:	80c0030b 	ldhu	r3,12(r16)
 4031300:	a005883a 	mov	r2,r20
 4031304:	18c01014 	ori	r3,r3,64
 4031308:	80c0030d 	sth	r3,12(r16)
 403130c:	dfc00717 	ldw	ra,28(sp)
 4031310:	dd400617 	ldw	r21,24(sp)
 4031314:	dd000517 	ldw	r20,20(sp)
 4031318:	dcc00417 	ldw	r19,16(sp)
 403131c:	dc800317 	ldw	r18,12(sp)
 4031320:	dc400217 	ldw	r17,8(sp)
 4031324:	dc000117 	ldw	r16,4(sp)
 4031328:	dec00804 	addi	sp,sp,32
 403132c:	f800283a 	ret
 4031330:	800d883a 	mov	r6,r16
 4031334:	29403fcc 	andi	r5,r5,255
 4031338:	9809883a 	mov	r4,r19
 403133c:	4030df00 	call	4030df0 <__swbuf_r>
 4031340:	10bfffe0 	cmpeqi	r2,r2,-1
 4031344:	10803fcc 	andi	r2,r2,255
 4031348:	103fd626 	beq	r2,zero,40312a4 <__flash_rwdata_start+0xffffad4c>
 403134c:	00bfffc4 	movi	r2,-1
 4031350:	003fee06 	br	403130c <__flash_rwdata_start+0xffffadb4>
 4031354:	90ffffc4 	addi	r3,r18,-1
 4031358:	01003f84 	movi	r4,254
 403135c:	20ffbf36 	bltu	r4,r3,403125c <__flash_rwdata_start+0xffffad04>
 4031360:	900b883a 	mov	r5,r18
 4031364:	dc800005 	stb	r18,0(sp)
 4031368:	1029883a 	mov	r20,r2
 403136c:	003fc506 	br	4031284 <__flash_rwdata_start+0xffffad2c>
 4031370:	800d883a 	mov	r6,r16
 4031374:	a80b883a 	mov	r5,r21
 4031378:	9809883a 	mov	r4,r19
 403137c:	4030df00 	call	4030df0 <__swbuf_r>
 4031380:	10bfffe0 	cmpeqi	r2,r2,-1
 4031384:	003fef06 	br	4031344 <__flash_rwdata_start+0xffffadec>

04031388 <_fputwc_r>:
 4031388:	f811883a 	mov	r8,ra
 403138c:	40346e80 	call	40346e8 <_mcount>
 4031390:	403f883a 	mov	ra,r8
 4031394:	3080030b 	ldhu	r2,12(r6)
 4031398:	10c8000c 	andi	r3,r2,8192
 403139c:	1800051e 	bne	r3,zero,40313b4 <_fputwc_r+0x2c>
 40313a0:	30c01917 	ldw	r3,100(r6)
 40313a4:	10880014 	ori	r2,r2,8192
 40313a8:	3080030d 	sth	r2,12(r6)
 40313ac:	18880014 	ori	r2,r3,8192
 40313b0:	30801915 	stw	r2,100(r6)
 40313b4:	40312181 	jmpi	4031218 <__fputwc>

040313b8 <fputwc>:
 40313b8:	f811883a 	mov	r8,ra
 40313bc:	40346e80 	call	40346e8 <_mcount>
 40313c0:	403f883a 	mov	ra,r8
 40313c4:	defffc04 	addi	sp,sp,-16
 40313c8:	dfc00315 	stw	ra,12(sp)
 40313cc:	dc400215 	stw	r17,8(sp)
 40313d0:	dc000115 	stw	r16,4(sp)
 40313d4:	00800034 	movhi	r2,0
 40313d8:	10886904 	addi	r2,r2,8612
 40313dc:	14000017 	ldw	r16,0(r2)
 40313e0:	2023883a 	mov	r17,r4
 40313e4:	80000226 	beq	r16,zero,40313f0 <fputwc+0x38>
 40313e8:	80800e17 	ldw	r2,56(r16)
 40313ec:	10001026 	beq	r2,zero,4031430 <fputwc+0x78>
 40313f0:	2880030b 	ldhu	r2,12(r5)
 40313f4:	10c8000c 	andi	r3,r2,8192
 40313f8:	1800051e 	bne	r3,zero,4031410 <fputwc+0x58>
 40313fc:	28c01917 	ldw	r3,100(r5)
 4031400:	10880014 	ori	r2,r2,8192
 4031404:	2880030d 	sth	r2,12(r5)
 4031408:	18880014 	ori	r2,r3,8192
 403140c:	28801915 	stw	r2,100(r5)
 4031410:	280d883a 	mov	r6,r5
 4031414:	8009883a 	mov	r4,r16
 4031418:	880b883a 	mov	r5,r17
 403141c:	dfc00317 	ldw	ra,12(sp)
 4031420:	dc400217 	ldw	r17,8(sp)
 4031424:	dc000117 	ldw	r16,4(sp)
 4031428:	dec00404 	addi	sp,sp,16
 403142c:	40312181 	jmpi	4031218 <__fputwc>
 4031430:	8009883a 	mov	r4,r16
 4031434:	d9400015 	stw	r5,0(sp)
 4031438:	402cba80 	call	402cba8 <__sinit>
 403143c:	d9400017 	ldw	r5,0(sp)
 4031440:	003feb06 	br	40313f0 <__flash_rwdata_start+0xffffae98>

04031444 <_fstat_r>:
 4031444:	f811883a 	mov	r8,ra
 4031448:	40346e80 	call	40346e8 <_mcount>
 403144c:	403f883a 	mov	ra,r8
 4031450:	defffd04 	addi	sp,sp,-12
 4031454:	dfc00215 	stw	ra,8(sp)
 4031458:	dc400115 	stw	r17,4(sp)
 403145c:	dc000015 	stw	r16,0(sp)
 4031460:	04000034 	movhi	r16,0
 4031464:	2805883a 	mov	r2,r5
 4031468:	84088004 	addi	r16,r16,8704
 403146c:	2023883a 	mov	r17,r4
 4031470:	300b883a 	mov	r5,r6
 4031474:	1009883a 	mov	r4,r2
 4031478:	80000015 	stw	zero,0(r16)
 403147c:	40340e00 	call	40340e0 <fstat>
 4031480:	00ffffc4 	movi	r3,-1
 4031484:	10c00526 	beq	r2,r3,403149c <_fstat_r+0x58>
 4031488:	dfc00217 	ldw	ra,8(sp)
 403148c:	dc400117 	ldw	r17,4(sp)
 4031490:	dc000017 	ldw	r16,0(sp)
 4031494:	dec00304 	addi	sp,sp,12
 4031498:	f800283a 	ret
 403149c:	80c00017 	ldw	r3,0(r16)
 40314a0:	183ff926 	beq	r3,zero,4031488 <__flash_rwdata_start+0xffffaf30>
 40314a4:	88c00015 	stw	r3,0(r17)
 40314a8:	003ff706 	br	4031488 <__flash_rwdata_start+0xffffaf30>

040314ac <_isatty_r>:
 40314ac:	f811883a 	mov	r8,ra
 40314b0:	40346e80 	call	40346e8 <_mcount>
 40314b4:	403f883a 	mov	ra,r8
 40314b8:	defffd04 	addi	sp,sp,-12
 40314bc:	dfc00215 	stw	ra,8(sp)
 40314c0:	dc400115 	stw	r17,4(sp)
 40314c4:	dc000015 	stw	r16,0(sp)
 40314c8:	04000034 	movhi	r16,0
 40314cc:	84088004 	addi	r16,r16,8704
 40314d0:	2023883a 	mov	r17,r4
 40314d4:	2809883a 	mov	r4,r5
 40314d8:	80000015 	stw	zero,0(r16)
 40314dc:	40343680 	call	4034368 <isatty>
 40314e0:	00ffffc4 	movi	r3,-1
 40314e4:	10c00526 	beq	r2,r3,40314fc <_isatty_r+0x50>
 40314e8:	dfc00217 	ldw	ra,8(sp)
 40314ec:	dc400117 	ldw	r17,4(sp)
 40314f0:	dc000017 	ldw	r16,0(sp)
 40314f4:	dec00304 	addi	sp,sp,12
 40314f8:	f800283a 	ret
 40314fc:	80c00017 	ldw	r3,0(r16)
 4031500:	183ff926 	beq	r3,zero,40314e8 <__flash_rwdata_start+0xffffaf90>
 4031504:	88c00015 	stw	r3,0(r17)
 4031508:	003ff706 	br	40314e8 <__flash_rwdata_start+0xffffaf90>

0403150c <_lseek_r>:
 403150c:	f811883a 	mov	r8,ra
 4031510:	40346e80 	call	40346e8 <_mcount>
 4031514:	403f883a 	mov	ra,r8
 4031518:	defffd04 	addi	sp,sp,-12
 403151c:	dfc00215 	stw	ra,8(sp)
 4031520:	dc400115 	stw	r17,4(sp)
 4031524:	dc000015 	stw	r16,0(sp)
 4031528:	04000034 	movhi	r16,0
 403152c:	2805883a 	mov	r2,r5
 4031530:	84088004 	addi	r16,r16,8704
 4031534:	300b883a 	mov	r5,r6
 4031538:	2023883a 	mov	r17,r4
 403153c:	380d883a 	mov	r6,r7
 4031540:	1009883a 	mov	r4,r2
 4031544:	80000015 	stw	zero,0(r16)
 4031548:	40345d40 	call	40345d4 <lseek>
 403154c:	00ffffc4 	movi	r3,-1
 4031550:	10c00526 	beq	r2,r3,4031568 <_lseek_r+0x5c>
 4031554:	dfc00217 	ldw	ra,8(sp)
 4031558:	dc400117 	ldw	r17,4(sp)
 403155c:	dc000017 	ldw	r16,0(sp)
 4031560:	dec00304 	addi	sp,sp,12
 4031564:	f800283a 	ret
 4031568:	80c00017 	ldw	r3,0(r16)
 403156c:	183ff926 	beq	r3,zero,4031554 <__flash_rwdata_start+0xffffaffc>
 4031570:	88c00015 	stw	r3,0(r17)
 4031574:	003ff706 	br	4031554 <__flash_rwdata_start+0xffffaffc>

04031578 <_read_r>:
 4031578:	f811883a 	mov	r8,ra
 403157c:	40346e80 	call	40346e8 <_mcount>
 4031580:	403f883a 	mov	ra,r8
 4031584:	defffd04 	addi	sp,sp,-12
 4031588:	dfc00215 	stw	ra,8(sp)
 403158c:	dc400115 	stw	r17,4(sp)
 4031590:	dc000015 	stw	r16,0(sp)
 4031594:	04000034 	movhi	r16,0
 4031598:	2805883a 	mov	r2,r5
 403159c:	84088004 	addi	r16,r16,8704
 40315a0:	300b883a 	mov	r5,r6
 40315a4:	2023883a 	mov	r17,r4
 40315a8:	380d883a 	mov	r6,r7
 40315ac:	1009883a 	mov	r4,r2
 40315b0:	80000015 	stw	zero,0(r16)
 40315b4:	40347840 	call	4034784 <read>
 40315b8:	00ffffc4 	movi	r3,-1
 40315bc:	10c00526 	beq	r2,r3,40315d4 <_read_r+0x5c>
 40315c0:	dfc00217 	ldw	ra,8(sp)
 40315c4:	dc400117 	ldw	r17,4(sp)
 40315c8:	dc000017 	ldw	r16,0(sp)
 40315cc:	dec00304 	addi	sp,sp,12
 40315d0:	f800283a 	ret
 40315d4:	80c00017 	ldw	r3,0(r16)
 40315d8:	183ff926 	beq	r3,zero,40315c0 <__flash_rwdata_start+0xffffb068>
 40315dc:	88c00015 	stw	r3,0(r17)
 40315e0:	003ff706 	br	40315c0 <__flash_rwdata_start+0xffffb068>

040315e4 <_wcrtomb_r>:
 40315e4:	f811883a 	mov	r8,ra
 40315e8:	40346e80 	call	40346e8 <_mcount>
 40315ec:	403f883a 	mov	ra,r8
 40315f0:	defff604 	addi	sp,sp,-40
 40315f4:	dfc00915 	stw	ra,36(sp)
 40315f8:	dc800815 	stw	r18,32(sp)
 40315fc:	dc400715 	stw	r17,28(sp)
 4031600:	dc000615 	stw	r16,24(sp)
 4031604:	00800034 	movhi	r2,0
 4031608:	10886b04 	addi	r2,r2,8620
 403160c:	2021883a 	mov	r16,r4
 4031610:	3823883a 	mov	r17,r7
 4031614:	14800017 	ldw	r18,0(r2)
 4031618:	28001426 	beq	r5,zero,403166c <_wcrtomb_r+0x88>
 403161c:	d9400415 	stw	r5,16(sp)
 4031620:	d9800515 	stw	r6,20(sp)
 4031624:	402d7880 	call	402d788 <__locale_charset>
 4031628:	d9800517 	ldw	r6,20(sp)
 403162c:	d9400417 	ldw	r5,16(sp)
 4031630:	100f883a 	mov	r7,r2
 4031634:	dc400015 	stw	r17,0(sp)
 4031638:	8009883a 	mov	r4,r16
 403163c:	903ee83a 	callr	r18
 4031640:	00ffffc4 	movi	r3,-1
 4031644:	10c0031e 	bne	r2,r3,4031654 <_wcrtomb_r+0x70>
 4031648:	88000015 	stw	zero,0(r17)
 403164c:	00c02284 	movi	r3,138
 4031650:	80c00015 	stw	r3,0(r16)
 4031654:	dfc00917 	ldw	ra,36(sp)
 4031658:	dc800817 	ldw	r18,32(sp)
 403165c:	dc400717 	ldw	r17,28(sp)
 4031660:	dc000617 	ldw	r16,24(sp)
 4031664:	dec00a04 	addi	sp,sp,40
 4031668:	f800283a 	ret
 403166c:	402d7880 	call	402d788 <__locale_charset>
 4031670:	100f883a 	mov	r7,r2
 4031674:	dc400015 	stw	r17,0(sp)
 4031678:	000d883a 	mov	r6,zero
 403167c:	d9400104 	addi	r5,sp,4
 4031680:	8009883a 	mov	r4,r16
 4031684:	903ee83a 	callr	r18
 4031688:	003fed06 	br	4031640 <__flash_rwdata_start+0xffffb0e8>

0403168c <wcrtomb>:
 403168c:	f811883a 	mov	r8,ra
 4031690:	40346e80 	call	40346e8 <_mcount>
 4031694:	403f883a 	mov	ra,r8
 4031698:	defff604 	addi	sp,sp,-40
 403169c:	dfc00915 	stw	ra,36(sp)
 40316a0:	dd000815 	stw	r20,32(sp)
 40316a4:	dcc00715 	stw	r19,28(sp)
 40316a8:	dc800615 	stw	r18,24(sp)
 40316ac:	dc400515 	stw	r17,20(sp)
 40316b0:	dc000415 	stw	r16,16(sp)
 40316b4:	00800034 	movhi	r2,0
 40316b8:	10886904 	addi	r2,r2,8612
 40316bc:	3025883a 	mov	r18,r6
 40316c0:	14400017 	ldw	r17,0(r2)
 40316c4:	20001926 	beq	r4,zero,403172c <wcrtomb+0xa0>
 40316c8:	00800034 	movhi	r2,0
 40316cc:	10886b04 	addi	r2,r2,8620
 40316d0:	15000017 	ldw	r20,0(r2)
 40316d4:	2021883a 	mov	r16,r4
 40316d8:	2827883a 	mov	r19,r5
 40316dc:	402d7880 	call	402d788 <__locale_charset>
 40316e0:	100f883a 	mov	r7,r2
 40316e4:	dc800015 	stw	r18,0(sp)
 40316e8:	980d883a 	mov	r6,r19
 40316ec:	800b883a 	mov	r5,r16
 40316f0:	8809883a 	mov	r4,r17
 40316f4:	a03ee83a 	callr	r20
 40316f8:	00ffffc4 	movi	r3,-1
 40316fc:	10c0031e 	bne	r2,r3,403170c <wcrtomb+0x80>
 4031700:	90000015 	stw	zero,0(r18)
 4031704:	00c02284 	movi	r3,138
 4031708:	88c00015 	stw	r3,0(r17)
 403170c:	dfc00917 	ldw	ra,36(sp)
 4031710:	dd000817 	ldw	r20,32(sp)
 4031714:	dcc00717 	ldw	r19,28(sp)
 4031718:	dc800617 	ldw	r18,24(sp)
 403171c:	dc400517 	ldw	r17,20(sp)
 4031720:	dc000417 	ldw	r16,16(sp)
 4031724:	dec00a04 	addi	sp,sp,40
 4031728:	f800283a 	ret
 403172c:	00800034 	movhi	r2,0
 4031730:	10886b04 	addi	r2,r2,8620
 4031734:	14000017 	ldw	r16,0(r2)
 4031738:	402d7880 	call	402d788 <__locale_charset>
 403173c:	100f883a 	mov	r7,r2
 4031740:	dc800015 	stw	r18,0(sp)
 4031744:	000d883a 	mov	r6,zero
 4031748:	d9400104 	addi	r5,sp,4
 403174c:	8809883a 	mov	r4,r17
 4031750:	803ee83a 	callr	r16
 4031754:	003fe806 	br	40316f8 <__flash_rwdata_start+0xffffb1a0>

04031758 <__ascii_wctomb>:
 4031758:	f811883a 	mov	r8,ra
 403175c:	40346e80 	call	40346e8 <_mcount>
 4031760:	403f883a 	mov	ra,r8
 4031764:	28000526 	beq	r5,zero,403177c <__ascii_wctomb+0x24>
 4031768:	00803fc4 	movi	r2,255
 403176c:	11800536 	bltu	r2,r6,4031784 <__ascii_wctomb+0x2c>
 4031770:	29800005 	stb	r6,0(r5)
 4031774:	00800044 	movi	r2,1
 4031778:	f800283a 	ret
 403177c:	0005883a 	mov	r2,zero
 4031780:	f800283a 	ret
 4031784:	00802284 	movi	r2,138
 4031788:	20800015 	stw	r2,0(r4)
 403178c:	00bfffc4 	movi	r2,-1
 4031790:	003ff906 	br	4031778 <__flash_rwdata_start+0xffffb220>

04031794 <_wctomb_r>:
 4031794:	f811883a 	mov	r8,ra
 4031798:	40346e80 	call	40346e8 <_mcount>
 403179c:	403f883a 	mov	ra,r8
 40317a0:	defff904 	addi	sp,sp,-28
 40317a4:	dfc00615 	stw	ra,24(sp)
 40317a8:	dc400515 	stw	r17,20(sp)
 40317ac:	dc000415 	stw	r16,16(sp)
 40317b0:	00800034 	movhi	r2,0
 40317b4:	10886b04 	addi	r2,r2,8620
 40317b8:	14000017 	ldw	r16,0(r2)
 40317bc:	3823883a 	mov	r17,r7
 40317c0:	d9000115 	stw	r4,4(sp)
 40317c4:	d9400215 	stw	r5,8(sp)
 40317c8:	d9800315 	stw	r6,12(sp)
 40317cc:	402d7880 	call	402d788 <__locale_charset>
 40317d0:	d9800317 	ldw	r6,12(sp)
 40317d4:	d9400217 	ldw	r5,8(sp)
 40317d8:	d9000117 	ldw	r4,4(sp)
 40317dc:	100f883a 	mov	r7,r2
 40317e0:	dc400015 	stw	r17,0(sp)
 40317e4:	803ee83a 	callr	r16
 40317e8:	dfc00617 	ldw	ra,24(sp)
 40317ec:	dc400517 	ldw	r17,20(sp)
 40317f0:	dc000417 	ldw	r16,16(sp)
 40317f4:	dec00704 	addi	sp,sp,28
 40317f8:	f800283a 	ret

040317fc <__muldi3>:
 40317fc:	f811883a 	mov	r8,ra
 4031800:	40346e80 	call	40346e8 <_mcount>
 4031804:	403f883a 	mov	ra,r8
 4031808:	223fffcc 	andi	r8,r4,65535
 403180c:	2006d43a 	srli	r3,r4,16
 4031810:	32bfffcc 	andi	r10,r6,65535
 4031814:	3012d43a 	srli	r9,r6,16
 4031818:	4297383a 	mul	r11,r8,r10
 403181c:	1a95383a 	mul	r10,r3,r10
 4031820:	4251383a 	mul	r8,r8,r9
 4031824:	5804d43a 	srli	r2,r11,16
 4031828:	4291883a 	add	r8,r8,r10
 403182c:	1205883a 	add	r2,r2,r8
 4031830:	1a51383a 	mul	r8,r3,r9
 4031834:	1280022e 	bgeu	r2,r10,4031840 <__muldi3+0x44>
 4031838:	00c00074 	movhi	r3,1
 403183c:	40d1883a 	add	r8,r8,r3
 4031840:	1006d43a 	srli	r3,r2,16
 4031844:	21cf383a 	mul	r7,r4,r7
 4031848:	314b383a 	mul	r5,r6,r5
 403184c:	1004943a 	slli	r2,r2,16
 4031850:	1a11883a 	add	r8,r3,r8
 4031854:	5affffcc 	andi	r11,r11,65535
 4031858:	3947883a 	add	r3,r7,r5
 403185c:	12c5883a 	add	r2,r2,r11
 4031860:	1a07883a 	add	r3,r3,r8
 4031864:	f800283a 	ret

04031868 <__udivdi3>:
 4031868:	f811883a 	mov	r8,ra
 403186c:	40346e80 	call	40346e8 <_mcount>
 4031870:	403f883a 	mov	ra,r8
 4031874:	defff504 	addi	sp,sp,-44
 4031878:	dfc00a15 	stw	ra,40(sp)
 403187c:	df000915 	stw	fp,36(sp)
 4031880:	ddc00815 	stw	r23,32(sp)
 4031884:	dd800715 	stw	r22,28(sp)
 4031888:	dd400615 	stw	r21,24(sp)
 403188c:	dd000515 	stw	r20,20(sp)
 4031890:	dcc00415 	stw	r19,16(sp)
 4031894:	dc800315 	stw	r18,12(sp)
 4031898:	dc400215 	stw	r17,8(sp)
 403189c:	dc000115 	stw	r16,4(sp)
 40318a0:	2027883a 	mov	r19,r4
 40318a4:	2821883a 	mov	r16,r5
 40318a8:	3800411e 	bne	r7,zero,40319b0 <__udivdi3+0x148>
 40318ac:	3023883a 	mov	r17,r6
 40318b0:	2025883a 	mov	r18,r4
 40318b4:	2980522e 	bgeu	r5,r6,4031a00 <__udivdi3+0x198>
 40318b8:	00bfffd4 	movui	r2,65535
 40318bc:	282d883a 	mov	r22,r5
 40318c0:	1180a836 	bltu	r2,r6,4031b64 <__udivdi3+0x2fc>
 40318c4:	00803fc4 	movi	r2,255
 40318c8:	1185803a 	cmpltu	r2,r2,r6
 40318cc:	100490fa 	slli	r2,r2,3
 40318d0:	3086d83a 	srl	r3,r6,r2
 40318d4:	01000034 	movhi	r4,0
 40318d8:	2100e7c4 	addi	r4,r4,927
 40318dc:	20c7883a 	add	r3,r4,r3
 40318e0:	18c00003 	ldbu	r3,0(r3)
 40318e4:	1885883a 	add	r2,r3,r2
 40318e8:	00c00804 	movi	r3,32
 40318ec:	1887c83a 	sub	r3,r3,r2
 40318f0:	18000526 	beq	r3,zero,4031908 <__udivdi3+0xa0>
 40318f4:	80e0983a 	sll	r16,r16,r3
 40318f8:	9884d83a 	srl	r2,r19,r2
 40318fc:	30e2983a 	sll	r17,r6,r3
 4031900:	98e4983a 	sll	r18,r19,r3
 4031904:	142cb03a 	or	r22,r2,r16
 4031908:	882ad43a 	srli	r21,r17,16
 403190c:	b009883a 	mov	r4,r22
 4031910:	8d3fffcc 	andi	r20,r17,65535
 4031914:	a80b883a 	mov	r5,r21
 4031918:	4024d540 	call	4024d54 <__umodsi3>
 403191c:	b009883a 	mov	r4,r22
 4031920:	a80b883a 	mov	r5,r21
 4031924:	1027883a 	mov	r19,r2
 4031928:	4024ce40 	call	4024ce4 <__udivsi3>
 403192c:	102d883a 	mov	r22,r2
 4031930:	9826943a 	slli	r19,r19,16
 4031934:	9004d43a 	srli	r2,r18,16
 4031938:	a5a1383a 	mul	r16,r20,r22
 403193c:	14c4b03a 	or	r2,r2,r19
 4031940:	1400052e 	bgeu	r2,r16,4031958 <__udivdi3+0xf0>
 4031944:	1445883a 	add	r2,r2,r17
 4031948:	b0ffffc4 	addi	r3,r22,-1
 403194c:	14400136 	bltu	r2,r17,4031954 <__udivdi3+0xec>
 4031950:	14012336 	bltu	r2,r16,4031de0 <__udivdi3+0x578>
 4031954:	182d883a 	mov	r22,r3
 4031958:	1421c83a 	sub	r16,r2,r16
 403195c:	a80b883a 	mov	r5,r21
 4031960:	8009883a 	mov	r4,r16
 4031964:	4024d540 	call	4024d54 <__umodsi3>
 4031968:	1027883a 	mov	r19,r2
 403196c:	a80b883a 	mov	r5,r21
 4031970:	8009883a 	mov	r4,r16
 4031974:	4024ce40 	call	4024ce4 <__udivsi3>
 4031978:	9826943a 	slli	r19,r19,16
 403197c:	a0a9383a 	mul	r20,r20,r2
 4031980:	94bfffcc 	andi	r18,r18,65535
 4031984:	94e4b03a 	or	r18,r18,r19
 4031988:	9500052e 	bgeu	r18,r20,40319a0 <__udivdi3+0x138>
 403198c:	8ca5883a 	add	r18,r17,r18
 4031990:	10ffffc4 	addi	r3,r2,-1
 4031994:	9440f136 	bltu	r18,r17,4031d5c <__udivdi3+0x4f4>
 4031998:	9500f02e 	bgeu	r18,r20,4031d5c <__udivdi3+0x4f4>
 403199c:	10bfff84 	addi	r2,r2,-2
 40319a0:	b00c943a 	slli	r6,r22,16
 40319a4:	0007883a 	mov	r3,zero
 40319a8:	3084b03a 	or	r2,r6,r2
 40319ac:	00005906 	br	4031b14 <__udivdi3+0x2ac>
 40319b0:	29c05636 	bltu	r5,r7,4031b0c <__udivdi3+0x2a4>
 40319b4:	00bfffd4 	movui	r2,65535
 40319b8:	11c0622e 	bgeu	r2,r7,4031b44 <__udivdi3+0x2dc>
 40319bc:	00804034 	movhi	r2,256
 40319c0:	10bfffc4 	addi	r2,r2,-1
 40319c4:	11c0ee36 	bltu	r2,r7,4031d80 <__udivdi3+0x518>
 40319c8:	00800404 	movi	r2,16
 40319cc:	3886d83a 	srl	r3,r7,r2
 40319d0:	01000034 	movhi	r4,0
 40319d4:	2100e7c4 	addi	r4,r4,927
 40319d8:	20c7883a 	add	r3,r4,r3
 40319dc:	18c00003 	ldbu	r3,0(r3)
 40319e0:	05400804 	movi	r21,32
 40319e4:	1885883a 	add	r2,r3,r2
 40319e8:	a8abc83a 	sub	r21,r21,r2
 40319ec:	a800621e 	bne	r21,zero,4031b78 <__udivdi3+0x310>
 40319f0:	3c00e936 	bltu	r7,r16,4031d98 <__udivdi3+0x530>
 40319f4:	9985403a 	cmpgeu	r2,r19,r6
 40319f8:	0007883a 	mov	r3,zero
 40319fc:	00004506 	br	4031b14 <__udivdi3+0x2ac>
 4031a00:	3000041e 	bne	r6,zero,4031a14 <__udivdi3+0x1ac>
 4031a04:	000b883a 	mov	r5,zero
 4031a08:	01000044 	movi	r4,1
 4031a0c:	4024ce40 	call	4024ce4 <__udivsi3>
 4031a10:	1023883a 	mov	r17,r2
 4031a14:	00bfffd4 	movui	r2,65535
 4031a18:	14404e2e 	bgeu	r2,r17,4031b54 <__udivdi3+0x2ec>
 4031a1c:	00804034 	movhi	r2,256
 4031a20:	10bfffc4 	addi	r2,r2,-1
 4031a24:	1440d836 	bltu	r2,r17,4031d88 <__udivdi3+0x520>
 4031a28:	00800404 	movi	r2,16
 4031a2c:	8886d83a 	srl	r3,r17,r2
 4031a30:	01000034 	movhi	r4,0
 4031a34:	2100e7c4 	addi	r4,r4,927
 4031a38:	20c7883a 	add	r3,r4,r3
 4031a3c:	18c00003 	ldbu	r3,0(r3)
 4031a40:	1885883a 	add	r2,r3,r2
 4031a44:	00c00804 	movi	r3,32
 4031a48:	1887c83a 	sub	r3,r3,r2
 4031a4c:	18008f1e 	bne	r3,zero,4031c8c <__udivdi3+0x424>
 4031a50:	882ad43a 	srli	r21,r17,16
 4031a54:	8461c83a 	sub	r16,r16,r17
 4031a58:	8d3fffcc 	andi	r20,r17,65535
 4031a5c:	00c00044 	movi	r3,1
 4031a60:	8009883a 	mov	r4,r16
 4031a64:	a80b883a 	mov	r5,r21
 4031a68:	d8c00015 	stw	r3,0(sp)
 4031a6c:	4024d540 	call	4024d54 <__umodsi3>
 4031a70:	8009883a 	mov	r4,r16
 4031a74:	a80b883a 	mov	r5,r21
 4031a78:	1027883a 	mov	r19,r2
 4031a7c:	4024ce40 	call	4024ce4 <__udivsi3>
 4031a80:	9826943a 	slli	r19,r19,16
 4031a84:	9008d43a 	srli	r4,r18,16
 4031a88:	1521383a 	mul	r16,r2,r20
 4031a8c:	102d883a 	mov	r22,r2
 4031a90:	24c8b03a 	or	r4,r4,r19
 4031a94:	d8c00017 	ldw	r3,0(sp)
 4031a98:	2400052e 	bgeu	r4,r16,4031ab0 <__udivdi3+0x248>
 4031a9c:	2449883a 	add	r4,r4,r17
 4031aa0:	b0bfffc4 	addi	r2,r22,-1
 4031aa4:	24400136 	bltu	r4,r17,4031aac <__udivdi3+0x244>
 4031aa8:	2400ca36 	bltu	r4,r16,4031dd4 <__udivdi3+0x56c>
 4031aac:	102d883a 	mov	r22,r2
 4031ab0:	2421c83a 	sub	r16,r4,r16
 4031ab4:	a80b883a 	mov	r5,r21
 4031ab8:	8009883a 	mov	r4,r16
 4031abc:	d8c00015 	stw	r3,0(sp)
 4031ac0:	4024d540 	call	4024d54 <__umodsi3>
 4031ac4:	1027883a 	mov	r19,r2
 4031ac8:	a80b883a 	mov	r5,r21
 4031acc:	8009883a 	mov	r4,r16
 4031ad0:	4024ce40 	call	4024ce4 <__udivsi3>
 4031ad4:	9826943a 	slli	r19,r19,16
 4031ad8:	1529383a 	mul	r20,r2,r20
 4031adc:	94bfffcc 	andi	r18,r18,65535
 4031ae0:	94e4b03a 	or	r18,r18,r19
 4031ae4:	d8c00017 	ldw	r3,0(sp)
 4031ae8:	9500052e 	bgeu	r18,r20,4031b00 <__udivdi3+0x298>
 4031aec:	8ca5883a 	add	r18,r17,r18
 4031af0:	113fffc4 	addi	r4,r2,-1
 4031af4:	94409736 	bltu	r18,r17,4031d54 <__udivdi3+0x4ec>
 4031af8:	9500962e 	bgeu	r18,r20,4031d54 <__udivdi3+0x4ec>
 4031afc:	10bfff84 	addi	r2,r2,-2
 4031b00:	b00c943a 	slli	r6,r22,16
 4031b04:	3084b03a 	or	r2,r6,r2
 4031b08:	00000206 	br	4031b14 <__udivdi3+0x2ac>
 4031b0c:	0007883a 	mov	r3,zero
 4031b10:	0005883a 	mov	r2,zero
 4031b14:	dfc00a17 	ldw	ra,40(sp)
 4031b18:	df000917 	ldw	fp,36(sp)
 4031b1c:	ddc00817 	ldw	r23,32(sp)
 4031b20:	dd800717 	ldw	r22,28(sp)
 4031b24:	dd400617 	ldw	r21,24(sp)
 4031b28:	dd000517 	ldw	r20,20(sp)
 4031b2c:	dcc00417 	ldw	r19,16(sp)
 4031b30:	dc800317 	ldw	r18,12(sp)
 4031b34:	dc400217 	ldw	r17,8(sp)
 4031b38:	dc000117 	ldw	r16,4(sp)
 4031b3c:	dec00b04 	addi	sp,sp,44
 4031b40:	f800283a 	ret
 4031b44:	00803fc4 	movi	r2,255
 4031b48:	11c5803a 	cmpltu	r2,r2,r7
 4031b4c:	100490fa 	slli	r2,r2,3
 4031b50:	003f9e06 	br	40319cc <__flash_rwdata_start+0xffffb474>
 4031b54:	00803fc4 	movi	r2,255
 4031b58:	1445803a 	cmpltu	r2,r2,r17
 4031b5c:	100490fa 	slli	r2,r2,3
 4031b60:	003fb206 	br	4031a2c <__flash_rwdata_start+0xffffb4d4>
 4031b64:	00804034 	movhi	r2,256
 4031b68:	10bfffc4 	addi	r2,r2,-1
 4031b6c:	11808836 	bltu	r2,r6,4031d90 <__udivdi3+0x528>
 4031b70:	00800404 	movi	r2,16
 4031b74:	003f5606 	br	40318d0 <__flash_rwdata_start+0xffffb378>
 4031b78:	30aed83a 	srl	r23,r6,r2
 4031b7c:	3d4e983a 	sll	r7,r7,r21
 4031b80:	80acd83a 	srl	r22,r16,r2
 4031b84:	9884d83a 	srl	r2,r19,r2
 4031b88:	3deeb03a 	or	r23,r7,r23
 4031b8c:	b824d43a 	srli	r18,r23,16
 4031b90:	8560983a 	sll	r16,r16,r21
 4031b94:	b009883a 	mov	r4,r22
 4031b98:	900b883a 	mov	r5,r18
 4031b9c:	3568983a 	sll	r20,r6,r21
 4031ba0:	1420b03a 	or	r16,r2,r16
 4031ba4:	4024d540 	call	4024d54 <__umodsi3>
 4031ba8:	b009883a 	mov	r4,r22
 4031bac:	900b883a 	mov	r5,r18
 4031bb0:	1023883a 	mov	r17,r2
 4031bb4:	4024ce40 	call	4024ce4 <__udivsi3>
 4031bb8:	8808943a 	slli	r4,r17,16
 4031bbc:	bf3fffcc 	andi	fp,r23,65535
 4031bc0:	8006d43a 	srli	r3,r16,16
 4031bc4:	e0a3383a 	mul	r17,fp,r2
 4031bc8:	100d883a 	mov	r6,r2
 4031bcc:	1906b03a 	or	r3,r3,r4
 4031bd0:	1c40042e 	bgeu	r3,r17,4031be4 <__udivdi3+0x37c>
 4031bd4:	1dc7883a 	add	r3,r3,r23
 4031bd8:	10bfffc4 	addi	r2,r2,-1
 4031bdc:	1dc0752e 	bgeu	r3,r23,4031db4 <__udivdi3+0x54c>
 4031be0:	100d883a 	mov	r6,r2
 4031be4:	1c63c83a 	sub	r17,r3,r17
 4031be8:	900b883a 	mov	r5,r18
 4031bec:	8809883a 	mov	r4,r17
 4031bf0:	d9800015 	stw	r6,0(sp)
 4031bf4:	4024d540 	call	4024d54 <__umodsi3>
 4031bf8:	102d883a 	mov	r22,r2
 4031bfc:	8809883a 	mov	r4,r17
 4031c00:	900b883a 	mov	r5,r18
 4031c04:	4024ce40 	call	4024ce4 <__udivsi3>
 4031c08:	b02c943a 	slli	r22,r22,16
 4031c0c:	e089383a 	mul	r4,fp,r2
 4031c10:	843fffcc 	andi	r16,r16,65535
 4031c14:	85a0b03a 	or	r16,r16,r22
 4031c18:	d9800017 	ldw	r6,0(sp)
 4031c1c:	8100042e 	bgeu	r16,r4,4031c30 <__udivdi3+0x3c8>
 4031c20:	85e1883a 	add	r16,r16,r23
 4031c24:	10ffffc4 	addi	r3,r2,-1
 4031c28:	85c05e2e 	bgeu	r16,r23,4031da4 <__udivdi3+0x53c>
 4031c2c:	1805883a 	mov	r2,r3
 4031c30:	300c943a 	slli	r6,r6,16
 4031c34:	a17fffcc 	andi	r5,r20,65535
 4031c38:	a028d43a 	srli	r20,r20,16
 4031c3c:	3084b03a 	or	r2,r6,r2
 4031c40:	10ffffcc 	andi	r3,r2,65535
 4031c44:	100cd43a 	srli	r6,r2,16
 4031c48:	194f383a 	mul	r7,r3,r5
 4031c4c:	1d07383a 	mul	r3,r3,r20
 4031c50:	314b383a 	mul	r5,r6,r5
 4031c54:	3810d43a 	srli	r8,r7,16
 4031c58:	8121c83a 	sub	r16,r16,r4
 4031c5c:	1947883a 	add	r3,r3,r5
 4031c60:	40c7883a 	add	r3,r8,r3
 4031c64:	350d383a 	mul	r6,r6,r20
 4031c68:	1940022e 	bgeu	r3,r5,4031c74 <__udivdi3+0x40c>
 4031c6c:	01000074 	movhi	r4,1
 4031c70:	310d883a 	add	r6,r6,r4
 4031c74:	1828d43a 	srli	r20,r3,16
 4031c78:	a18d883a 	add	r6,r20,r6
 4031c7c:	81803e36 	bltu	r16,r6,4031d78 <__udivdi3+0x510>
 4031c80:	81803826 	beq	r16,r6,4031d64 <__udivdi3+0x4fc>
 4031c84:	0007883a 	mov	r3,zero
 4031c88:	003fa206 	br	4031b14 <__flash_rwdata_start+0xffffb5bc>
 4031c8c:	88e2983a 	sll	r17,r17,r3
 4031c90:	80a8d83a 	srl	r20,r16,r2
 4031c94:	80e0983a 	sll	r16,r16,r3
 4031c98:	882ad43a 	srli	r21,r17,16
 4031c9c:	9884d83a 	srl	r2,r19,r2
 4031ca0:	a009883a 	mov	r4,r20
 4031ca4:	a80b883a 	mov	r5,r21
 4031ca8:	142eb03a 	or	r23,r2,r16
 4031cac:	98e4983a 	sll	r18,r19,r3
 4031cb0:	4024d540 	call	4024d54 <__umodsi3>
 4031cb4:	a009883a 	mov	r4,r20
 4031cb8:	a80b883a 	mov	r5,r21
 4031cbc:	1021883a 	mov	r16,r2
 4031cc0:	4024ce40 	call	4024ce4 <__udivsi3>
 4031cc4:	1039883a 	mov	fp,r2
 4031cc8:	8d3fffcc 	andi	r20,r17,65535
 4031ccc:	8020943a 	slli	r16,r16,16
 4031cd0:	b804d43a 	srli	r2,r23,16
 4031cd4:	a72d383a 	mul	r22,r20,fp
 4031cd8:	1404b03a 	or	r2,r2,r16
 4031cdc:	1580062e 	bgeu	r2,r22,4031cf8 <__udivdi3+0x490>
 4031ce0:	1445883a 	add	r2,r2,r17
 4031ce4:	e0ffffc4 	addi	r3,fp,-1
 4031ce8:	14403836 	bltu	r2,r17,4031dcc <__udivdi3+0x564>
 4031cec:	1580372e 	bgeu	r2,r22,4031dcc <__udivdi3+0x564>
 4031cf0:	e73fff84 	addi	fp,fp,-2
 4031cf4:	1445883a 	add	r2,r2,r17
 4031cf8:	15adc83a 	sub	r22,r2,r22
 4031cfc:	a80b883a 	mov	r5,r21
 4031d00:	b009883a 	mov	r4,r22
 4031d04:	4024d540 	call	4024d54 <__umodsi3>
 4031d08:	1027883a 	mov	r19,r2
 4031d0c:	b009883a 	mov	r4,r22
 4031d10:	a80b883a 	mov	r5,r21
 4031d14:	4024ce40 	call	4024ce4 <__udivsi3>
 4031d18:	9826943a 	slli	r19,r19,16
 4031d1c:	a0a1383a 	mul	r16,r20,r2
 4031d20:	b93fffcc 	andi	r4,r23,65535
 4031d24:	24c8b03a 	or	r4,r4,r19
 4031d28:	2400062e 	bgeu	r4,r16,4031d44 <__udivdi3+0x4dc>
 4031d2c:	2449883a 	add	r4,r4,r17
 4031d30:	10ffffc4 	addi	r3,r2,-1
 4031d34:	24402336 	bltu	r4,r17,4031dc4 <__udivdi3+0x55c>
 4031d38:	2400222e 	bgeu	r4,r16,4031dc4 <__udivdi3+0x55c>
 4031d3c:	10bfff84 	addi	r2,r2,-2
 4031d40:	2449883a 	add	r4,r4,r17
 4031d44:	e038943a 	slli	fp,fp,16
 4031d48:	2421c83a 	sub	r16,r4,r16
 4031d4c:	e086b03a 	or	r3,fp,r2
 4031d50:	003f4306 	br	4031a60 <__flash_rwdata_start+0xffffb508>
 4031d54:	2005883a 	mov	r2,r4
 4031d58:	003f6906 	br	4031b00 <__flash_rwdata_start+0xffffb5a8>
 4031d5c:	1805883a 	mov	r2,r3
 4031d60:	003f0f06 	br	40319a0 <__flash_rwdata_start+0xffffb448>
 4031d64:	1806943a 	slli	r3,r3,16
 4031d68:	9d66983a 	sll	r19,r19,r21
 4031d6c:	39ffffcc 	andi	r7,r7,65535
 4031d70:	19c7883a 	add	r3,r3,r7
 4031d74:	98ffc32e 	bgeu	r19,r3,4031c84 <__flash_rwdata_start+0xffffb72c>
 4031d78:	10bfffc4 	addi	r2,r2,-1
 4031d7c:	003fc106 	br	4031c84 <__flash_rwdata_start+0xffffb72c>
 4031d80:	00800604 	movi	r2,24
 4031d84:	003f1106 	br	40319cc <__flash_rwdata_start+0xffffb474>
 4031d88:	00800604 	movi	r2,24
 4031d8c:	003f2706 	br	4031a2c <__flash_rwdata_start+0xffffb4d4>
 4031d90:	00800604 	movi	r2,24
 4031d94:	003ece06 	br	40318d0 <__flash_rwdata_start+0xffffb378>
 4031d98:	0007883a 	mov	r3,zero
 4031d9c:	00800044 	movi	r2,1
 4031da0:	003f5c06 	br	4031b14 <__flash_rwdata_start+0xffffb5bc>
 4031da4:	813fa12e 	bgeu	r16,r4,4031c2c <__flash_rwdata_start+0xffffb6d4>
 4031da8:	10bfff84 	addi	r2,r2,-2
 4031dac:	85e1883a 	add	r16,r16,r23
 4031db0:	003f9f06 	br	4031c30 <__flash_rwdata_start+0xffffb6d8>
 4031db4:	1c7f8a2e 	bgeu	r3,r17,4031be0 <__flash_rwdata_start+0xffffb688>
 4031db8:	31bfff84 	addi	r6,r6,-2
 4031dbc:	1dc7883a 	add	r3,r3,r23
 4031dc0:	003f8806 	br	4031be4 <__flash_rwdata_start+0xffffb68c>
 4031dc4:	1805883a 	mov	r2,r3
 4031dc8:	003fde06 	br	4031d44 <__flash_rwdata_start+0xffffb7ec>
 4031dcc:	1839883a 	mov	fp,r3
 4031dd0:	003fc906 	br	4031cf8 <__flash_rwdata_start+0xffffb7a0>
 4031dd4:	b5bfff84 	addi	r22,r22,-2
 4031dd8:	2449883a 	add	r4,r4,r17
 4031ddc:	003f3406 	br	4031ab0 <__flash_rwdata_start+0xffffb558>
 4031de0:	b5bfff84 	addi	r22,r22,-2
 4031de4:	1445883a 	add	r2,r2,r17
 4031de8:	003edb06 	br	4031958 <__flash_rwdata_start+0xffffb400>

04031dec <__umoddi3>:
 4031dec:	f811883a 	mov	r8,ra
 4031df0:	40346e80 	call	40346e8 <_mcount>
 4031df4:	403f883a 	mov	ra,r8
 4031df8:	defff404 	addi	sp,sp,-48
 4031dfc:	dfc00b15 	stw	ra,44(sp)
 4031e00:	df000a15 	stw	fp,40(sp)
 4031e04:	ddc00915 	stw	r23,36(sp)
 4031e08:	dd800815 	stw	r22,32(sp)
 4031e0c:	dd400715 	stw	r21,28(sp)
 4031e10:	dd000615 	stw	r20,24(sp)
 4031e14:	dcc00515 	stw	r19,20(sp)
 4031e18:	dc800415 	stw	r18,16(sp)
 4031e1c:	dc400315 	stw	r17,12(sp)
 4031e20:	dc000215 	stw	r16,8(sp)
 4031e24:	2021883a 	mov	r16,r4
 4031e28:	2823883a 	mov	r17,r5
 4031e2c:	2839883a 	mov	fp,r5
 4031e30:	38003c1e 	bne	r7,zero,4031f24 <__umoddi3+0x138>
 4031e34:	3027883a 	mov	r19,r6
 4031e38:	2029883a 	mov	r20,r4
 4031e3c:	2980512e 	bgeu	r5,r6,4031f84 <__umoddi3+0x198>
 4031e40:	00bfffd4 	movui	r2,65535
 4031e44:	11809a36 	bltu	r2,r6,40320b0 <__umoddi3+0x2c4>
 4031e48:	01003fc4 	movi	r4,255
 4031e4c:	2189803a 	cmpltu	r4,r4,r6
 4031e50:	200890fa 	slli	r4,r4,3
 4031e54:	3104d83a 	srl	r2,r6,r4
 4031e58:	00c00034 	movhi	r3,0
 4031e5c:	18c0e7c4 	addi	r3,r3,927
 4031e60:	1885883a 	add	r2,r3,r2
 4031e64:	10c00003 	ldbu	r3,0(r2)
 4031e68:	00800804 	movi	r2,32
 4031e6c:	1909883a 	add	r4,r3,r4
 4031e70:	1125c83a 	sub	r18,r2,r4
 4031e74:	90000526 	beq	r18,zero,4031e8c <__umoddi3+0xa0>
 4031e78:	8ca2983a 	sll	r17,r17,r18
 4031e7c:	8108d83a 	srl	r4,r16,r4
 4031e80:	34a6983a 	sll	r19,r6,r18
 4031e84:	84a8983a 	sll	r20,r16,r18
 4031e88:	2478b03a 	or	fp,r4,r17
 4031e8c:	982ed43a 	srli	r23,r19,16
 4031e90:	e009883a 	mov	r4,fp
 4031e94:	9dbfffcc 	andi	r22,r19,65535
 4031e98:	b80b883a 	mov	r5,r23
 4031e9c:	4024d540 	call	4024d54 <__umodsi3>
 4031ea0:	e009883a 	mov	r4,fp
 4031ea4:	b80b883a 	mov	r5,r23
 4031ea8:	102b883a 	mov	r21,r2
 4031eac:	4024ce40 	call	4024ce4 <__udivsi3>
 4031eb0:	a806943a 	slli	r3,r21,16
 4031eb4:	a008d43a 	srli	r4,r20,16
 4031eb8:	b085383a 	mul	r2,r22,r2
 4031ebc:	20c8b03a 	or	r4,r4,r3
 4031ec0:	2080032e 	bgeu	r4,r2,4031ed0 <__umoddi3+0xe4>
 4031ec4:	24c9883a 	add	r4,r4,r19
 4031ec8:	24c00136 	bltu	r4,r19,4031ed0 <__umoddi3+0xe4>
 4031ecc:	20811036 	bltu	r4,r2,4032310 <__umoddi3+0x524>
 4031ed0:	20abc83a 	sub	r21,r4,r2
 4031ed4:	b80b883a 	mov	r5,r23
 4031ed8:	a809883a 	mov	r4,r21
 4031edc:	4024d540 	call	4024d54 <__umodsi3>
 4031ee0:	1023883a 	mov	r17,r2
 4031ee4:	b80b883a 	mov	r5,r23
 4031ee8:	a809883a 	mov	r4,r21
 4031eec:	4024ce40 	call	4024ce4 <__udivsi3>
 4031ef0:	8822943a 	slli	r17,r17,16
 4031ef4:	b085383a 	mul	r2,r22,r2
 4031ef8:	a0ffffcc 	andi	r3,r20,65535
 4031efc:	1c46b03a 	or	r3,r3,r17
 4031f00:	1880042e 	bgeu	r3,r2,4031f14 <__umoddi3+0x128>
 4031f04:	1cc7883a 	add	r3,r3,r19
 4031f08:	1cc00236 	bltu	r3,r19,4031f14 <__umoddi3+0x128>
 4031f0c:	1880012e 	bgeu	r3,r2,4031f14 <__umoddi3+0x128>
 4031f10:	1cc7883a 	add	r3,r3,r19
 4031f14:	1885c83a 	sub	r2,r3,r2
 4031f18:	1484d83a 	srl	r2,r2,r18
 4031f1c:	0007883a 	mov	r3,zero
 4031f20:	00004f06 	br	4032060 <__umoddi3+0x274>
 4031f24:	29c04c36 	bltu	r5,r7,4032058 <__umoddi3+0x26c>
 4031f28:	00bfffd4 	movui	r2,65535
 4031f2c:	11c0582e 	bgeu	r2,r7,4032090 <__umoddi3+0x2a4>
 4031f30:	00804034 	movhi	r2,256
 4031f34:	10bfffc4 	addi	r2,r2,-1
 4031f38:	11c0e736 	bltu	r2,r7,40322d8 <__umoddi3+0x4ec>
 4031f3c:	01000404 	movi	r4,16
 4031f40:	3904d83a 	srl	r2,r7,r4
 4031f44:	00c00034 	movhi	r3,0
 4031f48:	18c0e7c4 	addi	r3,r3,927
 4031f4c:	1885883a 	add	r2,r3,r2
 4031f50:	14c00003 	ldbu	r19,0(r2)
 4031f54:	00c00804 	movi	r3,32
 4031f58:	9927883a 	add	r19,r19,r4
 4031f5c:	1ce9c83a 	sub	r20,r3,r19
 4031f60:	a000581e 	bne	r20,zero,40320c4 <__umoddi3+0x2d8>
 4031f64:	3c400136 	bltu	r7,r17,4031f6c <__umoddi3+0x180>
 4031f68:	8180eb36 	bltu	r16,r6,4032318 <__umoddi3+0x52c>
 4031f6c:	8185c83a 	sub	r2,r16,r6
 4031f70:	89e3c83a 	sub	r17,r17,r7
 4031f74:	8089803a 	cmpltu	r4,r16,r2
 4031f78:	8939c83a 	sub	fp,r17,r4
 4031f7c:	e007883a 	mov	r3,fp
 4031f80:	00003706 	br	4032060 <__umoddi3+0x274>
 4031f84:	3000041e 	bne	r6,zero,4031f98 <__umoddi3+0x1ac>
 4031f88:	000b883a 	mov	r5,zero
 4031f8c:	01000044 	movi	r4,1
 4031f90:	4024ce40 	call	4024ce4 <__udivsi3>
 4031f94:	1027883a 	mov	r19,r2
 4031f98:	00bfffd4 	movui	r2,65535
 4031f9c:	14c0402e 	bgeu	r2,r19,40320a0 <__umoddi3+0x2b4>
 4031fa0:	00804034 	movhi	r2,256
 4031fa4:	10bfffc4 	addi	r2,r2,-1
 4031fa8:	14c0cd36 	bltu	r2,r19,40322e0 <__umoddi3+0x4f4>
 4031fac:	00800404 	movi	r2,16
 4031fb0:	9886d83a 	srl	r3,r19,r2
 4031fb4:	01000034 	movhi	r4,0
 4031fb8:	2100e7c4 	addi	r4,r4,927
 4031fbc:	20c7883a 	add	r3,r4,r3
 4031fc0:	18c00003 	ldbu	r3,0(r3)
 4031fc4:	1887883a 	add	r3,r3,r2
 4031fc8:	00800804 	movi	r2,32
 4031fcc:	10e5c83a 	sub	r18,r2,r3
 4031fd0:	9000901e 	bne	r18,zero,4032214 <__umoddi3+0x428>
 4031fd4:	982cd43a 	srli	r22,r19,16
 4031fd8:	8ce3c83a 	sub	r17,r17,r19
 4031fdc:	9d7fffcc 	andi	r21,r19,65535
 4031fe0:	b00b883a 	mov	r5,r22
 4031fe4:	8809883a 	mov	r4,r17
 4031fe8:	4024d540 	call	4024d54 <__umodsi3>
 4031fec:	8809883a 	mov	r4,r17
 4031ff0:	b00b883a 	mov	r5,r22
 4031ff4:	1021883a 	mov	r16,r2
 4031ff8:	4024ce40 	call	4024ce4 <__udivsi3>
 4031ffc:	8006943a 	slli	r3,r16,16
 4032000:	a008d43a 	srli	r4,r20,16
 4032004:	1545383a 	mul	r2,r2,r21
 4032008:	20c8b03a 	or	r4,r4,r3
 403200c:	2080042e 	bgeu	r4,r2,4032020 <__umoddi3+0x234>
 4032010:	24c9883a 	add	r4,r4,r19
 4032014:	24c00236 	bltu	r4,r19,4032020 <__umoddi3+0x234>
 4032018:	2080012e 	bgeu	r4,r2,4032020 <__umoddi3+0x234>
 403201c:	24c9883a 	add	r4,r4,r19
 4032020:	20a1c83a 	sub	r16,r4,r2
 4032024:	b00b883a 	mov	r5,r22
 4032028:	8009883a 	mov	r4,r16
 403202c:	4024d540 	call	4024d54 <__umodsi3>
 4032030:	1023883a 	mov	r17,r2
 4032034:	b00b883a 	mov	r5,r22
 4032038:	8009883a 	mov	r4,r16
 403203c:	4024ce40 	call	4024ce4 <__udivsi3>
 4032040:	8822943a 	slli	r17,r17,16
 4032044:	1545383a 	mul	r2,r2,r21
 4032048:	a53fffcc 	andi	r20,r20,65535
 403204c:	a446b03a 	or	r3,r20,r17
 4032050:	18bfb02e 	bgeu	r3,r2,4031f14 <__flash_rwdata_start+0xffffb9bc>
 4032054:	003fab06 	br	4031f04 <__flash_rwdata_start+0xffffb9ac>
 4032058:	2005883a 	mov	r2,r4
 403205c:	2807883a 	mov	r3,r5
 4032060:	dfc00b17 	ldw	ra,44(sp)
 4032064:	df000a17 	ldw	fp,40(sp)
 4032068:	ddc00917 	ldw	r23,36(sp)
 403206c:	dd800817 	ldw	r22,32(sp)
 4032070:	dd400717 	ldw	r21,28(sp)
 4032074:	dd000617 	ldw	r20,24(sp)
 4032078:	dcc00517 	ldw	r19,20(sp)
 403207c:	dc800417 	ldw	r18,16(sp)
 4032080:	dc400317 	ldw	r17,12(sp)
 4032084:	dc000217 	ldw	r16,8(sp)
 4032088:	dec00c04 	addi	sp,sp,48
 403208c:	f800283a 	ret
 4032090:	04c03fc4 	movi	r19,255
 4032094:	99c9803a 	cmpltu	r4,r19,r7
 4032098:	200890fa 	slli	r4,r4,3
 403209c:	003fa806 	br	4031f40 <__flash_rwdata_start+0xffffb9e8>
 40320a0:	00803fc4 	movi	r2,255
 40320a4:	14c5803a 	cmpltu	r2,r2,r19
 40320a8:	100490fa 	slli	r2,r2,3
 40320ac:	003fc006 	br	4031fb0 <__flash_rwdata_start+0xffffba58>
 40320b0:	00804034 	movhi	r2,256
 40320b4:	10bfffc4 	addi	r2,r2,-1
 40320b8:	11808b36 	bltu	r2,r6,40322e8 <__umoddi3+0x4fc>
 40320bc:	01000404 	movi	r4,16
 40320c0:	003f6406 	br	4031e54 <__flash_rwdata_start+0xffffb8fc>
 40320c4:	34c4d83a 	srl	r2,r6,r19
 40320c8:	3d0e983a 	sll	r7,r7,r20
 40320cc:	8cf8d83a 	srl	fp,r17,r19
 40320d0:	8d10983a 	sll	r8,r17,r20
 40320d4:	38aab03a 	or	r21,r7,r2
 40320d8:	a82cd43a 	srli	r22,r21,16
 40320dc:	84e2d83a 	srl	r17,r16,r19
 40320e0:	e009883a 	mov	r4,fp
 40320e4:	b00b883a 	mov	r5,r22
 40320e8:	8a22b03a 	or	r17,r17,r8
 40320ec:	3524983a 	sll	r18,r6,r20
 40320f0:	4024d540 	call	4024d54 <__umodsi3>
 40320f4:	e009883a 	mov	r4,fp
 40320f8:	b00b883a 	mov	r5,r22
 40320fc:	102f883a 	mov	r23,r2
 4032100:	4024ce40 	call	4024ce4 <__udivsi3>
 4032104:	100d883a 	mov	r6,r2
 4032108:	b808943a 	slli	r4,r23,16
 403210c:	aa3fffcc 	andi	r8,r21,65535
 4032110:	8804d43a 	srli	r2,r17,16
 4032114:	41af383a 	mul	r23,r8,r6
 4032118:	8520983a 	sll	r16,r16,r20
 403211c:	1104b03a 	or	r2,r2,r4
 4032120:	15c0042e 	bgeu	r2,r23,4032134 <__umoddi3+0x348>
 4032124:	1545883a 	add	r2,r2,r21
 4032128:	30ffffc4 	addi	r3,r6,-1
 403212c:	1540742e 	bgeu	r2,r21,4032300 <__umoddi3+0x514>
 4032130:	180d883a 	mov	r6,r3
 4032134:	15efc83a 	sub	r23,r2,r23
 4032138:	b00b883a 	mov	r5,r22
 403213c:	b809883a 	mov	r4,r23
 4032140:	d9800115 	stw	r6,4(sp)
 4032144:	da000015 	stw	r8,0(sp)
 4032148:	4024d540 	call	4024d54 <__umodsi3>
 403214c:	b00b883a 	mov	r5,r22
 4032150:	b809883a 	mov	r4,r23
 4032154:	1039883a 	mov	fp,r2
 4032158:	4024ce40 	call	4024ce4 <__udivsi3>
 403215c:	da000017 	ldw	r8,0(sp)
 4032160:	e038943a 	slli	fp,fp,16
 4032164:	100b883a 	mov	r5,r2
 4032168:	4089383a 	mul	r4,r8,r2
 403216c:	8a3fffcc 	andi	r8,r17,65535
 4032170:	4710b03a 	or	r8,r8,fp
 4032174:	d9800117 	ldw	r6,4(sp)
 4032178:	4100042e 	bgeu	r8,r4,403218c <__umoddi3+0x3a0>
 403217c:	4551883a 	add	r8,r8,r21
 4032180:	10bfffc4 	addi	r2,r2,-1
 4032184:	45405a2e 	bgeu	r8,r21,40322f0 <__umoddi3+0x504>
 4032188:	100b883a 	mov	r5,r2
 403218c:	300c943a 	slli	r6,r6,16
 4032190:	91ffffcc 	andi	r7,r18,65535
 4032194:	9004d43a 	srli	r2,r18,16
 4032198:	314cb03a 	or	r6,r6,r5
 403219c:	317fffcc 	andi	r5,r6,65535
 40321a0:	300cd43a 	srli	r6,r6,16
 40321a4:	29d3383a 	mul	r9,r5,r7
 40321a8:	288b383a 	mul	r5,r5,r2
 40321ac:	31cf383a 	mul	r7,r6,r7
 40321b0:	4806d43a 	srli	r3,r9,16
 40321b4:	4111c83a 	sub	r8,r8,r4
 40321b8:	29cb883a 	add	r5,r5,r7
 40321bc:	194b883a 	add	r5,r3,r5
 40321c0:	3085383a 	mul	r2,r6,r2
 40321c4:	29c0022e 	bgeu	r5,r7,40321d0 <__umoddi3+0x3e4>
 40321c8:	00c00074 	movhi	r3,1
 40321cc:	10c5883a 	add	r2,r2,r3
 40321d0:	2808d43a 	srli	r4,r5,16
 40321d4:	280a943a 	slli	r5,r5,16
 40321d8:	4a7fffcc 	andi	r9,r9,65535
 40321dc:	2085883a 	add	r2,r4,r2
 40321e0:	2a4b883a 	add	r5,r5,r9
 40321e4:	40803636 	bltu	r8,r2,40322c0 <__umoddi3+0x4d4>
 40321e8:	40804d26 	beq	r8,r2,4032320 <__umoddi3+0x534>
 40321ec:	4089c83a 	sub	r4,r8,r2
 40321f0:	280f883a 	mov	r7,r5
 40321f4:	81cfc83a 	sub	r7,r16,r7
 40321f8:	81c7803a 	cmpltu	r3,r16,r7
 40321fc:	20c7c83a 	sub	r3,r4,r3
 4032200:	1cc4983a 	sll	r2,r3,r19
 4032204:	3d0ed83a 	srl	r7,r7,r20
 4032208:	1d06d83a 	srl	r3,r3,r20
 403220c:	11c4b03a 	or	r2,r2,r7
 4032210:	003f9306 	br	4032060 <__flash_rwdata_start+0xffffbb08>
 4032214:	9ca6983a 	sll	r19,r19,r18
 4032218:	88e8d83a 	srl	r20,r17,r3
 403221c:	80c4d83a 	srl	r2,r16,r3
 4032220:	982cd43a 	srli	r22,r19,16
 4032224:	8ca2983a 	sll	r17,r17,r18
 4032228:	a009883a 	mov	r4,r20
 403222c:	b00b883a 	mov	r5,r22
 4032230:	1478b03a 	or	fp,r2,r17
 4032234:	4024d540 	call	4024d54 <__umodsi3>
 4032238:	a009883a 	mov	r4,r20
 403223c:	b00b883a 	mov	r5,r22
 4032240:	1023883a 	mov	r17,r2
 4032244:	4024ce40 	call	4024ce4 <__udivsi3>
 4032248:	9d7fffcc 	andi	r21,r19,65535
 403224c:	880a943a 	slli	r5,r17,16
 4032250:	e008d43a 	srli	r4,fp,16
 4032254:	a885383a 	mul	r2,r21,r2
 4032258:	84a8983a 	sll	r20,r16,r18
 403225c:	2148b03a 	or	r4,r4,r5
 4032260:	2080042e 	bgeu	r4,r2,4032274 <__umoddi3+0x488>
 4032264:	24c9883a 	add	r4,r4,r19
 4032268:	24c00236 	bltu	r4,r19,4032274 <__umoddi3+0x488>
 403226c:	2080012e 	bgeu	r4,r2,4032274 <__umoddi3+0x488>
 4032270:	24c9883a 	add	r4,r4,r19
 4032274:	20a3c83a 	sub	r17,r4,r2
 4032278:	b00b883a 	mov	r5,r22
 403227c:	8809883a 	mov	r4,r17
 4032280:	4024d540 	call	4024d54 <__umodsi3>
 4032284:	102f883a 	mov	r23,r2
 4032288:	8809883a 	mov	r4,r17
 403228c:	b00b883a 	mov	r5,r22
 4032290:	4024ce40 	call	4024ce4 <__udivsi3>
 4032294:	b82e943a 	slli	r23,r23,16
 4032298:	a885383a 	mul	r2,r21,r2
 403229c:	e13fffcc 	andi	r4,fp,65535
 40322a0:	25c8b03a 	or	r4,r4,r23
 40322a4:	2080042e 	bgeu	r4,r2,40322b8 <__umoddi3+0x4cc>
 40322a8:	24c9883a 	add	r4,r4,r19
 40322ac:	24c00236 	bltu	r4,r19,40322b8 <__umoddi3+0x4cc>
 40322b0:	2080012e 	bgeu	r4,r2,40322b8 <__umoddi3+0x4cc>
 40322b4:	24c9883a 	add	r4,r4,r19
 40322b8:	20a3c83a 	sub	r17,r4,r2
 40322bc:	003f4806 	br	4031fe0 <__flash_rwdata_start+0xffffba88>
 40322c0:	2c8fc83a 	sub	r7,r5,r18
 40322c4:	1545c83a 	sub	r2,r2,r21
 40322c8:	29cb803a 	cmpltu	r5,r5,r7
 40322cc:	1145c83a 	sub	r2,r2,r5
 40322d0:	4089c83a 	sub	r4,r8,r2
 40322d4:	003fc706 	br	40321f4 <__flash_rwdata_start+0xffffbc9c>
 40322d8:	01000604 	movi	r4,24
 40322dc:	003f1806 	br	4031f40 <__flash_rwdata_start+0xffffb9e8>
 40322e0:	00800604 	movi	r2,24
 40322e4:	003f3206 	br	4031fb0 <__flash_rwdata_start+0xffffba58>
 40322e8:	01000604 	movi	r4,24
 40322ec:	003ed906 	br	4031e54 <__flash_rwdata_start+0xffffb8fc>
 40322f0:	413fa52e 	bgeu	r8,r4,4032188 <__flash_rwdata_start+0xffffbc30>
 40322f4:	297fff84 	addi	r5,r5,-2
 40322f8:	4551883a 	add	r8,r8,r21
 40322fc:	003fa306 	br	403218c <__flash_rwdata_start+0xffffbc34>
 4032300:	15ff8b2e 	bgeu	r2,r23,4032130 <__flash_rwdata_start+0xffffbbd8>
 4032304:	31bfff84 	addi	r6,r6,-2
 4032308:	1545883a 	add	r2,r2,r21
 403230c:	003f8906 	br	4032134 <__flash_rwdata_start+0xffffbbdc>
 4032310:	24c9883a 	add	r4,r4,r19
 4032314:	003eee06 	br	4031ed0 <__flash_rwdata_start+0xffffb978>
 4032318:	8005883a 	mov	r2,r16
 403231c:	003f1706 	br	4031f7c <__flash_rwdata_start+0xffffba24>
 4032320:	817fe736 	bltu	r16,r5,40322c0 <__flash_rwdata_start+0xffffbd68>
 4032324:	280f883a 	mov	r7,r5
 4032328:	0009883a 	mov	r4,zero
 403232c:	003fb106 	br	40321f4 <__flash_rwdata_start+0xffffbc9c>

04032330 <__adddf3>:
 4032330:	f811883a 	mov	r8,ra
 4032334:	40346e80 	call	40346e8 <_mcount>
 4032338:	403f883a 	mov	ra,r8
 403233c:	defffb04 	addi	sp,sp,-20
 4032340:	dfc00415 	stw	ra,16(sp)
 4032344:	dcc00315 	stw	r19,12(sp)
 4032348:	dc800215 	stw	r18,8(sp)
 403234c:	dc400115 	stw	r17,4(sp)
 4032350:	dc000015 	stw	r16,0(sp)
 4032354:	02c00434 	movhi	r11,16
 4032358:	5affffc4 	addi	r11,r11,-1
 403235c:	2806d7fa 	srli	r3,r5,31
 4032360:	2ad4703a 	and	r10,r5,r11
 4032364:	3ad2703a 	and	r9,r7,r11
 4032368:	3804d53a 	srli	r2,r7,20
 403236c:	3018d77a 	srli	r12,r6,29
 4032370:	280ad53a 	srli	r5,r5,20
 4032374:	501490fa 	slli	r10,r10,3
 4032378:	2010d77a 	srli	r8,r4,29
 403237c:	481290fa 	slli	r9,r9,3
 4032380:	380ed7fa 	srli	r7,r7,31
 4032384:	1c803fcc 	andi	r18,r3,255
 4032388:	2c01ffcc 	andi	r16,r5,2047
 403238c:	5210b03a 	or	r8,r10,r8
 4032390:	202290fa 	slli	r17,r4,3
 4032394:	1081ffcc 	andi	r2,r2,2047
 4032398:	4b12b03a 	or	r9,r9,r12
 403239c:	300c90fa 	slli	r6,r6,3
 40323a0:	91c07526 	beq	r18,r7,4032578 <__adddf3+0x248>
 40323a4:	8087c83a 	sub	r3,r16,r2
 40323a8:	00c0ab0e 	bge	zero,r3,4032658 <__adddf3+0x328>
 40323ac:	10002a1e 	bne	r2,zero,4032458 <__adddf3+0x128>
 40323b0:	4984b03a 	or	r2,r9,r6
 40323b4:	1000961e 	bne	r2,zero,4032610 <__adddf3+0x2e0>
 40323b8:	888001cc 	andi	r2,r17,7
 40323bc:	10000726 	beq	r2,zero,40323dc <__adddf3+0xac>
 40323c0:	888003cc 	andi	r2,r17,15
 40323c4:	00c00104 	movi	r3,4
 40323c8:	10c00426 	beq	r2,r3,40323dc <__adddf3+0xac>
 40323cc:	88c7883a 	add	r3,r17,r3
 40323d0:	1c63803a 	cmpltu	r17,r3,r17
 40323d4:	4451883a 	add	r8,r8,r17
 40323d8:	1823883a 	mov	r17,r3
 40323dc:	4080202c 	andhi	r2,r8,128
 40323e0:	10005926 	beq	r2,zero,4032548 <__adddf3+0x218>
 40323e4:	84000044 	addi	r16,r16,1
 40323e8:	0081ffc4 	movi	r2,2047
 40323ec:	8080ba26 	beq	r16,r2,40326d8 <__adddf3+0x3a8>
 40323f0:	00bfe034 	movhi	r2,65408
 40323f4:	10bfffc4 	addi	r2,r2,-1
 40323f8:	4090703a 	and	r8,r8,r2
 40323fc:	4004977a 	slli	r2,r8,29
 4032400:	4010927a 	slli	r8,r8,9
 4032404:	8822d0fa 	srli	r17,r17,3
 4032408:	8401ffcc 	andi	r16,r16,2047
 403240c:	4010d33a 	srli	r8,r8,12
 4032410:	9007883a 	mov	r3,r18
 4032414:	1444b03a 	or	r2,r2,r17
 4032418:	8401ffcc 	andi	r16,r16,2047
 403241c:	8020953a 	slli	r16,r16,20
 4032420:	18c03fcc 	andi	r3,r3,255
 4032424:	01000434 	movhi	r4,16
 4032428:	213fffc4 	addi	r4,r4,-1
 403242c:	180697fa 	slli	r3,r3,31
 4032430:	4110703a 	and	r8,r8,r4
 4032434:	4410b03a 	or	r8,r8,r16
 4032438:	40c6b03a 	or	r3,r8,r3
 403243c:	dfc00417 	ldw	ra,16(sp)
 4032440:	dcc00317 	ldw	r19,12(sp)
 4032444:	dc800217 	ldw	r18,8(sp)
 4032448:	dc400117 	ldw	r17,4(sp)
 403244c:	dc000017 	ldw	r16,0(sp)
 4032450:	dec00504 	addi	sp,sp,20
 4032454:	f800283a 	ret
 4032458:	0081ffc4 	movi	r2,2047
 403245c:	80bfd626 	beq	r16,r2,40323b8 <__flash_rwdata_start+0xffffbe60>
 4032460:	4a402034 	orhi	r9,r9,128
 4032464:	00800e04 	movi	r2,56
 4032468:	10c09f16 	blt	r2,r3,40326e8 <__adddf3+0x3b8>
 403246c:	008007c4 	movi	r2,31
 4032470:	10c0c216 	blt	r2,r3,403277c <__adddf3+0x44c>
 4032474:	00800804 	movi	r2,32
 4032478:	10c5c83a 	sub	r2,r2,r3
 403247c:	488a983a 	sll	r5,r9,r2
 4032480:	30c8d83a 	srl	r4,r6,r3
 4032484:	3084983a 	sll	r2,r6,r2
 4032488:	48c6d83a 	srl	r3,r9,r3
 403248c:	290cb03a 	or	r6,r5,r4
 4032490:	1004c03a 	cmpne	r2,r2,zero
 4032494:	308cb03a 	or	r6,r6,r2
 4032498:	898dc83a 	sub	r6,r17,r6
 403249c:	89a3803a 	cmpltu	r17,r17,r6
 40324a0:	40d1c83a 	sub	r8,r8,r3
 40324a4:	4451c83a 	sub	r8,r8,r17
 40324a8:	3023883a 	mov	r17,r6
 40324ac:	4080202c 	andhi	r2,r8,128
 40324b0:	10002326 	beq	r2,zero,4032540 <__adddf3+0x210>
 40324b4:	04c02034 	movhi	r19,128
 40324b8:	9cffffc4 	addi	r19,r19,-1
 40324bc:	44e6703a 	and	r19,r8,r19
 40324c0:	98007626 	beq	r19,zero,403269c <__adddf3+0x36c>
 40324c4:	9809883a 	mov	r4,r19
 40324c8:	402768c0 	call	402768c <__clzsi2>
 40324cc:	10fffe04 	addi	r3,r2,-8
 40324d0:	010007c4 	movi	r4,31
 40324d4:	20c07716 	blt	r4,r3,40326b4 <__adddf3+0x384>
 40324d8:	00800804 	movi	r2,32
 40324dc:	10c5c83a 	sub	r2,r2,r3
 40324e0:	8884d83a 	srl	r2,r17,r2
 40324e4:	98d0983a 	sll	r8,r19,r3
 40324e8:	88e2983a 	sll	r17,r17,r3
 40324ec:	1204b03a 	or	r2,r2,r8
 40324f0:	1c007416 	blt	r3,r16,40326c4 <__adddf3+0x394>
 40324f4:	1c21c83a 	sub	r16,r3,r16
 40324f8:	82000044 	addi	r8,r16,1
 40324fc:	00c007c4 	movi	r3,31
 4032500:	1a009116 	blt	r3,r8,4032748 <__adddf3+0x418>
 4032504:	00c00804 	movi	r3,32
 4032508:	1a07c83a 	sub	r3,r3,r8
 403250c:	8a08d83a 	srl	r4,r17,r8
 4032510:	88e2983a 	sll	r17,r17,r3
 4032514:	10c6983a 	sll	r3,r2,r3
 4032518:	1210d83a 	srl	r8,r2,r8
 403251c:	8804c03a 	cmpne	r2,r17,zero
 4032520:	1906b03a 	or	r3,r3,r4
 4032524:	18a2b03a 	or	r17,r3,r2
 4032528:	0021883a 	mov	r16,zero
 403252c:	003fa206 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032530:	1890b03a 	or	r8,r3,r2
 4032534:	40017d26 	beq	r8,zero,4032b2c <__adddf3+0x7fc>
 4032538:	1011883a 	mov	r8,r2
 403253c:	1823883a 	mov	r17,r3
 4032540:	888001cc 	andi	r2,r17,7
 4032544:	103f9e1e 	bne	r2,zero,40323c0 <__flash_rwdata_start+0xffffbe68>
 4032548:	4004977a 	slli	r2,r8,29
 403254c:	8822d0fa 	srli	r17,r17,3
 4032550:	4010d0fa 	srli	r8,r8,3
 4032554:	9007883a 	mov	r3,r18
 4032558:	1444b03a 	or	r2,r2,r17
 403255c:	0101ffc4 	movi	r4,2047
 4032560:	81002426 	beq	r16,r4,40325f4 <__adddf3+0x2c4>
 4032564:	8120703a 	and	r16,r16,r4
 4032568:	01000434 	movhi	r4,16
 403256c:	213fffc4 	addi	r4,r4,-1
 4032570:	4110703a 	and	r8,r8,r4
 4032574:	003fa806 	br	4032418 <__flash_rwdata_start+0xffffbec0>
 4032578:	8089c83a 	sub	r4,r16,r2
 403257c:	01005e0e 	bge	zero,r4,40326f8 <__adddf3+0x3c8>
 4032580:	10002b26 	beq	r2,zero,4032630 <__adddf3+0x300>
 4032584:	0081ffc4 	movi	r2,2047
 4032588:	80bf8b26 	beq	r16,r2,40323b8 <__flash_rwdata_start+0xffffbe60>
 403258c:	4a402034 	orhi	r9,r9,128
 4032590:	00800e04 	movi	r2,56
 4032594:	1100a40e 	bge	r2,r4,4032828 <__adddf3+0x4f8>
 4032598:	498cb03a 	or	r6,r9,r6
 403259c:	300ac03a 	cmpne	r5,r6,zero
 40325a0:	0013883a 	mov	r9,zero
 40325a4:	2c4b883a 	add	r5,r5,r17
 40325a8:	2c63803a 	cmpltu	r17,r5,r17
 40325ac:	4a11883a 	add	r8,r9,r8
 40325b0:	8a11883a 	add	r8,r17,r8
 40325b4:	2823883a 	mov	r17,r5
 40325b8:	4080202c 	andhi	r2,r8,128
 40325bc:	103fe026 	beq	r2,zero,4032540 <__flash_rwdata_start+0xffffbfe8>
 40325c0:	84000044 	addi	r16,r16,1
 40325c4:	0081ffc4 	movi	r2,2047
 40325c8:	8080d226 	beq	r16,r2,4032914 <__adddf3+0x5e4>
 40325cc:	00bfe034 	movhi	r2,65408
 40325d0:	10bfffc4 	addi	r2,r2,-1
 40325d4:	4090703a 	and	r8,r8,r2
 40325d8:	880ad07a 	srli	r5,r17,1
 40325dc:	400897fa 	slli	r4,r8,31
 40325e0:	88c0004c 	andi	r3,r17,1
 40325e4:	28e2b03a 	or	r17,r5,r3
 40325e8:	4010d07a 	srli	r8,r8,1
 40325ec:	2462b03a 	or	r17,r4,r17
 40325f0:	003f7106 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 40325f4:	4088b03a 	or	r4,r8,r2
 40325f8:	20014526 	beq	r4,zero,4032b10 <__adddf3+0x7e0>
 40325fc:	01000434 	movhi	r4,16
 4032600:	42000234 	orhi	r8,r8,8
 4032604:	213fffc4 	addi	r4,r4,-1
 4032608:	4110703a 	and	r8,r8,r4
 403260c:	003f8206 	br	4032418 <__flash_rwdata_start+0xffffbec0>
 4032610:	18ffffc4 	addi	r3,r3,-1
 4032614:	1800491e 	bne	r3,zero,403273c <__adddf3+0x40c>
 4032618:	898bc83a 	sub	r5,r17,r6
 403261c:	8963803a 	cmpltu	r17,r17,r5
 4032620:	4251c83a 	sub	r8,r8,r9
 4032624:	4451c83a 	sub	r8,r8,r17
 4032628:	2823883a 	mov	r17,r5
 403262c:	003f9f06 	br	40324ac <__flash_rwdata_start+0xffffbf54>
 4032630:	4984b03a 	or	r2,r9,r6
 4032634:	103f6026 	beq	r2,zero,40323b8 <__flash_rwdata_start+0xffffbe60>
 4032638:	213fffc4 	addi	r4,r4,-1
 403263c:	2000931e 	bne	r4,zero,403288c <__adddf3+0x55c>
 4032640:	898d883a 	add	r6,r17,r6
 4032644:	3463803a 	cmpltu	r17,r6,r17
 4032648:	4251883a 	add	r8,r8,r9
 403264c:	8a11883a 	add	r8,r17,r8
 4032650:	3023883a 	mov	r17,r6
 4032654:	003fd806 	br	40325b8 <__flash_rwdata_start+0xffffc060>
 4032658:	1800541e 	bne	r3,zero,40327ac <__adddf3+0x47c>
 403265c:	80800044 	addi	r2,r16,1
 4032660:	1081ffcc 	andi	r2,r2,2047
 4032664:	00c00044 	movi	r3,1
 4032668:	1880a00e 	bge	r3,r2,40328ec <__adddf3+0x5bc>
 403266c:	8989c83a 	sub	r4,r17,r6
 4032670:	8905803a 	cmpltu	r2,r17,r4
 4032674:	4267c83a 	sub	r19,r8,r9
 4032678:	98a7c83a 	sub	r19,r19,r2
 403267c:	9880202c 	andhi	r2,r19,128
 4032680:	10006326 	beq	r2,zero,4032810 <__adddf3+0x4e0>
 4032684:	3463c83a 	sub	r17,r6,r17
 4032688:	4a07c83a 	sub	r3,r9,r8
 403268c:	344d803a 	cmpltu	r6,r6,r17
 4032690:	19a7c83a 	sub	r19,r3,r6
 4032694:	3825883a 	mov	r18,r7
 4032698:	983f8a1e 	bne	r19,zero,40324c4 <__flash_rwdata_start+0xffffbf6c>
 403269c:	8809883a 	mov	r4,r17
 40326a0:	402768c0 	call	402768c <__clzsi2>
 40326a4:	10800804 	addi	r2,r2,32
 40326a8:	10fffe04 	addi	r3,r2,-8
 40326ac:	010007c4 	movi	r4,31
 40326b0:	20ff890e 	bge	r4,r3,40324d8 <__flash_rwdata_start+0xffffbf80>
 40326b4:	10bff604 	addi	r2,r2,-40
 40326b8:	8884983a 	sll	r2,r17,r2
 40326bc:	0023883a 	mov	r17,zero
 40326c0:	1c3f8c0e 	bge	r3,r16,40324f4 <__flash_rwdata_start+0xffffbf9c>
 40326c4:	023fe034 	movhi	r8,65408
 40326c8:	423fffc4 	addi	r8,r8,-1
 40326cc:	80e1c83a 	sub	r16,r16,r3
 40326d0:	1210703a 	and	r8,r2,r8
 40326d4:	003f3806 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 40326d8:	9007883a 	mov	r3,r18
 40326dc:	0011883a 	mov	r8,zero
 40326e0:	0005883a 	mov	r2,zero
 40326e4:	003f4c06 	br	4032418 <__flash_rwdata_start+0xffffbec0>
 40326e8:	498cb03a 	or	r6,r9,r6
 40326ec:	300cc03a 	cmpne	r6,r6,zero
 40326f0:	0007883a 	mov	r3,zero
 40326f4:	003f6806 	br	4032498 <__flash_rwdata_start+0xffffbf40>
 40326f8:	20009c1e 	bne	r4,zero,403296c <__adddf3+0x63c>
 40326fc:	80800044 	addi	r2,r16,1
 4032700:	1141ffcc 	andi	r5,r2,2047
 4032704:	01000044 	movi	r4,1
 4032708:	2140670e 	bge	r4,r5,40328a8 <__adddf3+0x578>
 403270c:	0101ffc4 	movi	r4,2047
 4032710:	11007f26 	beq	r2,r4,4032910 <__adddf3+0x5e0>
 4032714:	898d883a 	add	r6,r17,r6
 4032718:	4247883a 	add	r3,r8,r9
 403271c:	3451803a 	cmpltu	r8,r6,r17
 4032720:	40d1883a 	add	r8,r8,r3
 4032724:	402297fa 	slli	r17,r8,31
 4032728:	300cd07a 	srli	r6,r6,1
 403272c:	4010d07a 	srli	r8,r8,1
 4032730:	1021883a 	mov	r16,r2
 4032734:	89a2b03a 	or	r17,r17,r6
 4032738:	003f1f06 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 403273c:	0081ffc4 	movi	r2,2047
 4032740:	80bf481e 	bne	r16,r2,4032464 <__flash_rwdata_start+0xffffbf0c>
 4032744:	003f1c06 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032748:	843ff844 	addi	r16,r16,-31
 403274c:	01000804 	movi	r4,32
 4032750:	1406d83a 	srl	r3,r2,r16
 4032754:	41005026 	beq	r8,r4,4032898 <__adddf3+0x568>
 4032758:	01001004 	movi	r4,64
 403275c:	2211c83a 	sub	r8,r4,r8
 4032760:	1204983a 	sll	r2,r2,r8
 4032764:	88a2b03a 	or	r17,r17,r2
 4032768:	8822c03a 	cmpne	r17,r17,zero
 403276c:	1c62b03a 	or	r17,r3,r17
 4032770:	0011883a 	mov	r8,zero
 4032774:	0021883a 	mov	r16,zero
 4032778:	003f7106 	br	4032540 <__flash_rwdata_start+0xffffbfe8>
 403277c:	193ff804 	addi	r4,r3,-32
 4032780:	00800804 	movi	r2,32
 4032784:	4908d83a 	srl	r4,r9,r4
 4032788:	18804526 	beq	r3,r2,40328a0 <__adddf3+0x570>
 403278c:	00801004 	movi	r2,64
 4032790:	10c5c83a 	sub	r2,r2,r3
 4032794:	4886983a 	sll	r3,r9,r2
 4032798:	198cb03a 	or	r6,r3,r6
 403279c:	300cc03a 	cmpne	r6,r6,zero
 40327a0:	218cb03a 	or	r6,r4,r6
 40327a4:	0007883a 	mov	r3,zero
 40327a8:	003f3b06 	br	4032498 <__flash_rwdata_start+0xffffbf40>
 40327ac:	80002a26 	beq	r16,zero,4032858 <__adddf3+0x528>
 40327b0:	0101ffc4 	movi	r4,2047
 40327b4:	11006826 	beq	r2,r4,4032958 <__adddf3+0x628>
 40327b8:	00c7c83a 	sub	r3,zero,r3
 40327bc:	42002034 	orhi	r8,r8,128
 40327c0:	01000e04 	movi	r4,56
 40327c4:	20c07c16 	blt	r4,r3,40329b8 <__adddf3+0x688>
 40327c8:	010007c4 	movi	r4,31
 40327cc:	20c0da16 	blt	r4,r3,4032b38 <__adddf3+0x808>
 40327d0:	01000804 	movi	r4,32
 40327d4:	20c9c83a 	sub	r4,r4,r3
 40327d8:	4114983a 	sll	r10,r8,r4
 40327dc:	88cad83a 	srl	r5,r17,r3
 40327e0:	8908983a 	sll	r4,r17,r4
 40327e4:	40c6d83a 	srl	r3,r8,r3
 40327e8:	5162b03a 	or	r17,r10,r5
 40327ec:	2008c03a 	cmpne	r4,r4,zero
 40327f0:	8922b03a 	or	r17,r17,r4
 40327f4:	3463c83a 	sub	r17,r6,r17
 40327f8:	48c7c83a 	sub	r3,r9,r3
 40327fc:	344d803a 	cmpltu	r6,r6,r17
 4032800:	1991c83a 	sub	r8,r3,r6
 4032804:	1021883a 	mov	r16,r2
 4032808:	3825883a 	mov	r18,r7
 403280c:	003f2706 	br	40324ac <__flash_rwdata_start+0xffffbf54>
 4032810:	24d0b03a 	or	r8,r4,r19
 4032814:	40001b1e 	bne	r8,zero,4032884 <__adddf3+0x554>
 4032818:	0005883a 	mov	r2,zero
 403281c:	0007883a 	mov	r3,zero
 4032820:	0021883a 	mov	r16,zero
 4032824:	003f4d06 	br	403255c <__flash_rwdata_start+0xffffc004>
 4032828:	008007c4 	movi	r2,31
 403282c:	11003c16 	blt	r2,r4,4032920 <__adddf3+0x5f0>
 4032830:	00800804 	movi	r2,32
 4032834:	1105c83a 	sub	r2,r2,r4
 4032838:	488e983a 	sll	r7,r9,r2
 403283c:	310ad83a 	srl	r5,r6,r4
 4032840:	3084983a 	sll	r2,r6,r2
 4032844:	4912d83a 	srl	r9,r9,r4
 4032848:	394ab03a 	or	r5,r7,r5
 403284c:	1004c03a 	cmpne	r2,r2,zero
 4032850:	288ab03a 	or	r5,r5,r2
 4032854:	003f5306 	br	40325a4 <__flash_rwdata_start+0xffffc04c>
 4032858:	4448b03a 	or	r4,r8,r17
 403285c:	20003e26 	beq	r4,zero,4032958 <__adddf3+0x628>
 4032860:	00c6303a 	nor	r3,zero,r3
 4032864:	18003a1e 	bne	r3,zero,4032950 <__adddf3+0x620>
 4032868:	3463c83a 	sub	r17,r6,r17
 403286c:	4a07c83a 	sub	r3,r9,r8
 4032870:	344d803a 	cmpltu	r6,r6,r17
 4032874:	1991c83a 	sub	r8,r3,r6
 4032878:	1021883a 	mov	r16,r2
 403287c:	3825883a 	mov	r18,r7
 4032880:	003f0a06 	br	40324ac <__flash_rwdata_start+0xffffbf54>
 4032884:	2023883a 	mov	r17,r4
 4032888:	003f0d06 	br	40324c0 <__flash_rwdata_start+0xffffbf68>
 403288c:	0081ffc4 	movi	r2,2047
 4032890:	80bf3f1e 	bne	r16,r2,4032590 <__flash_rwdata_start+0xffffc038>
 4032894:	003ec806 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032898:	0005883a 	mov	r2,zero
 403289c:	003fb106 	br	4032764 <__flash_rwdata_start+0xffffc20c>
 40328a0:	0007883a 	mov	r3,zero
 40328a4:	003fbc06 	br	4032798 <__flash_rwdata_start+0xffffc240>
 40328a8:	4444b03a 	or	r2,r8,r17
 40328ac:	8000871e 	bne	r16,zero,4032acc <__adddf3+0x79c>
 40328b0:	1000ba26 	beq	r2,zero,4032b9c <__adddf3+0x86c>
 40328b4:	4984b03a 	or	r2,r9,r6
 40328b8:	103ebf26 	beq	r2,zero,40323b8 <__flash_rwdata_start+0xffffbe60>
 40328bc:	8985883a 	add	r2,r17,r6
 40328c0:	4247883a 	add	r3,r8,r9
 40328c4:	1451803a 	cmpltu	r8,r2,r17
 40328c8:	40d1883a 	add	r8,r8,r3
 40328cc:	40c0202c 	andhi	r3,r8,128
 40328d0:	1023883a 	mov	r17,r2
 40328d4:	183f1a26 	beq	r3,zero,4032540 <__flash_rwdata_start+0xffffbfe8>
 40328d8:	00bfe034 	movhi	r2,65408
 40328dc:	10bfffc4 	addi	r2,r2,-1
 40328e0:	2021883a 	mov	r16,r4
 40328e4:	4090703a 	and	r8,r8,r2
 40328e8:	003eb306 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 40328ec:	4444b03a 	or	r2,r8,r17
 40328f0:	8000291e 	bne	r16,zero,4032998 <__adddf3+0x668>
 40328f4:	10004b1e 	bne	r2,zero,4032a24 <__adddf3+0x6f4>
 40328f8:	4990b03a 	or	r8,r9,r6
 40328fc:	40008b26 	beq	r8,zero,4032b2c <__adddf3+0x7fc>
 4032900:	4811883a 	mov	r8,r9
 4032904:	3023883a 	mov	r17,r6
 4032908:	3825883a 	mov	r18,r7
 403290c:	003eaa06 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032910:	1021883a 	mov	r16,r2
 4032914:	0011883a 	mov	r8,zero
 4032918:	0005883a 	mov	r2,zero
 403291c:	003f0f06 	br	403255c <__flash_rwdata_start+0xffffc004>
 4032920:	217ff804 	addi	r5,r4,-32
 4032924:	00800804 	movi	r2,32
 4032928:	494ad83a 	srl	r5,r9,r5
 403292c:	20807d26 	beq	r4,r2,4032b24 <__adddf3+0x7f4>
 4032930:	00801004 	movi	r2,64
 4032934:	1109c83a 	sub	r4,r2,r4
 4032938:	4912983a 	sll	r9,r9,r4
 403293c:	498cb03a 	or	r6,r9,r6
 4032940:	300cc03a 	cmpne	r6,r6,zero
 4032944:	298ab03a 	or	r5,r5,r6
 4032948:	0013883a 	mov	r9,zero
 403294c:	003f1506 	br	40325a4 <__flash_rwdata_start+0xffffc04c>
 4032950:	0101ffc4 	movi	r4,2047
 4032954:	113f9a1e 	bne	r2,r4,40327c0 <__flash_rwdata_start+0xffffc268>
 4032958:	4811883a 	mov	r8,r9
 403295c:	3023883a 	mov	r17,r6
 4032960:	1021883a 	mov	r16,r2
 4032964:	3825883a 	mov	r18,r7
 4032968:	003e9306 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 403296c:	8000161e 	bne	r16,zero,40329c8 <__adddf3+0x698>
 4032970:	444ab03a 	or	r5,r8,r17
 4032974:	28005126 	beq	r5,zero,4032abc <__adddf3+0x78c>
 4032978:	0108303a 	nor	r4,zero,r4
 403297c:	20004d1e 	bne	r4,zero,4032ab4 <__adddf3+0x784>
 4032980:	89a3883a 	add	r17,r17,r6
 4032984:	4253883a 	add	r9,r8,r9
 4032988:	898d803a 	cmpltu	r6,r17,r6
 403298c:	3251883a 	add	r8,r6,r9
 4032990:	1021883a 	mov	r16,r2
 4032994:	003f0806 	br	40325b8 <__flash_rwdata_start+0xffffc060>
 4032998:	1000301e 	bne	r2,zero,4032a5c <__adddf3+0x72c>
 403299c:	4984b03a 	or	r2,r9,r6
 40329a0:	10007126 	beq	r2,zero,4032b68 <__adddf3+0x838>
 40329a4:	4811883a 	mov	r8,r9
 40329a8:	3023883a 	mov	r17,r6
 40329ac:	3825883a 	mov	r18,r7
 40329b0:	0401ffc4 	movi	r16,2047
 40329b4:	003e8006 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 40329b8:	4462b03a 	or	r17,r8,r17
 40329bc:	8822c03a 	cmpne	r17,r17,zero
 40329c0:	0007883a 	mov	r3,zero
 40329c4:	003f8b06 	br	40327f4 <__flash_rwdata_start+0xffffc29c>
 40329c8:	0141ffc4 	movi	r5,2047
 40329cc:	11403b26 	beq	r2,r5,4032abc <__adddf3+0x78c>
 40329d0:	0109c83a 	sub	r4,zero,r4
 40329d4:	42002034 	orhi	r8,r8,128
 40329d8:	01400e04 	movi	r5,56
 40329dc:	29006716 	blt	r5,r4,4032b7c <__adddf3+0x84c>
 40329e0:	014007c4 	movi	r5,31
 40329e4:	29007016 	blt	r5,r4,4032ba8 <__adddf3+0x878>
 40329e8:	01400804 	movi	r5,32
 40329ec:	290bc83a 	sub	r5,r5,r4
 40329f0:	4154983a 	sll	r10,r8,r5
 40329f4:	890ed83a 	srl	r7,r17,r4
 40329f8:	894a983a 	sll	r5,r17,r5
 40329fc:	4108d83a 	srl	r4,r8,r4
 4032a00:	51e2b03a 	or	r17,r10,r7
 4032a04:	280ac03a 	cmpne	r5,r5,zero
 4032a08:	8962b03a 	or	r17,r17,r5
 4032a0c:	89a3883a 	add	r17,r17,r6
 4032a10:	2253883a 	add	r9,r4,r9
 4032a14:	898d803a 	cmpltu	r6,r17,r6
 4032a18:	3251883a 	add	r8,r6,r9
 4032a1c:	1021883a 	mov	r16,r2
 4032a20:	003ee506 	br	40325b8 <__flash_rwdata_start+0xffffc060>
 4032a24:	4984b03a 	or	r2,r9,r6
 4032a28:	103e6326 	beq	r2,zero,40323b8 <__flash_rwdata_start+0xffffbe60>
 4032a2c:	8987c83a 	sub	r3,r17,r6
 4032a30:	88c9803a 	cmpltu	r4,r17,r3
 4032a34:	4245c83a 	sub	r2,r8,r9
 4032a38:	1105c83a 	sub	r2,r2,r4
 4032a3c:	1100202c 	andhi	r4,r2,128
 4032a40:	203ebb26 	beq	r4,zero,4032530 <__flash_rwdata_start+0xffffbfd8>
 4032a44:	3463c83a 	sub	r17,r6,r17
 4032a48:	4a07c83a 	sub	r3,r9,r8
 4032a4c:	344d803a 	cmpltu	r6,r6,r17
 4032a50:	1991c83a 	sub	r8,r3,r6
 4032a54:	3825883a 	mov	r18,r7
 4032a58:	003e5706 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032a5c:	4984b03a 	or	r2,r9,r6
 4032a60:	10002e26 	beq	r2,zero,4032b1c <__adddf3+0x7ec>
 4032a64:	4004d0fa 	srli	r2,r8,3
 4032a68:	8822d0fa 	srli	r17,r17,3
 4032a6c:	4010977a 	slli	r8,r8,29
 4032a70:	10c0022c 	andhi	r3,r2,8
 4032a74:	4462b03a 	or	r17,r8,r17
 4032a78:	18000826 	beq	r3,zero,4032a9c <__adddf3+0x76c>
 4032a7c:	4808d0fa 	srli	r4,r9,3
 4032a80:	20c0022c 	andhi	r3,r4,8
 4032a84:	1800051e 	bne	r3,zero,4032a9c <__adddf3+0x76c>
 4032a88:	300cd0fa 	srli	r6,r6,3
 4032a8c:	4806977a 	slli	r3,r9,29
 4032a90:	2005883a 	mov	r2,r4
 4032a94:	3825883a 	mov	r18,r7
 4032a98:	19a2b03a 	or	r17,r3,r6
 4032a9c:	8810d77a 	srli	r8,r17,29
 4032aa0:	100490fa 	slli	r2,r2,3
 4032aa4:	882290fa 	slli	r17,r17,3
 4032aa8:	0401ffc4 	movi	r16,2047
 4032aac:	4090b03a 	or	r8,r8,r2
 4032ab0:	003e4106 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032ab4:	0141ffc4 	movi	r5,2047
 4032ab8:	117fc71e 	bne	r2,r5,40329d8 <__flash_rwdata_start+0xffffc480>
 4032abc:	4811883a 	mov	r8,r9
 4032ac0:	3023883a 	mov	r17,r6
 4032ac4:	1021883a 	mov	r16,r2
 4032ac8:	003e3b06 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032acc:	10002f26 	beq	r2,zero,4032b8c <__adddf3+0x85c>
 4032ad0:	4984b03a 	or	r2,r9,r6
 4032ad4:	10001126 	beq	r2,zero,4032b1c <__adddf3+0x7ec>
 4032ad8:	4004d0fa 	srli	r2,r8,3
 4032adc:	8822d0fa 	srli	r17,r17,3
 4032ae0:	4010977a 	slli	r8,r8,29
 4032ae4:	10c0022c 	andhi	r3,r2,8
 4032ae8:	4462b03a 	or	r17,r8,r17
 4032aec:	183feb26 	beq	r3,zero,4032a9c <__flash_rwdata_start+0xffffc544>
 4032af0:	4808d0fa 	srli	r4,r9,3
 4032af4:	20c0022c 	andhi	r3,r4,8
 4032af8:	183fe81e 	bne	r3,zero,4032a9c <__flash_rwdata_start+0xffffc544>
 4032afc:	300cd0fa 	srli	r6,r6,3
 4032b00:	4806977a 	slli	r3,r9,29
 4032b04:	2005883a 	mov	r2,r4
 4032b08:	19a2b03a 	or	r17,r3,r6
 4032b0c:	003fe306 	br	4032a9c <__flash_rwdata_start+0xffffc544>
 4032b10:	0011883a 	mov	r8,zero
 4032b14:	0005883a 	mov	r2,zero
 4032b18:	003e3f06 	br	4032418 <__flash_rwdata_start+0xffffbec0>
 4032b1c:	0401ffc4 	movi	r16,2047
 4032b20:	003e2506 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032b24:	0013883a 	mov	r9,zero
 4032b28:	003f8406 	br	403293c <__flash_rwdata_start+0xffffc3e4>
 4032b2c:	0005883a 	mov	r2,zero
 4032b30:	0007883a 	mov	r3,zero
 4032b34:	003e8906 	br	403255c <__flash_rwdata_start+0xffffc004>
 4032b38:	197ff804 	addi	r5,r3,-32
 4032b3c:	01000804 	movi	r4,32
 4032b40:	414ad83a 	srl	r5,r8,r5
 4032b44:	19002426 	beq	r3,r4,4032bd8 <__adddf3+0x8a8>
 4032b48:	01001004 	movi	r4,64
 4032b4c:	20c7c83a 	sub	r3,r4,r3
 4032b50:	40c6983a 	sll	r3,r8,r3
 4032b54:	1c46b03a 	or	r3,r3,r17
 4032b58:	1806c03a 	cmpne	r3,r3,zero
 4032b5c:	28e2b03a 	or	r17,r5,r3
 4032b60:	0007883a 	mov	r3,zero
 4032b64:	003f2306 	br	40327f4 <__flash_rwdata_start+0xffffc29c>
 4032b68:	0007883a 	mov	r3,zero
 4032b6c:	5811883a 	mov	r8,r11
 4032b70:	00bfffc4 	movi	r2,-1
 4032b74:	0401ffc4 	movi	r16,2047
 4032b78:	003e7806 	br	403255c <__flash_rwdata_start+0xffffc004>
 4032b7c:	4462b03a 	or	r17,r8,r17
 4032b80:	8822c03a 	cmpne	r17,r17,zero
 4032b84:	0009883a 	mov	r4,zero
 4032b88:	003fa006 	br	4032a0c <__flash_rwdata_start+0xffffc4b4>
 4032b8c:	4811883a 	mov	r8,r9
 4032b90:	3023883a 	mov	r17,r6
 4032b94:	0401ffc4 	movi	r16,2047
 4032b98:	003e0706 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032b9c:	4811883a 	mov	r8,r9
 4032ba0:	3023883a 	mov	r17,r6
 4032ba4:	003e0406 	br	40323b8 <__flash_rwdata_start+0xffffbe60>
 4032ba8:	21fff804 	addi	r7,r4,-32
 4032bac:	01400804 	movi	r5,32
 4032bb0:	41ced83a 	srl	r7,r8,r7
 4032bb4:	21400a26 	beq	r4,r5,4032be0 <__adddf3+0x8b0>
 4032bb8:	01401004 	movi	r5,64
 4032bbc:	2909c83a 	sub	r4,r5,r4
 4032bc0:	4108983a 	sll	r4,r8,r4
 4032bc4:	2448b03a 	or	r4,r4,r17
 4032bc8:	2008c03a 	cmpne	r4,r4,zero
 4032bcc:	3922b03a 	or	r17,r7,r4
 4032bd0:	0009883a 	mov	r4,zero
 4032bd4:	003f8d06 	br	4032a0c <__flash_rwdata_start+0xffffc4b4>
 4032bd8:	0007883a 	mov	r3,zero
 4032bdc:	003fdd06 	br	4032b54 <__flash_rwdata_start+0xffffc5fc>
 4032be0:	0009883a 	mov	r4,zero
 4032be4:	003ff706 	br	4032bc4 <__flash_rwdata_start+0xffffc66c>

04032be8 <__eqdf2>:
 4032be8:	f811883a 	mov	r8,ra
 4032bec:	40346e80 	call	40346e8 <_mcount>
 4032bf0:	403f883a 	mov	ra,r8
 4032bf4:	2804d53a 	srli	r2,r5,20
 4032bf8:	3806d53a 	srli	r3,r7,20
 4032bfc:	02000434 	movhi	r8,16
 4032c00:	423fffc4 	addi	r8,r8,-1
 4032c04:	1081ffcc 	andi	r2,r2,2047
 4032c08:	0281ffc4 	movi	r10,2047
 4032c0c:	2a12703a 	and	r9,r5,r8
 4032c10:	18c1ffcc 	andi	r3,r3,2047
 4032c14:	3a10703a 	and	r8,r7,r8
 4032c18:	280ad7fa 	srli	r5,r5,31
 4032c1c:	380ed7fa 	srli	r7,r7,31
 4032c20:	12801026 	beq	r2,r10,4032c64 <__eqdf2+0x7c>
 4032c24:	0281ffc4 	movi	r10,2047
 4032c28:	1a800a26 	beq	r3,r10,4032c54 <__eqdf2+0x6c>
 4032c2c:	10c00226 	beq	r2,r3,4032c38 <__eqdf2+0x50>
 4032c30:	00800044 	movi	r2,1
 4032c34:	f800283a 	ret
 4032c38:	4a3ffd1e 	bne	r9,r8,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c3c:	21bffc1e 	bne	r4,r6,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c40:	29c00b26 	beq	r5,r7,4032c70 <__eqdf2+0x88>
 4032c44:	103ffa1e 	bne	r2,zero,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c48:	2244b03a 	or	r2,r4,r9
 4032c4c:	1004c03a 	cmpne	r2,r2,zero
 4032c50:	003ff806 	br	4032c34 <__flash_rwdata_start+0xffffc6dc>
 4032c54:	3214b03a 	or	r10,r6,r8
 4032c58:	503ff51e 	bne	r10,zero,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c5c:	10fff41e 	bne	r2,r3,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c60:	003ff506 	br	4032c38 <__flash_rwdata_start+0xffffc6e0>
 4032c64:	2254b03a 	or	r10,r4,r9
 4032c68:	503ff11e 	bne	r10,zero,4032c30 <__flash_rwdata_start+0xffffc6d8>
 4032c6c:	003fed06 	br	4032c24 <__flash_rwdata_start+0xffffc6cc>
 4032c70:	0005883a 	mov	r2,zero
 4032c74:	003fef06 	br	4032c34 <__flash_rwdata_start+0xffffc6dc>

04032c78 <__gedf2>:
 4032c78:	f811883a 	mov	r8,ra
 4032c7c:	40346e80 	call	40346e8 <_mcount>
 4032c80:	403f883a 	mov	ra,r8
 4032c84:	2804d53a 	srli	r2,r5,20
 4032c88:	3806d53a 	srli	r3,r7,20
 4032c8c:	02000434 	movhi	r8,16
 4032c90:	423fffc4 	addi	r8,r8,-1
 4032c94:	1081ffcc 	andi	r2,r2,2047
 4032c98:	0241ffc4 	movi	r9,2047
 4032c9c:	2a14703a 	and	r10,r5,r8
 4032ca0:	18c1ffcc 	andi	r3,r3,2047
 4032ca4:	3a10703a 	and	r8,r7,r8
 4032ca8:	280ad7fa 	srli	r5,r5,31
 4032cac:	380ed7fa 	srli	r7,r7,31
 4032cb0:	12402326 	beq	r2,r9,4032d40 <__gedf2+0xc8>
 4032cb4:	0241ffc4 	movi	r9,2047
 4032cb8:	1a401426 	beq	r3,r9,4032d0c <__gedf2+0x94>
 4032cbc:	10000a1e 	bne	r2,zero,4032ce8 <__gedf2+0x70>
 4032cc0:	2296b03a 	or	r11,r4,r10
 4032cc4:	5813003a 	cmpeq	r9,r11,zero
 4032cc8:	18000b1e 	bne	r3,zero,4032cf8 <__gedf2+0x80>
 4032ccc:	3218b03a 	or	r12,r6,r8
 4032cd0:	6000091e 	bne	r12,zero,4032cf8 <__gedf2+0x80>
 4032cd4:	0005883a 	mov	r2,zero
 4032cd8:	58000b26 	beq	r11,zero,4032d08 <__gedf2+0x90>
 4032cdc:	28000926 	beq	r5,zero,4032d04 <__gedf2+0x8c>
 4032ce0:	00bfffc4 	movi	r2,-1
 4032ce4:	00000806 	br	4032d08 <__gedf2+0x90>
 4032ce8:	18000c1e 	bne	r3,zero,4032d1c <__gedf2+0xa4>
 4032cec:	3212b03a 	or	r9,r6,r8
 4032cf0:	483ffa26 	beq	r9,zero,4032cdc <__flash_rwdata_start+0xffffc784>
 4032cf4:	0013883a 	mov	r9,zero
 4032cf8:	39c03fcc 	andi	r7,r7,255
 4032cfc:	48000826 	beq	r9,zero,4032d20 <__gedf2+0xa8>
 4032d00:	383ff726 	beq	r7,zero,4032ce0 <__flash_rwdata_start+0xffffc788>
 4032d04:	00800044 	movi	r2,1
 4032d08:	f800283a 	ret
 4032d0c:	3212b03a 	or	r9,r6,r8
 4032d10:	483fea26 	beq	r9,zero,4032cbc <__flash_rwdata_start+0xffffc764>
 4032d14:	00bfff84 	movi	r2,-2
 4032d18:	003ffb06 	br	4032d08 <__flash_rwdata_start+0xffffc7b0>
 4032d1c:	39c03fcc 	andi	r7,r7,255
 4032d20:	29ffee1e 	bne	r5,r7,4032cdc <__flash_rwdata_start+0xffffc784>
 4032d24:	18bfed16 	blt	r3,r2,4032cdc <__flash_rwdata_start+0xffffc784>
 4032d28:	10c00316 	blt	r2,r3,4032d38 <__gedf2+0xc0>
 4032d2c:	42bfeb36 	bltu	r8,r10,4032cdc <__flash_rwdata_start+0xffffc784>
 4032d30:	52000626 	beq	r10,r8,4032d4c <__gedf2+0xd4>
 4032d34:	5200072e 	bgeu	r10,r8,4032d54 <__gedf2+0xdc>
 4032d38:	283ff21e 	bne	r5,zero,4032d04 <__flash_rwdata_start+0xffffc7ac>
 4032d3c:	003fe806 	br	4032ce0 <__flash_rwdata_start+0xffffc788>
 4032d40:	2292b03a 	or	r9,r4,r10
 4032d44:	483fdb26 	beq	r9,zero,4032cb4 <__flash_rwdata_start+0xffffc75c>
 4032d48:	003ff206 	br	4032d14 <__flash_rwdata_start+0xffffc7bc>
 4032d4c:	313fe336 	bltu	r6,r4,4032cdc <__flash_rwdata_start+0xffffc784>
 4032d50:	21bff936 	bltu	r4,r6,4032d38 <__flash_rwdata_start+0xffffc7e0>
 4032d54:	0005883a 	mov	r2,zero
 4032d58:	003feb06 	br	4032d08 <__flash_rwdata_start+0xffffc7b0>

04032d5c <__ledf2>:
 4032d5c:	f811883a 	mov	r8,ra
 4032d60:	40346e80 	call	40346e8 <_mcount>
 4032d64:	403f883a 	mov	ra,r8
 4032d68:	2804d53a 	srli	r2,r5,20
 4032d6c:	3810d53a 	srli	r8,r7,20
 4032d70:	00c00434 	movhi	r3,16
 4032d74:	18ffffc4 	addi	r3,r3,-1
 4032d78:	1081ffcc 	andi	r2,r2,2047
 4032d7c:	0241ffc4 	movi	r9,2047
 4032d80:	28d4703a 	and	r10,r5,r3
 4032d84:	4201ffcc 	andi	r8,r8,2047
 4032d88:	38c6703a 	and	r3,r7,r3
 4032d8c:	280ad7fa 	srli	r5,r5,31
 4032d90:	380ed7fa 	srli	r7,r7,31
 4032d94:	12402126 	beq	r2,r9,4032e1c <__ledf2+0xc0>
 4032d98:	0241ffc4 	movi	r9,2047
 4032d9c:	42401526 	beq	r8,r9,4032df4 <__ledf2+0x98>
 4032da0:	10000a1e 	bne	r2,zero,4032dcc <__ledf2+0x70>
 4032da4:	2296b03a 	or	r11,r4,r10
 4032da8:	5813003a 	cmpeq	r9,r11,zero
 4032dac:	29403fcc 	andi	r5,r5,255
 4032db0:	40000b1e 	bne	r8,zero,4032de0 <__ledf2+0x84>
 4032db4:	30d8b03a 	or	r12,r6,r3
 4032db8:	6000091e 	bne	r12,zero,4032de0 <__ledf2+0x84>
 4032dbc:	0005883a 	mov	r2,zero
 4032dc0:	58000b26 	beq	r11,zero,4032df0 <__ledf2+0x94>
 4032dc4:	28000926 	beq	r5,zero,4032dec <__ledf2+0x90>
 4032dc8:	00001206 	br	4032e14 <__ledf2+0xb8>
 4032dcc:	29403fcc 	andi	r5,r5,255
 4032dd0:	40000c1e 	bne	r8,zero,4032e04 <__ledf2+0xa8>
 4032dd4:	30d2b03a 	or	r9,r6,r3
 4032dd8:	483ffa26 	beq	r9,zero,4032dc4 <__flash_rwdata_start+0xffffc86c>
 4032ddc:	0013883a 	mov	r9,zero
 4032de0:	39c03fcc 	andi	r7,r7,255
 4032de4:	48000826 	beq	r9,zero,4032e08 <__ledf2+0xac>
 4032de8:	38000a26 	beq	r7,zero,4032e14 <__ledf2+0xb8>
 4032dec:	00800044 	movi	r2,1
 4032df0:	f800283a 	ret
 4032df4:	30d2b03a 	or	r9,r6,r3
 4032df8:	483fe926 	beq	r9,zero,4032da0 <__flash_rwdata_start+0xffffc848>
 4032dfc:	00800084 	movi	r2,2
 4032e00:	f800283a 	ret
 4032e04:	39c03fcc 	andi	r7,r7,255
 4032e08:	397fee1e 	bne	r7,r5,4032dc4 <__flash_rwdata_start+0xffffc86c>
 4032e0c:	4080070e 	bge	r8,r2,4032e2c <__ledf2+0xd0>
 4032e10:	383ff626 	beq	r7,zero,4032dec <__flash_rwdata_start+0xffffc894>
 4032e14:	00bfffc4 	movi	r2,-1
 4032e18:	003ff506 	br	4032df0 <__flash_rwdata_start+0xffffc898>
 4032e1c:	2292b03a 	or	r9,r4,r10
 4032e20:	483fdd26 	beq	r9,zero,4032d98 <__flash_rwdata_start+0xffffc840>
 4032e24:	00800084 	movi	r2,2
 4032e28:	003ff506 	br	4032e00 <__flash_rwdata_start+0xffffc8a8>
 4032e2c:	123fee16 	blt	r2,r8,4032de8 <__flash_rwdata_start+0xffffc890>
 4032e30:	1abfe436 	bltu	r3,r10,4032dc4 <__flash_rwdata_start+0xffffc86c>
 4032e34:	50c00326 	beq	r10,r3,4032e44 <__ledf2+0xe8>
 4032e38:	50c0042e 	bgeu	r10,r3,4032e4c <__ledf2+0xf0>
 4032e3c:	283feb1e 	bne	r5,zero,4032dec <__flash_rwdata_start+0xffffc894>
 4032e40:	003ff406 	br	4032e14 <__flash_rwdata_start+0xffffc8bc>
 4032e44:	313fdf36 	bltu	r6,r4,4032dc4 <__flash_rwdata_start+0xffffc86c>
 4032e48:	21bffc36 	bltu	r4,r6,4032e3c <__flash_rwdata_start+0xffffc8e4>
 4032e4c:	0005883a 	mov	r2,zero
 4032e50:	003fe706 	br	4032df0 <__flash_rwdata_start+0xffffc898>

04032e54 <__muldf3>:
 4032e54:	f811883a 	mov	r8,ra
 4032e58:	40346e80 	call	40346e8 <_mcount>
 4032e5c:	403f883a 	mov	ra,r8
 4032e60:	defff304 	addi	sp,sp,-52
 4032e64:	dfc00c15 	stw	ra,48(sp)
 4032e68:	df000b15 	stw	fp,44(sp)
 4032e6c:	ddc00a15 	stw	r23,40(sp)
 4032e70:	dd800915 	stw	r22,36(sp)
 4032e74:	dd400815 	stw	r21,32(sp)
 4032e78:	dd000715 	stw	r20,28(sp)
 4032e7c:	dcc00615 	stw	r19,24(sp)
 4032e80:	dc800515 	stw	r18,20(sp)
 4032e84:	dc400415 	stw	r17,16(sp)
 4032e88:	dc000315 	stw	r16,12(sp)
 4032e8c:	2804d53a 	srli	r2,r5,20
 4032e90:	282cd7fa 	srli	r22,r5,31
 4032e94:	04000434 	movhi	r16,16
 4032e98:	843fffc4 	addi	r16,r16,-1
 4032e9c:	1481ffcc 	andi	r18,r2,2047
 4032ea0:	2c20703a 	and	r16,r5,r16
 4032ea4:	b02b883a 	mov	r21,r22
 4032ea8:	b2403fcc 	andi	r9,r22,255
 4032eac:	90006026 	beq	r18,zero,4033030 <__muldf3+0x1dc>
 4032eb0:	0081ffc4 	movi	r2,2047
 4032eb4:	2029883a 	mov	r20,r4
 4032eb8:	90803626 	beq	r18,r2,4032f94 <__muldf3+0x140>
 4032ebc:	80800434 	orhi	r2,r16,16
 4032ec0:	100490fa 	slli	r2,r2,3
 4032ec4:	2020d77a 	srli	r16,r4,29
 4032ec8:	202890fa 	slli	r20,r4,3
 4032ecc:	94bf0044 	addi	r18,r18,-1023
 4032ed0:	80a0b03a 	or	r16,r16,r2
 4032ed4:	0027883a 	mov	r19,zero
 4032ed8:	0039883a 	mov	fp,zero
 4032edc:	3804d53a 	srli	r2,r7,20
 4032ee0:	382ed7fa 	srli	r23,r7,31
 4032ee4:	04400434 	movhi	r17,16
 4032ee8:	8c7fffc4 	addi	r17,r17,-1
 4032eec:	1081ffcc 	andi	r2,r2,2047
 4032ef0:	3011883a 	mov	r8,r6
 4032ef4:	3c62703a 	and	r17,r7,r17
 4032ef8:	ba803fcc 	andi	r10,r23,255
 4032efc:	10006d26 	beq	r2,zero,40330b4 <__muldf3+0x260>
 4032f00:	00c1ffc4 	movi	r3,2047
 4032f04:	10c06526 	beq	r2,r3,403309c <__muldf3+0x248>
 4032f08:	88c00434 	orhi	r3,r17,16
 4032f0c:	180690fa 	slli	r3,r3,3
 4032f10:	3022d77a 	srli	r17,r6,29
 4032f14:	301090fa 	slli	r8,r6,3
 4032f18:	10bf0044 	addi	r2,r2,-1023
 4032f1c:	88e2b03a 	or	r17,r17,r3
 4032f20:	000b883a 	mov	r5,zero
 4032f24:	9085883a 	add	r2,r18,r2
 4032f28:	2cc8b03a 	or	r4,r5,r19
 4032f2c:	00c003c4 	movi	r3,15
 4032f30:	bdacf03a 	xor	r22,r23,r22
 4032f34:	12c00044 	addi	r11,r2,1
 4032f38:	19009936 	bltu	r3,r4,40331a0 <__muldf3+0x34c>
 4032f3c:	200890ba 	slli	r4,r4,2
 4032f40:	00c100f4 	movhi	r3,1027
 4032f44:	18cbd504 	addi	r3,r3,12116
 4032f48:	20c9883a 	add	r4,r4,r3
 4032f4c:	20c00017 	ldw	r3,0(r4)
 4032f50:	1800683a 	jmp	r3
 4032f54:	040331a0 	cmpeqi	r16,zero,3270
 4032f58:	04032fb4 	movhi	r16,3262
 4032f5c:	04032fb4 	movhi	r16,3262
 4032f60:	04032fb0 	cmpltui	r16,zero,3262
 4032f64:	0403317c 	xorhi	r16,zero,3269
 4032f68:	0403317c 	xorhi	r16,zero,3269
 4032f6c:	04033164 	muli	r16,zero,3269
 4032f70:	04032fb0 	cmpltui	r16,zero,3262
 4032f74:	0403317c 	xorhi	r16,zero,3269
 4032f78:	04033164 	muli	r16,zero,3269
 4032f7c:	0403317c 	xorhi	r16,zero,3269
 4032f80:	04032fb0 	cmpltui	r16,zero,3262
 4032f84:	0403318c 	andi	r16,zero,3270
 4032f88:	0403318c 	andi	r16,zero,3270
 4032f8c:	0403318c 	andi	r16,zero,3270
 4032f90:	040333a8 	cmpgeui	r16,zero,3278
 4032f94:	2404b03a 	or	r2,r4,r16
 4032f98:	10006f1e 	bne	r2,zero,4033158 <__muldf3+0x304>
 4032f9c:	04c00204 	movi	r19,8
 4032fa0:	0021883a 	mov	r16,zero
 4032fa4:	0029883a 	mov	r20,zero
 4032fa8:	07000084 	movi	fp,2
 4032fac:	003fcb06 	br	4032edc <__flash_rwdata_start+0xffffc984>
 4032fb0:	502d883a 	mov	r22,r10
 4032fb4:	00800084 	movi	r2,2
 4032fb8:	28805726 	beq	r5,r2,4033118 <__muldf3+0x2c4>
 4032fbc:	008000c4 	movi	r2,3
 4032fc0:	28816626 	beq	r5,r2,403355c <__muldf3+0x708>
 4032fc4:	00800044 	movi	r2,1
 4032fc8:	2881411e 	bne	r5,r2,40334d0 <__muldf3+0x67c>
 4032fcc:	b02b883a 	mov	r21,r22
 4032fd0:	0005883a 	mov	r2,zero
 4032fd4:	000b883a 	mov	r5,zero
 4032fd8:	0029883a 	mov	r20,zero
 4032fdc:	1004953a 	slli	r2,r2,20
 4032fe0:	a8c03fcc 	andi	r3,r21,255
 4032fe4:	04400434 	movhi	r17,16
 4032fe8:	8c7fffc4 	addi	r17,r17,-1
 4032fec:	180697fa 	slli	r3,r3,31
 4032ff0:	2c4a703a 	and	r5,r5,r17
 4032ff4:	288ab03a 	or	r5,r5,r2
 4032ff8:	28c6b03a 	or	r3,r5,r3
 4032ffc:	a005883a 	mov	r2,r20
 4033000:	dfc00c17 	ldw	ra,48(sp)
 4033004:	df000b17 	ldw	fp,44(sp)
 4033008:	ddc00a17 	ldw	r23,40(sp)
 403300c:	dd800917 	ldw	r22,36(sp)
 4033010:	dd400817 	ldw	r21,32(sp)
 4033014:	dd000717 	ldw	r20,28(sp)
 4033018:	dcc00617 	ldw	r19,24(sp)
 403301c:	dc800517 	ldw	r18,20(sp)
 4033020:	dc400417 	ldw	r17,16(sp)
 4033024:	dc000317 	ldw	r16,12(sp)
 4033028:	dec00d04 	addi	sp,sp,52
 403302c:	f800283a 	ret
 4033030:	2404b03a 	or	r2,r4,r16
 4033034:	2027883a 	mov	r19,r4
 4033038:	10004226 	beq	r2,zero,4033144 <__muldf3+0x2f0>
 403303c:	8000fc26 	beq	r16,zero,4033430 <__muldf3+0x5dc>
 4033040:	8009883a 	mov	r4,r16
 4033044:	d9800215 	stw	r6,8(sp)
 4033048:	d9c00015 	stw	r7,0(sp)
 403304c:	da400115 	stw	r9,4(sp)
 4033050:	402768c0 	call	402768c <__clzsi2>
 4033054:	d9800217 	ldw	r6,8(sp)
 4033058:	d9c00017 	ldw	r7,0(sp)
 403305c:	da400117 	ldw	r9,4(sp)
 4033060:	113ffd44 	addi	r4,r2,-11
 4033064:	00c00704 	movi	r3,28
 4033068:	1900ed16 	blt	r3,r4,4033420 <__muldf3+0x5cc>
 403306c:	00c00744 	movi	r3,29
 4033070:	147ffe04 	addi	r17,r2,-8
 4033074:	1907c83a 	sub	r3,r3,r4
 4033078:	8460983a 	sll	r16,r16,r17
 403307c:	98c6d83a 	srl	r3,r19,r3
 4033080:	9c68983a 	sll	r20,r19,r17
 4033084:	1c20b03a 	or	r16,r3,r16
 4033088:	1080fcc4 	addi	r2,r2,1011
 403308c:	00a5c83a 	sub	r18,zero,r2
 4033090:	0027883a 	mov	r19,zero
 4033094:	0039883a 	mov	fp,zero
 4033098:	003f9006 	br	4032edc <__flash_rwdata_start+0xffffc984>
 403309c:	3446b03a 	or	r3,r6,r17
 40330a0:	1800261e 	bne	r3,zero,403313c <__muldf3+0x2e8>
 40330a4:	0023883a 	mov	r17,zero
 40330a8:	0011883a 	mov	r8,zero
 40330ac:	01400084 	movi	r5,2
 40330b0:	003f9c06 	br	4032f24 <__flash_rwdata_start+0xffffc9cc>
 40330b4:	3446b03a 	or	r3,r6,r17
 40330b8:	18001c26 	beq	r3,zero,403312c <__muldf3+0x2d8>
 40330bc:	8800ce26 	beq	r17,zero,40333f8 <__muldf3+0x5a4>
 40330c0:	8809883a 	mov	r4,r17
 40330c4:	d9800215 	stw	r6,8(sp)
 40330c8:	da400115 	stw	r9,4(sp)
 40330cc:	da800015 	stw	r10,0(sp)
 40330d0:	402768c0 	call	402768c <__clzsi2>
 40330d4:	d9800217 	ldw	r6,8(sp)
 40330d8:	da400117 	ldw	r9,4(sp)
 40330dc:	da800017 	ldw	r10,0(sp)
 40330e0:	113ffd44 	addi	r4,r2,-11
 40330e4:	00c00704 	movi	r3,28
 40330e8:	1900bf16 	blt	r3,r4,40333e8 <__muldf3+0x594>
 40330ec:	00c00744 	movi	r3,29
 40330f0:	123ffe04 	addi	r8,r2,-8
 40330f4:	1907c83a 	sub	r3,r3,r4
 40330f8:	8a22983a 	sll	r17,r17,r8
 40330fc:	30c6d83a 	srl	r3,r6,r3
 4033100:	3210983a 	sll	r8,r6,r8
 4033104:	1c62b03a 	or	r17,r3,r17
 4033108:	1080fcc4 	addi	r2,r2,1011
 403310c:	0085c83a 	sub	r2,zero,r2
 4033110:	000b883a 	mov	r5,zero
 4033114:	003f8306 	br	4032f24 <__flash_rwdata_start+0xffffc9cc>
 4033118:	b02b883a 	mov	r21,r22
 403311c:	0081ffc4 	movi	r2,2047
 4033120:	000b883a 	mov	r5,zero
 4033124:	0029883a 	mov	r20,zero
 4033128:	003fac06 	br	4032fdc <__flash_rwdata_start+0xffffca84>
 403312c:	0023883a 	mov	r17,zero
 4033130:	0011883a 	mov	r8,zero
 4033134:	01400044 	movi	r5,1
 4033138:	003f7a06 	br	4032f24 <__flash_rwdata_start+0xffffc9cc>
 403313c:	014000c4 	movi	r5,3
 4033140:	003f7806 	br	4032f24 <__flash_rwdata_start+0xffffc9cc>
 4033144:	04c00104 	movi	r19,4
 4033148:	0021883a 	mov	r16,zero
 403314c:	0029883a 	mov	r20,zero
 4033150:	07000044 	movi	fp,1
 4033154:	003f6106 	br	4032edc <__flash_rwdata_start+0xffffc984>
 4033158:	04c00304 	movi	r19,12
 403315c:	070000c4 	movi	fp,3
 4033160:	003f5e06 	br	4032edc <__flash_rwdata_start+0xffffc984>
 4033164:	01400434 	movhi	r5,16
 4033168:	002b883a 	mov	r21,zero
 403316c:	297fffc4 	addi	r5,r5,-1
 4033170:	053fffc4 	movi	r20,-1
 4033174:	0081ffc4 	movi	r2,2047
 4033178:	003f9806 	br	4032fdc <__flash_rwdata_start+0xffffca84>
 403317c:	8023883a 	mov	r17,r16
 4033180:	a011883a 	mov	r8,r20
 4033184:	e00b883a 	mov	r5,fp
 4033188:	003f8a06 	br	4032fb4 <__flash_rwdata_start+0xffffca5c>
 403318c:	8023883a 	mov	r17,r16
 4033190:	a011883a 	mov	r8,r20
 4033194:	482d883a 	mov	r22,r9
 4033198:	e00b883a 	mov	r5,fp
 403319c:	003f8506 	br	4032fb4 <__flash_rwdata_start+0xffffca5c>
 40331a0:	a00ad43a 	srli	r5,r20,16
 40331a4:	401ad43a 	srli	r13,r8,16
 40331a8:	a53fffcc 	andi	r20,r20,65535
 40331ac:	423fffcc 	andi	r8,r8,65535
 40331b0:	4519383a 	mul	r12,r8,r20
 40331b4:	4147383a 	mul	r3,r8,r5
 40331b8:	6d09383a 	mul	r4,r13,r20
 40331bc:	600cd43a 	srli	r6,r12,16
 40331c0:	2b5d383a 	mul	r14,r5,r13
 40331c4:	20c9883a 	add	r4,r4,r3
 40331c8:	310d883a 	add	r6,r6,r4
 40331cc:	30c0022e 	bgeu	r6,r3,40331d8 <__muldf3+0x384>
 40331d0:	00c00074 	movhi	r3,1
 40331d4:	70dd883a 	add	r14,r14,r3
 40331d8:	8826d43a 	srli	r19,r17,16
 40331dc:	8bffffcc 	andi	r15,r17,65535
 40331e0:	7d23383a 	mul	r17,r15,r20
 40331e4:	7949383a 	mul	r4,r15,r5
 40331e8:	9d29383a 	mul	r20,r19,r20
 40331ec:	8814d43a 	srli	r10,r17,16
 40331f0:	3012943a 	slli	r9,r6,16
 40331f4:	a129883a 	add	r20,r20,r4
 40331f8:	633fffcc 	andi	r12,r12,65535
 40331fc:	5515883a 	add	r10,r10,r20
 4033200:	3006d43a 	srli	r3,r6,16
 4033204:	4b13883a 	add	r9,r9,r12
 4033208:	2ccb383a 	mul	r5,r5,r19
 403320c:	5100022e 	bgeu	r10,r4,4033218 <__muldf3+0x3c4>
 4033210:	01000074 	movhi	r4,1
 4033214:	290b883a 	add	r5,r5,r4
 4033218:	802ad43a 	srli	r21,r16,16
 403321c:	843fffcc 	andi	r16,r16,65535
 4033220:	440d383a 	mul	r6,r8,r16
 4033224:	4565383a 	mul	r18,r8,r21
 4033228:	8349383a 	mul	r4,r16,r13
 403322c:	500e943a 	slli	r7,r10,16
 4033230:	3010d43a 	srli	r8,r6,16
 4033234:	5028d43a 	srli	r20,r10,16
 4033238:	2489883a 	add	r4,r4,r18
 403323c:	8abfffcc 	andi	r10,r17,65535
 4033240:	3a95883a 	add	r10,r7,r10
 4033244:	4119883a 	add	r12,r8,r4
 4033248:	a169883a 	add	r20,r20,r5
 403324c:	1a87883a 	add	r3,r3,r10
 4033250:	6d5b383a 	mul	r13,r13,r21
 4033254:	6480022e 	bgeu	r12,r18,4033260 <__muldf3+0x40c>
 4033258:	01000074 	movhi	r4,1
 403325c:	691b883a 	add	r13,r13,r4
 4033260:	7c25383a 	mul	r18,r15,r16
 4033264:	7d4b383a 	mul	r5,r15,r21
 4033268:	84cf383a 	mul	r7,r16,r19
 403326c:	901ed43a 	srli	r15,r18,16
 4033270:	6008d43a 	srli	r4,r12,16
 4033274:	6010943a 	slli	r8,r12,16
 4033278:	394f883a 	add	r7,r7,r5
 403327c:	333fffcc 	andi	r12,r6,65535
 4033280:	79df883a 	add	r15,r15,r7
 4033284:	235b883a 	add	r13,r4,r13
 4033288:	9d63383a 	mul	r17,r19,r21
 403328c:	4309883a 	add	r4,r8,r12
 4033290:	7940022e 	bgeu	r15,r5,403329c <__muldf3+0x448>
 4033294:	01400074 	movhi	r5,1
 4033298:	8963883a 	add	r17,r17,r5
 403329c:	780a943a 	slli	r5,r15,16
 40332a0:	91bfffcc 	andi	r6,r18,65535
 40332a4:	70c7883a 	add	r3,r14,r3
 40332a8:	298d883a 	add	r6,r5,r6
 40332ac:	1a8f803a 	cmpltu	r7,r3,r10
 40332b0:	350b883a 	add	r5,r6,r20
 40332b4:	20c7883a 	add	r3,r4,r3
 40332b8:	3955883a 	add	r10,r7,r5
 40332bc:	1909803a 	cmpltu	r4,r3,r4
 40332c0:	6a91883a 	add	r8,r13,r10
 40332c4:	780cd43a 	srli	r6,r15,16
 40332c8:	2219883a 	add	r12,r4,r8
 40332cc:	2d0b803a 	cmpltu	r5,r5,r20
 40332d0:	51cf803a 	cmpltu	r7,r10,r7
 40332d4:	29ceb03a 	or	r7,r5,r7
 40332d8:	4351803a 	cmpltu	r8,r8,r13
 40332dc:	610b803a 	cmpltu	r5,r12,r4
 40332e0:	4148b03a 	or	r4,r8,r5
 40332e4:	398f883a 	add	r7,r7,r6
 40332e8:	3909883a 	add	r4,r7,r4
 40332ec:	1810927a 	slli	r8,r3,9
 40332f0:	2449883a 	add	r4,r4,r17
 40332f4:	2008927a 	slli	r4,r4,9
 40332f8:	6022d5fa 	srli	r17,r12,23
 40332fc:	1806d5fa 	srli	r3,r3,23
 4033300:	4252b03a 	or	r9,r8,r9
 4033304:	600a927a 	slli	r5,r12,9
 4033308:	4810c03a 	cmpne	r8,r9,zero
 403330c:	2462b03a 	or	r17,r4,r17
 4033310:	40c6b03a 	or	r3,r8,r3
 4033314:	8900402c 	andhi	r4,r17,256
 4033318:	1950b03a 	or	r8,r3,r5
 403331c:	20000726 	beq	r4,zero,403333c <__muldf3+0x4e8>
 4033320:	4006d07a 	srli	r3,r8,1
 4033324:	880497fa 	slli	r2,r17,31
 4033328:	4200004c 	andi	r8,r8,1
 403332c:	8822d07a 	srli	r17,r17,1
 4033330:	1a10b03a 	or	r8,r3,r8
 4033334:	1210b03a 	or	r8,r2,r8
 4033338:	5805883a 	mov	r2,r11
 403333c:	1140ffc4 	addi	r5,r2,1023
 4033340:	0140440e 	bge	zero,r5,4033454 <__muldf3+0x600>
 4033344:	40c001cc 	andi	r3,r8,7
 4033348:	18000726 	beq	r3,zero,4033368 <__muldf3+0x514>
 403334c:	40c003cc 	andi	r3,r8,15
 4033350:	01000104 	movi	r4,4
 4033354:	19000426 	beq	r3,r4,4033368 <__muldf3+0x514>
 4033358:	4107883a 	add	r3,r8,r4
 403335c:	1a11803a 	cmpltu	r8,r3,r8
 4033360:	8a23883a 	add	r17,r17,r8
 4033364:	1811883a 	mov	r8,r3
 4033368:	88c0402c 	andhi	r3,r17,256
 403336c:	18000426 	beq	r3,zero,4033380 <__muldf3+0x52c>
 4033370:	11410004 	addi	r5,r2,1024
 4033374:	00bfc034 	movhi	r2,65280
 4033378:	10bfffc4 	addi	r2,r2,-1
 403337c:	88a2703a 	and	r17,r17,r2
 4033380:	0081ff84 	movi	r2,2046
 4033384:	117f6416 	blt	r2,r5,4033118 <__flash_rwdata_start+0xffffcbc0>
 4033388:	8828977a 	slli	r20,r17,29
 403338c:	4010d0fa 	srli	r8,r8,3
 4033390:	8822927a 	slli	r17,r17,9
 4033394:	2881ffcc 	andi	r2,r5,2047
 4033398:	a228b03a 	or	r20,r20,r8
 403339c:	880ad33a 	srli	r5,r17,12
 40333a0:	b02b883a 	mov	r21,r22
 40333a4:	003f0d06 	br	4032fdc <__flash_rwdata_start+0xffffca84>
 40333a8:	8080022c 	andhi	r2,r16,8
 40333ac:	10000926 	beq	r2,zero,40333d4 <__muldf3+0x580>
 40333b0:	8880022c 	andhi	r2,r17,8
 40333b4:	1000071e 	bne	r2,zero,40333d4 <__muldf3+0x580>
 40333b8:	00800434 	movhi	r2,16
 40333bc:	89400234 	orhi	r5,r17,8
 40333c0:	10bfffc4 	addi	r2,r2,-1
 40333c4:	b82b883a 	mov	r21,r23
 40333c8:	288a703a 	and	r5,r5,r2
 40333cc:	4029883a 	mov	r20,r8
 40333d0:	003f6806 	br	4033174 <__flash_rwdata_start+0xffffcc1c>
 40333d4:	00800434 	movhi	r2,16
 40333d8:	81400234 	orhi	r5,r16,8
 40333dc:	10bfffc4 	addi	r2,r2,-1
 40333e0:	288a703a 	and	r5,r5,r2
 40333e4:	003f6306 	br	4033174 <__flash_rwdata_start+0xffffcc1c>
 40333e8:	147ff604 	addi	r17,r2,-40
 40333ec:	3462983a 	sll	r17,r6,r17
 40333f0:	0011883a 	mov	r8,zero
 40333f4:	003f4406 	br	4033108 <__flash_rwdata_start+0xffffcbb0>
 40333f8:	3009883a 	mov	r4,r6
 40333fc:	d9800215 	stw	r6,8(sp)
 4033400:	da400115 	stw	r9,4(sp)
 4033404:	da800015 	stw	r10,0(sp)
 4033408:	402768c0 	call	402768c <__clzsi2>
 403340c:	10800804 	addi	r2,r2,32
 4033410:	da800017 	ldw	r10,0(sp)
 4033414:	da400117 	ldw	r9,4(sp)
 4033418:	d9800217 	ldw	r6,8(sp)
 403341c:	003f3006 	br	40330e0 <__flash_rwdata_start+0xffffcb88>
 4033420:	143ff604 	addi	r16,r2,-40
 4033424:	9c20983a 	sll	r16,r19,r16
 4033428:	0029883a 	mov	r20,zero
 403342c:	003f1606 	br	4033088 <__flash_rwdata_start+0xffffcb30>
 4033430:	d9800215 	stw	r6,8(sp)
 4033434:	d9c00015 	stw	r7,0(sp)
 4033438:	da400115 	stw	r9,4(sp)
 403343c:	402768c0 	call	402768c <__clzsi2>
 4033440:	10800804 	addi	r2,r2,32
 4033444:	da400117 	ldw	r9,4(sp)
 4033448:	d9c00017 	ldw	r7,0(sp)
 403344c:	d9800217 	ldw	r6,8(sp)
 4033450:	003f0306 	br	4033060 <__flash_rwdata_start+0xffffcb08>
 4033454:	00c00044 	movi	r3,1
 4033458:	1947c83a 	sub	r3,r3,r5
 403345c:	00800e04 	movi	r2,56
 4033460:	10feda16 	blt	r2,r3,4032fcc <__flash_rwdata_start+0xffffca74>
 4033464:	008007c4 	movi	r2,31
 4033468:	10c01b16 	blt	r2,r3,40334d8 <__muldf3+0x684>
 403346c:	00800804 	movi	r2,32
 4033470:	10c5c83a 	sub	r2,r2,r3
 4033474:	888a983a 	sll	r5,r17,r2
 4033478:	40c8d83a 	srl	r4,r8,r3
 403347c:	4084983a 	sll	r2,r8,r2
 4033480:	88e2d83a 	srl	r17,r17,r3
 4033484:	2906b03a 	or	r3,r5,r4
 4033488:	1004c03a 	cmpne	r2,r2,zero
 403348c:	1886b03a 	or	r3,r3,r2
 4033490:	188001cc 	andi	r2,r3,7
 4033494:	10000726 	beq	r2,zero,40334b4 <__muldf3+0x660>
 4033498:	188003cc 	andi	r2,r3,15
 403349c:	01000104 	movi	r4,4
 40334a0:	11000426 	beq	r2,r4,40334b4 <__muldf3+0x660>
 40334a4:	1805883a 	mov	r2,r3
 40334a8:	10c00104 	addi	r3,r2,4
 40334ac:	1885803a 	cmpltu	r2,r3,r2
 40334b0:	88a3883a 	add	r17,r17,r2
 40334b4:	8880202c 	andhi	r2,r17,128
 40334b8:	10001c26 	beq	r2,zero,403352c <__muldf3+0x6d8>
 40334bc:	b02b883a 	mov	r21,r22
 40334c0:	00800044 	movi	r2,1
 40334c4:	000b883a 	mov	r5,zero
 40334c8:	0029883a 	mov	r20,zero
 40334cc:	003ec306 	br	4032fdc <__flash_rwdata_start+0xffffca84>
 40334d0:	5805883a 	mov	r2,r11
 40334d4:	003f9906 	br	403333c <__flash_rwdata_start+0xffffcde4>
 40334d8:	00bff844 	movi	r2,-31
 40334dc:	1145c83a 	sub	r2,r2,r5
 40334e0:	8888d83a 	srl	r4,r17,r2
 40334e4:	00800804 	movi	r2,32
 40334e8:	18801a26 	beq	r3,r2,4033554 <__muldf3+0x700>
 40334ec:	00801004 	movi	r2,64
 40334f0:	10c5c83a 	sub	r2,r2,r3
 40334f4:	8884983a 	sll	r2,r17,r2
 40334f8:	1204b03a 	or	r2,r2,r8
 40334fc:	1004c03a 	cmpne	r2,r2,zero
 4033500:	2084b03a 	or	r2,r4,r2
 4033504:	144001cc 	andi	r17,r2,7
 4033508:	88000d1e 	bne	r17,zero,4033540 <__muldf3+0x6ec>
 403350c:	000b883a 	mov	r5,zero
 4033510:	1028d0fa 	srli	r20,r2,3
 4033514:	b02b883a 	mov	r21,r22
 4033518:	0005883a 	mov	r2,zero
 403351c:	a468b03a 	or	r20,r20,r17
 4033520:	003eae06 	br	4032fdc <__flash_rwdata_start+0xffffca84>
 4033524:	1007883a 	mov	r3,r2
 4033528:	0023883a 	mov	r17,zero
 403352c:	880a927a 	slli	r5,r17,9
 4033530:	1805883a 	mov	r2,r3
 4033534:	8822977a 	slli	r17,r17,29
 4033538:	280ad33a 	srli	r5,r5,12
 403353c:	003ff406 	br	4033510 <__flash_rwdata_start+0xffffcfb8>
 4033540:	10c003cc 	andi	r3,r2,15
 4033544:	01000104 	movi	r4,4
 4033548:	193ff626 	beq	r3,r4,4033524 <__flash_rwdata_start+0xffffcfcc>
 403354c:	0023883a 	mov	r17,zero
 4033550:	003fd506 	br	40334a8 <__flash_rwdata_start+0xffffcf50>
 4033554:	0005883a 	mov	r2,zero
 4033558:	003fe706 	br	40334f8 <__flash_rwdata_start+0xffffcfa0>
 403355c:	00800434 	movhi	r2,16
 4033560:	89400234 	orhi	r5,r17,8
 4033564:	10bfffc4 	addi	r2,r2,-1
 4033568:	b02b883a 	mov	r21,r22
 403356c:	288a703a 	and	r5,r5,r2
 4033570:	4029883a 	mov	r20,r8
 4033574:	003eff06 	br	4033174 <__flash_rwdata_start+0xffffcc1c>

04033578 <__subdf3>:
 4033578:	f811883a 	mov	r8,ra
 403357c:	40346e80 	call	40346e8 <_mcount>
 4033580:	403f883a 	mov	ra,r8
 4033584:	defffb04 	addi	sp,sp,-20
 4033588:	dfc00415 	stw	ra,16(sp)
 403358c:	dcc00315 	stw	r19,12(sp)
 4033590:	dc800215 	stw	r18,8(sp)
 4033594:	dc400115 	stw	r17,4(sp)
 4033598:	dc000015 	stw	r16,0(sp)
 403359c:	02000434 	movhi	r8,16
 40335a0:	423fffc4 	addi	r8,r8,-1
 40335a4:	2a14703a 	and	r10,r5,r8
 40335a8:	3812d53a 	srli	r9,r7,20
 40335ac:	3a10703a 	and	r8,r7,r8
 40335b0:	2820d53a 	srli	r16,r5,20
 40335b4:	2006d77a 	srli	r3,r4,29
 40335b8:	3004d77a 	srli	r2,r6,29
 40335bc:	501490fa 	slli	r10,r10,3
 40335c0:	401090fa 	slli	r8,r8,3
 40335c4:	202290fa 	slli	r17,r4,3
 40335c8:	4a41ffcc 	andi	r9,r9,2047
 40335cc:	0101ffc4 	movi	r4,2047
 40335d0:	2824d7fa 	srli	r18,r5,31
 40335d4:	8401ffcc 	andi	r16,r16,2047
 40335d8:	50c6b03a 	or	r3,r10,r3
 40335dc:	380ed7fa 	srli	r7,r7,31
 40335e0:	408ab03a 	or	r5,r8,r2
 40335e4:	300c90fa 	slli	r6,r6,3
 40335e8:	49009626 	beq	r9,r4,4033844 <__subdf3+0x2cc>
 40335ec:	39c0005c 	xori	r7,r7,1
 40335f0:	8245c83a 	sub	r2,r16,r9
 40335f4:	3c807426 	beq	r7,r18,40337c8 <__subdf3+0x250>
 40335f8:	0080af0e 	bge	zero,r2,40338b8 <__subdf3+0x340>
 40335fc:	48002a1e 	bne	r9,zero,40336a8 <__subdf3+0x130>
 4033600:	2988b03a 	or	r4,r5,r6
 4033604:	20009a1e 	bne	r4,zero,4033870 <__subdf3+0x2f8>
 4033608:	888001cc 	andi	r2,r17,7
 403360c:	10000726 	beq	r2,zero,403362c <__subdf3+0xb4>
 4033610:	888003cc 	andi	r2,r17,15
 4033614:	01000104 	movi	r4,4
 4033618:	11000426 	beq	r2,r4,403362c <__subdf3+0xb4>
 403361c:	890b883a 	add	r5,r17,r4
 4033620:	2c63803a 	cmpltu	r17,r5,r17
 4033624:	1c47883a 	add	r3,r3,r17
 4033628:	2823883a 	mov	r17,r5
 403362c:	1880202c 	andhi	r2,r3,128
 4033630:	10005926 	beq	r2,zero,4033798 <__subdf3+0x220>
 4033634:	84000044 	addi	r16,r16,1
 4033638:	0081ffc4 	movi	r2,2047
 403363c:	8080be26 	beq	r16,r2,4033938 <__subdf3+0x3c0>
 4033640:	017fe034 	movhi	r5,65408
 4033644:	297fffc4 	addi	r5,r5,-1
 4033648:	1946703a 	and	r3,r3,r5
 403364c:	1804977a 	slli	r2,r3,29
 4033650:	1806927a 	slli	r3,r3,9
 4033654:	8822d0fa 	srli	r17,r17,3
 4033658:	8401ffcc 	andi	r16,r16,2047
 403365c:	180ad33a 	srli	r5,r3,12
 4033660:	9100004c 	andi	r4,r18,1
 4033664:	1444b03a 	or	r2,r2,r17
 4033668:	80c1ffcc 	andi	r3,r16,2047
 403366c:	1820953a 	slli	r16,r3,20
 4033670:	20c03fcc 	andi	r3,r4,255
 4033674:	180897fa 	slli	r4,r3,31
 4033678:	00c00434 	movhi	r3,16
 403367c:	18ffffc4 	addi	r3,r3,-1
 4033680:	28c6703a 	and	r3,r5,r3
 4033684:	1c06b03a 	or	r3,r3,r16
 4033688:	1906b03a 	or	r3,r3,r4
 403368c:	dfc00417 	ldw	ra,16(sp)
 4033690:	dcc00317 	ldw	r19,12(sp)
 4033694:	dc800217 	ldw	r18,8(sp)
 4033698:	dc400117 	ldw	r17,4(sp)
 403369c:	dc000017 	ldw	r16,0(sp)
 40336a0:	dec00504 	addi	sp,sp,20
 40336a4:	f800283a 	ret
 40336a8:	0101ffc4 	movi	r4,2047
 40336ac:	813fd626 	beq	r16,r4,4033608 <__flash_rwdata_start+0xffffd0b0>
 40336b0:	29402034 	orhi	r5,r5,128
 40336b4:	01000e04 	movi	r4,56
 40336b8:	2080a316 	blt	r4,r2,4033948 <__subdf3+0x3d0>
 40336bc:	010007c4 	movi	r4,31
 40336c0:	2080c616 	blt	r4,r2,40339dc <__subdf3+0x464>
 40336c4:	01000804 	movi	r4,32
 40336c8:	2089c83a 	sub	r4,r4,r2
 40336cc:	2910983a 	sll	r8,r5,r4
 40336d0:	308ed83a 	srl	r7,r6,r2
 40336d4:	3108983a 	sll	r4,r6,r4
 40336d8:	2884d83a 	srl	r2,r5,r2
 40336dc:	41ccb03a 	or	r6,r8,r7
 40336e0:	2008c03a 	cmpne	r4,r4,zero
 40336e4:	310cb03a 	or	r6,r6,r4
 40336e8:	898dc83a 	sub	r6,r17,r6
 40336ec:	89a3803a 	cmpltu	r17,r17,r6
 40336f0:	1887c83a 	sub	r3,r3,r2
 40336f4:	1c47c83a 	sub	r3,r3,r17
 40336f8:	3023883a 	mov	r17,r6
 40336fc:	1880202c 	andhi	r2,r3,128
 4033700:	10002326 	beq	r2,zero,4033790 <__subdf3+0x218>
 4033704:	04c02034 	movhi	r19,128
 4033708:	9cffffc4 	addi	r19,r19,-1
 403370c:	1ce6703a 	and	r19,r3,r19
 4033710:	98007a26 	beq	r19,zero,40338fc <__subdf3+0x384>
 4033714:	9809883a 	mov	r4,r19
 4033718:	402768c0 	call	402768c <__clzsi2>
 403371c:	113ffe04 	addi	r4,r2,-8
 4033720:	00c007c4 	movi	r3,31
 4033724:	19007b16 	blt	r3,r4,4033914 <__subdf3+0x39c>
 4033728:	00800804 	movi	r2,32
 403372c:	1105c83a 	sub	r2,r2,r4
 4033730:	8884d83a 	srl	r2,r17,r2
 4033734:	9906983a 	sll	r3,r19,r4
 4033738:	8922983a 	sll	r17,r17,r4
 403373c:	10c4b03a 	or	r2,r2,r3
 4033740:	24007816 	blt	r4,r16,4033924 <__subdf3+0x3ac>
 4033744:	2421c83a 	sub	r16,r4,r16
 4033748:	80c00044 	addi	r3,r16,1
 403374c:	010007c4 	movi	r4,31
 4033750:	20c09516 	blt	r4,r3,40339a8 <__subdf3+0x430>
 4033754:	01400804 	movi	r5,32
 4033758:	28cbc83a 	sub	r5,r5,r3
 403375c:	88c8d83a 	srl	r4,r17,r3
 4033760:	8962983a 	sll	r17,r17,r5
 4033764:	114a983a 	sll	r5,r2,r5
 4033768:	10c6d83a 	srl	r3,r2,r3
 403376c:	8804c03a 	cmpne	r2,r17,zero
 4033770:	290ab03a 	or	r5,r5,r4
 4033774:	28a2b03a 	or	r17,r5,r2
 4033778:	0021883a 	mov	r16,zero
 403377c:	003fa206 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033780:	2090b03a 	or	r8,r4,r2
 4033784:	40018e26 	beq	r8,zero,4033dc0 <__subdf3+0x848>
 4033788:	1007883a 	mov	r3,r2
 403378c:	2023883a 	mov	r17,r4
 4033790:	888001cc 	andi	r2,r17,7
 4033794:	103f9e1e 	bne	r2,zero,4033610 <__flash_rwdata_start+0xffffd0b8>
 4033798:	1804977a 	slli	r2,r3,29
 403379c:	8822d0fa 	srli	r17,r17,3
 40337a0:	1810d0fa 	srli	r8,r3,3
 40337a4:	9100004c 	andi	r4,r18,1
 40337a8:	1444b03a 	or	r2,r2,r17
 40337ac:	00c1ffc4 	movi	r3,2047
 40337b0:	80c02826 	beq	r16,r3,4033854 <__subdf3+0x2dc>
 40337b4:	01400434 	movhi	r5,16
 40337b8:	297fffc4 	addi	r5,r5,-1
 40337bc:	80e0703a 	and	r16,r16,r3
 40337c0:	414a703a 	and	r5,r8,r5
 40337c4:	003fa806 	br	4033668 <__flash_rwdata_start+0xffffd110>
 40337c8:	0080630e 	bge	zero,r2,4033958 <__subdf3+0x3e0>
 40337cc:	48003026 	beq	r9,zero,4033890 <__subdf3+0x318>
 40337d0:	0101ffc4 	movi	r4,2047
 40337d4:	813f8c26 	beq	r16,r4,4033608 <__flash_rwdata_start+0xffffd0b0>
 40337d8:	29402034 	orhi	r5,r5,128
 40337dc:	01000e04 	movi	r4,56
 40337e0:	2080a90e 	bge	r4,r2,4033a88 <__subdf3+0x510>
 40337e4:	298cb03a 	or	r6,r5,r6
 40337e8:	3012c03a 	cmpne	r9,r6,zero
 40337ec:	0005883a 	mov	r2,zero
 40337f0:	4c53883a 	add	r9,r9,r17
 40337f4:	4c63803a 	cmpltu	r17,r9,r17
 40337f8:	10c7883a 	add	r3,r2,r3
 40337fc:	88c7883a 	add	r3,r17,r3
 4033800:	4823883a 	mov	r17,r9
 4033804:	1880202c 	andhi	r2,r3,128
 4033808:	1000d026 	beq	r2,zero,4033b4c <__subdf3+0x5d4>
 403380c:	84000044 	addi	r16,r16,1
 4033810:	0081ffc4 	movi	r2,2047
 4033814:	8080fe26 	beq	r16,r2,4033c10 <__subdf3+0x698>
 4033818:	00bfe034 	movhi	r2,65408
 403381c:	10bfffc4 	addi	r2,r2,-1
 4033820:	1886703a 	and	r3,r3,r2
 4033824:	880ad07a 	srli	r5,r17,1
 4033828:	180497fa 	slli	r2,r3,31
 403382c:	8900004c 	andi	r4,r17,1
 4033830:	2922b03a 	or	r17,r5,r4
 4033834:	1806d07a 	srli	r3,r3,1
 4033838:	1462b03a 	or	r17,r2,r17
 403383c:	3825883a 	mov	r18,r7
 4033840:	003f7106 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033844:	2984b03a 	or	r2,r5,r6
 4033848:	103f6826 	beq	r2,zero,40335ec <__flash_rwdata_start+0xffffd094>
 403384c:	39c03fcc 	andi	r7,r7,255
 4033850:	003f6706 	br	40335f0 <__flash_rwdata_start+0xffffd098>
 4033854:	4086b03a 	or	r3,r8,r2
 4033858:	18015226 	beq	r3,zero,4033da4 <__subdf3+0x82c>
 403385c:	00c00434 	movhi	r3,16
 4033860:	41400234 	orhi	r5,r8,8
 4033864:	18ffffc4 	addi	r3,r3,-1
 4033868:	28ca703a 	and	r5,r5,r3
 403386c:	003f7e06 	br	4033668 <__flash_rwdata_start+0xffffd110>
 4033870:	10bfffc4 	addi	r2,r2,-1
 4033874:	1000491e 	bne	r2,zero,403399c <__subdf3+0x424>
 4033878:	898fc83a 	sub	r7,r17,r6
 403387c:	89e3803a 	cmpltu	r17,r17,r7
 4033880:	1947c83a 	sub	r3,r3,r5
 4033884:	1c47c83a 	sub	r3,r3,r17
 4033888:	3823883a 	mov	r17,r7
 403388c:	003f9b06 	br	40336fc <__flash_rwdata_start+0xffffd1a4>
 4033890:	2988b03a 	or	r4,r5,r6
 4033894:	203f5c26 	beq	r4,zero,4033608 <__flash_rwdata_start+0xffffd0b0>
 4033898:	10bfffc4 	addi	r2,r2,-1
 403389c:	1000931e 	bne	r2,zero,4033aec <__subdf3+0x574>
 40338a0:	898d883a 	add	r6,r17,r6
 40338a4:	3463803a 	cmpltu	r17,r6,r17
 40338a8:	1947883a 	add	r3,r3,r5
 40338ac:	88c7883a 	add	r3,r17,r3
 40338b0:	3023883a 	mov	r17,r6
 40338b4:	003fd306 	br	4033804 <__flash_rwdata_start+0xffffd2ac>
 40338b8:	1000541e 	bne	r2,zero,4033a0c <__subdf3+0x494>
 40338bc:	80800044 	addi	r2,r16,1
 40338c0:	1081ffcc 	andi	r2,r2,2047
 40338c4:	01000044 	movi	r4,1
 40338c8:	2080a20e 	bge	r4,r2,4033b54 <__subdf3+0x5dc>
 40338cc:	8989c83a 	sub	r4,r17,r6
 40338d0:	8905803a 	cmpltu	r2,r17,r4
 40338d4:	1967c83a 	sub	r19,r3,r5
 40338d8:	98a7c83a 	sub	r19,r19,r2
 40338dc:	9880202c 	andhi	r2,r19,128
 40338e0:	10006326 	beq	r2,zero,4033a70 <__subdf3+0x4f8>
 40338e4:	3463c83a 	sub	r17,r6,r17
 40338e8:	28c7c83a 	sub	r3,r5,r3
 40338ec:	344d803a 	cmpltu	r6,r6,r17
 40338f0:	19a7c83a 	sub	r19,r3,r6
 40338f4:	3825883a 	mov	r18,r7
 40338f8:	983f861e 	bne	r19,zero,4033714 <__flash_rwdata_start+0xffffd1bc>
 40338fc:	8809883a 	mov	r4,r17
 4033900:	402768c0 	call	402768c <__clzsi2>
 4033904:	10800804 	addi	r2,r2,32
 4033908:	113ffe04 	addi	r4,r2,-8
 403390c:	00c007c4 	movi	r3,31
 4033910:	193f850e 	bge	r3,r4,4033728 <__flash_rwdata_start+0xffffd1d0>
 4033914:	10bff604 	addi	r2,r2,-40
 4033918:	8884983a 	sll	r2,r17,r2
 403391c:	0023883a 	mov	r17,zero
 4033920:	243f880e 	bge	r4,r16,4033744 <__flash_rwdata_start+0xffffd1ec>
 4033924:	00ffe034 	movhi	r3,65408
 4033928:	18ffffc4 	addi	r3,r3,-1
 403392c:	8121c83a 	sub	r16,r16,r4
 4033930:	10c6703a 	and	r3,r2,r3
 4033934:	003f3406 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033938:	9100004c 	andi	r4,r18,1
 403393c:	000b883a 	mov	r5,zero
 4033940:	0005883a 	mov	r2,zero
 4033944:	003f4806 	br	4033668 <__flash_rwdata_start+0xffffd110>
 4033948:	298cb03a 	or	r6,r5,r6
 403394c:	300cc03a 	cmpne	r6,r6,zero
 4033950:	0005883a 	mov	r2,zero
 4033954:	003f6406 	br	40336e8 <__flash_rwdata_start+0xffffd190>
 4033958:	10009a1e 	bne	r2,zero,4033bc4 <__subdf3+0x64c>
 403395c:	82400044 	addi	r9,r16,1
 4033960:	4881ffcc 	andi	r2,r9,2047
 4033964:	02800044 	movi	r10,1
 4033968:	5080670e 	bge	r10,r2,4033b08 <__subdf3+0x590>
 403396c:	0081ffc4 	movi	r2,2047
 4033970:	4880af26 	beq	r9,r2,4033c30 <__subdf3+0x6b8>
 4033974:	898d883a 	add	r6,r17,r6
 4033978:	1945883a 	add	r2,r3,r5
 403397c:	3447803a 	cmpltu	r3,r6,r17
 4033980:	1887883a 	add	r3,r3,r2
 4033984:	182297fa 	slli	r17,r3,31
 4033988:	300cd07a 	srli	r6,r6,1
 403398c:	1806d07a 	srli	r3,r3,1
 4033990:	4821883a 	mov	r16,r9
 4033994:	89a2b03a 	or	r17,r17,r6
 4033998:	003f1b06 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 403399c:	0101ffc4 	movi	r4,2047
 40339a0:	813f441e 	bne	r16,r4,40336b4 <__flash_rwdata_start+0xffffd15c>
 40339a4:	003f1806 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 40339a8:	843ff844 	addi	r16,r16,-31
 40339ac:	01400804 	movi	r5,32
 40339b0:	1408d83a 	srl	r4,r2,r16
 40339b4:	19405026 	beq	r3,r5,4033af8 <__subdf3+0x580>
 40339b8:	01401004 	movi	r5,64
 40339bc:	28c7c83a 	sub	r3,r5,r3
 40339c0:	10c4983a 	sll	r2,r2,r3
 40339c4:	88a2b03a 	or	r17,r17,r2
 40339c8:	8822c03a 	cmpne	r17,r17,zero
 40339cc:	2462b03a 	or	r17,r4,r17
 40339d0:	0007883a 	mov	r3,zero
 40339d4:	0021883a 	mov	r16,zero
 40339d8:	003f6d06 	br	4033790 <__flash_rwdata_start+0xffffd238>
 40339dc:	11fff804 	addi	r7,r2,-32
 40339e0:	01000804 	movi	r4,32
 40339e4:	29ced83a 	srl	r7,r5,r7
 40339e8:	11004526 	beq	r2,r4,4033b00 <__subdf3+0x588>
 40339ec:	01001004 	movi	r4,64
 40339f0:	2089c83a 	sub	r4,r4,r2
 40339f4:	2904983a 	sll	r2,r5,r4
 40339f8:	118cb03a 	or	r6,r2,r6
 40339fc:	300cc03a 	cmpne	r6,r6,zero
 4033a00:	398cb03a 	or	r6,r7,r6
 4033a04:	0005883a 	mov	r2,zero
 4033a08:	003f3706 	br	40336e8 <__flash_rwdata_start+0xffffd190>
 4033a0c:	80002a26 	beq	r16,zero,4033ab8 <__subdf3+0x540>
 4033a10:	0101ffc4 	movi	r4,2047
 4033a14:	49006626 	beq	r9,r4,4033bb0 <__subdf3+0x638>
 4033a18:	0085c83a 	sub	r2,zero,r2
 4033a1c:	18c02034 	orhi	r3,r3,128
 4033a20:	01000e04 	movi	r4,56
 4033a24:	20807e16 	blt	r4,r2,4033c20 <__subdf3+0x6a8>
 4033a28:	010007c4 	movi	r4,31
 4033a2c:	2080e716 	blt	r4,r2,4033dcc <__subdf3+0x854>
 4033a30:	01000804 	movi	r4,32
 4033a34:	2089c83a 	sub	r4,r4,r2
 4033a38:	1914983a 	sll	r10,r3,r4
 4033a3c:	8890d83a 	srl	r8,r17,r2
 4033a40:	8908983a 	sll	r4,r17,r4
 4033a44:	1884d83a 	srl	r2,r3,r2
 4033a48:	5222b03a 	or	r17,r10,r8
 4033a4c:	2006c03a 	cmpne	r3,r4,zero
 4033a50:	88e2b03a 	or	r17,r17,r3
 4033a54:	3463c83a 	sub	r17,r6,r17
 4033a58:	2885c83a 	sub	r2,r5,r2
 4033a5c:	344d803a 	cmpltu	r6,r6,r17
 4033a60:	1187c83a 	sub	r3,r2,r6
 4033a64:	4821883a 	mov	r16,r9
 4033a68:	3825883a 	mov	r18,r7
 4033a6c:	003f2306 	br	40336fc <__flash_rwdata_start+0xffffd1a4>
 4033a70:	24d0b03a 	or	r8,r4,r19
 4033a74:	40001b1e 	bne	r8,zero,4033ae4 <__subdf3+0x56c>
 4033a78:	0005883a 	mov	r2,zero
 4033a7c:	0009883a 	mov	r4,zero
 4033a80:	0021883a 	mov	r16,zero
 4033a84:	003f4906 	br	40337ac <__flash_rwdata_start+0xffffd254>
 4033a88:	010007c4 	movi	r4,31
 4033a8c:	20803a16 	blt	r4,r2,4033b78 <__subdf3+0x600>
 4033a90:	01000804 	movi	r4,32
 4033a94:	2089c83a 	sub	r4,r4,r2
 4033a98:	2912983a 	sll	r9,r5,r4
 4033a9c:	3090d83a 	srl	r8,r6,r2
 4033aa0:	3108983a 	sll	r4,r6,r4
 4033aa4:	2884d83a 	srl	r2,r5,r2
 4033aa8:	4a12b03a 	or	r9,r9,r8
 4033aac:	2008c03a 	cmpne	r4,r4,zero
 4033ab0:	4912b03a 	or	r9,r9,r4
 4033ab4:	003f4e06 	br	40337f0 <__flash_rwdata_start+0xffffd298>
 4033ab8:	1c48b03a 	or	r4,r3,r17
 4033abc:	20003c26 	beq	r4,zero,4033bb0 <__subdf3+0x638>
 4033ac0:	0084303a 	nor	r2,zero,r2
 4033ac4:	1000381e 	bne	r2,zero,4033ba8 <__subdf3+0x630>
 4033ac8:	3463c83a 	sub	r17,r6,r17
 4033acc:	28c5c83a 	sub	r2,r5,r3
 4033ad0:	344d803a 	cmpltu	r6,r6,r17
 4033ad4:	1187c83a 	sub	r3,r2,r6
 4033ad8:	4821883a 	mov	r16,r9
 4033adc:	3825883a 	mov	r18,r7
 4033ae0:	003f0606 	br	40336fc <__flash_rwdata_start+0xffffd1a4>
 4033ae4:	2023883a 	mov	r17,r4
 4033ae8:	003f0906 	br	4033710 <__flash_rwdata_start+0xffffd1b8>
 4033aec:	0101ffc4 	movi	r4,2047
 4033af0:	813f3a1e 	bne	r16,r4,40337dc <__flash_rwdata_start+0xffffd284>
 4033af4:	003ec406 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033af8:	0005883a 	mov	r2,zero
 4033afc:	003fb106 	br	40339c4 <__flash_rwdata_start+0xffffd46c>
 4033b00:	0005883a 	mov	r2,zero
 4033b04:	003fbc06 	br	40339f8 <__flash_rwdata_start+0xffffd4a0>
 4033b08:	1c44b03a 	or	r2,r3,r17
 4033b0c:	80008e1e 	bne	r16,zero,4033d48 <__subdf3+0x7d0>
 4033b10:	1000c826 	beq	r2,zero,4033e34 <__subdf3+0x8bc>
 4033b14:	2984b03a 	or	r2,r5,r6
 4033b18:	103ebb26 	beq	r2,zero,4033608 <__flash_rwdata_start+0xffffd0b0>
 4033b1c:	8989883a 	add	r4,r17,r6
 4033b20:	1945883a 	add	r2,r3,r5
 4033b24:	2447803a 	cmpltu	r3,r4,r17
 4033b28:	1887883a 	add	r3,r3,r2
 4033b2c:	1880202c 	andhi	r2,r3,128
 4033b30:	2023883a 	mov	r17,r4
 4033b34:	103f1626 	beq	r2,zero,4033790 <__flash_rwdata_start+0xffffd238>
 4033b38:	00bfe034 	movhi	r2,65408
 4033b3c:	10bfffc4 	addi	r2,r2,-1
 4033b40:	5021883a 	mov	r16,r10
 4033b44:	1886703a 	and	r3,r3,r2
 4033b48:	003eaf06 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033b4c:	3825883a 	mov	r18,r7
 4033b50:	003f0f06 	br	4033790 <__flash_rwdata_start+0xffffd238>
 4033b54:	1c44b03a 	or	r2,r3,r17
 4033b58:	8000251e 	bne	r16,zero,4033bf0 <__subdf3+0x678>
 4033b5c:	1000661e 	bne	r2,zero,4033cf8 <__subdf3+0x780>
 4033b60:	2990b03a 	or	r8,r5,r6
 4033b64:	40009626 	beq	r8,zero,4033dc0 <__subdf3+0x848>
 4033b68:	2807883a 	mov	r3,r5
 4033b6c:	3023883a 	mov	r17,r6
 4033b70:	3825883a 	mov	r18,r7
 4033b74:	003ea406 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033b78:	127ff804 	addi	r9,r2,-32
 4033b7c:	01000804 	movi	r4,32
 4033b80:	2a52d83a 	srl	r9,r5,r9
 4033b84:	11008c26 	beq	r2,r4,4033db8 <__subdf3+0x840>
 4033b88:	01001004 	movi	r4,64
 4033b8c:	2085c83a 	sub	r2,r4,r2
 4033b90:	2884983a 	sll	r2,r5,r2
 4033b94:	118cb03a 	or	r6,r2,r6
 4033b98:	300cc03a 	cmpne	r6,r6,zero
 4033b9c:	4992b03a 	or	r9,r9,r6
 4033ba0:	0005883a 	mov	r2,zero
 4033ba4:	003f1206 	br	40337f0 <__flash_rwdata_start+0xffffd298>
 4033ba8:	0101ffc4 	movi	r4,2047
 4033bac:	493f9c1e 	bne	r9,r4,4033a20 <__flash_rwdata_start+0xffffd4c8>
 4033bb0:	2807883a 	mov	r3,r5
 4033bb4:	3023883a 	mov	r17,r6
 4033bb8:	4821883a 	mov	r16,r9
 4033bbc:	3825883a 	mov	r18,r7
 4033bc0:	003e9106 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033bc4:	80001f1e 	bne	r16,zero,4033c44 <__subdf3+0x6cc>
 4033bc8:	1c48b03a 	or	r4,r3,r17
 4033bcc:	20005a26 	beq	r4,zero,4033d38 <__subdf3+0x7c0>
 4033bd0:	0084303a 	nor	r2,zero,r2
 4033bd4:	1000561e 	bne	r2,zero,4033d30 <__subdf3+0x7b8>
 4033bd8:	89a3883a 	add	r17,r17,r6
 4033bdc:	1945883a 	add	r2,r3,r5
 4033be0:	898d803a 	cmpltu	r6,r17,r6
 4033be4:	3087883a 	add	r3,r6,r2
 4033be8:	4821883a 	mov	r16,r9
 4033bec:	003f0506 	br	4033804 <__flash_rwdata_start+0xffffd2ac>
 4033bf0:	10002b1e 	bne	r2,zero,4033ca0 <__subdf3+0x728>
 4033bf4:	2984b03a 	or	r2,r5,r6
 4033bf8:	10008026 	beq	r2,zero,4033dfc <__subdf3+0x884>
 4033bfc:	2807883a 	mov	r3,r5
 4033c00:	3023883a 	mov	r17,r6
 4033c04:	3825883a 	mov	r18,r7
 4033c08:	0401ffc4 	movi	r16,2047
 4033c0c:	003e7e06 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033c10:	3809883a 	mov	r4,r7
 4033c14:	0011883a 	mov	r8,zero
 4033c18:	0005883a 	mov	r2,zero
 4033c1c:	003ee306 	br	40337ac <__flash_rwdata_start+0xffffd254>
 4033c20:	1c62b03a 	or	r17,r3,r17
 4033c24:	8822c03a 	cmpne	r17,r17,zero
 4033c28:	0005883a 	mov	r2,zero
 4033c2c:	003f8906 	br	4033a54 <__flash_rwdata_start+0xffffd4fc>
 4033c30:	3809883a 	mov	r4,r7
 4033c34:	4821883a 	mov	r16,r9
 4033c38:	0011883a 	mov	r8,zero
 4033c3c:	0005883a 	mov	r2,zero
 4033c40:	003eda06 	br	40337ac <__flash_rwdata_start+0xffffd254>
 4033c44:	0101ffc4 	movi	r4,2047
 4033c48:	49003b26 	beq	r9,r4,4033d38 <__subdf3+0x7c0>
 4033c4c:	0085c83a 	sub	r2,zero,r2
 4033c50:	18c02034 	orhi	r3,r3,128
 4033c54:	01000e04 	movi	r4,56
 4033c58:	20806e16 	blt	r4,r2,4033e14 <__subdf3+0x89c>
 4033c5c:	010007c4 	movi	r4,31
 4033c60:	20807716 	blt	r4,r2,4033e40 <__subdf3+0x8c8>
 4033c64:	01000804 	movi	r4,32
 4033c68:	2089c83a 	sub	r4,r4,r2
 4033c6c:	1914983a 	sll	r10,r3,r4
 4033c70:	8890d83a 	srl	r8,r17,r2
 4033c74:	8908983a 	sll	r4,r17,r4
 4033c78:	1884d83a 	srl	r2,r3,r2
 4033c7c:	5222b03a 	or	r17,r10,r8
 4033c80:	2006c03a 	cmpne	r3,r4,zero
 4033c84:	88e2b03a 	or	r17,r17,r3
 4033c88:	89a3883a 	add	r17,r17,r6
 4033c8c:	1145883a 	add	r2,r2,r5
 4033c90:	898d803a 	cmpltu	r6,r17,r6
 4033c94:	3087883a 	add	r3,r6,r2
 4033c98:	4821883a 	mov	r16,r9
 4033c9c:	003ed906 	br	4033804 <__flash_rwdata_start+0xffffd2ac>
 4033ca0:	2984b03a 	or	r2,r5,r6
 4033ca4:	10004226 	beq	r2,zero,4033db0 <__subdf3+0x838>
 4033ca8:	1808d0fa 	srli	r4,r3,3
 4033cac:	8822d0fa 	srli	r17,r17,3
 4033cb0:	1806977a 	slli	r3,r3,29
 4033cb4:	2080022c 	andhi	r2,r4,8
 4033cb8:	1c62b03a 	or	r17,r3,r17
 4033cbc:	10000826 	beq	r2,zero,4033ce0 <__subdf3+0x768>
 4033cc0:	2812d0fa 	srli	r9,r5,3
 4033cc4:	4880022c 	andhi	r2,r9,8
 4033cc8:	1000051e 	bne	r2,zero,4033ce0 <__subdf3+0x768>
 4033ccc:	300cd0fa 	srli	r6,r6,3
 4033cd0:	2804977a 	slli	r2,r5,29
 4033cd4:	4809883a 	mov	r4,r9
 4033cd8:	3825883a 	mov	r18,r7
 4033cdc:	11a2b03a 	or	r17,r2,r6
 4033ce0:	8806d77a 	srli	r3,r17,29
 4033ce4:	200890fa 	slli	r4,r4,3
 4033ce8:	882290fa 	slli	r17,r17,3
 4033cec:	0401ffc4 	movi	r16,2047
 4033cf0:	1906b03a 	or	r3,r3,r4
 4033cf4:	003e4406 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033cf8:	2984b03a 	or	r2,r5,r6
 4033cfc:	103e4226 	beq	r2,zero,4033608 <__flash_rwdata_start+0xffffd0b0>
 4033d00:	8989c83a 	sub	r4,r17,r6
 4033d04:	8911803a 	cmpltu	r8,r17,r4
 4033d08:	1945c83a 	sub	r2,r3,r5
 4033d0c:	1205c83a 	sub	r2,r2,r8
 4033d10:	1200202c 	andhi	r8,r2,128
 4033d14:	403e9a26 	beq	r8,zero,4033780 <__flash_rwdata_start+0xffffd228>
 4033d18:	3463c83a 	sub	r17,r6,r17
 4033d1c:	28c5c83a 	sub	r2,r5,r3
 4033d20:	344d803a 	cmpltu	r6,r6,r17
 4033d24:	1187c83a 	sub	r3,r2,r6
 4033d28:	3825883a 	mov	r18,r7
 4033d2c:	003e3606 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033d30:	0101ffc4 	movi	r4,2047
 4033d34:	493fc71e 	bne	r9,r4,4033c54 <__flash_rwdata_start+0xffffd6fc>
 4033d38:	2807883a 	mov	r3,r5
 4033d3c:	3023883a 	mov	r17,r6
 4033d40:	4821883a 	mov	r16,r9
 4033d44:	003e3006 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033d48:	10003626 	beq	r2,zero,4033e24 <__subdf3+0x8ac>
 4033d4c:	2984b03a 	or	r2,r5,r6
 4033d50:	10001726 	beq	r2,zero,4033db0 <__subdf3+0x838>
 4033d54:	1808d0fa 	srli	r4,r3,3
 4033d58:	8822d0fa 	srli	r17,r17,3
 4033d5c:	1806977a 	slli	r3,r3,29
 4033d60:	2080022c 	andhi	r2,r4,8
 4033d64:	1c62b03a 	or	r17,r3,r17
 4033d68:	10000726 	beq	r2,zero,4033d88 <__subdf3+0x810>
 4033d6c:	2812d0fa 	srli	r9,r5,3
 4033d70:	4880022c 	andhi	r2,r9,8
 4033d74:	1000041e 	bne	r2,zero,4033d88 <__subdf3+0x810>
 4033d78:	300cd0fa 	srli	r6,r6,3
 4033d7c:	2804977a 	slli	r2,r5,29
 4033d80:	4809883a 	mov	r4,r9
 4033d84:	11a2b03a 	or	r17,r2,r6
 4033d88:	8806d77a 	srli	r3,r17,29
 4033d8c:	200890fa 	slli	r4,r4,3
 4033d90:	882290fa 	slli	r17,r17,3
 4033d94:	3825883a 	mov	r18,r7
 4033d98:	1906b03a 	or	r3,r3,r4
 4033d9c:	0401ffc4 	movi	r16,2047
 4033da0:	003e1906 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033da4:	000b883a 	mov	r5,zero
 4033da8:	0005883a 	mov	r2,zero
 4033dac:	003e2e06 	br	4033668 <__flash_rwdata_start+0xffffd110>
 4033db0:	0401ffc4 	movi	r16,2047
 4033db4:	003e1406 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033db8:	0005883a 	mov	r2,zero
 4033dbc:	003f7506 	br	4033b94 <__flash_rwdata_start+0xffffd63c>
 4033dc0:	0005883a 	mov	r2,zero
 4033dc4:	0009883a 	mov	r4,zero
 4033dc8:	003e7806 	br	40337ac <__flash_rwdata_start+0xffffd254>
 4033dcc:	123ff804 	addi	r8,r2,-32
 4033dd0:	01000804 	movi	r4,32
 4033dd4:	1a10d83a 	srl	r8,r3,r8
 4033dd8:	11002526 	beq	r2,r4,4033e70 <__subdf3+0x8f8>
 4033ddc:	01001004 	movi	r4,64
 4033de0:	2085c83a 	sub	r2,r4,r2
 4033de4:	1884983a 	sll	r2,r3,r2
 4033de8:	1444b03a 	or	r2,r2,r17
 4033dec:	1004c03a 	cmpne	r2,r2,zero
 4033df0:	40a2b03a 	or	r17,r8,r2
 4033df4:	0005883a 	mov	r2,zero
 4033df8:	003f1606 	br	4033a54 <__flash_rwdata_start+0xffffd4fc>
 4033dfc:	02000434 	movhi	r8,16
 4033e00:	0009883a 	mov	r4,zero
 4033e04:	423fffc4 	addi	r8,r8,-1
 4033e08:	00bfffc4 	movi	r2,-1
 4033e0c:	0401ffc4 	movi	r16,2047
 4033e10:	003e6606 	br	40337ac <__flash_rwdata_start+0xffffd254>
 4033e14:	1c62b03a 	or	r17,r3,r17
 4033e18:	8822c03a 	cmpne	r17,r17,zero
 4033e1c:	0005883a 	mov	r2,zero
 4033e20:	003f9906 	br	4033c88 <__flash_rwdata_start+0xffffd730>
 4033e24:	2807883a 	mov	r3,r5
 4033e28:	3023883a 	mov	r17,r6
 4033e2c:	0401ffc4 	movi	r16,2047
 4033e30:	003df506 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033e34:	2807883a 	mov	r3,r5
 4033e38:	3023883a 	mov	r17,r6
 4033e3c:	003df206 	br	4033608 <__flash_rwdata_start+0xffffd0b0>
 4033e40:	123ff804 	addi	r8,r2,-32
 4033e44:	01000804 	movi	r4,32
 4033e48:	1a10d83a 	srl	r8,r3,r8
 4033e4c:	11000a26 	beq	r2,r4,4033e78 <__subdf3+0x900>
 4033e50:	01001004 	movi	r4,64
 4033e54:	2085c83a 	sub	r2,r4,r2
 4033e58:	1884983a 	sll	r2,r3,r2
 4033e5c:	1444b03a 	or	r2,r2,r17
 4033e60:	1004c03a 	cmpne	r2,r2,zero
 4033e64:	40a2b03a 	or	r17,r8,r2
 4033e68:	0005883a 	mov	r2,zero
 4033e6c:	003f8606 	br	4033c88 <__flash_rwdata_start+0xffffd730>
 4033e70:	0005883a 	mov	r2,zero
 4033e74:	003fdc06 	br	4033de8 <__flash_rwdata_start+0xffffd890>
 4033e78:	0005883a 	mov	r2,zero
 4033e7c:	003ff706 	br	4033e5c <__flash_rwdata_start+0xffffd904>

04033e80 <__fixdfsi>:
 4033e80:	f811883a 	mov	r8,ra
 4033e84:	40346e80 	call	40346e8 <_mcount>
 4033e88:	403f883a 	mov	ra,r8
 4033e8c:	280cd53a 	srli	r6,r5,20
 4033e90:	00c00434 	movhi	r3,16
 4033e94:	18ffffc4 	addi	r3,r3,-1
 4033e98:	3181ffcc 	andi	r6,r6,2047
 4033e9c:	01c0ff84 	movi	r7,1022
 4033ea0:	28c6703a 	and	r3,r5,r3
 4033ea4:	3980130e 	bge	r7,r6,4033ef4 <__fixdfsi+0x74>
 4033ea8:	00810744 	movi	r2,1053
 4033eac:	280ad7fa 	srli	r5,r5,31
 4033eb0:	11800c16 	blt	r2,r6,4033ee4 <__fixdfsi+0x64>
 4033eb4:	00810cc4 	movi	r2,1075
 4033eb8:	1185c83a 	sub	r2,r2,r6
 4033ebc:	01c007c4 	movi	r7,31
 4033ec0:	18c00434 	orhi	r3,r3,16
 4033ec4:	38800d16 	blt	r7,r2,4033efc <__fixdfsi+0x7c>
 4033ec8:	31befb44 	addi	r6,r6,-1043
 4033ecc:	2084d83a 	srl	r2,r4,r2
 4033ed0:	1986983a 	sll	r3,r3,r6
 4033ed4:	1884b03a 	or	r2,r3,r2
 4033ed8:	28000526 	beq	r5,zero,4033ef0 <__fixdfsi+0x70>
 4033edc:	0085c83a 	sub	r2,zero,r2
 4033ee0:	f800283a 	ret
 4033ee4:	00a00034 	movhi	r2,32768
 4033ee8:	10bfffc4 	addi	r2,r2,-1
 4033eec:	2885883a 	add	r2,r5,r2
 4033ef0:	f800283a 	ret
 4033ef4:	0005883a 	mov	r2,zero
 4033ef8:	f800283a 	ret
 4033efc:	008104c4 	movi	r2,1043
 4033f00:	1185c83a 	sub	r2,r2,r6
 4033f04:	1884d83a 	srl	r2,r3,r2
 4033f08:	003ff306 	br	4033ed8 <__flash_rwdata_start+0xffffd980>

04033f0c <__floatunsidf>:
 4033f0c:	f811883a 	mov	r8,ra
 4033f10:	40346e80 	call	40346e8 <_mcount>
 4033f14:	403f883a 	mov	ra,r8
 4033f18:	defffe04 	addi	sp,sp,-8
 4033f1c:	dfc00115 	stw	ra,4(sp)
 4033f20:	dc000015 	stw	r16,0(sp)
 4033f24:	2021883a 	mov	r16,r4
 4033f28:	20002226 	beq	r4,zero,4033fb4 <__floatunsidf+0xa8>
 4033f2c:	402768c0 	call	402768c <__clzsi2>
 4033f30:	01010784 	movi	r4,1054
 4033f34:	2089c83a 	sub	r4,r4,r2
 4033f38:	01810cc4 	movi	r6,1075
 4033f3c:	310dc83a 	sub	r6,r6,r4
 4033f40:	00c007c4 	movi	r3,31
 4033f44:	1980120e 	bge	r3,r6,4033f90 <__floatunsidf+0x84>
 4033f48:	00c104c4 	movi	r3,1043
 4033f4c:	1907c83a 	sub	r3,r3,r4
 4033f50:	80ca983a 	sll	r5,r16,r3
 4033f54:	00800434 	movhi	r2,16
 4033f58:	10bfffc4 	addi	r2,r2,-1
 4033f5c:	2101ffcc 	andi	r4,r4,2047
 4033f60:	0021883a 	mov	r16,zero
 4033f64:	288a703a 	and	r5,r5,r2
 4033f68:	2008953a 	slli	r4,r4,20
 4033f6c:	00c00434 	movhi	r3,16
 4033f70:	18ffffc4 	addi	r3,r3,-1
 4033f74:	28c6703a 	and	r3,r5,r3
 4033f78:	8005883a 	mov	r2,r16
 4033f7c:	1906b03a 	or	r3,r3,r4
 4033f80:	dfc00117 	ldw	ra,4(sp)
 4033f84:	dc000017 	ldw	r16,0(sp)
 4033f88:	dec00204 	addi	sp,sp,8
 4033f8c:	f800283a 	ret
 4033f90:	00c002c4 	movi	r3,11
 4033f94:	188bc83a 	sub	r5,r3,r2
 4033f98:	814ad83a 	srl	r5,r16,r5
 4033f9c:	00c00434 	movhi	r3,16
 4033fa0:	18ffffc4 	addi	r3,r3,-1
 4033fa4:	81a0983a 	sll	r16,r16,r6
 4033fa8:	2101ffcc 	andi	r4,r4,2047
 4033fac:	28ca703a 	and	r5,r5,r3
 4033fb0:	003fed06 	br	4033f68 <__flash_rwdata_start+0xffffda10>
 4033fb4:	0009883a 	mov	r4,zero
 4033fb8:	000b883a 	mov	r5,zero
 4033fbc:	003fea06 	br	4033f68 <__flash_rwdata_start+0xffffda10>

04033fc0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4033fc0:	f811883a 	mov	r8,ra
 4033fc4:	40346e80 	call	40346e8 <_mcount>
 4033fc8:	403f883a 	mov	ra,r8
 4033fcc:	defffd04 	addi	sp,sp,-12
 4033fd0:	dfc00215 	stw	ra,8(sp)
 4033fd4:	dc400115 	stw	r17,4(sp)
 4033fd8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4033fdc:	20001f16 	blt	r4,zero,403405c <close+0x9c>
 4033fe0:	20c00324 	muli	r3,r4,12
 4033fe4:	00800034 	movhi	r2,0
 4033fe8:	1083cb04 	addi	r2,r2,3884
 4033fec:	1885883a 	add	r2,r3,r2
 4033ff0:	2021883a 	mov	r16,r4

  if (fd)
 4033ff4:	10001926 	beq	r2,zero,403405c <close+0x9c>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4033ff8:	10c00017 	ldw	r3,0(r2)
 4033ffc:	18c00417 	ldw	r3,16(r3)
 4034000:	18000c26 	beq	r3,zero,4034034 <close+0x74>
 4034004:	1009883a 	mov	r4,r2
 4034008:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 403400c:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4034010:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4034014:	40348580 	call	4034858 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4034018:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
 403401c:	88000816 	blt	r17,zero,4034040 <close+0x80>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
 4034020:	dfc00217 	ldw	ra,8(sp)
 4034024:	dc400117 	ldw	r17,4(sp)
 4034028:	dc000017 	ldw	r16,0(sp)
 403402c:	dec00304 	addi	sp,sp,12
 4034030:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4034034:	40348580 	call	4034858 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
 4034038:	0005883a 	mov	r2,zero
 403403c:	003ff806 	br	4034020 <__flash_rwdata_start+0xffffdac8>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
 4034040:	d0a01b17 	ldw	r2,-32660(gp)
 4034044:	10000c26 	beq	r2,zero,4034078 <close+0xb8>
 4034048:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
 403404c:	0463c83a 	sub	r17,zero,r17
 4034050:	14400015 	stw	r17,0(r2)
      return -1;
 4034054:	00bfffc4 	movi	r2,-1
 4034058:	003ff106 	br	4034020 <__flash_rwdata_start+0xffffdac8>
 403405c:	d0a01b17 	ldw	r2,-32660(gp)
 4034060:	10000726 	beq	r2,zero,4034080 <close+0xc0>
 4034064:	103ee83a 	callr	r2
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4034068:	00c01444 	movi	r3,81
 403406c:	10c00015 	stw	r3,0(r2)
    return -1;
 4034070:	00bfffc4 	movi	r2,-1
 4034074:	003fea06 	br	4034020 <__flash_rwdata_start+0xffffdac8>
 4034078:	d0a02a04 	addi	r2,gp,-32600
 403407c:	003ff306 	br	403404c <__flash_rwdata_start+0xffffdaf4>
 4034080:	d0a02a04 	addi	r2,gp,-32600
 4034084:	003ff806 	br	4034068 <__flash_rwdata_start+0xffffdb10>

04034088 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4034088:	f811883a 	mov	r8,ra
 403408c:	40346e80 	call	40346e8 <_mcount>
 4034090:	403f883a 	mov	ra,r8
  return len;
}
 4034094:	3005883a 	mov	r2,r6
 4034098:	f800283a 	ret

0403409c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 403409c:	f811883a 	mov	r8,ra
 40340a0:	40346e80 	call	40346e8 <_mcount>
 40340a4:	403f883a 	mov	ra,r8
 40340a8:	2005883a 	mov	r2,r4

  register int r3 asm ("r3") = (1 << 2);

#ifdef ALT_PROVIDE_GMON
  extern unsigned int alt_gmon_data[];
  register int r4 asm ("r4") = (int)alt_gmon_data;
 40340ac:	01000034 	movhi	r4,0
 40340b0:	21043504 	addi	r4,r4,4308
  r3 |= (1 << 4);
 40340b4:	00c00504 	movi	r3,20
#define ALT_GMON_DATA ,"r"(r4)
#else
#define ALT_GMON_DATA
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
 40340b8:	10000726 	beq	r2,zero,40340d8 <_exit+0x3c>
    ALT_SIM_FAIL();
 40340bc:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }

  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */
 40340c0:	014003f4 	movhi	r5,15
 40340c4:	29509004 	addi	r5,r5,16960
 40340c8:	297fffc4 	addi	r5,r5,-1
 40340cc:	017ffe16 	blt	zero,r5,40340c8 <__flash_rwdata_start+0xffffdb70>

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );
 40340d0:	003da0ba 	break	2
 40340d4:	003fff06 	br	40340d4 <__flash_rwdata_start+0xffffdb7c>
#endif /* ALT_PROVIDE_GMON */

  if (r2) {
    ALT_SIM_FAIL();
  } else {
    ALT_SIM_PASS();
 40340d8:	002af0b0 	cmpltui	zero,zero,43970
 40340dc:	003ff806 	br	40340c0 <__flash_rwdata_start+0xffffdb68>

040340e0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 40340e0:	f811883a 	mov	r8,ra
 40340e4:	40346e80 	call	40346e8 <_mcount>
 40340e8:	403f883a 	mov	ra,r8
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40340ec:	20000d16 	blt	r4,zero,4034124 <fstat+0x44>
 40340f0:	21000324 	muli	r4,r4,12
 40340f4:	00800034 	movhi	r2,0
 40340f8:	1083cb04 	addi	r2,r2,3884
 40340fc:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4034100:	20000826 	beq	r4,zero,4034124 <fstat+0x44>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 4034104:	20800017 	ldw	r2,0(r4)
 4034108:	10800817 	ldw	r2,32(r2)
 403410c:	10000126 	beq	r2,zero,4034114 <fstat+0x34>
    {
      return fd->dev->fstat(fd, st);
 4034110:	1000683a 	jmp	r2
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 4034114:	00880004 	movi	r2,8192
 4034118:	28800115 	stw	r2,4(r5)
      return 0;
 403411c:	0005883a 	mov	r2,zero
 4034120:	f800283a 	ret
 4034124:	d0a01b17 	ldw	r2,-32660(gp)
 4034128:	10000926 	beq	r2,zero,4034150 <fstat+0x70>
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 403412c:	deffff04 	addi	sp,sp,-4
 4034130:	dfc00015 	stw	ra,0(sp)
 4034134:	103ee83a 	callr	r2
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4034138:	00c01444 	movi	r3,81
 403413c:	10c00015 	stw	r3,0(r2)
    return -1;
 4034140:	00bfffc4 	movi	r2,-1
  }
}
 4034144:	dfc00017 	ldw	ra,0(sp)
 4034148:	dec00104 	addi	sp,sp,4
 403414c:	f800283a 	ret
 4034150:	d0a02a04 	addi	r2,gp,-32600
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4034154:	00c01444 	movi	r3,81
 4034158:	10c00015 	stw	r3,0(r2)
    return -1;
 403415c:	00bfffc4 	movi	r2,-1
  }
}
 4034160:	f800283a 	ret

04034164 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 4034164:	f811883a 	mov	r8,ra
 4034168:	40346e80 	call	40346e8 <_mcount>
 403416c:	403f883a 	mov	ra,r8
  return 0;
}
 4034170:	0005883a 	mov	r2,zero
 4034174:	f800283a 	ret

04034178 <nios2_pcsample>:

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
 4034178:	00c100b4 	movhi	r3,1026
 403417c:	18c06904 	addi	r3,r3,420

  /* read the exception return address - this will be
   * inaccurate if there are nested interrupts but we
   * assume that this is rare and the inaccuracy will
   * not be great */
  NIOS2_READ_EA(pc);
 4034180:	e805883a 	mov	r2,ea

  /*
   * If we're within the profilable range then increment the relevant
   * bucket in the histogram
   */
  if (pc >= s_low_pc && pc < s_high_pc && s_pcsamples != 0)
 4034184:	10c00c36 	bltu	r2,r3,40341b8 <nios2_pcsample+0x40>
 4034188:	010100f4 	movhi	r4,1027
 403418c:	21179b04 	addi	r4,r4,24172
 4034190:	1100092e 	bgeu	r2,r4,40341b8 <nios2_pcsample+0x40>
 4034194:	d1203017 	ldw	r4,-32576(gp)
 4034198:	20000726 	beq	r4,zero,40341b8 <nios2_pcsample+0x40>
  {
    bucket = (pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
    s_pcsamples[bucket]++;
 403419c:	10c7c83a 	sub	r3,r2,r3
 40341a0:	1806d17a 	srli	r3,r3,5
 40341a4:	18c7883a 	add	r3,r3,r3
 40341a8:	20c5883a 	add	r2,r4,r3
 40341ac:	10c0000b 	ldhu	r3,0(r2)
 40341b0:	18c00044 	addi	r3,r3,1
 40341b4:	10c0000d 	sth	r3,0(r2)
  }

  /* Sample every tick */
  return 1;
}
 40341b8:	00800044 	movi	r2,1
 40341bc:	f800283a 	ret

040341c0 <__mcount_record>:
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
 40341c0:	d0a01c17 	ldw	r2,-32656(gp)
 *
 * The fast case, where we have already allocated a function arc, has been
 * handled by the assmebler code.
 */
void __mcount_record(void * self_pc, void * from_pc, struct mcount_fn_entry * fn_entry, struct mcount_fn_entry * * fn_head)
{
 40341c4:	defff804 	addi	sp,sp,-32
 40341c8:	dd000415 	stw	r20,16(sp)
 40341cc:	dcc00315 	stw	r19,12(sp)
 40341d0:	dc800215 	stw	r18,8(sp)
 40341d4:	dc000015 	stw	r16,0(sp)
 40341d8:	dfc00715 	stw	ra,28(sp)
 40341dc:	dd800615 	stw	r22,24(sp)
 40341e0:	dd400515 	stw	r21,20(sp)
 40341e4:	dc400115 	stw	r17,4(sp)
 40341e8:	2029883a 	mov	r20,r4
 40341ec:	2825883a 	mov	r18,r5
 40341f0:	3021883a 	mov	r16,r6
 40341f4:	3827883a 	mov	r19,r7
  struct mcount_fn_arc * arc_entry;

  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
 40341f8:	1000221e 	bne	r2,zero,4034284 <__mcount_record+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40341fc:	0023303a 	rdctl	r17,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4034200:	00bfff84 	movi	r2,-2
 4034204:	8884703a 	and	r2,r17,r2
 4034208:	1001703a 	wrctl	status,r2
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
  void * data;

  if (size > mcount_slab_size)
 403420c:	d0e02e17 	ldw	r3,-32584(gp)
   * leave two copies of the same arc on the list (both with count=1), but
   * this is dealt with on the host.
   */
  context = alt_irq_disable_all();

  if (fn_entry == NULL)
 4034210:	80003f26 	beq	r16,zero,4034310 <__mcount_record+0x150>
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
  void * data;

  if (size > mcount_slab_size)
 4034214:	008002c4 	movi	r2,11
 4034218:	10c0162e 	bgeu	r2,r3,4034274 <__mcount_record+0xb4>
 403421c:	d0a02f17 	ldw	r2,-32580(gp)
 4034220:	18fffd04 	addi	r3,r3,-12
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));

  arc_entry->from_pc = from_pc;
  arc_entry->count = 1;

  arc_entry->next = fn_entry->arc_head;
 4034224:	81400217 	ldw	r5,8(r16)
  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));

  arc_entry->from_pc = from_pc;
  arc_entry->count = 1;
 4034228:	01800044 	movi	r6,1
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
  }

  data = mcount_slab_ptr;
  mcount_slab_ptr += size;
 403422c:	11000304 	addi	r4,r2,12

  /* We will need a new list entry - if there was a list entry before
   * then the assembler code would have handled it. */
  arc_entry = (struct mcount_fn_arc *)mcount_allocate(sizeof(struct mcount_fn_arc));

  arc_entry->from_pc = from_pc;
 4034230:	14800115 	stw	r18,4(r2)
  arc_entry->count = 1;
 4034234:	11800215 	stw	r6,8(r2)

  arc_entry->next = fn_entry->arc_head;
 4034238:	11400015 	stw	r5,0(r2)
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
  }

  data = mcount_slab_ptr;
  mcount_slab_ptr += size;
 403423c:	d1202f15 	stw	r4,-32580(gp)
  mcount_slab_size -= size;
 4034240:	d0e02e15 	stw	r3,-32584(gp)

  arc_entry->from_pc = from_pc;
  arc_entry->count = 1;

  arc_entry->next = fn_entry->arc_head;
  fn_entry->arc_head = arc_entry;
 4034244:	80800215 	stw	r2,8(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034248:	8801703a 	wrctl	status,r17

  alt_irq_enable_all(context);
}
 403424c:	dfc00717 	ldw	ra,28(sp)
 4034250:	dd800617 	ldw	r22,24(sp)
 4034254:	dd400517 	ldw	r21,20(sp)
 4034258:	dd000417 	ldw	r20,16(sp)
 403425c:	dcc00317 	ldw	r19,12(sp)
 4034260:	dc800217 	ldw	r18,8(sp)
 4034264:	dc400117 	ldw	r17,4(sp)
 4034268:	dc000017 	ldw	r16,0(sp)
 403426c:	dec00804 	addi	sp,sp,32
 4034270:	f800283a 	ret
{
  void * data;

  if (size > mcount_slab_size)
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
 4034274:	0100ff04 	movi	r4,1020
 4034278:	40348880 	call	4034888 <sbrk>
 403427c:	00c0fc04 	movi	r3,1008
 4034280:	003fe806 	br	4034224 <__flash_rwdata_start+0xffffdccc>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 4034284:	d5603517 	ldw	r21,-32556(gp)
  /* Keep trying to start up the PC sampler until it is running.
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
  {
    pcsample_need_init = 0;
 4034288:	d0201c15 	stw	zero,-32656(gp)
{
  unsigned int pcsamples_size; 

  /* We sample the PC every tick */
  unsigned int prof_rate = alt_ticks_per_second();
  if (prof_rate == 0)
 403428c:	a800031e 	bne	r21,zero,403429c <__mcount_record+0xdc>
    return 1;
 4034290:	00800044 	movi	r2,1
   * (It can't start until the timer is going).
   */
  if (pcsample_need_init)
  {
    pcsample_need_init = 0;
    pcsample_need_init = nios2_pcsample_init();
 4034294:	d0a01c15 	stw	r2,-32656(gp)
 4034298:	003fd806 	br	40341fc <__flash_rwdata_start+0xffffdca4>
  if (prof_rate == 0)
    return 1;

  /* allocate the histogram buffer s_pcsamples */
  pcsamples_size = (s_high_pc - s_low_pc)/PCSAMPLE_BYTES_PER_BUCKET;
  s_pcsamples    = (unsigned short*)sbrk(pcsamples_size * sizeof(unsigned short));
 403429c:	018100b4 	movhi	r6,1026
 40342a0:	008100f4 	movhi	r2,1027
 40342a4:	10979b04 	addi	r2,r2,24172
 40342a8:	31806904 	addi	r6,r6,420
 40342ac:	118dc83a 	sub	r6,r2,r6
 40342b0:	300cd17a 	srli	r6,r6,5
 40342b4:	31a3883a 	add	r17,r6,r6
 40342b8:	8809883a 	mov	r4,r17
 40342bc:	40348880 	call	4034888 <sbrk>
 40342c0:	d0a03015 	stw	r2,-32576(gp)
 40342c4:	102d883a 	mov	r22,r2

  if (s_pcsamples != 0)
 40342c8:	10002526 	beq	r2,zero,4034360 <__mcount_record+0x1a0>
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));
 40342cc:	880d883a 	mov	r6,r17
 40342d0:	000b883a 	mov	r5,zero
 40342d4:	1009883a 	mov	r4,r2
 40342d8:	4027f780 	call	4027f78 <memset>

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 40342dc:	018100f4 	movhi	r6,1027
  if (s_pcsamples != 0)
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
 40342e0:	00800034 	movhi	r2,0
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 40342e4:	01000174 	movhi	r4,5
  if (s_pcsamples != 0)
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
 40342e8:	10843504 	addi	r2,r2,4308
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 40342ec:	31905e04 	addi	r6,r6,16760
 40342f0:	21349e04 	addi	r4,r4,-11656
 40342f4:	000f883a 	mov	r7,zero
 40342f8:	01400044 	movi	r5,1
  if (s_pcsamples != 0)
  {
    /* initialize the buffer to zero */
    memset(s_pcsamples, 0, pcsamples_size * sizeof(unsigned short));

    alt_gmon_data[GMON_DATA_PROFILE_DATA] = (int)s_pcsamples;
 40342fc:	15800215 	stw	r22,8(r2)
    alt_gmon_data[GMON_DATA_PROFILE_RATE] = prof_rate;
 4034300:	15400615 	stw	r21,24(r2)

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
 4034304:	40352640 	call	4035264 <alt_alarm_start>
  }

  return 0;
 4034308:	0005883a 	mov	r2,zero
 403430c:	003fe106 	br	4034294 <__flash_rwdata_start+0xffffdd3c>
 */
static __inline__ void * mcount_allocate(unsigned int size)
{
  void * data;

  if (size > mcount_slab_size)
 4034310:	008002c4 	movi	r2,11
 4034314:	10c00c2e 	bgeu	r2,r3,4034348 <__mcount_record+0x188>
 4034318:	d4202f17 	ldw	r16,-32580(gp)
 403431c:	18fffd04 	addi	r3,r3,-12
 4034320:	180b883a 	mov	r5,r3
  if (fn_entry == NULL)
  {
    /* Add it to the list of functions we must output later. */
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));

    fn_entry->self_pc = self_pc;
 4034324:	85000115 	stw	r20,4(r16)
    fn_entry->arc_head = NULL;
 4034328:	80000215 	stw	zero,8(r16)

    fn_entry->next = *fn_head;
 403432c:	98800017 	ldw	r2,0(r19)
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
  }

  data = mcount_slab_ptr;
  mcount_slab_ptr += size;
 4034330:	81000304 	addi	r4,r16,12
 4034334:	d1202f15 	stw	r4,-32580(gp)
    fn_entry = (struct mcount_fn_entry *)mcount_allocate(sizeof(struct mcount_fn_entry));

    fn_entry->self_pc = self_pc;
    fn_entry->arc_head = NULL;

    fn_entry->next = *fn_head;
 4034338:	80800015 	stw	r2,0(r16)
    mcount_slab_size = MCOUNT_SLAB_INCREMENT;
  }

  data = mcount_slab_ptr;
  mcount_slab_ptr += size;
  mcount_slab_size -= size;
 403433c:	d1602e15 	stw	r5,-32584(gp)

    fn_entry->self_pc = self_pc;
    fn_entry->arc_head = NULL;

    fn_entry->next = *fn_head;
    *fn_head = fn_entry;
 4034340:	9c000015 	stw	r16,0(r19)
 4034344:	003fb306 	br	4034214 <__flash_rwdata_start+0xffffdcbc>
{
  void * data;

  if (size > mcount_slab_size)
  {
    mcount_slab_ptr = sbrk(MCOUNT_SLAB_INCREMENT);
 4034348:	0100ff04 	movi	r4,1020
 403434c:	40348880 	call	4034888 <sbrk>
 4034350:	00c0fc04 	movi	r3,1008
 4034354:	1021883a 	mov	r16,r2
 4034358:	180b883a 	mov	r5,r3
 403435c:	003ff106 	br	4034324 <__flash_rwdata_start+0xffffddcc>

    /* Sample every tick (it's cheap) */
    alt_alarm_start(&s_nios2_pcsample_alarm, 1, nios2_pcsample, 0);
  }

  return 0;
 4034360:	0005883a 	mov	r2,zero
 4034364:	003fcb06 	br	4034294 <__flash_rwdata_start+0xffffdd3c>

04034368 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 4034368:	f811883a 	mov	r8,ra
 403436c:	40346e80 	call	40346e8 <_mcount>
 4034370:	403f883a 	mov	ra,r8
 4034374:	defff004 	addi	sp,sp,-64
 4034378:	dfc00f15 	stw	ra,60(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 403437c:	20001316 	blt	r4,zero,40343cc <isatty+0x64>
 4034380:	20800324 	muli	r2,r4,12
 4034384:	00c00034 	movhi	r3,0
 4034388:	18c3cb04 	addi	r3,r3,3884
 403438c:	10c5883a 	add	r2,r2,r3
  
  if (fd)
 4034390:	10000e26 	beq	r2,zero,40343cc <isatty+0x64>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 4034394:	10800017 	ldw	r2,0(r2)
 4034398:	10800817 	ldw	r2,32(r2)
 403439c:	10000726 	beq	r2,zero,40343bc <isatty+0x54>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 40343a0:	d80b883a 	mov	r5,sp
 40343a4:	40340e00 	call	40340e0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 40343a8:	d8800117 	ldw	r2,4(sp)
 40343ac:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 40343b0:	dfc00f17 	ldw	ra,60(sp)
 40343b4:	dec01004 	addi	sp,sp,64
 40343b8:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
 40343bc:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
 40343c0:	dfc00f17 	ldw	ra,60(sp)
 40343c4:	dec01004 	addi	sp,sp,64
 40343c8:	f800283a 	ret
 40343cc:	d0a01b17 	ldw	r2,-32660(gp)
 40343d0:	10000726 	beq	r2,zero,40343f0 <isatty+0x88>
 40343d4:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 40343d8:	00c01444 	movi	r3,81
 40343dc:	10c00015 	stw	r3,0(r2)
    return 0;
 40343e0:	0005883a 	mov	r2,zero
  }
}
 40343e4:	dfc00f17 	ldw	ra,60(sp)
 40343e8:	dec01004 	addi	sp,sp,64
 40343ec:	f800283a 	ret
 40343f0:	d0a02a04 	addi	r2,gp,-32600
 40343f4:	003ff806 	br	40343d8 <__flash_rwdata_start+0xffffde80>

040343f8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 40343f8:	f811883a 	mov	r8,ra
 40343fc:	40346e80 	call	40346e8 <_mcount>
 4034400:	403f883a 	mov	ra,r8
 4034404:	defffe04 	addi	sp,sp,-8
 4034408:	dfc00115 	stw	ra,4(sp)
 403440c:	dc000015 	stw	r16,0(sp)
  int status = 0;

  if (pid <= 0)
 4034410:	0100050e 	bge	zero,r4,4034428 <kill+0x30>

  else if (pid > 0)
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 4034414:	040000c4 	movi	r16,3
 4034418:	d0a01b17 	ldw	r2,-32660(gp)
 403441c:	10002a26 	beq	r2,zero,40344c8 <kill+0xd0>
 4034420:	103ee83a 	callr	r2
 4034424:	00002906 	br	40344cc <kill+0xd4>
{
  int status = 0;

  if (pid <= 0)
  {
    switch (sig)
 4034428:	008007c4 	movi	r2,31
 403442c:	11403136 	bltu	r2,r5,40344f4 <kill+0xfc>
 4034430:	280a90ba 	slli	r5,r5,2
 4034434:	008100f4 	movhi	r2,1027
 4034438:	10911204 	addi	r2,r2,17480
 403443c:	288b883a 	add	r5,r5,r2
 4034440:	28800017 	ldw	r2,0(r5)
 4034444:	1000683a 	jmp	r2
 4034448:	040344d8 	cmpnei	r16,zero,3347
 403444c:	040344f4 	movhi	r16,3347
 4034450:	040344f4 	movhi	r16,3347
 4034454:	040344ec 	andhi	r16,zero,3347
 4034458:	040344ec 	andhi	r16,zero,3347
 403445c:	040344ec 	andhi	r16,zero,3347
 4034460:	040344ec 	andhi	r16,zero,3347
 4034464:	040344f4 	movhi	r16,3347
 4034468:	040344ec 	andhi	r16,zero,3347
 403446c:	040344ec 	andhi	r16,zero,3347
 4034470:	040344ec 	andhi	r16,zero,3347
 4034474:	040344ec 	andhi	r16,zero,3347
 4034478:	040344ec 	andhi	r16,zero,3347
 403447c:	040344ec 	andhi	r16,zero,3347
 4034480:	040344ec 	andhi	r16,zero,3347
 4034484:	040344ec 	andhi	r16,zero,3347
 4034488:	040344d8 	cmpnei	r16,zero,3347
 403448c:	040344f4 	movhi	r16,3347
 4034490:	040344f4 	movhi	r16,3347
 4034494:	040344f4 	movhi	r16,3347
 4034498:	040344d8 	cmpnei	r16,zero,3347
 403449c:	040344f4 	movhi	r16,3347
 40344a0:	040344f4 	movhi	r16,3347
 40344a4:	040344ec 	andhi	r16,zero,3347
 40344a8:	040344ec 	andhi	r16,zero,3347
 40344ac:	040344ec 	andhi	r16,zero,3347
 40344b0:	040344ec 	andhi	r16,zero,3347
 40344b4:	040344ec 	andhi	r16,zero,3347
 40344b8:	040344f4 	movhi	r16,3347
 40344bc:	040344f4 	movhi	r16,3347
 40344c0:	040344ec 	andhi	r16,zero,3347
 40344c4:	040344ec 	andhi	r16,zero,3347
 40344c8:	d0a02a04 	addi	r2,gp,-32600
    status = ESRCH;
  }

  if (status)
  {
    ALT_ERRNO = status;
 40344cc:	14000015 	stw	r16,0(r2)
    return -1;
 40344d0:	00bfffc4 	movi	r2,-1
 40344d4:	00000106 	br	40344dc <kill+0xe4>
  }

  return 0;
 40344d8:	0005883a 	mov	r2,zero
}
 40344dc:	dfc00117 	ldw	ra,4(sp)
 40344e0:	dc000017 	ldw	r16,0(sp)
 40344e4:	dec00204 	addi	sp,sp,8
 40344e8:	f800283a 	ret
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 40344ec:	0009883a 	mov	r4,zero
 40344f0:	403409c0 	call	403409c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 40344f4:	04000584 	movi	r16,22
 40344f8:	003fc706 	br	4034418 <__flash_rwdata_start+0xffffdec0>

040344fc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 40344fc:	f811883a 	mov	r8,ra
 4034500:	40346e80 	call	40346e8 <_mcount>
 4034504:	403f883a 	mov	ra,r8
 4034508:	deffff04 	addi	sp,sp,-4
 403450c:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4034510:	01000034 	movhi	r4,0
 4034514:	014100f4 	movhi	r5,1027
 4034518:	2101a204 	addi	r4,r4,1672
 403451c:	29595604 	addi	r5,r5,25944
 4034520:	21400a26 	beq	r4,r5,403454c <alt_load+0x50>
  {
    while( to != end )
 4034524:	00800034 	movhi	r2,0
 4034528:	10887704 	addi	r2,r2,8668
 403452c:	20800726 	beq	r4,r2,403454c <alt_load+0x50>
    {
      *to++ = *from++;
 4034530:	21800104 	addi	r6,r4,4
 4034534:	118dc83a 	sub	r6,r2,r6
 4034538:	300cd0ba 	srli	r6,r6,2
 403453c:	31800044 	addi	r6,r6,1
 4034540:	318d883a 	add	r6,r6,r6
 4034544:	318d883a 	add	r6,r6,r6
 4034548:	402daf40 	call	402daf4 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 403454c:	010100b4 	movhi	r4,1026
 4034550:	014100b4 	movhi	r5,1026
 4034554:	21000804 	addi	r4,r4,32
 4034558:	29400804 	addi	r5,r5,32
 403455c:	21400a26 	beq	r4,r5,4034588 <alt_load+0x8c>
  {
    while( to != end )
 4034560:	008100b4 	movhi	r2,1026
 4034564:	10806904 	addi	r2,r2,420
 4034568:	20800726 	beq	r4,r2,4034588 <alt_load+0x8c>
    {
      *to++ = *from++;
 403456c:	21800104 	addi	r6,r4,4
 4034570:	118dc83a 	sub	r6,r2,r6
 4034574:	300cd0ba 	srli	r6,r6,2
 4034578:	31800044 	addi	r6,r6,1
 403457c:	318d883a 	add	r6,r6,r6
 4034580:	318d883a 	add	r6,r6,r6
 4034584:	402daf40 	call	402daf4 <memcpy>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
 4034588:	01000034 	movhi	r4,0
 403458c:	014100f4 	movhi	r5,1027
 4034590:	21000004 	addi	r4,r4,0
 4034594:	2957b404 	addi	r5,r5,24272
 4034598:	21400a26 	beq	r4,r5,40345c4 <alt_load+0xc8>
  {
    while( to != end )
 403459c:	00800034 	movhi	r2,0
 40345a0:	1081a204 	addi	r2,r2,1672
 40345a4:	20800726 	beq	r4,r2,40345c4 <alt_load+0xc8>
    {
      *to++ = *from++;
 40345a8:	21800104 	addi	r6,r4,4
 40345ac:	118dc83a 	sub	r6,r2,r6
 40345b0:	300cd0ba 	srli	r6,r6,2
 40345b4:	31800044 	addi	r6,r6,1
 40345b8:	318d883a 	add	r6,r6,r6
 40345bc:	318d883a 	add	r6,r6,r6
 40345c0:	402daf40 	call	402daf4 <memcpy>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40345c4:	40352f00 	call	40352f0 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
 40345c8:	dfc00017 	ldw	ra,0(sp)
 40345cc:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
 40345d0:	403546c1 	jmpi	403546c <alt_icache_flush_all>

040345d4 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 40345d4:	f811883a 	mov	r8,ra
 40345d8:	40346e80 	call	40346e8 <_mcount>
 40345dc:	403f883a 	mov	ra,r8
 40345e0:	defffe04 	addi	sp,sp,-8
 40345e4:	dfc00115 	stw	ra,4(sp)
 40345e8:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40345ec:	20000e16 	blt	r4,zero,4034628 <lseek+0x54>
 40345f0:	21000324 	muli	r4,r4,12
 40345f4:	00800034 	movhi	r2,0
 40345f8:	1083cb04 	addi	r2,r2,3884
 40345fc:	2089883a 	add	r4,r4,r2
  
  if (fd) 
 4034600:	20000926 	beq	r4,zero,4034628 <lseek+0x54>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 4034604:	20800017 	ldw	r2,0(r4)
 4034608:	10800717 	ldw	r2,28(r2)
 403460c:	10000d26 	beq	r2,zero,4034644 <lseek+0x70>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 4034610:	103ee83a 	callr	r2
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
 4034614:	10000f16 	blt	r2,zero,4034654 <lseek+0x80>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
 4034618:	dfc00117 	ldw	ra,4(sp)
 403461c:	dc000017 	ldw	r16,0(sp)
 4034620:	dec00204 	addi	sp,sp,8
 4034624:	f800283a 	ret
 4034628:	04001444 	movi	r16,81
 403462c:	d0a01b17 	ldw	r2,-32660(gp)
 4034630:	10000626 	beq	r2,zero,403464c <lseek+0x78>
 4034634:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
 4034638:	14000015 	stw	r16,0(r2)
    rc = -1;
 403463c:	00bfffc4 	movi	r2,-1
  }

  return rc;
 4034640:	003ff506 	br	4034618 <__flash_rwdata_start+0xffffe0c0>
 4034644:	04002184 	movi	r16,134
 4034648:	003ff806 	br	403462c <__flash_rwdata_start+0xffffe0d4>
 403464c:	d0a02a04 	addi	r2,gp,-32600
 4034650:	003ff906 	br	4034638 <__flash_rwdata_start+0xffffe0e0>
 4034654:	00a1c83a 	sub	r16,zero,r2
 4034658:	003ff406 	br	403462c <__flash_rwdata_start+0xffffe0d4>

0403465c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 403465c:	f811883a 	mov	r8,ra
 4034660:	40346e80 	call	40346e8 <_mcount>
 4034664:	403f883a 	mov	ra,r8
 4034668:	defffe04 	addi	sp,sp,-8
 403466c:	dfc00115 	stw	ra,4(sp)
 4034670:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4034674:	0009883a 	mov	r4,zero
 4034678:	4034ae40 	call	4034ae4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 403467c:	4034b100 	call	4034b10 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4034680:	01800034 	movhi	r6,0
 4034684:	31819e04 	addi	r6,r6,1656
 4034688:	300b883a 	mov	r5,r6
 403468c:	3009883a 	mov	r4,r6
 4034690:	40355b40 	call	40355b4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4034694:	403538c0 	call	403538c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4034698:	010100f4 	movhi	r4,1027
 403469c:	2114ff04 	addi	r4,r4,21500
 40346a0:	4035ad00 	call	4035ad0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40346a4:	d1a03117 	ldw	r6,-32572(gp)
 40346a8:	d1603217 	ldw	r5,-32568(gp)
 40346ac:	d1203317 	ldw	r4,-32564(gp)
 40346b0:	40224000 	call	4022400 <main>
  close(STDOUT_FILENO);
 40346b4:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 40346b8:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
 40346bc:	4033fc00 	call	4033fc0 <close>
  exit (result);
 40346c0:	8009883a 	mov	r4,r16
 40346c4:	4035af00 	call	4035af0 <exit>

040346c8 <__malloc_lock>:
 40346c8:	f811883a 	mov	r8,ra
 40346cc:	40346e80 	call	40346e8 <_mcount>
 40346d0:	403f883a 	mov	ra,r8
 40346d4:	f800283a 	ret

040346d8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 40346d8:	f811883a 	mov	r8,ra
 40346dc:	40346e80 	call	40346e8 <_mcount>
 40346e0:	403f883a 	mov	ra,r8
}
 40346e4:	f800283a 	ret

040346e8 <_mcount>:
         * of values for bits 4:2 won't be even (aligning on cache line boundaries
         * will skew it).  Higher bits should be fairly random.
         */
        /* fn_head = mcount_fn_head + (((unsigned int)self_pc >> 5) & (HASH_BUCKETS - 1)); */

        srli    r2, ra, 3
 40346e8:	f804d0fa 	srli	r2,ra,3
        movhi   r3, %hiadj(__mcount_fn_head)
 40346ec:	00c00174 	movhi	r3,5
        addi    r3, r3, %lo(__mcount_fn_head)
 40346f0:	18f4a404 	addi	r3,r3,-11632
        andi    r2, r2, 0xFC
 40346f4:	10803f0c 	andi	r2,r2,252
        add     r11, r2, r3
 40346f8:	10d7883a 	add	r11,r2,r3
        /* The fast case is where we have already allocated a function arc, and so
         * also a function pointer.
         */

        /* First find the function being called (using self_pc) */
        mov     r10, r11
 40346fc:	5815883a 	mov	r10,r11
0:
        ldw     r10, 0(r10)
 4034700:	52800017 	ldw	r10,0(r10)
        beq     r10, zero, .Lnew_arc
 4034704:	50000726 	beq	r10,zero,4034724 <_mcount+0x3c>
        ldw     r2, 4(r10)
 4034708:	50800117 	ldw	r2,4(r10)
        bne     r2, ra, 0b
 403470c:	17fffc1e 	bne	r2,ra,4034700 <__flash_rwdata_start+0xffffe1a8>

        /* Found a function entry for this PC. Now look for an arc with a matching
         * from_pc value. There will always be at least one arc. */
        ldw     r3, 8(r10)
 4034710:	50c00217 	ldw	r3,8(r10)
0:
        ldw     r2, 4(r3)
 4034714:	18800117 	ldw	r2,4(r3)
        beq     r2, r8, .Lfound_arc
 4034718:	12001626 	beq	r2,r8,4034774 <_mcount+0x8c>
        ldw     r3, 0(r3)
 403471c:	18c00017 	ldw	r3,0(r3)
        bne     r3, zero, 0b
 4034720:	183ffc1e 	bne	r3,zero,4034714 <__flash_rwdata_start+0xffffe1bc>

.Lnew_arc:
        addi    sp, sp, -24
 4034724:	defffa04 	addi	sp,sp,-24

.LCFI0:
        stw     ra, 0(sp)
 4034728:	dfc00015 	stw	ra,0(sp)
        stw     r4, 4(sp)
 403472c:	d9000115 	stw	r4,4(sp)
        stw     r5, 8(sp)
 4034730:	d9400215 	stw	r5,8(sp)
        stw     r6, 12(sp)
 4034734:	d9800315 	stw	r6,12(sp)
        stw     r7, 16(sp)
 4034738:	d9c00415 	stw	r7,16(sp)
        stw     r8, 20(sp)
 403473c:	da000515 	stw	r8,20(sp)

.LCFI1:
        /* __mcount_record(orig_ra, orig_r8, fn_entry, *fn_head); */
        mov     r4, ra
 4034740:	f809883a 	mov	r4,ra
        mov     r5, r8
 4034744:	400b883a 	mov	r5,r8
        mov     r6, r10
 4034748:	500d883a 	mov	r6,r10
        mov     r7, r11
 403474c:	580f883a 	mov	r7,r11
        call     __mcount_record
 4034750:	40341c00 	call	40341c0 <__mcount_record>
        
        /* restore registers from the stack */
        ldw     ra, 0(sp)
 4034754:	dfc00017 	ldw	ra,0(sp)
        ldw     r4, 4(sp)
 4034758:	d9000117 	ldw	r4,4(sp)
        ldw     r5, 8(sp)
 403475c:	d9400217 	ldw	r5,8(sp)
        ldw     r6, 12(sp)
 4034760:	d9800317 	ldw	r6,12(sp)
        ldw     r7, 16(sp)
 4034764:	d9c00417 	ldw	r7,16(sp)
        ldw     r8, 20(sp)
 4034768:	da000517 	ldw	r8,20(sp)

        addi    sp, sp, 24
 403476c:	dec00604 	addi	sp,sp,24

.LCFI2:
        ret
 4034770:	f800283a 	ret

.Lfound_arc:
        /* We've found the correct arc record.  Increment the count and return */
        ldw     r2, 8(r3)
 4034774:	18800217 	ldw	r2,8(r3)
        addi    r2, r2, 1
 4034778:	10800044 	addi	r2,r2,1
        stw     r2, 8(r3)
 403477c:	18800215 	stw	r2,8(r3)
        ret
 4034780:	f800283a 	ret

04034784 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 4034784:	f811883a 	mov	r8,ra
 4034788:	40346e80 	call	40346e8 <_mcount>
 403478c:	403f883a 	mov	ra,r8
 4034790:	defffe04 	addi	sp,sp,-8
 4034794:	dfc00115 	stw	ra,4(sp)
 4034798:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 403479c:	20002116 	blt	r4,zero,4034824 <read+0xa0>
 40347a0:	21000324 	muli	r4,r4,12
 40347a4:	00800034 	movhi	r2,0
 40347a8:	1083cb04 	addi	r2,r2,3884
 40347ac:	2089883a 	add	r4,r4,r2
  
  if (fd)
 40347b0:	20001c26 	beq	r4,zero,4034824 <read+0xa0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40347b4:	20800217 	ldw	r2,8(r4)
 40347b8:	00c00044 	movi	r3,1
 40347bc:	108000cc 	andi	r2,r2,3
 40347c0:	10c00a26 	beq	r2,r3,40347ec <read+0x68>
        (fd->dev->read))
 40347c4:	20800017 	ldw	r2,0(r4)
 40347c8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 40347cc:	10000726 	beq	r2,zero,40347ec <read+0x68>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 40347d0:	103ee83a 	callr	r2
 40347d4:	1021883a 	mov	r16,r2
 40347d8:	10000b16 	blt	r2,zero,4034808 <read+0x84>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 40347dc:	dfc00117 	ldw	ra,4(sp)
 40347e0:	dc000017 	ldw	r16,0(sp)
 40347e4:	dec00204 	addi	sp,sp,8
 40347e8:	f800283a 	ret
 40347ec:	d0a01b17 	ldw	r2,-32660(gp)
 40347f0:	10001326 	beq	r2,zero,4034840 <read+0xbc>
 40347f4:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
 40347f8:	00c00344 	movi	r3,13
 40347fc:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4034800:	00bfffc4 	movi	r2,-1
 4034804:	003ff506 	br	40347dc <__flash_rwdata_start+0xffffe284>
 4034808:	d0a01b17 	ldw	r2,-32660(gp)
 403480c:	10000e26 	beq	r2,zero,4034848 <read+0xc4>
 4034810:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
 4034814:	0421c83a 	sub	r16,zero,r16
 4034818:	14000015 	stw	r16,0(r2)
          return -1;
 403481c:	00bfffc4 	movi	r2,-1
 4034820:	003fee06 	br	40347dc <__flash_rwdata_start+0xffffe284>
 4034824:	d0a01b17 	ldw	r2,-32660(gp)
 4034828:	10000926 	beq	r2,zero,4034850 <read+0xcc>
 403482c:	103ee83a 	callr	r2
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 4034830:	00c01444 	movi	r3,81
 4034834:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4034838:	00bfffc4 	movi	r2,-1
 403483c:	003fe706 	br	40347dc <__flash_rwdata_start+0xffffe284>
 4034840:	d0a02a04 	addi	r2,gp,-32600
 4034844:	003fec06 	br	40347f8 <__flash_rwdata_start+0xffffe2a0>
 4034848:	d0a02a04 	addi	r2,gp,-32600
 403484c:	003ff106 	br	4034814 <__flash_rwdata_start+0xffffe2bc>
 4034850:	d0a02a04 	addi	r2,gp,-32600
 4034854:	003ff606 	br	4034830 <__flash_rwdata_start+0xffffe2d8>

04034858 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4034858:	f811883a 	mov	r8,ra
 403485c:	40346e80 	call	40346e8 <_mcount>
 4034860:	403f883a 	mov	ra,r8
  if (fd > 2)
 4034864:	00800084 	movi	r2,2
 4034868:	1100060e 	bge	r2,r4,4034884 <alt_release_fd+0x2c>
  {
    alt_fd_list[fd].fd_flags = 0;
 403486c:	21000324 	muli	r4,r4,12
 4034870:	00800034 	movhi	r2,0
 4034874:	1083cb04 	addi	r2,r2,3884
 4034878:	1109883a 	add	r4,r2,r4
 403487c:	20000215 	stw	zero,8(r4)
    alt_fd_list[fd].dev      = 0;
 4034880:	20000015 	stw	zero,0(r4)
  }
}
 4034884:	f800283a 	ret

04034888 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4034888:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 403488c:	00bfff84 	movi	r2,-2
 4034890:	2884703a 	and	r2,r5,r2
 4034894:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 4034898:	d0a01d17 	ldw	r2,-32652(gp)
 403489c:	00ffff04 	movi	r3,-4
 40348a0:	108000c4 	addi	r2,r2,3
 40348a4:	10c4703a 	and	r2,r2,r3
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40348a8:	00c10034 	movhi	r3,1024
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 40348ac:	d0a01d15 	stw	r2,-32652(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 40348b0:	1109883a 	add	r4,r2,r4
 40348b4:	18c00004 	addi	r3,r3,0
 40348b8:	19000336 	bltu	r3,r4,40348c8 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
 40348bc:	d1201d15 	stw	r4,-32652(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40348c0:	2801703a 	wrctl	status,r5
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
 40348c4:	f800283a 	ret
 40348c8:	2801703a 	wrctl	status,r5
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 40348cc:	00bfffc4 	movi	r2,-1
 40348d0:	f800283a 	ret

040348d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40348d4:	f811883a 	mov	r8,ra
 40348d8:	40346e80 	call	40346e8 <_mcount>
 40348dc:	403f883a 	mov	ra,r8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40348e0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40348e4:	00bfff84 	movi	r2,-2
 40348e8:	1884703a 	and	r2,r3,r2
 40348ec:	1001703a 	wrctl	status,r2
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40348f0:	21400117 	ldw	r5,4(r4)
 40348f4:	20800017 	ldw	r2,0(r4)
 40348f8:	11400115 	stw	r5,4(r2)
  entry->previous->next = entry->next;
 40348fc:	21400117 	ldw	r5,4(r4)
 4034900:	28800015 	stw	r2,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4034904:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
 4034908:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 403490c:	1801703a 	wrctl	status,r3
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  alt_llist_remove (&alarm->llist);
  alt_irq_enable_all (irq_context);
}
 4034910:	f800283a 	ret

04034914 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4034914:	f811883a 	mov	r8,ra
 4034918:	40346e80 	call	40346e8 <_mcount>
 403491c:	403f883a 	mov	ra,r8
 4034920:	defffa04 	addi	sp,sp,-24
 4034924:	dfc00515 	stw	ra,20(sp)
 4034928:	dd000415 	stw	r20,16(sp)
 403492c:	dcc00315 	stw	r19,12(sp)
 4034930:	dc800215 	stw	r18,8(sp)
 4034934:	dc400115 	stw	r17,4(sp)
 4034938:	dc000015 	stw	r16,0(sp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 403493c:	d0a03417 	ldw	r2,-32560(gp)
 */

void alt_tick (void)
{
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4034940:	d4201e17 	ldw	r16,-32648(gp)
 4034944:	d4a01e04 	addi	r18,gp,-32648

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4034948:	10800044 	addi	r2,r2,1
 403494c:	d0a03415 	stw	r2,-32560(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4034950:	84801126 	beq	r16,r18,4034998 <alt_tick+0x84>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
 4034954:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4034958:	053fff84 	movi	r20,-2
 403495c:	00000606 	br	4034978 <alt_tick+0x64>
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    {
      alarm->rollover = 0;
 4034960:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4034964:	d0e03417 	ldw	r3,-32560(gp)
 4034968:	80800217 	ldw	r2,8(r16)
 403496c:	1880122e 	bgeu	r3,r2,40349b8 <alt_tick+0xa4>
 4034970:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4034974:	8c800826 	beq	r17,r18,4034998 <alt_tick+0x84>
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4034978:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
 403497c:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4034980:	103ff826 	beq	r2,zero,4034964 <__flash_rwdata_start+0xffffe40c>
 4034984:	d0a03417 	ldw	r2,-32560(gp)
 4034988:	103ff526 	beq	r2,zero,4034960 <__flash_rwdata_start+0xffffe408>
    {
      alarm->rollover = 0;
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 403498c:	d0a03417 	ldw	r2,-32560(gp)
 4034990:	8821883a 	mov	r16,r17

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4034994:	8cbff81e 	bne	r17,r18,4034978 <__flash_rwdata_start+0xffffe420>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 4034998:	dfc00517 	ldw	ra,20(sp)
 403499c:	dd000417 	ldw	r20,16(sp)
 40349a0:	dcc00317 	ldw	r19,12(sp)
 40349a4:	dc800217 	ldw	r18,8(sp)
 40349a8:	dc400117 	ldw	r17,4(sp)
 40349ac:	dc000017 	ldw	r16,0(sp)
 40349b0:	dec00604 	addi	sp,sp,24
 40349b4:	f800283a 	ret
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
 40349b8:	80800317 	ldw	r2,12(r16)
 40349bc:	81000517 	ldw	r4,20(r16)
 40349c0:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40349c4:	10000726 	beq	r2,zero,40349e4 <alt_tick+0xd0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 40349c8:	80c00217 	ldw	r3,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40349cc:	d1203417 	ldw	r4,-32560(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
 40349d0:	10c5883a 	add	r2,r2,r3
 40349d4:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40349d8:	113fe52e 	bgeu	r2,r4,4034970 <__flash_rwdata_start+0xffffe418>
        {
          alarm->rollover = 1;
 40349dc:	84c00405 	stb	r19,16(r16)
 40349e0:	003fe306 	br	4034970 <__flash_rwdata_start+0xffffe418>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40349e4:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40349e8:	1506703a 	and	r3,r2,r20
 40349ec:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40349f0:	81000117 	ldw	r4,4(r16)
 40349f4:	80c00017 	ldw	r3,0(r16)
 40349f8:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
 40349fc:	81000117 	ldw	r4,4(r16)
 4034a00:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4034a04:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
 4034a08:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034a0c:	1001703a 	wrctl	status,r2
 4034a10:	003fd706 	br	4034970 <__flash_rwdata_start+0xffffe418>

04034a14 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4034a14:	f811883a 	mov	r8,ra
 4034a18:	40346e80 	call	40346e8 <_mcount>
 4034a1c:	403f883a 	mov	ra,r8
 4034a20:	defffe04 	addi	sp,sp,-8
 4034a24:	dfc00115 	stw	ra,4(sp)
 4034a28:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4034a2c:	20002216 	blt	r4,zero,4034ab8 <write+0xa4>
 4034a30:	21000324 	muli	r4,r4,12
 4034a34:	00800034 	movhi	r2,0
 4034a38:	1083cb04 	addi	r2,r2,3884
 4034a3c:	2089883a 	add	r4,r4,r2
  
  if (fd)
 4034a40:	20001d26 	beq	r4,zero,4034ab8 <write+0xa4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4034a44:	20800217 	ldw	r2,8(r4)
 4034a48:	108000cc 	andi	r2,r2,3
 4034a4c:	10000a26 	beq	r2,zero,4034a78 <write+0x64>
 4034a50:	20800017 	ldw	r2,0(r4)
 4034a54:	10800617 	ldw	r2,24(r2)
 4034a58:	10000726 	beq	r2,zero,4034a78 <write+0x64>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4034a5c:	103ee83a 	callr	r2
 4034a60:	1021883a 	mov	r16,r2
 4034a64:	10000d16 	blt	r2,zero,4034a9c <write+0x88>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
 4034a68:	dfc00117 	ldw	ra,4(sp)
 4034a6c:	dc000017 	ldw	r16,0(sp)
 4034a70:	dec00204 	addi	sp,sp,8
 4034a74:	f800283a 	ret
 4034a78:	d0a01b17 	ldw	r2,-32660(gp)
 4034a7c:	10000526 	beq	r2,zero,4034a94 <write+0x80>
 4034a80:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
 4034a84:	00c00344 	movi	r3,13
 4034a88:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
 4034a8c:	00bfffc4 	movi	r2,-1
 4034a90:	003ff506 	br	4034a68 <__flash_rwdata_start+0xffffe510>
 4034a94:	d0a02a04 	addi	r2,gp,-32600
 4034a98:	003ffa06 	br	4034a84 <__flash_rwdata_start+0xffffe52c>
 4034a9c:	d0a01b17 	ldw	r2,-32660(gp)
 4034aa0:	10000c26 	beq	r2,zero,4034ad4 <write+0xc0>
 4034aa4:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
 4034aa8:	0421c83a 	sub	r16,zero,r16
 4034aac:	14000015 	stw	r16,0(r2)
        return -1;
 4034ab0:	00bfffc4 	movi	r2,-1
 4034ab4:	003fec06 	br	4034a68 <__flash_rwdata_start+0xffffe510>
 4034ab8:	d0a01b17 	ldw	r2,-32660(gp)
 4034abc:	10000726 	beq	r2,zero,4034adc <write+0xc8>
 4034ac0:	103ee83a 	callr	r2
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4034ac4:	00c01444 	movi	r3,81
 4034ac8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 4034acc:	00bfffc4 	movi	r2,-1
 4034ad0:	003fe506 	br	4034a68 <__flash_rwdata_start+0xffffe510>
 4034ad4:	d0a02a04 	addi	r2,gp,-32600
 4034ad8:	003ff306 	br	4034aa8 <__flash_rwdata_start+0xffffe550>
 4034adc:	d0a02a04 	addi	r2,gp,-32600
 4034ae0:	003ff806 	br	4034ac4 <__flash_rwdata_start+0xffffe56c>

04034ae4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4034ae4:	f811883a 	mov	r8,ra
 4034ae8:	40346e80 	call	40346e8 <_mcount>
 4034aec:	403f883a 	mov	ra,r8
 4034af0:	deffff04 	addi	sp,sp,-4
 4034af4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4034af8:	40358480 	call	4035848 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4034afc:	00800044 	movi	r2,1
 4034b00:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4034b04:	dfc00017 	ldw	ra,0(sp)
 4034b08:	dec00104 	addi	sp,sp,4
 4034b0c:	f800283a 	ret

04034b10 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4034b10:	f811883a 	mov	r8,ra
 4034b14:	40346e80 	call	40346e8 <_mcount>
 4034b18:	403f883a 	mov	ra,r8
 4034b1c:	defffe04 	addi	sp,sp,-8
 4034b20:	dfc00115 	stw	ra,4(sp)
 4034b24:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 4034b28:	01010134 	movhi	r4,1028
 4034b2c:	01c0fa04 	movi	r7,1000
 4034b30:	21041804 	addi	r4,r4,4192
 4034b34:	01800044 	movi	r6,1
 4034b38:	000b883a 	mov	r5,zero
 4034b3c:	40352100 	call	4035210 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMSESTAMP_TIMER, timsestamp_timer);
 4034b40:	00810134 	movhi	r2,1028
 4034b44:	10841004 	addi	r2,r2,4160
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4034b48:	04000034 	movhi	r16,0
 4034b4c:	84044804 	addi	r16,r16,4384
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMSESTAMP_TIMER, timsestamp_timer);
 4034b50:	d0a03715 	stw	r2,-32548(gp)
 4034b54:	00817db4 	movhi	r2,1526
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4034b58:	8009883a 	mov	r4,r16
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMSESTAMP_TIMER, timsestamp_timer);
 4034b5c:	10b84004 	addi	r2,r2,-7936
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4034b60:	000b883a 	mov	r5,zero
 4034b64:	000d883a 	mov	r6,zero
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    ALTERA_AVALON_TIMER_INIT ( TIMSESTAMP_TIMER, timsestamp_timer);
 4034b68:	d0a03615 	stw	r2,-32552(gp)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 4034b6c:	4034d600 	call	4034d60 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4034b70:	d1601704 	addi	r5,gp,-32676
 4034b74:	813ff604 	addi	r4,r16,-40
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
}
 4034b78:	dfc00117 	ldw	ra,4(sp)
 4034b7c:	dc000017 	ldw	r16,0(sp)
 4034b80:	dec00204 	addi	sp,sp,8
 4034b84:	40353141 	jmpi	4035314 <alt_dev_llist_insert>

04034b88 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4034b88:	f811883a 	mov	r8,ra
 4034b8c:	40346e80 	call	40346e8 <_mcount>
 4034b90:	403f883a 	mov	ra,r8
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4034b94:	20800017 	ldw	r2,0(r4)
 4034b98:	21c00217 	ldw	r7,8(r4)
 4034b9c:	11000a04 	addi	r4,r2,40
 4034ba0:	4034ebc1 	jmpi	4034ebc <altera_avalon_jtag_uart_read>

04034ba4 <altera_avalon_jtag_uart_write_fd>:
      fd->fd_flags);
}

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4034ba4:	f811883a 	mov	r8,ra
 4034ba8:	40346e80 	call	40346e8 <_mcount>
 4034bac:	403f883a 	mov	ra,r8
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 4034bb0:	20800017 	ldw	r2,0(r4)
 4034bb4:	21c00217 	ldw	r7,8(r4)
 4034bb8:	11000a04 	addi	r4,r2,40
 4034bbc:	403501c1 	jmpi	403501c <altera_avalon_jtag_uart_write>

04034bc0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4034bc0:	f811883a 	mov	r8,ra
 4034bc4:	40346e80 	call	40346e8 <_mcount>
 4034bc8:	403f883a 	mov	ra,r8
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4034bcc:	20800017 	ldw	r2,0(r4)
 4034bd0:	21400217 	ldw	r5,8(r4)
 4034bd4:	11000a04 	addi	r4,r2,40
 4034bd8:	4034de41 	jmpi	4034de4 <altera_avalon_jtag_uart_close>

04034bdc <altera_avalon_jtag_uart_ioctl_fd>:
}

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4034bdc:	f811883a 	mov	r8,ra
 4034be0:	40346e80 	call	40346e8 <_mcount>
 4034be4:	403f883a 	mov	ra,r8
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 4034be8:	21000017 	ldw	r4,0(r4)
 4034bec:	21000a04 	addi	r4,r4,40
 4034bf0:	4034e3c1 	jmpi	4034e3c <altera_avalon_jtag_uart_ioctl>

04034bf4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4034bf4:	f811883a 	mov	r8,ra
 4034bf8:	40346e80 	call	40346e8 <_mcount>
 4034bfc:	403f883a 	mov	ra,r8
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4034c00:	20800017 	ldw	r2,0(r4)
 4034c04:	10800104 	addi	r2,r2,4
 4034c08:	10c00037 	ldwio	r3,0(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4034c0c:	18c1000c 	andi	r3,r3,1024
 4034c10:	1800081e 	bne	r3,zero,4034c34 <altera_avalon_jtag_uart_timeout+0x40>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4034c14:	20800917 	ldw	r2,36(r4)
 4034c18:	00e00034 	movhi	r3,32768
 4034c1c:	18ffff04 	addi	r3,r3,-4
 4034c20:	18800236 	bltu	r3,r2,4034c2c <altera_avalon_jtag_uart_timeout+0x38>
    sp->host_inactive++;
 4034c24:	10800044 	addi	r2,r2,1
 4034c28:	20800915 	stw	r2,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4034c2c:	d0a03517 	ldw	r2,-32556(gp)
 4034c30:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4034c34:	20c00817 	ldw	r3,32(r4)
 4034c38:	18c10014 	ori	r3,r3,1024
 4034c3c:	10c00035 	stwio	r3,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4034c40:	d0a03517 	ldw	r2,-32556(gp)
  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
 4034c44:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4034c48:	f800283a 	ret

04034c4c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4034c4c:	f811883a 	mov	r8,ra
 4034c50:	40346e80 	call	40346e8 <_mcount>
 4034c54:	403f883a 	mov	ra,r8
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
 4034c58:	21800017 	ldw	r6,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034c5c:	027fff84 	movi	r9,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4034c60:	02bfff44 	movi	r10,-3
 4034c64:	32000104 	addi	r8,r6,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4034c68:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4034c6c:	3880c00c 	andi	r2,r7,768
 4034c70:	10003426 	beq	r2,zero,4034d44 <altera_avalon_jtag_uart_irq+0xf8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4034c74:	3880400c 	andi	r2,r7,256
 4034c78:	10001726 	beq	r2,zero,4034cd8 <altera_avalon_jtag_uart_irq+0x8c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034c7c:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
 4034c80:	20c00b17 	ldw	r3,44(r4)
 4034c84:	10800044 	addi	r2,r2,1
 4034c88:	1081ffcc 	andi	r2,r2,2047
 4034c8c:	18800d1e 	bne	r3,r2,4034cc4 <altera_avalon_jtag_uart_irq+0x78>
 4034c90:	00002d06 	br	4034d48 <altera_avalon_jtag_uart_irq+0xfc>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4034c94:	20800a17 	ldw	r2,40(r4)
 4034c98:	2085883a 	add	r2,r4,r2
 4034c9c:	10c00e05 	stb	r3,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034ca0:	20800a17 	ldw	r2,40(r4)
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
 4034ca4:	21400b17 	ldw	r5,44(r4)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034ca8:	10800044 	addi	r2,r2,1
 4034cac:	1081ffcc 	andi	r2,r2,2047
 4034cb0:	20800a15 	stw	r2,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034cb4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
 4034cb8:	10800044 	addi	r2,r2,1
 4034cbc:	1081ffcc 	andi	r2,r2,2047
 4034cc0:	11400326 	beq	r2,r5,4034cd0 <altera_avalon_jtag_uart_irq+0x84>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4034cc4:	30c00037 	ldwio	r3,0(r6)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 4034cc8:	18a0000c 	andi	r2,r3,32768
 4034ccc:	103ff11e 	bne	r2,zero,4034c94 <__flash_rwdata_start+0xffffe73c>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4034cd0:	18ffffec 	andhi	r3,r3,65535
 4034cd4:	18001c1e 	bne	r3,zero,4034d48 <altera_avalon_jtag_uart_irq+0xfc>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4034cd8:	3880800c 	andi	r2,r7,512
 4034cdc:	103fe226 	beq	r2,zero,4034c68 <__flash_rwdata_start+0xffffe710>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4034ce0:	380ed43a 	srli	r7,r7,16

      while (space > 0 && sp->tx_out != sp->tx_in)
 4034ce4:	38000b1e 	bne	r7,zero,4034d14 <altera_avalon_jtag_uart_irq+0xc8>
 4034ce8:	003fdf06 	br	4034c68 <__flash_rwdata_start+0xffffe710>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4034cec:	20800d17 	ldw	r2,52(r4)
 4034cf0:	2085883a 	add	r2,r4,r2
 4034cf4:	10820e07 	ldb	r2,2104(r2)
 4034cf8:	30800035 	stwio	r2,0(r6)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034cfc:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4034d00:	39ffffc4 	addi	r7,r7,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034d04:	10800044 	addi	r2,r2,1
 4034d08:	1081ffcc 	andi	r2,r2,2047
 4034d0c:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4034d10:	383fd526 	beq	r7,zero,4034c68 <__flash_rwdata_start+0xffffe710>
 4034d14:	20c00d17 	ldw	r3,52(r4)
 4034d18:	20800c17 	ldw	r2,48(r4)
 4034d1c:	18bff31e 	bne	r3,r2,4034cec <__flash_rwdata_start+0xffffe794>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4034d20:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4034d24:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4034d28:	1284703a 	and	r2,r2,r10
 4034d2c:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4034d30:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4034d34:	40800037 	ldwio	r2,0(r8)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4034d38:	41c00037 	ldwio	r7,0(r8)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4034d3c:	3880c00c 	andi	r2,r7,768
 4034d40:	103fcc1e 	bne	r2,zero,4034c74 <__flash_rwdata_start+0xffffe71c>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4034d44:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034d48:	20800817 	ldw	r2,32(r4)
 4034d4c:	1244703a 	and	r2,r2,r9
 4034d50:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4034d54:	40800035 	stwio	r2,0(r8)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4034d58:	40800037 	ldwio	r2,0(r8)
 4034d5c:	003fde06 	br	4034cd8 <__flash_rwdata_start+0xffffe780>

04034d60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4034d60:	f811883a 	mov	r8,ra
 4034d64:	40346e80 	call	40346e8 <_mcount>
 4034d68:	403f883a 	mov	ra,r8
 4034d6c:	defffd04 	addi	sp,sp,-12
 4034d70:	dfc00215 	stw	ra,8(sp)
 4034d74:	dc000115 	stw	r16,4(sp)
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4034d78:	20c00017 	ldw	r3,0(r4)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034d7c:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4034d80:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034d84:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4034d88:	2809883a 	mov	r4,r5
 4034d8c:	300b883a 	mov	r5,r6
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4034d90:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 4034d94:	018100f4 	movhi	r6,1027
 4034d98:	31931304 	addi	r6,r6,19532
 4034d9c:	800f883a 	mov	r7,r16
 4034da0:	d8000015 	stw	zero,0(sp)
 4034da4:	40354840 	call	4035484 <alt_ic_isr_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4034da8:	d1603517 	ldw	r5,-32556(gp)
 4034dac:	018100f4 	movhi	r6,1027
 4034db0:	3192fd04 	addi	r6,r6,19444
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 4034db4:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 4034db8:	800f883a 	mov	r7,r16
 4034dbc:	81000204 	addi	r4,r16,8
 4034dc0:	40352640 	call	4035264 <alt_alarm_start>
 4034dc4:	1000030e 	bge	r2,zero,4034dd4 <altera_avalon_jtag_uart_init+0x74>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 4034dc8:	00a00034 	movhi	r2,32768
 4034dcc:	10bfffc4 	addi	r2,r2,-1
 4034dd0:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4034dd4:	dfc00217 	ldw	ra,8(sp)
 4034dd8:	dc000117 	ldw	r16,4(sp)
 4034ddc:	dec00304 	addi	sp,sp,12
 4034de0:	f800283a 	ret

04034de4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4034de4:	f811883a 	mov	r8,ra
 4034de8:	40346e80 	call	40346e8 <_mcount>
 4034dec:	403f883a 	mov	ra,r8
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
 4034df0:	2890000c 	andi	r2,r5,16384
 4034df4:	21c00c17 	ldw	r7,48(r4)
 4034df8:	10000426 	beq	r2,zero,4034e0c <altera_avalon_jtag_uart_close+0x28>
 4034dfc:	00000606 	br	4034e18 <altera_avalon_jtag_uart_close+0x34>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4034e00:	21800917 	ldw	r6,36(r4)
 4034e04:	20c00117 	ldw	r3,4(r4)
 4034e08:	30c00a2e 	bgeu	r6,r3,4034e34 <altera_avalon_jtag_uart_close+0x50>
 4034e0c:	20c00d17 	ldw	r3,52(r4)
 4034e10:	38fffb1e 	bne	r7,r3,4034e00 <__flash_rwdata_start+0xffffe8a8>
      return -EWOULDBLOCK; 
    }
  }

  return 0;
}
 4034e14:	f800283a 	ret
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4034e18:	20800d17 	ldw	r2,52(r4)
 4034e1c:	11c00526 	beq	r2,r7,4034e34 <altera_avalon_jtag_uart_close+0x50>
 4034e20:	20c00917 	ldw	r3,36(r4)
 4034e24:	20800117 	ldw	r2,4(r4)
 4034e28:	1880022e 	bgeu	r3,r2,4034e34 <altera_avalon_jtag_uart_close+0x50>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
 4034e2c:	00bffd44 	movi	r2,-11
    }
  }

  return 0;
}
 4034e30:	f800283a 	ret
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4034e34:	0005883a 	mov	r2,zero
}
 4034e38:	f800283a 	ret

04034e3c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4034e3c:	f811883a 	mov	r8,ra
 4034e40:	40346e80 	call	40346e8 <_mcount>
 4034e44:	403f883a 	mov	ra,r8
  int rc = -ENOTTY;

  switch (req)
 4034e48:	009a8044 	movi	r2,27137
 4034e4c:	28800d26 	beq	r5,r2,4034e84 <altera_avalon_jtag_uart_ioctl+0x48>
 4034e50:	009a8084 	movi	r2,27138
 4034e54:	2880091e 	bne	r5,r2,4034e7c <altera_avalon_jtag_uart_ioctl+0x40>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4034e58:	21400117 	ldw	r5,4(r4)
 4034e5c:	00a00034 	movhi	r2,32768
 4034e60:	10bfffc4 	addi	r2,r2,-1
 4034e64:	28800526 	beq	r5,r2,4034e7c <altera_avalon_jtag_uart_ioctl+0x40>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4034e68:	20c00917 	ldw	r3,36(r4)
      rc = 0;
 4034e6c:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4034e70:	1947803a 	cmpltu	r3,r3,r5
 4034e74:	30c00015 	stw	r3,0(r6)
  default:
    break;
  }

  return rc;
}
 4034e78:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
 4034e7c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
 4034e80:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4034e84:	20c00117 	ldw	r3,4(r4)
 4034e88:	00a00034 	movhi	r2,32768
 4034e8c:	10bfffc4 	addi	r2,r2,-1
 4034e90:	18bffa26 	beq	r3,r2,4034e7c <__flash_rwdata_start+0xffffe924>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4034e94:	30800017 	ldw	r2,0(r6)
 4034e98:	01600034 	movhi	r5,32768
 4034e9c:	297fff04 	addi	r5,r5,-4
 4034ea0:	10ffff84 	addi	r3,r2,-2
 4034ea4:	28c0022e 	bgeu	r5,r3,4034eb0 <altera_avalon_jtag_uart_ioctl+0x74>
 4034ea8:	00a00034 	movhi	r2,32768
 4034eac:	10bfff84 	addi	r2,r2,-2
 4034eb0:	20800115 	stw	r2,4(r4)
      rc = 0;
 4034eb4:	0005883a 	mov	r2,zero
  default:
    break;
  }

  return rc;
}
 4034eb8:	f800283a 	ret

04034ebc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4034ebc:	f811883a 	mov	r8,ra
 4034ec0:	40346e80 	call	40346e8 <_mcount>
 4034ec4:	403f883a 	mov	ra,r8
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4034ec8:	01804e0e 	bge	zero,r6,4035004 <altera_avalon_jtag_uart_read+0x148>
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4034ecc:	defff504 	addi	sp,sp,-44
 4034ed0:	dfc00a15 	stw	ra,40(sp)
 4034ed4:	df000915 	stw	fp,36(sp)
 4034ed8:	ddc00815 	stw	r23,32(sp)
 4034edc:	dd800715 	stw	r22,28(sp)
 4034ee0:	dd400615 	stw	r21,24(sp)
 4034ee4:	dd000515 	stw	r20,20(sp)
 4034ee8:	dcc00415 	stw	r19,16(sp)
 4034eec:	dc800315 	stw	r18,12(sp)
 4034ef0:	dc400215 	stw	r17,8(sp)
 4034ef4:	dc000115 	stw	r16,4(sp)
 4034ef8:	24000b17 	ldw	r16,44(r4)
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4034efc:	39d0000c 	andi	r7,r7,16384
 4034f00:	3027883a 	mov	r19,r6
 4034f04:	2025883a 	mov	r18,r4
 4034f08:	282d883a 	mov	r22,r5
 4034f0c:	d9c00015 	stw	r7,0(sp)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4034f10:	05420004 	movi	r21,2048
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4034f14:	25000e04 	addi	r20,r4,56
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4034f18:	b02f883a 	mov	r23,r22
 4034f1c:	00000a06 	br	4034f48 <altera_avalon_jtag_uart_read+0x8c>
 4034f20:	9880012e 	bgeu	r19,r2,4034f28 <altera_avalon_jtag_uart_read+0x6c>
 4034f24:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034f28:	8461883a 	add	r16,r16,r17
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4034f2c:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034f30:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4034f34:	402daf40 	call	402daf4 <memcpy>
      ptr   += n;
      space -= n;
 4034f38:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4034f3c:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
 4034f40:	bc6f883a 	add	r23,r23,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
 4034f44:	04c0080e 	bge	zero,r19,4034f68 <altera_avalon_jtag_uart_read+0xac>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4034f48:	97000a17 	ldw	fp,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4034f4c:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
 4034f50:	e4000136 	bltu	fp,r16,4034f58 <altera_avalon_jtag_uart_read+0x9c>
        n = in - out;
 4034f54:	e405c83a 	sub	r2,fp,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
 4034f58:	a40b883a 	add	r5,r20,r16
 4034f5c:	b809883a 	mov	r4,r23
 4034f60:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
 4034f64:	103fee1e 	bne	r2,zero,4034f20 <__flash_rwdata_start+0xffffe9c8>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4034f68:	bd800d1e 	bne	r23,r22,4034fa0 <altera_avalon_jtag_uart_read+0xe4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4034f6c:	d8800017 	ldw	r2,0(sp)
 4034f70:	10000426 	beq	r2,zero,4034f84 <altera_avalon_jtag_uart_read+0xc8>
 4034f74:	00002106 	br	4034ffc <altera_avalon_jtag_uart_read+0x140>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4034f78:	90c00917 	ldw	r3,36(r18)
 4034f7c:	90800117 	ldw	r2,4(r18)
 4034f80:	1880022e 	bgeu	r3,r2,4034f8c <altera_avalon_jtag_uart_read+0xd0>
 4034f84:	90800a17 	ldw	r2,40(r18)
 4034f88:	e0bffb26 	beq	fp,r2,4034f78 <__flash_rwdata_start+0xffffea20>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4034f8c:	90800a17 	ldw	r2,40(r18)
 4034f90:	e0800126 	beq	fp,r2,4034f98 <altera_avalon_jtag_uart_read+0xdc>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4034f94:	04ffe016 	blt	zero,r19,4034f18 <__flash_rwdata_start+0xffffe9c0>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
 4034f98:	00bffec4 	movi	r2,-5
 4034f9c:	00000b06 	br	4034fcc <altera_avalon_jtag_uart_read+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4034fa0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4034fa4:	00bfff84 	movi	r2,-2
 4034fa8:	2084703a 	and	r2,r4,r2
 4034fac:	1001703a 	wrctl	status,r2

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034fb0:	90800817 	ldw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4034fb4:	91400017 	ldw	r5,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4034fb8:	10800054 	ori	r2,r2,1
 4034fbc:	90800815 	stw	r2,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4034fc0:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4034fc4:	2001703a 	wrctl	status,r4
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
 4034fc8:	bd85c83a 	sub	r2,r23,r22
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
}
 4034fcc:	dfc00a17 	ldw	ra,40(sp)
 4034fd0:	df000917 	ldw	fp,36(sp)
 4034fd4:	ddc00817 	ldw	r23,32(sp)
 4034fd8:	dd800717 	ldw	r22,28(sp)
 4034fdc:	dd400617 	ldw	r21,24(sp)
 4034fe0:	dd000517 	ldw	r20,20(sp)
 4034fe4:	dcc00417 	ldw	r19,16(sp)
 4034fe8:	dc800317 	ldw	r18,12(sp)
 4034fec:	dc400217 	ldw	r17,8(sp)
 4034ff0:	dc000117 	ldw	r16,4(sp)
 4034ff4:	dec00b04 	addi	sp,sp,44
 4034ff8:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4034ffc:	00bffd44 	movi	r2,-11
 4035000:	003ff206 	br	4034fcc <__flash_rwdata_start+0xffffea74>
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
 4035004:	39d0000c 	andi	r7,r7,16384
 4035008:	3800021e 	bne	r7,zero,4035014 <altera_avalon_jtag_uart_read+0x158>
    return -EWOULDBLOCK;
  else
    return -EIO;
 403500c:	00bffec4 	movi	r2,-5
}
 4035010:	f800283a 	ret
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4035014:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
 4035018:	f800283a 	ret

0403501c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 403501c:	f811883a 	mov	r8,ra
 4035020:	40346e80 	call	40346e8 <_mcount>
 4035024:	403f883a 	mov	ra,r8
 4035028:	defff604 	addi	sp,sp,-40
 403502c:	dfc00915 	stw	ra,36(sp)
 4035030:	df000815 	stw	fp,32(sp)
 4035034:	ddc00715 	stw	r23,28(sp)
 4035038:	dd800615 	stw	r22,24(sp)
 403503c:	dd400515 	stw	r21,20(sp)
 4035040:	dd000415 	stw	r20,16(sp)
 4035044:	dcc00315 	stw	r19,12(sp)
 4035048:	dc800215 	stw	r18,8(sp)
 403504c:	dc400115 	stw	r17,4(sp)
 4035050:	dc000015 	stw	r16,0(sp)
 4035054:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4035058:	01804d0e 	bge	zero,r6,4035190 <altera_avalon_jtag_uart_write+0x174>
 403505c:	302d883a 	mov	r22,r6
 4035060:	2829883a 	mov	r20,r5
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 4035064:	3c50000c 	andi	r17,r7,16384
 4035068:	282b883a 	mov	r21,r5
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 403506c:	04ffff84 	movi	r19,-2
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 4035070:	24820e04 	addi	r18,r4,2104
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4035074:	87000c17 	ldw	fp,48(r16)
      out = sp->tx_out;
 4035078:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
 403507c:	e0c03a2e 	bgeu	fp,r3,4035168 <altera_avalon_jtag_uart_write+0x14c>
        n = out - 1 - in;
 4035080:	1dffffc4 	addi	r23,r3,-1
 4035084:	bf2fc83a 	sub	r23,r23,fp
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
 4035088:	b800131e 	bne	r23,zero,40350d8 <altera_avalon_jtag_uart_write+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 403508c:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035090:	24c4703a 	and	r2,r4,r19
 4035094:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4035098:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 403509c:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40350a0:	10800094 	ori	r2,r2,2
 40350a4:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40350a8:	28800135 	stwio	r2,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40350ac:	2001703a 	wrctl	status,r4
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
 40350b0:	8800341e 	bne	r17,zero,4035184 <altera_avalon_jtag_uart_write+0x168>
 40350b4:	81000917 	ldw	r4,36(r16)
 40350b8:	00000206 	br	40350c4 <altera_avalon_jtag_uart_write+0xa8>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40350bc:	80800117 	ldw	r2,4(r16)
 40350c0:	2080022e 	bgeu	r4,r2,40350cc <altera_avalon_jtag_uart_write+0xb0>
 40350c4:	80800d17 	ldw	r2,52(r16)
 40350c8:	18bffc26 	beq	r3,r2,40350bc <__flash_rwdata_start+0xffffeb64>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40350cc:	203fe926 	beq	r4,zero,4035074 <__flash_rwdata_start+0xffffeb1c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40350d0:	ad00181e 	bne	r21,r20,4035134 <altera_avalon_jtag_uart_write+0x118>
 40350d4:	00003a06 	br	40351c0 <altera_avalon_jtag_uart_write+0x1a4>
 40350d8:	b5c0012e 	bgeu	r22,r23,40350e0 <altera_avalon_jtag_uart_write+0xc4>
 40350dc:	b02f883a 	mov	r23,r22
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 40350e0:	9709883a 	add	r4,r18,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40350e4:	e5f9883a 	add	fp,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 40350e8:	a80b883a 	mov	r5,r21
 40350ec:	b80d883a 	mov	r6,r23
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40350f0:	e701ffcc 	andi	fp,fp,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
 40350f4:	402daf40 	call	402daf4 <memcpy>
      ptr   += n;
      count -= n;
 40350f8:	b5edc83a 	sub	r22,r22,r23

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40350fc:	87000c15 	stw	fp,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
 4035100:	adeb883a 	add	r21,r21,r23
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4035104:	05bfdb16 	blt	zero,r22,4035074 <__flash_rwdata_start+0xffffeb1c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035108:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 403510c:	00bfff84 	movi	r2,-2
 4035110:	1884703a 	and	r2,r3,r2
 4035114:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4035118:	80800817 	ldw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 403511c:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4035120:	10800094 	ori	r2,r2,2
 4035124:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4035128:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 403512c:	1801703a 	wrctl	status,r3
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4035130:	a5402226 	beq	r20,r21,40351bc <altera_avalon_jtag_uart_write+0x1a0>
    return ptr - start;
 4035134:	ad05c83a 	sub	r2,r21,r20
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
 4035138:	dfc00917 	ldw	ra,36(sp)
 403513c:	df000817 	ldw	fp,32(sp)
 4035140:	ddc00717 	ldw	r23,28(sp)
 4035144:	dd800617 	ldw	r22,24(sp)
 4035148:	dd400517 	ldw	r21,20(sp)
 403514c:	dd000417 	ldw	r20,16(sp)
 4035150:	dcc00317 	ldw	r19,12(sp)
 4035154:	dc800217 	ldw	r18,8(sp)
 4035158:	dc400117 	ldw	r17,4(sp)
 403515c:	dc000017 	ldw	r16,0(sp)
 4035160:	dec00a04 	addi	sp,sp,40
 4035164:	f800283a 	ret
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
 4035168:	18000326 	beq	r3,zero,4035178 <altera_avalon_jtag_uart_write+0x15c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 403516c:	00820004 	movi	r2,2048
 4035170:	172fc83a 	sub	r23,r2,fp
 4035174:	003fc406 	br	4035088 <__flash_rwdata_start+0xffffeb30>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4035178:	0081ffc4 	movi	r2,2047
 403517c:	172fc83a 	sub	r23,r2,fp
 4035180:	003fc106 	br	4035088 <__flash_rwdata_start+0xffffeb30>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 4035184:	ad3feb1e 	bne	r21,r20,4035134 <__flash_rwdata_start+0xffffebdc>
    return ptr - start;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
 4035188:	00bffd44 	movi	r2,-11
 403518c:	003fea06 	br	4035138 <__flash_rwdata_start+0xffffebe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035190:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035194:	00bfff84 	movi	r2,-2
 4035198:	1884703a 	and	r2,r3,r2
 403519c:	1001703a 	wrctl	status,r2
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40351a0:	20800817 	ldw	r2,32(r4)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40351a4:	21000017 	ldw	r4,0(r4)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 40351a8:	10800094 	ori	r2,r2,2
 40351ac:	80800815 	stw	r2,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 40351b0:	20800135 	stwio	r2,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40351b4:	1801703a 	wrctl	status,r3
 40351b8:	3c50000c 	andi	r17,r7,16384
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
 40351bc:	883ff21e 	bne	r17,zero,4035188 <__flash_rwdata_start+0xffffec30>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 40351c0:	00bffec4 	movi	r2,-5
 40351c4:	003fdc06 	br	4035138 <__flash_rwdata_start+0xffffebe0>

040351c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40351c8:	f811883a 	mov	r8,ra
 40351cc:	40346e80 	call	40346e8 <_mcount>
 40351d0:	403f883a 	mov	ra,r8
 40351d4:	defffe04 	addi	sp,sp,-8
 40351d8:	dfc00115 	stw	ra,4(sp)
 40351dc:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40351e0:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40351e4:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40351e8:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40351ec:	00bfff84 	movi	r2,-2
 40351f0:	8084703a 	and	r2,r16,r2
 40351f4:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
 40351f8:	40349140 	call	4034914 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40351fc:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
 4035200:	dfc00117 	ldw	ra,4(sp)
 4035204:	dc000017 	ldw	r16,0(sp)
 4035208:	dec00204 	addi	sp,sp,8
 403520c:	f800283a 	ret

04035210 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4035210:	f811883a 	mov	r8,ra
 4035214:	40346e80 	call	40346e8 <_mcount>
 4035218:	403f883a 	mov	ra,r8
 403521c:	defffe04 	addi	sp,sp,-8
 4035220:	dfc00115 	stw	ra,4(sp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4035224:	d0e03517 	ldw	r3,-32556(gp)
 4035228:	2005883a 	mov	r2,r4
 403522c:	2809883a 	mov	r4,r5
 4035230:	300b883a 	mov	r5,r6
 4035234:	1800011e 	bne	r3,zero,403523c <alt_avalon_timer_sc_init+0x2c>
  {
    _alt_tick_rate = nticks;
 4035238:	d1e03515 	stw	r7,-32556(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 403523c:	00c001c4 	movi	r3,7
 4035240:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4035244:	018100f4 	movhi	r6,1027
 4035248:	31947204 	addi	r6,r6,20936
 403524c:	d8000015 	stw	zero,0(sp)
 4035250:	100f883a 	mov	r7,r2
 4035254:	40354840 	call	4035484 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4035258:	dfc00117 	ldw	ra,4(sp)
 403525c:	dec00204 	addi	sp,sp,8
 4035260:	f800283a 	ret

04035264 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4035264:	f811883a 	mov	r8,ra
 4035268:	40346e80 	call	40346e8 <_mcount>
 403526c:	403f883a 	mov	ra,r8
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
 4035270:	d0a03517 	ldw	r2,-32556(gp)
 4035274:	10001a26 	beq	r2,zero,40352e0 <alt_alarm_start+0x7c>
  {
    if (alarm)
 4035278:	20001b26 	beq	r4,zero,40352e8 <alt_alarm_start+0x84>
    {
      alarm->callback = callback;
 403527c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
 4035280:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035284:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035288:	00bfff84 	movi	r2,-2
 403528c:	1884703a 	and	r2,r3,r2
 4035290:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4035294:	d0a03417 	ldw	r2,-32560(gp)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
 4035298:	11800044 	addi	r6,r2,1
 403529c:	314b883a 	add	r5,r6,r5
 40352a0:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40352a4:	28800b36 	bltu	r5,r2,40352d4 <alt_alarm_start+0x70>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
 40352a8:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40352ac:	d0a01e04 	addi	r2,gp,-32648
 40352b0:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
 40352b4:	d0a01e17 	ldw	r2,-32648(gp)
 40352b8:	20800015 	stw	r2,0(r4)

  list->next->previous = entry;
 40352bc:	d0a01e17 	ldw	r2,-32648(gp)
  list->next           = entry;
 40352c0:	d1201e15 	stw	r4,-32648(gp)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
 40352c4:	11000115 	stw	r4,4(r2)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40352c8:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
 40352cc:	0005883a 	mov	r2,zero
  }
  else
  {
    return -ENOTSUP;
  }
}
 40352d0:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
 40352d4:	00800044 	movi	r2,1
 40352d8:	20800405 	stb	r2,16(r4)
 40352dc:	003ff306 	br	40352ac <__flash_rwdata_start+0xffffed54>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
 40352e0:	00bfde84 	movi	r2,-134
 40352e4:	003ffa06 	br	40352d0 <__flash_rwdata_start+0xffffed78>

      return 0;
    }
    else
    {
      return -EINVAL;
 40352e8:	00bffa84 	movi	r2,-22
 40352ec:	003ff806 	br	40352d0 <__flash_rwdata_start+0xffffed78>

040352f0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40352f0:	f811883a 	mov	r8,ra
 40352f4:	40346e80 	call	40346e8 <_mcount>
 40352f8:	403f883a 	mov	ra,r8
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40352fc:	0005883a 	mov	r2,zero
 4035300:	00c20004 	movi	r3,2048
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4035304:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4035308:	10800804 	addi	r2,r2,32
 403530c:	10fffd1e 	bne	r2,r3,4035304 <__flash_rwdata_start+0xffffedac>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4035310:	f800283a 	ret

04035314 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4035314:	f811883a 	mov	r8,ra
 4035318:	40346e80 	call	40346e8 <_mcount>
 403531c:	403f883a 	mov	ra,r8
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4035320:	20000a26 	beq	r4,zero,403534c <alt_dev_llist_insert+0x38>
 4035324:	20800217 	ldw	r2,8(r4)
 4035328:	10000826 	beq	r2,zero,403534c <alt_dev_llist_insert+0x38>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
 403532c:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4035330:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
 4035334:	0005883a 	mov	r2,zero
  entry->next     = list->next;
 4035338:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
 403533c:	28c00017 	ldw	r3,0(r5)
 4035340:	19000115 	stw	r4,4(r3)
  list->next           = entry;
 4035344:	29000015 	stw	r4,0(r5)
 4035348:	f800283a 	ret
 403534c:	d0a01b17 	ldw	r2,-32660(gp)
 4035350:	10000926 	beq	r2,zero,4035378 <alt_dev_llist_insert+0x64>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4035354:	deffff04 	addi	sp,sp,-4
 4035358:	dfc00015 	stw	ra,0(sp)
 403535c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 4035360:	00c00584 	movi	r3,22
 4035364:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4035368:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 403536c:	dfc00017 	ldw	ra,0(sp)
 4035370:	dec00104 	addi	sp,sp,4
 4035374:	f800283a 	ret
 4035378:	d0a02a04 	addi	r2,gp,-32600
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
 403537c:	00c00584 	movi	r3,22
 4035380:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 4035384:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
 4035388:	f800283a 	ret

0403538c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 403538c:	f811883a 	mov	r8,ra
 4035390:	40346e80 	call	40346e8 <_mcount>
 4035394:	403f883a 	mov	ra,r8
 4035398:	defffc04 	addi	sp,sp,-16
 403539c:	dfc00315 	stw	ra,12(sp)
 40353a0:	dc800215 	stw	r18,8(sp)
 40353a4:	dc400115 	stw	r17,4(sp)
 40353a8:	dc000015 	stw	r16,0(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40353ac:	040100f4 	movhi	r16,1027
 40353b0:	048100f4 	movhi	r18,1027
 40353b4:	8417b304 	addi	r16,r16,24268
 40353b8:	9497b244 	addi	r18,r18,24265
 40353bc:	84800936 	bltu	r16,r18,40353e4 <_do_ctors+0x58>
 40353c0:	84a5c83a 	sub	r18,r16,r18
 40353c4:	9024d0ba 	srli	r18,r18,2
 40353c8:	0023883a 	mov	r17,zero
 40353cc:	94800044 	addi	r18,r18,1
        (*ctor) (); 
 40353d0:	80800017 	ldw	r2,0(r16)
 40353d4:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40353d8:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
 40353dc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40353e0:	8cbffb1e 	bne	r17,r18,40353d0 <__flash_rwdata_start+0xffffee78>
        (*ctor) (); 
}
 40353e4:	dfc00317 	ldw	ra,12(sp)
 40353e8:	dc800217 	ldw	r18,8(sp)
 40353ec:	dc400117 	ldw	r17,4(sp)
 40353f0:	dc000017 	ldw	r16,0(sp)
 40353f4:	dec00404 	addi	sp,sp,16
 40353f8:	f800283a 	ret

040353fc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 40353fc:	f811883a 	mov	r8,ra
 4035400:	40346e80 	call	40346e8 <_mcount>
 4035404:	403f883a 	mov	ra,r8
 4035408:	defffc04 	addi	sp,sp,-16
 403540c:	dfc00315 	stw	ra,12(sp)
 4035410:	dc800215 	stw	r18,8(sp)
 4035414:	dc400115 	stw	r17,4(sp)
 4035418:	dc000015 	stw	r16,0(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 403541c:	040100f4 	movhi	r16,1027
 4035420:	048100f4 	movhi	r18,1027
 4035424:	8417b304 	addi	r16,r16,24268
 4035428:	9497b404 	addi	r18,r18,24272
 403542c:	84800936 	bltu	r16,r18,4035454 <_do_dtors+0x58>
 4035430:	84a5c83a 	sub	r18,r16,r18
 4035434:	9024d0ba 	srli	r18,r18,2
 4035438:	0023883a 	mov	r17,zero
 403543c:	94800044 	addi	r18,r18,1
        (*dtor) (); 
 4035440:	80800017 	ldw	r2,0(r16)
 4035444:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4035448:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
 403544c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4035450:	8cbffb1e 	bne	r17,r18,4035440 <__flash_rwdata_start+0xffffeee8>
        (*dtor) (); 
}
 4035454:	dfc00317 	ldw	ra,12(sp)
 4035458:	dc800217 	ldw	r18,8(sp)
 403545c:	dc400117 	ldw	r17,4(sp)
 4035460:	dc000017 	ldw	r16,0(sp)
 4035464:	dec00404 	addi	sp,sp,16
 4035468:	f800283a 	ret

0403546c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 403546c:	f811883a 	mov	r8,ra
 4035470:	40346e80 	call	40346e8 <_mcount>
 4035474:	403f883a 	mov	ra,r8
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4035478:	01440004 	movi	r5,4096
 403547c:	0009883a 	mov	r4,zero
 4035480:	40359f41 	jmpi	40359f4 <alt_icache_flush>

04035484 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4035484:	f811883a 	mov	r8,ra
 4035488:	40346e80 	call	40346e8 <_mcount>
 403548c:	403f883a 	mov	ra,r8
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4035490:	40355401 	jmpi	4035540 <alt_iic_isr_register>

04035494 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4035494:	f811883a 	mov	r8,ra
 4035498:	40346e80 	call	40346e8 <_mcount>
 403549c:	403f883a 	mov	ra,r8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40354a0:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40354a4:	00bfff84 	movi	r2,-2
 40354a8:	2084703a 	and	r2,r4,r2
 40354ac:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
 40354b0:	00c00044 	movi	r3,1
 40354b4:	d0a03817 	ldw	r2,-32544(gp)
 40354b8:	194a983a 	sll	r5,r3,r5
 40354bc:	288ab03a 	or	r5,r5,r2
 40354c0:	d1603815 	stw	r5,-32544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40354c4:	d0a03817 	ldw	r2,-32544(gp)
 40354c8:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40354cc:	2001703a 	wrctl	status,r4
    return alt_irq_enable(irq);
}
 40354d0:	0005883a 	mov	r2,zero
 40354d4:	f800283a 	ret

040354d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 40354d8:	f811883a 	mov	r8,ra
 40354dc:	40346e80 	call	40346e8 <_mcount>
 40354e0:	403f883a 	mov	ra,r8
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40354e4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40354e8:	00bfff84 	movi	r2,-2
 40354ec:	2084703a 	and	r2,r4,r2
 40354f0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
 40354f4:	00ffff84 	movi	r3,-2
 40354f8:	d0a03817 	ldw	r2,-32544(gp)
 40354fc:	194a183a 	rol	r5,r3,r5
 4035500:	288a703a 	and	r5,r5,r2
 4035504:	d1603815 	stw	r5,-32544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4035508:	d0a03817 	ldw	r2,-32544(gp)
 403550c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4035510:	2001703a 	wrctl	status,r4
    return alt_irq_disable(irq);
}
 4035514:	0005883a 	mov	r2,zero
 4035518:	f800283a 	ret

0403551c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 403551c:	f811883a 	mov	r8,ra
 4035520:	40346e80 	call	40346e8 <_mcount>
 4035524:	403f883a 	mov	ra,r8
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4035528:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
 403552c:	00800044 	movi	r2,1
 4035530:	1144983a 	sll	r2,r2,r5
 4035534:	10c4703a 	and	r2,r2,r3
}
 4035538:	1004c03a 	cmpne	r2,r2,zero
 403553c:	f800283a 	ret

04035540 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4035540:	f811883a 	mov	r8,ra
 4035544:	40346e80 	call	40346e8 <_mcount>
 4035548:	403f883a 	mov	ra,r8
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
 403554c:	00c007c4 	movi	r3,31
 4035550:	19401616 	blt	r3,r5,40355ac <alt_iic_isr_register+0x6c>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4035554:	defffe04 	addi	sp,sp,-8
 4035558:	dfc00115 	stw	ra,4(sp)
 403555c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4035560:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4035564:	00ffff84 	movi	r3,-2
 4035568:	80c6703a 	and	r3,r16,r3
 403556c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
 4035570:	280490fa 	slli	r2,r5,3
 4035574:	00c00174 	movhi	r3,5
 4035578:	18f4e404 	addi	r3,r3,-11376
 403557c:	1885883a 	add	r2,r3,r2
 4035580:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
 4035584:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4035588:	30000626 	beq	r6,zero,40355a4 <alt_iic_isr_register+0x64>
 403558c:	40354940 	call	4035494 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4035590:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
 4035594:	dfc00117 	ldw	ra,4(sp)
 4035598:	dc000017 	ldw	r16,0(sp)
 403559c:	dec00204 	addi	sp,sp,8
 40355a0:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40355a4:	40354d80 	call	40354d8 <alt_ic_irq_disable>
 40355a8:	003ff906 	br	4035590 <__flash_rwdata_start+0xfffff038>
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
 40355ac:	00bffa84 	movi	r2,-22
 40355b0:	f800283a 	ret

040355b4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40355b4:	f811883a 	mov	r8,ra
 40355b8:	40346e80 	call	40346e8 <_mcount>
 40355bc:	403f883a 	mov	ra,r8
 40355c0:	defffd04 	addi	sp,sp,-12
 40355c4:	dfc00215 	stw	ra,8(sp)
 40355c8:	dc400115 	stw	r17,4(sp)
 40355cc:	dc000015 	stw	r16,0(sp)
 40355d0:	2823883a 	mov	r17,r5
 40355d4:	3021883a 	mov	r16,r6

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
 40355d8:	01400044 	movi	r5,1
 40355dc:	01807fc4 	movi	r6,511
 40355e0:	40356c40 	call	40356c4 <open>

  if (old >= 0)
 40355e4:	10000c16 	blt	r2,zero,4035618 <alt_io_redirect+0x64>
  {
    fd->dev      = alt_fd_list[old].dev;
 40355e8:	10c00324 	muli	r3,r2,12
 40355ec:	01400034 	movhi	r5,0
 40355f0:	2943cb04 	addi	r5,r5,3884
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 40355f4:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 40355f8:	28c5883a 	add	r2,r5,r3
 40355fc:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4035600:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4035604:	29800315 	stw	r6,12(r5)
    fd->priv     = alt_fd_list[old].priv;
 4035608:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 403560c:	28c00515 	stw	r3,20(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 4035610:	28800415 	stw	r2,16(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4035614:	40348580 	call	4034858 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
 4035618:	01807fc4 	movi	r6,511
 403561c:	000b883a 	mov	r5,zero
 4035620:	8809883a 	mov	r4,r17
 4035624:	40356c40 	call	40356c4 <open>

  if (old >= 0)
 4035628:	10000c16 	blt	r2,zero,403565c <alt_io_redirect+0xa8>
  {
    fd->dev      = alt_fd_list[old].dev;
 403562c:	10c00324 	muli	r3,r2,12
 4035630:	01400034 	movhi	r5,0
 4035634:	2943cb04 	addi	r5,r5,3884
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4035638:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 403563c:	28c5883a 	add	r2,r5,r3
 4035640:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4035644:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4035648:	29800015 	stw	r6,0(r5)
    fd->priv     = alt_fd_list[old].priv;
 403564c:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4035650:	28c00215 	stw	r3,8(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 4035654:	28800115 	stw	r2,4(r5)
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 4035658:	40348580 	call	4034858 <alt_release_fd>

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  int old;

  old = open (name, flags, mode);
 403565c:	01807fc4 	movi	r6,511
 4035660:	01400044 	movi	r5,1
 4035664:	8009883a 	mov	r4,r16
 4035668:	40356c40 	call	40356c4 <open>

  if (old >= 0)
 403566c:	10001016 	blt	r2,zero,40356b0 <alt_io_redirect+0xfc>
  {
    fd->dev      = alt_fd_list[old].dev;
 4035670:	10c00324 	muli	r3,r2,12
 4035674:	01400034 	movhi	r5,0
 4035678:	2943cb04 	addi	r5,r5,3884
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 403567c:	1009883a 	mov	r4,r2

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 4035680:	28c5883a 	add	r2,r5,r3
 4035684:	11800017 	ldw	r6,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4035688:	10c00217 	ldw	r3,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
 403568c:	29800615 	stw	r6,24(r5)
    fd->priv     = alt_fd_list[old].priv;
 4035690:	10800117 	ldw	r2,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4035694:	28c00815 	stw	r3,32(r5)
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
 4035698:	28800715 	stw	r2,28(r5)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
 403569c:	dfc00217 	ldw	ra,8(sp)
 40356a0:	dc400117 	ldw	r17,4(sp)
 40356a4:	dc000017 	ldw	r16,0(sp)
 40356a8:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
 40356ac:	40348581 	jmpi	4034858 <alt_release_fd>
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
}  
 40356b0:	dfc00217 	ldw	ra,8(sp)
 40356b4:	dc400117 	ldw	r17,4(sp)
 40356b8:	dc000017 	ldw	r16,0(sp)
 40356bc:	dec00304 	addi	sp,sp,12
 40356c0:	f800283a 	ret

040356c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40356c4:	f811883a 	mov	r8,ra
 40356c8:	40346e80 	call	40346e8 <_mcount>
 40356cc:	403f883a 	mov	ra,r8
 40356d0:	defffa04 	addi	sp,sp,-24
 40356d4:	dfc00515 	stw	ra,20(sp)
 40356d8:	dd000415 	stw	r20,16(sp)
 40356dc:	dcc00315 	stw	r19,12(sp)
 40356e0:	dc800215 	stw	r18,8(sp)
 40356e4:	dc400115 	stw	r17,4(sp)
 40356e8:	dc000015 	stw	r16,0(sp)
 40356ec:	2821883a 	mov	r16,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40356f0:	d1601704 	addi	r5,gp,-32676
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40356f4:	2023883a 	mov	r17,r4
 40356f8:	3025883a 	mov	r18,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40356fc:	403585c0 	call	403585c <alt_find_dev>
 4035700:	10004626 	beq	r2,zero,403581c <open+0x158>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 4035704:	1009883a 	mov	r4,r2
 4035708:	1029883a 	mov	r20,r2
 403570c:	40359980 	call	4035998 <alt_get_fd>
 4035710:	1027883a 	mov	r19,r2
 4035714:	1000090e 	bge	r2,zero,403573c <open+0x78>
 4035718:	04e1c83a 	sub	r16,zero,r19

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
 403571c:	9809883a 	mov	r4,r19
 4035720:	40348580 	call	4034858 <alt_release_fd>
 4035724:	d0a01b17 	ldw	r2,-32660(gp)
 4035728:	10004326 	beq	r2,zero,4035838 <open+0x174>
 403572c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
 4035730:	14000015 	stw	r16,0(r2)
    return -1;
 4035734:	00bfffc4 	movi	r2,-1
 4035738:	00002e06 	br	40357f4 <open+0x130>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 403573c:	99000324 	muli	r4,r19,12

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4035740:	00d00034 	movhi	r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4035744:	00800034 	movhi	r2,0

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4035748:	18ffffc4 	addi	r3,r3,-1
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 403574c:	1083cb04 	addi	r2,r2,3884

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4035750:	80c6703a 	and	r3,r16,r3
 4035754:	18d00034 	orhi	r3,r3,16384
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 4035758:	2089883a 	add	r4,r4,r2

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 403575c:	20c00215 	stw	r3,8(r4)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4035760:	d2201617 	ldw	r8,-32680(gp)
 4035764:	21c00017 	ldw	r7,0(r4)
 4035768:	11400204 	addi	r5,r2,8
 403576c:	0007883a 	mov	r3,zero
 4035770:	00000306 	br	4035780 <open+0xbc>
 4035774:	10800304 	addi	r2,r2,12
 4035778:	29400304 	addi	r5,r5,12
 403577c:	40c01436 	bltu	r8,r3,40357d0 <open+0x10c>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4035780:	11800017 	ldw	r6,0(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4035784:	18c00044 	addi	r3,r3,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4035788:	31fffa1e 	bne	r6,r7,4035774 <__flash_rwdata_start+0xfffff21c>
 403578c:	29800017 	ldw	r6,0(r5)
 4035790:	303ff80e 	bge	r6,zero,4035774 <__flash_rwdata_start+0xfffff21c>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4035794:	20bff726 	beq	r4,r2,4035774 <__flash_rwdata_start+0xfffff21c>
 4035798:	04000344 	movi	r16,13
 403579c:	003fdf06 	br	403571c <__flash_rwdata_start+0xfffff1c4>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
 40357a0:	1009883a 	mov	r4,r2
 40357a4:	40359980 	call	4035998 <alt_get_fd>
 40357a8:	1027883a 	mov	r19,r2
 40357ac:	103fda16 	blt	r2,zero,4035718 <__flash_rwdata_start+0xfffff1c0>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
 40357b0:	99000324 	muli	r4,r19,12
 40357b4:	00800034 	movhi	r2,0
 40357b8:	1083cb04 	addi	r2,r2,3884
 40357bc:	2089883a 	add	r4,r4,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40357c0:	00900034 	movhi	r2,16384
 40357c4:	10bfffc4 	addi	r2,r2,-1
 40357c8:	8084703a 	and	r2,r16,r2
 40357cc:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40357d0:	a0800317 	ldw	r2,12(r20)
 40357d4:	10000f26 	beq	r2,zero,4035814 <open+0x150>
 40357d8:	900f883a 	mov	r7,r18
 40357dc:	800d883a 	mov	r6,r16
 40357e0:	880b883a 	mov	r5,r17
 40357e4:	103ee83a 	callr	r2
 40357e8:	1007883a 	mov	r3,r2
 40357ec:	9805883a 	mov	r2,r19
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40357f0:	18001316 	blt	r3,zero,4035840 <open+0x17c>
  }
  
  /* return the reference upon success */

  return index;
}
 40357f4:	dfc00517 	ldw	ra,20(sp)
 40357f8:	dd000417 	ldw	r20,16(sp)
 40357fc:	dcc00317 	ldw	r19,12(sp)
 4035800:	dc800217 	ldw	r18,8(sp)
 4035804:	dc400117 	ldw	r17,4(sp)
 4035808:	dc000017 	ldw	r16,0(sp)
 403580c:	dec00604 	addi	sp,sp,24
 4035810:	f800283a 	ret
 4035814:	9805883a 	mov	r2,r19
 4035818:	003ff606 	br	40357f4 <__flash_rwdata_start+0xfffff29c>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 403581c:	8809883a 	mov	r4,r17
 4035820:	40358e00 	call	40358e0 <alt_find_file>
 4035824:	1029883a 	mov	r20,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4035828:	103fdd1e 	bne	r2,zero,40357a0 <__flash_rwdata_start+0xfffff248>
 403582c:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4035830:	04ffffc4 	movi	r19,-1
 4035834:	003fb906 	br	403571c <__flash_rwdata_start+0xfffff1c4>
 4035838:	d0a02a04 	addi	r2,gp,-32600
 403583c:	003fbc06 	br	4035730 <__flash_rwdata_start+0xfffff1d8>
 4035840:	00e1c83a 	sub	r16,zero,r3
 4035844:	003fb506 	br	403571c <__flash_rwdata_start+0xfffff1c4>

04035848 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4035848:	f811883a 	mov	r8,ra
 403584c:	40346e80 	call	40346e8 <_mcount>
 4035850:	403f883a 	mov	ra,r8
    NIOS2_WRITE_IENABLE(0);
 4035854:	000170fa 	wrctl	ienable,zero
}
 4035858:	f800283a 	ret

0403585c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 403585c:	f811883a 	mov	r8,ra
 4035860:	40346e80 	call	40346e8 <_mcount>
 4035864:	403f883a 	mov	ra,r8
 4035868:	defffb04 	addi	sp,sp,-20
 403586c:	dfc00415 	stw	ra,16(sp)
 4035870:	dcc00315 	stw	r19,12(sp)
 4035874:	dc800215 	stw	r18,8(sp)
 4035878:	dc400115 	stw	r17,4(sp)
 403587c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
 4035880:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4035884:	2823883a 	mov	r17,r5
 4035888:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
 403588c:	40287a00 	call	40287a0 <strlen>
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4035890:	8c000b26 	beq	r17,r16,40358c0 <alt_find_dev+0x64>
 4035894:	14800044 	addi	r18,r2,1
 4035898:	00000206 	br	40358a4 <alt_find_dev+0x48>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 403589c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40358a0:	8c000726 	beq	r17,r16,40358c0 <alt_find_dev+0x64>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40358a4:	81000217 	ldw	r4,8(r16)
 40358a8:	900d883a 	mov	r6,r18
 40358ac:	980b883a 	mov	r5,r19
 40358b0:	4035b340 	call	4035b34 <memcmp>
 40358b4:	103ff91e 	bne	r2,zero,403589c <__flash_rwdata_start+0xfffff344>
 40358b8:	8005883a 	mov	r2,r16
 40358bc:	00000106 	br	40358c4 <alt_find_dev+0x68>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40358c0:	0005883a 	mov	r2,zero
}
 40358c4:	dfc00417 	ldw	ra,16(sp)
 40358c8:	dcc00317 	ldw	r19,12(sp)
 40358cc:	dc800217 	ldw	r18,8(sp)
 40358d0:	dc400117 	ldw	r17,4(sp)
 40358d4:	dc000017 	ldw	r16,0(sp)
 40358d8:	dec00504 	addi	sp,sp,20
 40358dc:	f800283a 	ret

040358e0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40358e0:	f811883a 	mov	r8,ra
 40358e4:	40346e80 	call	40346e8 <_mcount>
 40358e8:	403f883a 	mov	ra,r8
 40358ec:	defffa04 	addi	sp,sp,-24
 40358f0:	dfc00515 	stw	ra,20(sp)
 40358f4:	dd000415 	stw	r20,16(sp)
 40358f8:	dcc00315 	stw	r19,12(sp)
 40358fc:	dc800215 	stw	r18,8(sp)
 4035900:	dc400115 	stw	r17,4(sp)
 4035904:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4035908:	d4201917 	ldw	r16,-32668(gp)
 403590c:	d5201904 	addi	r20,gp,-32668
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4035910:	85001626 	beq	r16,r20,403596c <alt_find_file+0x8c>
 4035914:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 4035918:	04c00bc4 	movi	r19,47
 403591c:	00000806 	br	4035940 <alt_find_file+0x60>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4035920:	9185883a 	add	r2,r18,r6
 4035924:	10800007 	ldb	r2,0(r2)
 4035928:	14c00126 	beq	r2,r19,4035930 <alt_find_file+0x50>
 403592c:	1000021e 	bne	r2,zero,4035938 <alt_find_file+0x58>
        !memcmp (next->name, name, len))
 4035930:	4035b340 	call	4035b34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4035934:	10001626 	beq	r2,zero,4035990 <alt_find_file+0xb0>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
 4035938:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 403593c:	85000b26 	beq	r16,r20,403596c <alt_find_file+0x8c>
  {
    len = strlen(next->name);
 4035940:	84400217 	ldw	r17,8(r16)
 4035944:	8809883a 	mov	r4,r17
 4035948:	40287a00 	call	40287a0 <strlen>
 403594c:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
 4035950:	8885883a 	add	r2,r17,r2
 4035954:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
 4035958:	900b883a 	mov	r5,r18
 403595c:	8809883a 	mov	r4,r17
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
 4035960:	14ffef1e 	bne	r2,r19,4035920 <__flash_rwdata_start+0xfffff3c8>
    {
      len -= 1;
 4035964:	31bfffc4 	addi	r6,r6,-1
 4035968:	003fed06 	br	4035920 <__flash_rwdata_start+0xfffff3c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 403596c:	0005883a 	mov	r2,zero
}
 4035970:	dfc00517 	ldw	ra,20(sp)
 4035974:	dd000417 	ldw	r20,16(sp)
 4035978:	dcc00317 	ldw	r19,12(sp)
 403597c:	dc800217 	ldw	r18,8(sp)
 4035980:	dc400117 	ldw	r17,4(sp)
 4035984:	dc000017 	ldw	r16,0(sp)
 4035988:	dec00604 	addi	sp,sp,24
 403598c:	f800283a 	ret
 4035990:	8005883a 	mov	r2,r16
 4035994:	003ff606 	br	4035970 <__flash_rwdata_start+0xfffff418>

04035998 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4035998:	f811883a 	mov	r8,ra
 403599c:	40346e80 	call	40346e8 <_mcount>
 40359a0:	403f883a 	mov	ra,r8
 40359a4:	01c00034 	movhi	r7,0
 40359a8:	39c3cb04 	addi	r7,r7,3884
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40359ac:	0005883a 	mov	r2,zero
 40359b0:	3807883a 	mov	r3,r7
 40359b4:	01800804 	movi	r6,32
 40359b8:	00000206 	br	40359c4 <alt_get_fd+0x2c>
 40359bc:	10800044 	addi	r2,r2,1
 40359c0:	11800a26 	beq	r2,r6,40359ec <alt_get_fd+0x54>
  {
    if (!alt_fd_list[i].dev)
 40359c4:	19400017 	ldw	r5,0(r3)
 40359c8:	18c00304 	addi	r3,r3,12
 40359cc:	283ffb1e 	bne	r5,zero,40359bc <__flash_rwdata_start+0xfffff464>
    {
      alt_fd_list[i].dev = dev;
 40359d0:	10c00324 	muli	r3,r2,12
 40359d4:	38cf883a 	add	r7,r7,r3
      if (i > alt_max_fd)
 40359d8:	d0e01617 	ldw	r3,-32680(gp)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
 40359dc:	39000015 	stw	r4,0(r7)
      if (i > alt_max_fd)
 40359e0:	1880010e 	bge	r3,r2,40359e8 <alt_get_fd+0x50>
      {
        alt_max_fd = i;
 40359e4:	d0a01615 	stw	r2,-32680(gp)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 40359e8:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
 40359ec:	00bffa04 	movi	r2,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
 40359f0:	f800283a 	ret

040359f4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40359f4:	f811883a 	mov	r8,ra
 40359f8:	40346e80 	call	40346e8 <_mcount>
 40359fc:	403f883a 	mov	ra,r8
  if (len > NIOS2_ICACHE_SIZE)
  {
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;
 4035a00:	00840004 	movi	r2,4096
 4035a04:	1140012e 	bgeu	r2,r5,4035a0c <alt_icache_flush+0x18>
 4035a08:	100b883a 	mov	r5,r2
 4035a0c:	214b883a 	add	r5,r4,r5

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4035a10:	2005883a 	mov	r2,r4
 4035a14:	2140092e 	bgeu	r4,r5,4035a3c <alt_icache_flush+0x48>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4035a18:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4035a1c:	10800804 	addi	r2,r2,32
 4035a20:	117ffd36 	bltu	r2,r5,4035a18 <__flash_rwdata_start+0xfffff4c0>
 4035a24:	0104303a 	nor	r2,zero,r4
 4035a28:	2885883a 	add	r2,r5,r2
 4035a2c:	1004d17a 	srli	r2,r2,5
 4035a30:	10800044 	addi	r2,r2,1
 4035a34:	1004917a 	slli	r2,r2,5
 4035a38:	2085883a 	add	r2,r4,r2
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4035a3c:	210007cc 	andi	r4,r4,31
 4035a40:	20000126 	beq	r4,zero,4035a48 <alt_icache_flush+0x54>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4035a44:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4035a48:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4035a4c:	f800283a 	ret

04035a50 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4035a50:	f811883a 	mov	r8,ra
 4035a54:	40346e80 	call	40346e8 <_mcount>
 4035a58:	403f883a 	mov	ra,r8
  switch (cause) {
 4035a5c:	008003c4 	movi	r2,15
 4035a60:	213ffe84 	addi	r4,r4,-6
 4035a64:	11001636 	bltu	r2,r4,4035ac0 <alt_exception_cause_generated_bad_addr+0x70>
 4035a68:	200890ba 	slli	r4,r4,2
 4035a6c:	008100f4 	movhi	r2,1027
 4035a70:	1096a004 	addi	r2,r2,23168
 4035a74:	2089883a 	add	r4,r4,r2
 4035a78:	20800017 	ldw	r2,0(r4)
 4035a7c:	1000683a 	jmp	r2
 4035a80:	04035ac8 	cmpgei	r16,zero,3435
 4035a84:	04035ac8 	cmpgei	r16,zero,3435
 4035a88:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035a8c:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035a90:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035a94:	04035ac8 	cmpgei	r16,zero,3435
 4035a98:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035a9c:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035aa0:	04035ac8 	cmpgei	r16,zero,3435
 4035aa4:	04035ac8 	cmpgei	r16,zero,3435
 4035aa8:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035aac:	04035ac8 	cmpgei	r16,zero,3435
 4035ab0:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035ab4:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035ab8:	04035ac0 	call	4035ac <__alt_heap_start+0x3b611c>
 4035abc:	04035ac8 	cmpgei	r16,zero,3435
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4035ac0:	0005883a 	mov	r2,zero

  default:
    return 0;
  }
}
 4035ac4:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4035ac8:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
 4035acc:	f800283a 	ret

04035ad0 <atexit>:
 4035ad0:	f811883a 	mov	r8,ra
 4035ad4:	40346e80 	call	40346e8 <_mcount>
 4035ad8:	403f883a 	mov	ra,r8
 4035adc:	000f883a 	mov	r7,zero
 4035ae0:	200b883a 	mov	r5,r4
 4035ae4:	000d883a 	mov	r6,zero
 4035ae8:	0009883a 	mov	r4,zero
 4035aec:	4035bbc1 	jmpi	4035bbc <__register_exitproc>

04035af0 <exit>:
 4035af0:	f811883a 	mov	r8,ra
 4035af4:	40346e80 	call	40346e8 <_mcount>
 4035af8:	403f883a 	mov	ra,r8
 4035afc:	defffe04 	addi	sp,sp,-8
 4035b00:	dfc00115 	stw	ra,4(sp)
 4035b04:	dc000015 	stw	r16,0(sp)
 4035b08:	000b883a 	mov	r5,zero
 4035b0c:	2021883a 	mov	r16,r4
 4035b10:	4035ce00 	call	4035ce0 <__call_exitprocs>
 4035b14:	00800034 	movhi	r2,0
 4035b18:	10886804 	addi	r2,r2,8608
 4035b1c:	11000017 	ldw	r4,0(r2)
 4035b20:	20800f17 	ldw	r2,60(r4)
 4035b24:	10000126 	beq	r2,zero,4035b2c <exit+0x3c>
 4035b28:	103ee83a 	callr	r2
 4035b2c:	8009883a 	mov	r4,r16
 4035b30:	403409c0 	call	403409c <_exit>

04035b34 <memcmp>:
 4035b34:	f811883a 	mov	r8,ra
 4035b38:	40346e80 	call	40346e8 <_mcount>
 4035b3c:	403f883a 	mov	ra,r8
 4035b40:	01c000c4 	movi	r7,3
 4035b44:	3980192e 	bgeu	r7,r6,4035bac <memcmp+0x78>
 4035b48:	2144b03a 	or	r2,r4,r5
 4035b4c:	11c4703a 	and	r2,r2,r7
 4035b50:	10000f26 	beq	r2,zero,4035b90 <memcmp+0x5c>
 4035b54:	20800003 	ldbu	r2,0(r4)
 4035b58:	28c00003 	ldbu	r3,0(r5)
 4035b5c:	10c0151e 	bne	r2,r3,4035bb4 <memcmp+0x80>
 4035b60:	31bfff84 	addi	r6,r6,-2
 4035b64:	01ffffc4 	movi	r7,-1
 4035b68:	00000406 	br	4035b7c <memcmp+0x48>
 4035b6c:	20800003 	ldbu	r2,0(r4)
 4035b70:	28c00003 	ldbu	r3,0(r5)
 4035b74:	31bfffc4 	addi	r6,r6,-1
 4035b78:	10c00e1e 	bne	r2,r3,4035bb4 <memcmp+0x80>
 4035b7c:	21000044 	addi	r4,r4,1
 4035b80:	29400044 	addi	r5,r5,1
 4035b84:	31fff91e 	bne	r6,r7,4035b6c <__flash_rwdata_start+0xfffff614>
 4035b88:	0005883a 	mov	r2,zero
 4035b8c:	f800283a 	ret
 4035b90:	20c00017 	ldw	r3,0(r4)
 4035b94:	28800017 	ldw	r2,0(r5)
 4035b98:	18bfee1e 	bne	r3,r2,4035b54 <__flash_rwdata_start+0xfffff5fc>
 4035b9c:	31bfff04 	addi	r6,r6,-4
 4035ba0:	21000104 	addi	r4,r4,4
 4035ba4:	29400104 	addi	r5,r5,4
 4035ba8:	39bff936 	bltu	r7,r6,4035b90 <__flash_rwdata_start+0xfffff638>
 4035bac:	303fe91e 	bne	r6,zero,4035b54 <__flash_rwdata_start+0xfffff5fc>
 4035bb0:	003ff506 	br	4035b88 <__flash_rwdata_start+0xfffff630>
 4035bb4:	10c5c83a 	sub	r2,r2,r3
 4035bb8:	f800283a 	ret

04035bbc <__register_exitproc>:
 4035bbc:	f811883a 	mov	r8,ra
 4035bc0:	40346e80 	call	40346e8 <_mcount>
 4035bc4:	403f883a 	mov	ra,r8
 4035bc8:	defffa04 	addi	sp,sp,-24
 4035bcc:	dfc00515 	stw	ra,20(sp)
 4035bd0:	dc400415 	stw	r17,16(sp)
 4035bd4:	dc000315 	stw	r16,12(sp)
 4035bd8:	04000034 	movhi	r16,0
 4035bdc:	84086804 	addi	r16,r16,8608
 4035be0:	80c00017 	ldw	r3,0(r16)
 4035be4:	2023883a 	mov	r17,r4
 4035be8:	18805217 	ldw	r2,328(r3)
 4035bec:	10003726 	beq	r2,zero,4035ccc <__register_exitproc+0x110>
 4035bf0:	10c00117 	ldw	r3,4(r2)
 4035bf4:	010007c4 	movi	r4,31
 4035bf8:	20c00e16 	blt	r4,r3,4035c34 <__register_exitproc+0x78>
 4035bfc:	1a000044 	addi	r8,r3,1
 4035c00:	8800221e 	bne	r17,zero,4035c8c <__register_exitproc+0xd0>
 4035c04:	18c00084 	addi	r3,r3,2
 4035c08:	18c7883a 	add	r3,r3,r3
 4035c0c:	18c7883a 	add	r3,r3,r3
 4035c10:	12000115 	stw	r8,4(r2)
 4035c14:	10c7883a 	add	r3,r2,r3
 4035c18:	19400015 	stw	r5,0(r3)
 4035c1c:	0005883a 	mov	r2,zero
 4035c20:	dfc00517 	ldw	ra,20(sp)
 4035c24:	dc400417 	ldw	r17,16(sp)
 4035c28:	dc000317 	ldw	r16,12(sp)
 4035c2c:	dec00604 	addi	sp,sp,24
 4035c30:	f800283a 	ret
 4035c34:	008100b4 	movhi	r2,1026
 4035c38:	109dc804 	addi	r2,r2,30496
 4035c3c:	10002626 	beq	r2,zero,4035cd8 <__register_exitproc+0x11c>
 4035c40:	01006404 	movi	r4,400
 4035c44:	d9400015 	stw	r5,0(sp)
 4035c48:	d9800115 	stw	r6,4(sp)
 4035c4c:	d9c00215 	stw	r7,8(sp)
 4035c50:	40277200 	call	4027720 <malloc>
 4035c54:	d9400017 	ldw	r5,0(sp)
 4035c58:	d9800117 	ldw	r6,4(sp)
 4035c5c:	d9c00217 	ldw	r7,8(sp)
 4035c60:	10001d26 	beq	r2,zero,4035cd8 <__register_exitproc+0x11c>
 4035c64:	81000017 	ldw	r4,0(r16)
 4035c68:	10000115 	stw	zero,4(r2)
 4035c6c:	02000044 	movi	r8,1
 4035c70:	22405217 	ldw	r9,328(r4)
 4035c74:	0007883a 	mov	r3,zero
 4035c78:	12400015 	stw	r9,0(r2)
 4035c7c:	20805215 	stw	r2,328(r4)
 4035c80:	10006215 	stw	zero,392(r2)
 4035c84:	10006315 	stw	zero,396(r2)
 4035c88:	883fde26 	beq	r17,zero,4035c04 <__flash_rwdata_start+0xfffff6ac>
 4035c8c:	18c9883a 	add	r4,r3,r3
 4035c90:	2109883a 	add	r4,r4,r4
 4035c94:	1109883a 	add	r4,r2,r4
 4035c98:	21802215 	stw	r6,136(r4)
 4035c9c:	01800044 	movi	r6,1
 4035ca0:	12406217 	ldw	r9,392(r2)
 4035ca4:	30cc983a 	sll	r6,r6,r3
 4035ca8:	4992b03a 	or	r9,r9,r6
 4035cac:	12406215 	stw	r9,392(r2)
 4035cb0:	21c04215 	stw	r7,264(r4)
 4035cb4:	01000084 	movi	r4,2
 4035cb8:	893fd21e 	bne	r17,r4,4035c04 <__flash_rwdata_start+0xfffff6ac>
 4035cbc:	11006317 	ldw	r4,396(r2)
 4035cc0:	218cb03a 	or	r6,r4,r6
 4035cc4:	11806315 	stw	r6,396(r2)
 4035cc8:	003fce06 	br	4035c04 <__flash_rwdata_start+0xfffff6ac>
 4035ccc:	18805304 	addi	r2,r3,332
 4035cd0:	18805215 	stw	r2,328(r3)
 4035cd4:	003fc606 	br	4035bf0 <__flash_rwdata_start+0xfffff698>
 4035cd8:	00bfffc4 	movi	r2,-1
 4035cdc:	003fd006 	br	4035c20 <__flash_rwdata_start+0xfffff6c8>

04035ce0 <__call_exitprocs>:
 4035ce0:	f811883a 	mov	r8,ra
 4035ce4:	40346e80 	call	40346e8 <_mcount>
 4035ce8:	403f883a 	mov	ra,r8
 4035cec:	defff504 	addi	sp,sp,-44
 4035cf0:	dfc00a15 	stw	ra,40(sp)
 4035cf4:	df000915 	stw	fp,36(sp)
 4035cf8:	ddc00815 	stw	r23,32(sp)
 4035cfc:	dd800715 	stw	r22,28(sp)
 4035d00:	dd400615 	stw	r21,24(sp)
 4035d04:	dd000515 	stw	r20,20(sp)
 4035d08:	dcc00415 	stw	r19,16(sp)
 4035d0c:	dc800315 	stw	r18,12(sp)
 4035d10:	dc400215 	stw	r17,8(sp)
 4035d14:	dc000115 	stw	r16,4(sp)
 4035d18:	04800044 	movi	r18,1
 4035d1c:	d9000015 	stw	r4,0(sp)
 4035d20:	2839883a 	mov	fp,r5
 4035d24:	057fffc4 	movi	r21,-1
 4035d28:	00800034 	movhi	r2,0
 4035d2c:	10886804 	addi	r2,r2,8608
 4035d30:	12000017 	ldw	r8,0(r2)
 4035d34:	45005217 	ldw	r20,328(r8)
 4035d38:	44c05204 	addi	r19,r8,328
 4035d3c:	a0001c26 	beq	r20,zero,4035db0 <__call_exitprocs+0xd0>
 4035d40:	a0800117 	ldw	r2,4(r20)
 4035d44:	15ffffc4 	addi	r23,r2,-1
 4035d48:	b8000d16 	blt	r23,zero,4035d80 <__call_exitprocs+0xa0>
 4035d4c:	14000044 	addi	r16,r2,1
 4035d50:	8421883a 	add	r16,r16,r16
 4035d54:	8421883a 	add	r16,r16,r16
 4035d58:	84402004 	addi	r17,r16,128
 4035d5c:	a463883a 	add	r17,r20,r17
 4035d60:	a421883a 	add	r16,r20,r16
 4035d64:	e0001e26 	beq	fp,zero,4035de0 <__call_exitprocs+0x100>
 4035d68:	80804017 	ldw	r2,256(r16)
 4035d6c:	e0801c26 	beq	fp,r2,4035de0 <__call_exitprocs+0x100>
 4035d70:	bdffffc4 	addi	r23,r23,-1
 4035d74:	843fff04 	addi	r16,r16,-4
 4035d78:	8c7fff04 	addi	r17,r17,-4
 4035d7c:	bd7ff91e 	bne	r23,r21,4035d64 <__flash_rwdata_start+0xfffff80c>
 4035d80:	008100b4 	movhi	r2,1026
 4035d84:	109dd004 	addi	r2,r2,30528
 4035d88:	10000926 	beq	r2,zero,4035db0 <__call_exitprocs+0xd0>
 4035d8c:	a0800117 	ldw	r2,4(r20)
 4035d90:	1000301e 	bne	r2,zero,4035e54 <__call_exitprocs+0x174>
 4035d94:	a0800017 	ldw	r2,0(r20)
 4035d98:	10003226 	beq	r2,zero,4035e64 <__call_exitprocs+0x184>
 4035d9c:	a009883a 	mov	r4,r20
 4035da0:	98800015 	stw	r2,0(r19)
 4035da4:	40277400 	call	4027740 <free>
 4035da8:	9d000017 	ldw	r20,0(r19)
 4035dac:	a03fe41e 	bne	r20,zero,4035d40 <__flash_rwdata_start+0xfffff7e8>
 4035db0:	dfc00a17 	ldw	ra,40(sp)
 4035db4:	df000917 	ldw	fp,36(sp)
 4035db8:	ddc00817 	ldw	r23,32(sp)
 4035dbc:	dd800717 	ldw	r22,28(sp)
 4035dc0:	dd400617 	ldw	r21,24(sp)
 4035dc4:	dd000517 	ldw	r20,20(sp)
 4035dc8:	dcc00417 	ldw	r19,16(sp)
 4035dcc:	dc800317 	ldw	r18,12(sp)
 4035dd0:	dc400217 	ldw	r17,8(sp)
 4035dd4:	dc000117 	ldw	r16,4(sp)
 4035dd8:	dec00b04 	addi	sp,sp,44
 4035ddc:	f800283a 	ret
 4035de0:	a0800117 	ldw	r2,4(r20)
 4035de4:	80c00017 	ldw	r3,0(r16)
 4035de8:	10bfffc4 	addi	r2,r2,-1
 4035dec:	15c01426 	beq	r2,r23,4035e40 <__call_exitprocs+0x160>
 4035df0:	80000015 	stw	zero,0(r16)
 4035df4:	183fde26 	beq	r3,zero,4035d70 <__flash_rwdata_start+0xfffff818>
 4035df8:	95c8983a 	sll	r4,r18,r23
 4035dfc:	a0806217 	ldw	r2,392(r20)
 4035e00:	a5800117 	ldw	r22,4(r20)
 4035e04:	2084703a 	and	r2,r4,r2
 4035e08:	10000b26 	beq	r2,zero,4035e38 <__call_exitprocs+0x158>
 4035e0c:	a0806317 	ldw	r2,396(r20)
 4035e10:	2088703a 	and	r4,r4,r2
 4035e14:	20000c1e 	bne	r4,zero,4035e48 <__call_exitprocs+0x168>
 4035e18:	89400017 	ldw	r5,0(r17)
 4035e1c:	d9000017 	ldw	r4,0(sp)
 4035e20:	183ee83a 	callr	r3
 4035e24:	a0800117 	ldw	r2,4(r20)
 4035e28:	15bfbf1e 	bne	r2,r22,4035d28 <__flash_rwdata_start+0xfffff7d0>
 4035e2c:	98800017 	ldw	r2,0(r19)
 4035e30:	153fcf26 	beq	r2,r20,4035d70 <__flash_rwdata_start+0xfffff818>
 4035e34:	003fbc06 	br	4035d28 <__flash_rwdata_start+0xfffff7d0>
 4035e38:	183ee83a 	callr	r3
 4035e3c:	003ff906 	br	4035e24 <__flash_rwdata_start+0xfffff8cc>
 4035e40:	a5c00115 	stw	r23,4(r20)
 4035e44:	003feb06 	br	4035df4 <__flash_rwdata_start+0xfffff89c>
 4035e48:	89000017 	ldw	r4,0(r17)
 4035e4c:	183ee83a 	callr	r3
 4035e50:	003ff406 	br	4035e24 <__flash_rwdata_start+0xfffff8cc>
 4035e54:	a0800017 	ldw	r2,0(r20)
 4035e58:	a027883a 	mov	r19,r20
 4035e5c:	1029883a 	mov	r20,r2
 4035e60:	003fb606 	br	4035d3c <__flash_rwdata_start+0xfffff7e4>
 4035e64:	0005883a 	mov	r2,zero
 4035e68:	003ffb06 	br	4035e58 <__flash_rwdata_start+0xfffff900>
 4035e6c:	0201ffff 	0x201ffff
 4035e70:	ffff0000 	call	ffff000 <__flash_rwdata_start+0xbfc8aa8>
 4035e74:	00000201 	jmpi	20 <__alt_mem_sdram+0x20>
 4035e78:	0401ffff 	0x401ffff
 4035e7c:	00010000 	call	1000 <alt_fd_list+0xd4>
 4035e80:	010d0bff 	0x10d0bff
 4035e84:	7f010002 	0x7f010002
 4035e88:	00000000 	call	0 <__alt_mem_sdram>
 4035e8c:	00000170 	cmpltui	zero,zero,5
 4035e90:	883a0001 	jmpi	883a000 <__flash_rwdata_start+0x4803aa8>
 4035e94:	010d0bff 	0x10d0bff
 4035e98:	01010002 	0x1010002
	...
 4035ea4:	010d0bff 	0x10d0bff
 4035ea8:	01010004 	movi	r4,1024
 4035eac:	00000100 	call	10 <__alt_mem_sdram+0x10>
 4035eb0:	00000000 	call	0 <__alt_mem_sdram>
 4035eb4:	01110bff 	0x1110bff
 4035eb8:	01010004 	movi	r4,1024
 4035ebc:	7f000105 	stb	fp,4(r15)
 4035ec0:	007d0000 	call	7d000 <__alt_heap_start+0x2fb70>
 4035ec4:	00000000 	call	0 <__alt_mem_sdram>
 4035ec8:	01883a00 	call	1883a0 <__alt_heap_start+0x13af10>
 4035ecc:	040245cc 	andi	r16,zero,2327
